<Type Name="TextureBrush" FullName="System.Drawing.TextureBrush">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c115cfdd22ebd769792d2b2fd900fe610511dec9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410140" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TextureBrush : System.Drawing.Brush" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TextureBrush extends System.Drawing.Brush" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.TextureBrush" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TextureBrush&#xA;Inherits Brush" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextureBrush sealed : System::Drawing::Brush" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.Brush</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Cada propriedade da classe <see cref="T:System.Drawing.TextureBrush" /> é um objeto <see cref="T:System.Drawing.Brush" /> que usa uma imagem para preencher o interior de uma forma. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como obter um novo bitmap usando o <xref:System.Drawing.Image.FromFile%2A> método. Ele também demonstra um <xref:System.Drawing.TextureBrush>.  
  
 Este exemplo é projetado para ser usado com o Windows Forms. Crie um formulário que contém um botão chamado Button2. Cole o código no formulário e associar o método Button2_Click com o botão `Click` eventos.  
  
 [!code-cpp[System.Drawing.ImageExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ImageExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ImageExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bitmap As Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ bitmap);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="bitmap">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como obter um novo bitmap usando o <xref:System.Drawing.Image.FromFile%2A> método. Ele também demonstra um <xref:System.Drawing.TextureBrush>.  
  
 Este exemplo é projetado para ser usado com o Windows Forms. Crie um formulário que contém um botão chamado Button2. Cole o código no formulário e associar o método Button2_Click com o botão `Click` eventos.  
  
 [!code-cpp[System.Drawing.ImageExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ImageExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ImageExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.Drawing2D.WrapMode wrapMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::Drawing2D::WrapMode wrapMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="wrapMode" Type="System.Drawing.Drawing2D.WrapMode" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="wrapMode">Uma enumeração <see cref="T:System.Drawing.Drawing2D.WrapMode" /> que especifica como esse objeto <see cref="T:System.Drawing.TextureBrush" /> é organizado lado a lado.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada e o modo de encapsulamento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.Rectangle dstRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.Rectangle dstRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::Rectangle dstRect);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="dstRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="dstRect">Uma estrutura <see cref="T:System.Drawing.Rectangle" /> que representa o retângulo delimitador desse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada e o retângulo delimitador.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.RectangleF dstRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.RectangleF dstRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::RectangleF dstRect);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="dstRect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="dstRect">Uma estrutura <see cref="T:System.Drawing.RectangleF" /> que representa o retângulo delimitador desse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada e o retângulo delimitador.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode, System.Drawing.Rectangle dstRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.Drawing2D.WrapMode wrapMode, valuetype System.Drawing.Rectangle dstRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::Drawing2D::WrapMode wrapMode, System::Drawing::Rectangle dstRect);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="wrapMode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="dstRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="wrapMode">Uma enumeração <see cref="T:System.Drawing.Drawing2D.WrapMode" /> que especifica como esse objeto <see cref="T:System.Drawing.TextureBrush" /> é organizado lado a lado.</param>
        <param name="dstRect">Uma estrutura <see cref="T:System.Drawing.Rectangle" /> que representa o retângulo delimitador desse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada, o modo de encapsulamento e o retângulo delimitador.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode, System.Drawing.RectangleF dstRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.Drawing2D.WrapMode wrapMode, valuetype System.Drawing.RectangleF dstRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::Drawing2D::WrapMode wrapMode, System::Drawing::RectangleF dstRect);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="wrapMode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="dstRect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="wrapMode">Uma enumeração <see cref="T:System.Drawing.Drawing2D.WrapMode" /> que especifica como esse objeto <see cref="T:System.Drawing.TextureBrush" /> é organizado lado a lado.</param>
        <param name="dstRect">Uma estrutura <see cref="T:System.Drawing.RectangleF" /> que representa o retângulo delimitador desse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada, o modo de encapsulamento e o retângulo delimitador.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.Rectangle dstRect, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.Rectangle dstRect, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::Rectangle dstRect, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="dstRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="dstRect">Uma estrutura <see cref="T:System.Drawing.Rectangle" /> que representa o retângulo delimitador desse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <param name="imageAttr">Um <see cref="T:System.Drawing.Imaging.ImageAttributes" /> que contém informações adicionais sobre a imagem usada por esse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada, o retângulo delimitador e atributos de imagem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureBrush (System.Drawing.Image image, System.Drawing.RectangleF dstRect, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image image, valuetype System.Drawing.RectangleF dstRect, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextureBrush(System::Drawing::Image ^ image, System::Drawing::RectangleF dstRect, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="dstRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">O objeto <see cref="T:System.Drawing.Image" /> com o qual este objeto <see cref="T:System.Drawing.TextureBrush" /> preenche os interiores.</param>
        <param name="dstRect">Uma estrutura <see cref="T:System.Drawing.RectangleF" /> que representa o retângulo delimitador desse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <param name="imageAttr">Um <see cref="T:System.Drawing.Imaging.ImageAttributes" /> que contém informações adicionais sobre a imagem usada por esse objeto <see cref="T:System.Drawing.TextureBrush" />.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Drawing.TextureBrush" /> que usa a imagem especificada, o retângulo delimitador e atributos de imagem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma cópia exata desse objeto <see cref="T:System.Drawing.TextureBrush" />.</summary>
        <returns>O objeto <see cref="T:System.Drawing.TextureBrush" /> que esse método cria, convertido em um objeto <see cref="T:System.Object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código cria um <xref:System.Drawing.TextureBrush> objeto e uma cópia exata do pincel que textura e, em seguida, usa a cópia para preencher um retângulo na tela.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public System.Drawing.Image Image { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image Image" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.TextureBrush.Image" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Image As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Image ^ Image { System::Drawing::Image ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Drawing.Image" /> associado a esse objeto <see cref="T:System.Drawing.TextureBrush" />.</summary>
        <value>Um <see cref="T:System.Drawing.Image" /> objeto que representa a imagem à qual essa <see cref="T:System.Drawing.TextureBrush" /> objeto preenche formas.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Multiplica o objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> pelo objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificado na ordem especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">O objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> pelo qual a transformação geométrica é multiplicada.</param>
        <summary>Multiplica o objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> pelo objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificado precedendo o objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz de transformação de um <xref:System.Drawing.TextureBrush> objeto Especifica como a imagem que define a textura é transformada. Por exemplo, se a matriz de transformação Especifica uma rotação de 90 graus no sentido horário, a imagem de textura for girada 90 graus no sentido horário.  
  
   
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   Cria uma nova matriz que especifica uma conversão de 50 unidades na direção x.  
  
-   Multiplica a matriz com a matriz de transformação do pincel de textura.  
  
-   Preenche um retângulo, usando o pincel de textura.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">O objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> pelo qual a transformação geométrica é multiplicada.</param>
        <param name="order">Uma enumeração <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica a ordem em que se deve multiplicar duas matrizes.</param>
        <summary>Multiplica o objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> pelo objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificado na ordem especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz de transformação de um <xref:System.Drawing.TextureBrush> objeto Especifica como a imagem que define a textura é transformada. Por exemplo, se a matriz de transformação Especifica uma rotação de 90 graus no sentido horário, a imagem de textura for girada 90 graus no sentido horário.  
  
   
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   Cria uma nova matriz que especifica uma conversão de 50 unidades na direção x.  
  
-   Multiplica a matriz com a matriz de transformação do pincel de textura.  
  
-   Preenche um retângulo, usando o pincel de textura.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redefine a propriedade <see langword="Transform" /> desse objeto <see cref="T:System.Drawing.TextureBrush" /> como identidade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   A imagem de textura gira 90 graus.  
  
-   Preenche um retângulo.  
  
-   Redefine a matriz de transformação de identidade.  
  
-   Preenche um segundo retângulo.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gira a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> no valor especificado. Esse método precede a rotação para a transformação.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">O ângulo de rotação.</param>
        <summary>Gira a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> no valor especificado. Esse método precede a rotação para a transformação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   A imagem de textura gira 90 graus.  
  
-   Preenche um retângulo.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">O ângulo de rotação.</param>
        <param name="order">Uma enumeração <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica se a matriz de rotação deve ser acrescentada ou precedida.</param>
        <summary>Gira a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> no valor especificado na ordem especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   A imagem de textura gira 90 graus.  
  
-   Preenche um retângulo.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dimensiona a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> nos valores especificados. Esse método precede a matriz de escala para a transformação.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">O valor pelo qual se dimensiona a transformação na direção de x.</param>
        <param name="sy">O valor pelo qual se dimensiona a transformação na direção de y.</param>
        <summary>Dimensiona a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> nos valores especificados. Esse método precede a matriz de escala para a transformação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   A textura de escalas de imagem por duas vezes na direção x.  
  
-   Preenche um retângulo na tela, usando o pincel de textura.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">O valor pelo qual se dimensiona a transformação na direção de x.</param>
        <param name="sy">O valor pelo qual se dimensiona a transformação na direção de y.</param>
        <param name="order">Uma enumeração <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica se a matriz de escala deve ser acrescentada ou precedida.</param>
        <summary>Dimensiona a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> nos valores especificados na ordem especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   A textura de escalas de imagem por duas vezes na direção x.  
  
-   Preenche um retângulo na tela, usando o pincel de textura.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.TextureBrush.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma cópia do objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> que define uma transformação geométrica local para a imagem associada a esse objeto <see cref="T:System.Drawing.TextureBrush" />.</summary>
        <value>Uma cópia do <see cref="T:System.Drawing.Drawing2D.Matrix" /> objeto que define uma transformação geométrica que só se aplica a preenchimentos desenhados usando esse <see cref="T:System.Drawing.TextureBrush" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma transformação geométrica pode ser usada para traduzir, dimensionar, girar ou distorcer a imagem que define a textura desse pincel. Porque a matriz retornada e pela <xref:System.Drawing.TextureBrush.Transform%2A> é uma cópia da transformação geométrica do pincel, descarte da matriz quando você não precisa mais dela.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Move a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> nas dimensões especificadas e na ordem especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">A dimensão pelo qual se move a transformação na direção x.</param>
        <param name="dy">A dimensão pelo qual se move a transformação na direção y.</param>
        <summary>Move a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> nas dimensões especificadas. Esse método precede a translação para a transformação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   Converte as textura imagem 50 unidades na direção x.  
  
-   Preenche um retângulo na tela, usando o pincel de textura.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.TextureBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">A dimensão pelo qual se move a transformação na direção x.</param>
        <param name="dy">A dimensão pelo qual se move a transformação na direção y.</param>
        <param name="order">A ordem (preceder ou acrescentar) em que a translação é aplicada.</param>
        <summary>Move a transformação geométrica local desse objeto <see cref="T:System.Drawing.TextureBrush" /> nas dimensões especificadas e na ordem especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, que é um parâmetro do `Paint` manipulador de eventos. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.TextureBrush>.  
  
-   Converte as textura imagem 50 unidades na direção x.  
  
-   Preenche um retângulo na tela, usando o pincel de textura.  
  
 [!code-cpp[System.Drawing.ClassicTextureBrushExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicTextureBrushExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicTextureBrushExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicTextureBrushExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.WrapMode WrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.WrapMode WrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.TextureBrush.WrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapMode As WrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::WrapMode WrapMode { System::Drawing::Drawing2D::WrapMode get(); void set(System::Drawing::Drawing2D::WrapMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.WrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma enumeração <see cref="T:System.Drawing.Drawing2D.WrapMode" /> que indica o modo de encapsulamento para esse objeto <see cref="T:System.Drawing.TextureBrush" />.</summary>
        <value>Um <see cref="T:System.Drawing.Drawing2D.WrapMode" /> enumeração que especifica como preenchimentos desenhados usando esse <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> objeto colocadas lado a lado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como obter um novo bitmap usando o <xref:System.Drawing.Image.FromFile%2A> método. Ele também demonstra o <xref:System.Drawing.TextureBrush.WrapMode%2A> propriedade e o <xref:System.Drawing.Drawing2D.WrapMode> enumeração.  
  
 Este exemplo é projetado para ser usado com o Windows Forms. Crie um formulário que contém um botão chamado Button2. Cole o código no formulário e associar o método Button2_Click com o botão `Click` eventos.  
  
 [!code-cpp[System.Drawing.ImageExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ImageExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ImageExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>