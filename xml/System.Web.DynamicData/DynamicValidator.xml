<Type Name="DynamicValidator" FullName="System.Web.DynamicData.DynamicValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d7c57b9e13ec2bbee917b5b56ad8979a70a165e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37606473" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type DynamicValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), "DynamicValidator.bmp")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="65bea-101">Impõe e captura exceções acionadas em um modelo de dados e exibe o erro.</span>
      <span class="sxs-lookup">
        <span data-stu-id="65bea-101">Enforces and catches exceptions that are thrown in a data model and displays the error.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65bea-102">O <xref:System.Web.DynamicData.DynamicValidator> controle pode ser usado com campos de dados ou entidades de dados.</span><span class="sxs-lookup"><span data-stu-id="65bea-102">The <xref:System.Web.DynamicData.DynamicValidator> control can be used with data fields or data entities.</span></span> <span data-ttu-id="65bea-103">Ele captura exceções acionadas em classes LINQ to SQL ou entity em métodos de extensibilidade no modelo de dados.</span><span class="sxs-lookup"><span data-stu-id="65bea-103">It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model.</span></span> <span data-ttu-id="65bea-104">O <xref:System.Web.DynamicData.DynamicValidator> controle está associado com os controles que aceitam a entrada do usuário.</span><span class="sxs-lookup"><span data-stu-id="65bea-104">The <xref:System.Web.DynamicData.DynamicValidator> control is associated with the controls that accept user input.</span></span> <span data-ttu-id="65bea-105">Por exemplo, um <xref:System.Web.DynamicData.DynamicValidator> controle que está associado uma caixa de texto que aceita entrada do usuário para um campo de UnitsInStock em uma tabela de produtos captura e exibe a exceção que é lançada se a entrada for maior ou menor que as unidades permitidas no modelo de dados.</span><span class="sxs-lookup"><span data-stu-id="65bea-105">For example, a <xref:System.Web.DynamicData.DynamicValidator> control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.</span></span>  
  
 <span data-ttu-id="65bea-106">Por padrão, dados dinâmicos do ASP.NET não exibe todas as exceções do modelo de dados na página, porque algumas exceções de banco de dados podem conter informações confidenciais.</span><span class="sxs-lookup"><span data-stu-id="65bea-106">By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information.</span></span> <span data-ttu-id="65bea-107">Exibem dados dinâmicos <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> valores únicos.</span><span class="sxs-lookup"><span data-stu-id="65bea-107">Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only.</span></span> <span data-ttu-id="65bea-108">Se você quiser que seu aplicativo para exibir outras exceções, você pode criar uma <xref:System.Web.DynamicData.DynamicValidator> controlar, forneça as exceções que você deseja exibir e anexar as exceções para o <xref:System.Web.DynamicData.DynamicValidator> controle.</span><span class="sxs-lookup"><span data-stu-id="65bea-108">If you want your application to display other exceptions, you can create a <xref:System.Web.DynamicData.DynamicValidator> control, provide the exceptions that you want to display, and attach the exceptions to the <xref:System.Web.DynamicData.DynamicValidator> control.</span></span> <span data-ttu-id="65bea-109">As exceções que são geradas no modelo de dados serão exibidas em todas as páginas no aplicativo.</span><span class="sxs-lookup"><span data-stu-id="65bea-109">The exceptions that are thrown in the data model will be displayed in all pages in the application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65bea-110">O exemplo a seguir mostra como criar um <xref:System.Web.DynamicData.DynamicValidator> classe que exibe outras exceções em todas as páginas de controle.</span><span class="sxs-lookup"><span data-stu-id="65bea-110">The following example shows how to create a <xref:System.Web.DynamicData.DynamicValidator> control class that displays other exceptions in all pages.</span></span>  
  
```vb  
''' <summary>   
''' Display other exceptions in all pages.   
''' </summary>   
Public Class MyDynamicValidator   
    Inherits DynamicValidator   
  
    Protected Overloads Overrides Sub ValidateException(ByVal exception As Exception)   
        ' If it's not an exception that DynamicValidator displays find   
        ' the innermost exception.   
        If Not (TypeOf exception Is IDynamicValidatorException) AndAlso _  
                Not (TypeOf exception Is ValidationException) Then   
            While exception.InnerException IsNot Nothing   
                exception = exception.InnerException   
            End While   
  
            ' Wrap it in a ValidationException so that the base code   
            ' does not ignore it.   
            If ExceptionShouldBeDisplayedInPage(exception) Then   
                exception = New ValidationException(Nothing, exception)   
            End If   
        End If   
  
        ' Call the base class for the exception that is modified.  
        MyBase.ValidateException(exception)   
    End Sub   
  
    Private Function ExceptionShouldBeDisplayedInPage(ByVal e As Exception) _  
            As Boolean   
        ' Add code to find the exception and   
        ' decide whether it should be shown in the page.  
  
        Return True   
    End Function   
End Class  
```  
  
```csharp  
/// <summary>  
/// Display other exceptions in all pages.   
/// </summary>  
public class MyDynamicValidator : DynamicValidator {  
  
    protected override void ValidateException(Exception exception) {  
        // If it's not an exception that DynamicValidator displays find   
        // the innermost exception.  
        if (!(exception is IDynamicValidatorException) && !(exception   
              is ValidationException)) {  
            while (exception.InnerException != null) {  
                exception = exception.InnerException;  
            }  
  
            // Wrap it in a ValidationException so that the base code   
            // does not ignore it.  
            if (ExceptionShouldBeDisplayedInPage(exception)) {  
                exception = new ValidationException(null, exception);  
            }  
        }  
  
        // Call the base class on the exception that is modified.  
        base.ValidateException(exception);  
    }  
  
    private bool ExceptionShouldBeDisplayedInPage(Exception e) {  
        // Add your code to find the exception and  
        // decides whether it should be shown in the page.  
  
           return true;  
    }  
}  
```  
  
 <span data-ttu-id="65bea-111">O exemplo a seguir mostra como usar o remapeamento de marca no arquivo Web. config para exibir a exceção em todas as páginas da Web.</span><span class="sxs-lookup"><span data-stu-id="65bea-111">The following example shows how to use tag remapping in the web.config file to display the exception in all the Web pages.</span></span>  
  
```xml  
<pages>  
  <tagMapping>  
    <add tagType="System.Web.DynamicData.DynamicValidator"   
        mappedTagType="MyDynamicValidator"/>  
  </tagMapping>  
</pages>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65bea-112">Inicializa uma nova instância da classe <see cref="T:System.Web.DynamicData.DynamicValidator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-112">Initializes a new instance of the <see cref="T:System.Web.DynamicData.DynamicValidator" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicValidator.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65bea-113">Obtém ou define a coluna a ser validada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-113">Gets or sets the column to validate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65bea-114">A coluna a ser validada, ou <see langword="null" /> se uma entidade de dados é validada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-114">The column to validate, or <see langword="null" /> if a data entity is validated.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnName : string" Usage="System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65bea-115">Obtém o nome da coluna a ser validada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-115">Gets the name of the column to validate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65bea-116">O nome da coluna a ser validada, ou <see langword="null" /> se uma entidade de dados é validada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-116">The name of the column to validate, or <see langword="null" /> if a data entity is validated.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="abstract member ControlPropertiesValid : unit -&gt; bool&#xA;override this.ControlPropertiesValid : unit -&gt; bool" Usage="dynamicValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65bea-117">Indica se as propriedades do controle <see cref="T:System.Web.DynamicData.DynamicValidator" /> especificado são válidas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-117">Indicates whether the properties of the specified <see cref="T:System.Web.DynamicData.DynamicValidator" /> control are valid.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65bea-118">
            <see langword="true" />, se as propriedades do controle de validação especificado forem válidas, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-118">
              <see langword="true" />, if the properties of the specified validation control are valid; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65bea-119">Esse método é substituído da classe base.</span><span class="sxs-lookup"><span data-stu-id="65bea-119">This method is overridden from the base class.</span></span> <span data-ttu-id="65bea-120">A chamada para a classe base falhará se o controle que você tenta validar não tem uma propriedade de validação.</span><span class="sxs-lookup"><span data-stu-id="65bea-120">The call to the base class fails if the control you try to validate does not have a validation property.</span></span> <span data-ttu-id="65bea-121">Por exemplo, se o controle for um <xref:System.Web.UI.WebControls.GridView>, haverá falha na classe base.</span><span class="sxs-lookup"><span data-stu-id="65bea-121">For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="abstract member EvaluateIsValid : unit -&gt; bool&#xA;override this.EvaluateIsValid : unit -&gt; bool" Usage="dynamicValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65bea-122">Determina se o valor no controle de entrada a ser validado e válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-122">Determines whether the value in the input control to validate is valid.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65bea-123">
            <see langword="true" /> se o controle de validação avaliado for válido, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-123">
              <see langword="true" /> if the validation control that is evaluated is valid; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInit : EventArgs -&gt; unit&#xA;override this.OnInit : EventArgs -&gt; unit" Usage="dynamicValidator.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="65bea-124">Os dados do evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-124">The event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65bea-125">Aciona o evento <see langword="Init" /> para inicializar o controle <see cref="T:System.Web.DynamicData.DynamicValidator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-125">Raises the <see langword="Init" /> event to initialize the <see cref="T:System.Web.DynamicData.DynamicValidator" /> control.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateException">
      <MemberSignature Language="C#" Value="protected virtual void ValidateException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member ValidateException : Exception -&gt; unit&#xA;override this.ValidateException : Exception -&gt; unit" Usage="dynamicValidator.ValidateException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="65bea-126">A exceção que é lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-126">The exception that is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65bea-127">Configura uma exceção de validação se ocorrer uma exceção no modelo de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-127">Sets up a validation exception if an exception occurs in the data model.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65bea-128">Esse método é chamado quando uma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="65bea-128">This method is called when an exception is thrown.</span></span> <span data-ttu-id="65bea-129">Um validador específico de coluna falhará quando uma exceção de validação contém uma exceção interna associada, mas um validador global falhar quando ocorre uma exceção não sejam de validação.</span><span class="sxs-lookup"><span data-stu-id="65bea-129">A column-specific validator fails when a validation exception contains an associated inner exception, but a global validator fail when a non-validation exception occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65bea-130">Somente use esse método se a exceção é um <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>.</span><span class="sxs-lookup"><span data-stu-id="65bea-130">Only use this method if the exception is a <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>.</span></span> <span data-ttu-id="65bea-131">Se a exceção for causada por um erro de banco de dados, usando esse método pode exibir um erro de banco de dados confidenciais</span><span class="sxs-lookup"><span data-stu-id="65bea-131">If the exception is caused by a database error, using this method can display a sensitive database error</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationException">
      <MemberSignature Language="C#" Value="protected virtual Exception ValidationException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ValidationException" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ValidationException As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Exception ^ ValidationException { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationException : Exception with get, set" Usage="System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65bea-132">Obtém ou define a exceção de validação que ocorre durante a validação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-132">Gets or sets validation exception that occurs during validation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65bea-133">A exceção de validação que é gerada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65bea-133">The validation exception that is thrown.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65bea-134">Esta propriedade representa a exceção de validação que é gerada se ocorrer um erro quando um valor é editado ou quando um novo valor é inserido no modelo de dados.</span><span class="sxs-lookup"><span data-stu-id="65bea-134">This property represents the validation exception that is thrown if an error occurs when a value is edited or when a new value is inserted into the data model.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>