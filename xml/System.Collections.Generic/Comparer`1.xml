<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9db1cf30459dcec386cb4f5061b765efb92b4864" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52359609" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">O tipo de objetos a serem comparados.</typeparam>
    <summary>Fornece uma classe base para implementações da interface genérica <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derivar dessa classe para fornecer uma implementação personalizada do <xref:System.Collections.Generic.IComparer%601> da interface para uso com as classes de coleção, como o <xref:System.Collections.Generic.SortedList%602> e <xref:System.Collections.Generic.SortedDictionary%602> classes genéricas.  
  
 A diferença entre deriva a <xref:System.Collections.Generic.Comparer%601> classe e implementando o <xref:System.IComparable?displayProperty=nameWithType> interface é da seguinte maneira:  
  
-   Para especificar como os dois objetos devem ser comparados por padrão, implementar o <xref:System.IComparable?displayProperty=nameWithType> interface em sua classe. Isso garante que as operações de classificação usará o código de comparação padrão que você forneceu.  
  
-   Para definir um comparador a ser usado em vez do comparador padrão, derivam o <xref:System.Collections.Generic.Comparer%601> classe. Em seguida, você pode usar esse comparador em operações de classificação que usam um comparador como um parâmetro.  
  
 O objeto retornado pela <xref:System.Collections.Generic.Comparer%601.Default%2A> usos de propriedade de <xref:System.IComparable%601?displayProperty=nameWithType> interface genérica (`IComparable<T>` em c#, `IComparable(Of T)` no Visual Basic) para comparar dois objetos. Se tipo `T` não implementa o <xref:System.IComparable%601?displayProperty=nameWithType> interface genérica, o <xref:System.Collections.Generic.Comparer%601.Default%2A> propriedade retorna um <xref:System.Collections.Generic.Comparer%601> que usa o <xref:System.IComparable?displayProperty=nameWithType> interface.  
  
   
  
## Examples  
 O exemplo a seguir é derivado de uma classe `BoxLengthFirst`, da <xref:System.Collections.Generic.Comparer%601> classe. Esse comparador compara dois objetos do tipo `Box`. Ele classifica-os primeiro por comprimento, em seguida, pela altura e, em seguida, pela largura. O `Box` classe implementa as <xref:System.IComparable%601> interface para controlar a comparação padrão entre dois `Box` objetos. Essa implementação padrão classifica primeiro pela altura, em seguida, tamanho e, em seguida, largura. O exemplo mostra as diferenças entre as duas comparações por meio da classificação de uma lista de `Box` objetos pela primeira vez, usando o `BoxLengthFirst` comparador e, em seguida, usando o comparador padrão.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> e <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> comporte de forma diferente em termos de diferenciação de cultura e maiusculas e minúsculas.  
  
Para comparações de cadeia de caracteres, o <see cref="T:System.StringComparer" /> classe é mais recomendada <c>comparador&lt;cadeia de caracteres&gt;</c>.  Propriedades do <see cref="T:System.StringComparer" /> classe retornar instâncias predefinidas que realizam comparações de cadeia de caracteres com diferentes combinações de diferenciação de cultura e maiusculas e minúsculas.  A diferenciação de cultura e maiusculas e minúsculas são consistentes entre os membros do mesmo <see cref="T:System.StringComparer" /> instância.  
  
Para obter mais informações sobre comparações específicas da cultura, consulte a <see cref="N:System.Globalization" /> namespace e [globalização e localização](~/docs/standard/globalization-localization/index.md).</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">O primeiro objeto a ser comparado.</param>
        <param name="y">O segundo objeto a ser comparado.</param>
        <summary>Quando substituído em uma classe derivada, executa uma comparação de dois objetos do mesmo tipo e retorna um valor que indica se um objeto é menor que, igual a ou maior que o outro.</summary>
        <returns>Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Significado 
 </description></listheader><item><term> Menor que zero 
 </term><description><paramref name="x" /> é menor que <paramref name="y" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="x" /> é igual a <paramref name="y" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description><paramref name="x" /> é maior que <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para fornecer uma comparação de ordem para o tipo de classificação `T`.  
  
   
  
## Examples  
 O exemplo a seguir define um comparador de `Box` objetos que podem ser usados em vez do comparador padrão. Este exemplo é parte de um exemplo maior fornecido para o <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O tipo de <paramref name="T" /> não implementa a interface genérica <see cref="T:System.IComparable`1" /> ou a interface <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="overrides"><para>Comparando <see langword="null" /> com qualquer referência de tipo é permitido e não gera uma exceção. Uma referência nula é considerada menor do que qualquer referência que não seja nula.  
  
Para obter informações sobre comparações específicas da cultura, consulte a <see cref="N:System.Globalization" /> namespace e [globalização e localização](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">A comparação a se usar.</param>
        <summary>Cria um comparador usando a comparação especificada.</summary>
        <returns>O novo comparador.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna um comparador de ordem de classificação padrão para o tipo especificado pelo argumento genérico.</summary>
        <value>Um objeto que herda <see cref="T:System.Collections.Generic.Comparer`1" /> e serve como um comparador de ordem de classificação para o tipo <paramref name="T" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Collections.Generic.Comparer%601> retornada por esta propriedade usa o <xref:System.IComparable%601?displayProperty=nameWithType> interface genérica (`IComparable<T>` em c#, `IComparable(Of T)` no Visual Basic) para comparar dois objetos. Se tipo `T` não implementa o <xref:System.IComparable%601?displayProperty=nameWithType> interface genérica, essa propriedade retorna um <xref:System.Collections.Generic.Comparer%601> que usa o <xref:System.IComparable?displayProperty=nameWithType> interface.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o <xref:System.Collections.Generic.Comparer%601.Default%2A> propriedade para obter um objeto que executa a comparação padrão. Este exemplo é parte de um exemplo maior fornecido para o <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Para comparações de cadeia de caracteres, o <see cref="T:System.StringComparer" /> classe é mais recomendada <c>comparador&lt;cadeia de caracteres&gt;</c> (<c>comparador (Of String)</c> no Visual Basic).  Propriedades do <see cref="T:System.StringComparer" /> classe retornar instâncias predefinidas que realizam comparações de cadeia de caracteres com diferentes combinações de diferenciação de cultura e maiusculas e minúsculas.  A diferenciação de cultura e maiusculas e minúsculas são consistentes entre os membros do mesmo <see cref="T:System.StringComparer" /> instância.  
  
Para obter mais informações sobre comparações específicas da cultura, consulte a <see cref="N:System.Globalization" /> namespace e [globalização e localização](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">O primeiro objeto a ser comparado.</param>
        <param name="y">O segundo objeto a ser comparado.</param>
        <summary>Compara dois objetos e retorna um valor que indica se um é menor, igual ou maior do que o outro.</summary>
        <returns>Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Significado 
 </description></listheader><item><term> Menor que zero 
 </term><description><paramref name="x" /> é menor que <paramref name="y" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="x" /> é igual a <paramref name="y" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description><paramref name="x" /> é maior que <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é um wrapper para o <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> método, portanto `obj` deve ser convertido no tipo especificado pelo argumento genérico `T` da instância atual. Se ele não pode ser convertido `T`, um <xref:System.ArgumentException> é gerada.  
  
 Comparando `null` com qualquer referência de tipo é permitido e não gera uma exceção. Durante a classificação, `null` é considerado menor que qualquer outro objeto.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> método para comparar dois objetos. Este exemplo é parte de um exemplo maior fornecido para o <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> ou <paramref name="y" /> é de um tipo que não pode ser convertido para o tipo <paramref name="T" />.  
  
- ou - 
 <paramref name="x" /> e <paramref name="y" /> não implementam a interface genérica do <see cref="T:System.IComparable`1" /> nem a interface do <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> e <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> se comportam diferentemente em termos de diferenciação de cultura e maiusculas e minúsculas.  
  
Para comparações de cadeia de caracteres, o <see cref="T:System.StringComparer" /> classe é mais recomendada <c>comparador&lt;cadeia de caracteres&gt;</c>.  Propriedades do <see cref="T:System.StringComparer" /> classe retornar instâncias predefinidas que realizam comparações de cadeia de caracteres com diferentes combinações de diferenciação de cultura e maiusculas e minúsculas.  A diferenciação de cultura e maiusculas e minúsculas são consistentes entre os membros do mesmo <see cref="T:System.StringComparer" /> instância.  
  
Para obter mais informações sobre comparações específicas da cultura, consulte a <see cref="N:System.Globalization" /> namespace e [globalização e localização](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>