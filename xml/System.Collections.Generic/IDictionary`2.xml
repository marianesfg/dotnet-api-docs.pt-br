<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDictionary`2.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d63ca205014079b51a43184fd4357d42421abe16.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d63ca205014079b51a43184fd4357d42421abe16</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The type of keys in the dictionary.</source>
          <target state="translated">O tipo de chaves no dicionário.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The type of values in the dictionary.</source>
          <target state="translated">O tipo de valores no dicionário.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Represents a generic collection of key/value pairs.</source>
          <target state="translated">Representa uma coleção genérica de pares chave/valor.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface is the base interface for generic collections of key/value pairs.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface é a interface base para coleções genéricas de pares chave/valor.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Each element is a key/value pair stored in a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.</source>
          <target state="translated">Cada elemento é um par chave/valor armazenado em um <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Each pair must have a unique key.</source>
          <target state="translated">Cada par deve ter uma chave exclusiva.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Implementações podem variar se eles permitem <ph id="ph1">`key`</ph> ser <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The value can be <ph id="ph1">`null`</ph> and does not have to be unique.</source>
          <target state="translated">O valor pode ser <ph id="ph1">`null`</ph> e não precisa ser exclusivo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface permite que as chaves independentes e valores a serem enumerados, mas não implica em qualquer ordem de classificação específico.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) returns an object of the type of the elements in the collection.</source>
          <target state="translated">O <ph id="ph1">`foreach`</ph> instrução de linguagem c# (<ph id="ph2">`For Each`</ph> no Visual Basic, <ph id="ph3">`for each`</ph> em C++) retorna um objeto do tipo dos elementos na coleção.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Since each element of the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">Desde que cada elemento do <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> é um par chave/valor, o tipo de elemento não é o tipo de chave ou o tipo do valor.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</source>
          <target state="translated">Em vez disso, o tipo de elemento é <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated">O <ph id="ph1">`foreach`</ph> instrução é um wrapper em torno de enumerador, que só permite ler, gravar não à coleção.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Porque as chaves podem ser herdadas e seu comportamento é alterado, a exclusividade absoluta não pode ser garantida pelo comparações que usam o <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings, with string keys, and accesses it through the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">O exemplo de código a seguir cria um vazio <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> de cadeias de caracteres com cadeia de caracteres chaves e acessa por meio de <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">O exemplo de código usa o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método para adicionar alguns elementos.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method throws <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">O exemplo demonstra que o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método lança <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> ao tentar adicionar uma chave duplicada.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade (indexador em c#) para recuperar valores, demonstrando que um <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> é lançada quando uma chave solicitada não está presente e mostrando que o valor associado com uma chave pode ser substituído.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo mostra como usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> método como uma forma mais eficiente para recuperar valores, se um programa geralmente deve tentar valores de chave que não estão no dicionário e como usar o <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> método para testar se uma chave existe antes de chamar o <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>método.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">Por fim, o exemplo mostra como enumerar as chaves e valores no dicionário e como enumerar os valores somente usando o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The implementing class must have a means to compare keys.</source>
          <target state="translated">A classe de implementação deve ter meios para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The object to use as the key of the element to add.</source>
          <target state="translated">O objeto a ser usado como chave do elemento a ser adicionado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The object to use as the value of the element to add.</source>
          <target state="translated">O objeto a ser usado como o valor do elemento a ser adicionado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Adds an element with the provided key and value to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Adiciona um elemento com a chave fornecida e o valor para o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> in C# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> in Visual Basic).</source>
          <target state="translated">Você também pode usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no dicionário; por exemplo, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> em c# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">No entanto, se a chave especificada já existe no dicionário, configurando o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade substitui o valor antigo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">Em contraste, o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método não modifica os elementos existentes.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Implementações podem variar em como elas determinam a igualdade de objetos; Por exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe usa <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, enquanto o <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permite que o usuário especifique o <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação a ser usado para comparação de chaves.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Implementações podem variar se eles permitem <ph id="ph1">`key`</ph> ser <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings, with integer keys, and accesses it through the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">O exemplo de código a seguir cria um vazio <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> de cadeias de caracteres, com chaves de inteiro e acessa por meio de <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">O exemplo de código usa o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método para adicionar alguns elementos.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">O exemplo demonstra que o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método lança um <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> ao tentar adicionar uma chave duplicada.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Já existe um elemento com a mesma chave no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">A chave a ser localizada no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the specified key.</source>
          <target state="translated">Determina se o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contém um elemento com a chave especificada.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contiver um elemento com a chave; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Implementações podem variar em como elas determinam a igualdade de objetos; Por exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe usa <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, enquanto o <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permite que o usuário especifique o <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação a ser usado para comparação de chaves.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Implementações podem variar se eles permitem <ph id="ph1">`key`</ph> ser <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> método para testar se uma chave existe antes de chamar o <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>It also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</source>
          <target state="translated">Ele também mostra como usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> método, que pode ser uma maneira mais eficiente para recuperar valores, se um programa tentar frequentemente valores de chave que não estão no dicionário.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Finally, it shows how to insert items using <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">Finalmente, ele mostra como inserir itens usando <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade (indexador em c#).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The key of the element to get or set.</source>
          <target state="translated">A chave do elemento a ser obtida ou adicionada.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Gets or sets the element with the specified key.</source>
          <target state="translated">Obtém ou define o elemento com a chave especificada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The element with the specified key.</source>
          <target state="translated">O elemento com a chave especificada.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> in C# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> in Visual Basic).</source>
          <target state="translated">Você também pode usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no dicionário; por exemplo, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> em c# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">No entanto, se a chave especificada já existe no dicionário, configurando o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade substitui o valor antigo.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">Em contraste, o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> método não modifica os elementos existentes.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Implementações podem variar em como elas determinam a igualdade de objetos; Por exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe usa <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, enquanto o <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permite que o usuário especifique o <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação a ser usado para comparação de chaves.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Implementações podem variar se eles permitem <ph id="ph1">`key`</ph> ser <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">O seguinte exemplo de código usa o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade (indexador em c#) para recuperar valores, demonstrando que um <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> é lançada quando uma chave solicitada não está presente e mostrando que o valor associado com uma chave pode ser substituído.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</source>
          <target state="translated">O exemplo também mostra como usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> método como uma forma mais eficiente para recuperar valores, se um programa geralmente deve tentar valores de chave que não estão no dicionário.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The property is retrieved and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> is not found.</source>
          <target state="translated">A propriedade é recuperada e <ph id="ph1">&lt;paramref name="key" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The property is set and the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated">A propriedade é definida e o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Obtém um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> que contém as chaves do <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the keys of the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> que contém as chaves do objeto que implementa <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>The order of the keys in the returned <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">A ordem das chaves no retornado <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> não for especificado, mas é garantido para ser a mesma ordem que os valores correspondentes no <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> retornado pelo <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>The following code example shows how to enumerate keys alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated">O exemplo de código a seguir mostra como enumerar chaves autônoma usando o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">A chave do elemento a ser removido.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Remove o elemento com a chave especificada do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o elemento for removido com êxito; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Esse método também retornará <ph id="ph1">&lt;see langword="false" /&gt;</ph> se <ph id="ph2">&lt;paramref name="key" /&gt;</ph> não tiver sido encontrado no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> original.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Implementações podem variar em como elas determinam a igualdade de objetos; Por exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe usa <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, enquanto o <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permite que o usuário especifique o <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação a ser usado para comparação de chaves.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The following code example shows how to remove a key/value pair from a dictionary using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo de código a seguir mostra como remover um par chave/valor de um dicionário usando o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>The key whose value to get.</source>
          <target state="translated">A chave cujo valor será obtido.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Quando este método retornar, o valor associado à chave especificada, se a chave for encontrada; caso contrário, o valor padrão para o tipo do parâmetro <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Este parâmetro é passado não inicializado.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>Gets the value associated with the specified key.</source>
          <target state="translated">Obtém o valor associado à chave especificada.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o objeto que implementa o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contiver um elemento com a chave especificada; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Esse método combina a funcionalidade do <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> método e o <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>If the key is not found, then the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the type <ph id="ph2">`TValue`</ph>; for example, zero (0) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
          <target state="translated">Se a chave não for encontrada, o <ph id="ph1">`value`</ph> parâmetro obtém o valor padrão apropriado para o tipo de <ph id="ph2">`TValue`</ph>; por exemplo, zero (0) para tipos de inteiros, <ph id="ph3">`false`</ph> para tipos boolianos, e <ph id="ph4">`null`</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method to retrieve values.</source>
          <target state="translated">O exemplo mostra como usar o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> método para recuperar valores.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>If a program frequently tries key values that are not in a dictionary, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method can be more efficient than using the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</source>
          <target state="translated">Se um programa tentar frequentemente valores de chave que não estão em um dicionário de <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> método pode ser mais eficiente do que usando o <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriedade (indexador em c#), que gera exceções ao tentar recuperar as chaves que não existentes.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Obtém um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> que contém os valores no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the values in the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> que contém os valores no objeto que implementa <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>The order of the values in the returned <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated">A ordem dos valores em retornado <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> não for especificado, mas é garantido para ser a mesma ordem que as chaves correspondentes no <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> retornado pelo <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>The following code example shows how to enumerate values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">O exemplo de código a seguir mostra como enumerar valores somente usando o <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Esse código é parte de um exemplo maior que pode ser compilado e executado.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>