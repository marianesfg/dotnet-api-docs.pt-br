<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3974e97e893db48f241a47a19c02bfa795c7a260" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52353694" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Especifica o tipo dos elementos na pilha.</typeparam>
    <summary>Representa uma coleção UEPS (último a entrar, primeiro a sair) de tamanho variável das instâncias do mesmo tipo especificado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> é implementado como uma matriz.  
  
 Pilhas e filas são úteis quando você precisar de armazenamento temporário para obter informações; ou seja, quando você talvez queira descartar um elemento após recuperar seu valor. Use <xref:System.Collections.Generic.Queue%601> se você precisar acessar as informações na mesma ordem em que ele é armazenado na coleção. Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> se você precisar acessar as informações na ordem inversa.  
  
 Use o <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> e <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> tipos quando você precisa para acessar a coleção de vários threads simultaneamente.  
  
 Um uso comum para <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> é preservar as variáveis de estado durante as chamadas para outros procedimentos.  
  
 Três operações principais podem ser executadas em um <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> e seus elementos:  
  
-   <xref:System.Collections.Generic.Stack%601.Push%2A> Insere um elemento na parte superior do <xref:System.Collections.Stack>.  
  
-   <xref:System.Collections.Generic.Stack%601.Pop%2A> Remove um elemento da parte superior do <xref:System.Collections.Generic.Stack%601>.  
  
-   <xref:System.Collections.Generic.Stack%601.Peek%2A> Retorna um elemento que está na parte superior a <xref:System.Collections.Generic.Stack%601> , mas não o remove do <xref:System.Collections.Generic.Stack%601>.  
  
 A capacidade de um <xref:System.Collections.Generic.Stack%601> é o número de elementos a <xref:System.Collections.Generic.Stack%601> pode conter. Como os elementos são adicionados a um <xref:System.Collections.Generic.Stack%601>, a capacidade é aumentada automaticamente conforme necessário, realocando a matriz interna. A capacidade pode ser diminuída chamando <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.  
  
 Se <xref:System.Collections.Generic.Stack%601.Count%2A> é menor que a capacidade da pilha, <xref:System.Collections.Generic.Stack%601.Push%2A> é uma operação de (1). Se a capacidade precisar ser aumentada para acomodar o novo elemento, <xref:System.Collections.Generic.Stack%601.Push%2A> se torna um O (`n`) a operação, onde `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>. <xref:System.Collections.Generic.Stack%601.Pop%2A> é uma operação de (1).  
  
 <xref:System.Collections.Generic.Stack%601> aceita `null` como um valor válido para a referência de tipos e permite elementos duplicados.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos do <xref:System.Collections.Generic.Stack%601> classe genérica. O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Os membros estáticos públicos (<see langword="Shared" /> no Visual Basic) desse são thread-safe. Não há garantia de que qualquer membro de instância seja thread-safe.  
  
Um <see cref="T:System.Collections.Generic.Stack`1" /> pode dar suporte a vários leitores simultaneamente, desde que a coleção não será modificada.  Mesmo assim, enumerar através de uma coleção intrinsecamente não é um procedimento thread-safe.  Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.  Para permitir que a coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua própria sincronização.</threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteradores (C# e Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" /> que está vazia e tem a capacidade inicial padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A capacidade de um <xref:System.Collections.Generic.Stack%601> é o número de elementos que o <xref:System.Collections.Generic.Stack%601> pode conter. Como os elementos são adicionados a um <xref:System.Collections.Generic.Stack%601>, a capacidade é aumentada automaticamente conforme necessário, realocando a matriz interna.  
  
 Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Generic.Stack%601>.  
  
 A capacidade pode ser diminuída chamando <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.  
  
 Este construtor é uma operação O(1).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra esse construtor e vários métodos do <xref:System.Collections.Generic.Stack%601> classe genérica.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">A coleção da qual os elementos serão copiados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" />, que contém os elementos copiados da coleção especificada e tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A capacidade de um <xref:System.Collections.Generic.Stack%601> é o número de elementos que o <xref:System.Collections.Generic.Stack%601> pode conter. Como os elementos são adicionados a um <xref:System.Collections.Generic.Stack%601>, a capacidade é aumentada automaticamente conforme necessário, realocando a matriz interna.  
  
 Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Generic.Stack%601>.  
  
 A capacidade pode ser diminuída chamando <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.  
  
 Os elementos são copiados para o <xref:System.Collections.Generic.Stack%601> na mesma ordem que são lidas, o <xref:System.Collections.Generic.IEnumerator%601> da coleção.  
  
 Este construtor é um O (`n`) a operação, onde `n` é o número de elementos em `collection`.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra esse construtor e vários métodos do <xref:System.Collections.Generic.Stack%601> classe genérica.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.Stack`1" /> pode conter.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" /> que está vazia e tem a capacidade inicial especificada ou a capacidade inicial padrão, a que for maior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A capacidade de um <xref:System.Collections.Generic.Stack%601> é o número de elementos que o <xref:System.Collections.Generic.Stack%601> pode conter. Como os elementos são adicionados a um <xref:System.Collections.Generic.Stack%601>, a capacidade é aumentada automaticamente conforme necessário, realocando a matriz interna.  
  
 Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Generic.Stack%601>.  
  
 A capacidade pode ser diminuída chamando <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.  
  
 Este construtor é um O (`n`) a operação, onde `n` é `capacity`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> é menor que zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove todos os objetos da <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601.Count%2A> é definido como zero e referências a outros objetos de elementos da coleção também são liberadas.  
  
 A capacidade permanece inalterada. Para redefinir a capacidade do <xref:System.Collections.Generic.Stack%601>, chame <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>. Cortar um vazio <xref:System.Collections.Generic.Stack%601> define a capacidade do <xref:System.Collections.Generic.Stack%601> para a capacidade padrão.  
  
 Este método é uma operação O(`n`), em que `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.Clear%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.Stack`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
        <summary>Determina se um elemento está no <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <returns><see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.Stack`1" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina a igualdade usando o comparador de igualdade padrão <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> para `T`, o tipo dos valores na lista.  
  
 Este método executa uma pesquisa linear; por isso, esse método é uma operação O(`n`), em que `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.Contains%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Executando operações de cadeia de caracteres que não levam em conta a cultura em coleções</related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.Stack`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
        <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
        <summary>Copia o <see cref="T:System.Collections.Generic.Stack`1" /> para um unidimensional <see cref="T:System.Array" /> existente, começando no índice da matriz especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os elementos são copiados para a matriz na ordem do último a entrar, primeiro a sair (UEPS), semelhante a ordem dos elementos retornados por uma sucessão de chamadas para <xref:System.Collections.Generic.Stack%601.Pop%2A>.  
  
 Este método é uma operação O(`n`), em que `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> é menor que zero.</exception>
        <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.Stack`1" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <value>O número de elementos contidos no <see cref="T:System.Collections.Generic.Stack`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A capacidade do <xref:System.Collections.Generic.Stack%601> é o número de elementos que o <xref:System.Collections.Generic.Stack%601> pode armazenar. <xref:System.Collections.Generic.Stack%601.Count%2A> é o número de elementos que estão realmente no <xref:System.Collections.Generic.Stack%601>.  
  
 A capacidade é sempre maior que ou igual a <xref:System.Collections.Generic.Stack%601.Count%2A>. Se <xref:System.Collections.Generic.Stack%601.Count%2A> excede a capacidade durante a adição de elementos, o aumento da capacidade, automaticamente realocando a matriz interna antes de copiar os elementos antigos e adição de novos elementos.  
  
 A recuperação do valor dessa propriedade é uma operação O(1).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra várias propriedades e métodos do <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um enumerador para o <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <returns>Um <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> para o <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instrução `foreach` da linguagem C# (`for each` no C++, `For Each` no Visual Basic) oculta a complexidade dos enumeradores. Portanto, o uso de `foreach` é recomendado, em vez de manipular diretamente o enumerador.  
  
 Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.  
  
 Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção. Nesta posição, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> está indefinido. Por isso, você deve chamar <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.  
  
 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> Retorna o mesmo objeto até <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> é chamado. <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> define <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> como o próximo elemento.  
  
 Caso <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> também retornam `false`. Caso a última chamada para <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> tenha retornado `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> está indefinido. Não é possível definir <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> como o primeiro elemento da coleção novamente; você deve criar uma nova instância de enumerador em vez disso.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se as alterações são feitas na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> ou <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> lança um <xref:System.InvalidOperationException>.  
  
 O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco. Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.  Para permitir que a coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua própria sincronização.  
  
 As implementações padrão de coleções em <xref:System.Collections.Generic?displayProperty=nameWithType> não são sincronizadas.  
  
 Este método é uma operação O(1).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra que o <xref:System.Collections.Generic.Stack%601> classe genérica é enumerável. O `foreach` instrução (`For Each` no Visual Basic, `for each` em C++) é usado para enumerar a fila.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove o objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" /> sem removê-lo.</summary>
        <returns>O objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante para o <xref:System.Collections.Generic.Stack%601.Pop%2A> método, mas <xref:System.Collections.Generic.Stack%601.Peek%2A> não modifica o <xref:System.Collections.Generic.Stack%601>.  
  
 Se tipo `T` é um tipo de referência `null` pode ser enviado para o <xref:System.Collections.Generic.Stack%601> como um espaço reservado, se necessário.  
  
 Este método é uma operação O(1).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.Peek%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.Stack`1" /> está vazio.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove e retorna o objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <returns>O objeto foi removido da parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante para o <xref:System.Collections.Generic.Stack%601.Peek%2A> método, mas <xref:System.Collections.Generic.Stack%601.Peek%2A> não modifica o <xref:System.Collections.Generic.Stack%601>.  
  
 Se tipo `T` é um tipo de referência `null` pode ser enviado para o <xref:System.Collections.Generic.Stack%601> como um espaço reservado, se necessário.  
  
 <xref:System.Collections.Generic.Stack%601> é implementado como uma matriz. Este método é uma operação O(1).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.Pop%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.Stack`1" /> está vazio.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">O objeto a ser enviado por push para o <see cref="T:System.Collections.Generic.Stack`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
        <summary>Insere um objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> é implementado como uma matriz.  
  
 Se <xref:System.Collections.Generic.Stack%601.Count%2A> já for igual à capacidade, a capacidade do <xref:System.Collections.Generic.Stack%601> é aumentado, automaticamente realocando a matriz interna, e os elementos existentes são copiados para a nova matriz antes do novo elemento é adicionado.  
  
 Se tipo `T` é um tipo de referência `null` pode ser enviado para o <xref:System.Collections.Generic.Stack%601> como um espaço reservado, se necessário. Ele ocupa um slot na pilha e é tratado como qualquer objeto.  
  
 Se <xref:System.Collections.Generic.Stack%601.Count%2A> é menor que a capacidade da pilha, <xref:System.Collections.Generic.Stack%601.Push%2A> é uma operação de (1). Se a capacidade precisar ser aumentada para acomodar o novo elemento, <xref:System.Collections.Generic.Stack%601.Push%2A> se torna um O (`n`) a operação, onde `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.Push%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um enumerador que itera pela coleção.</summary>
        <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instrução `foreach` da linguagem C# (`for each` no C++, `For Each` no Visual Basic) oculta a complexidade dos enumeradores. Portanto, o uso de `foreach` é recomendado, em vez de manipular diretamente o enumerador.  
  
 Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.  
  
 Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção. Nesta posição, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> está indefinido. Por isso, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Retorna o mesmo objeto até <xref:System.Collections.IEnumerator.MoveNext%2A> é chamado. <xref:System.Collections.IEnumerator.MoveNext%2A> define <xref:System.Collections.Generic.IEnumerator%601.Current%2A> como o próximo elemento.  
  
 Caso <xref:System.Collections.IEnumerator.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.Collections.IEnumerator.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A> também retornam `false`. Caso a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A> tenha retornado `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> está indefinido. Não é possível definir <xref:System.Collections.Generic.IEnumerator%601.Current%2A> como o primeiro elemento da coleção novamente; você deve criar uma nova instância de enumerador em vez disso.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se as alterações são feitas na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> lança um <xref:System.InvalidOperationException>.  
  
 O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco. Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.  Para permitir que a coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua própria sincronização.  
  
 As implementações padrão de coleções em <xref:System.Collections.Generic?displayProperty=nameWithType> não são sincronizadas.  
  
 Este método é uma operação O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
        <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
        <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Se o tipo da fonte de <xref:System.Collections.ICollection> não pode ser convertido automaticamente para o tipo de destino `array`, as implementações de não-genérica de <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, enquanto as implementações de genéricas geram <xref:System.ArgumentException>.  
  
 Este método é uma operação O(`n`), em que `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> é menor que zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> é multidimensional.  
  
- ou - 
 O <paramref name="array" /> não tem indexação baseada em zero.  
  
- ou - 
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.  
  
- ou - 
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
        <value><see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Stack`1" />, essa propriedade sempre retorna <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As implementações padrão de coleções em <xref:System.Collections.Generic?displayProperty=nameWithType> não são sincronizadas.  
  
 A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.  No caso raro em que enumerações otimizou acessos de gravação, você deve bloquear a coleção durante toda a enumeração.  Para permitir que a coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua própria sincronização.  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> Retorna um objeto que pode ser usado para sincronizar o acesso para o <xref:System.Collections.ICollection>. A sincronização é eficaz somente se todos os threads bloquear este objeto antes de acessar a coleção.  
  
 A recuperação do valor dessa propriedade é uma operação O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
        <value>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.Stack`1" />, essa propriedade sempre retorna a instância atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As implementações padrão de coleções em <xref:System.Collections.Generic?displayProperty=nameWithType> não são sincronizadas.  
  
 A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.  Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.  Para permitir que a coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua própria sincronização.  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> Retorna um objeto que pode ser usado para sincronizar o acesso para o <xref:System.Collections.ICollection>. A sincronização é eficaz somente se todos os threads bloquear este objeto antes de acessar a coleção. O código a seguir mostra o uso do <xref:System.Collections.ICollection.SyncRoot%2A> propriedade para c#, C++ e Visual Basic.  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 A recuperação do valor dessa propriedade é uma operação O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um enumerador que itera em uma coleção.</summary>
        <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instrução `foreach` da linguagem C# (`for each` no C++, `For Each` no Visual Basic) oculta a complexidade dos enumeradores. Portanto, o uso de `foreach` é recomendado, em vez de manipular diretamente o enumerador.  
  
 Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.  
  
 Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A> também traz o enumerador de volta para essa posição.  Nesta posição, <xref:System.Collections.IEnumerator.Current%2A> está indefinido. Por isso, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.  
  
 <xref:System.Collections.IEnumerator.Current%2A> retorna o mesmo objeto até <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> ser chamado. <xref:System.Collections.IEnumerator.MoveNext%2A> define <xref:System.Collections.IEnumerator.Current%2A> como o próximo elemento.  
  
 Caso <xref:System.Collections.IEnumerator.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.Collections.IEnumerator.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A> também retornam `false`. Caso a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A> tenha retornado `false`, <xref:System.Collections.IEnumerator.Current%2A> está indefinido. Para definir <xref:System.Collections.IEnumerator.Current%2A> como o primeiro elemento da coleção novamente, é possível chamar <xref:System.Collections.IEnumerator.Reset%2A> seguido de <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se as alterações são feitas na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> lança um <xref:System.InvalidOperationException>.  
  
 O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.  Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.  Para permitir que a coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua própria sincronização.  
  
 As implementações padrão de coleções em <xref:System.Collections.Generic?displayProperty=nameWithType> não são sincronizadas.  
  
 Este método é uma operação O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copia o <see cref="T:System.Collections.Generic.Stack`1" /> em uma nova matriz.</summary>
        <returns>Uma nova matriz que contém cópias dos elementos do <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os elementos são copiados para a matriz na ordem do último a entrar, primeiro a sair (UEPS), semelhante a ordem dos elementos retornados por uma sucessão de chamadas para <xref:System.Collections.Generic.Stack%601.Pop%2A>.  
  
 Este método é uma operação O(`n`), em que `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra vários métodos para o <xref:System.Collections.Generic.Stack%601> classe genérica, incluindo o <xref:System.Collections.Generic.Stack%601.ToArray%2A> método.  
  
 O exemplo de código cria uma pilha de cadeias de caracteres com capacidade padrão e usa o <xref:System.Collections.Generic.Stack%601.Push%2A> método para enviar por push cinco cadeias de caracteres para a pilha. Os elementos da pilha são enumerados, que não altera o estado da pilha. O <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para remover a primeira cadeia de caracteres da pilha. O <xref:System.Collections.Generic.Stack%601.Peek%2A> método é usado para examinar o próximo item na pilha e, em seguida, o <xref:System.Collections.Generic.Stack%601.Pop%2A> método é usado para lançá-las.  
  
 O <xref:System.Collections.Generic.Stack%601.ToArray%2A> método é usado para criar uma matriz e copiar os elementos da pilha para ele e, em seguida, a matriz é passada para o <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor que usa <xref:System.Collections.Generic.IEnumerable%601>, criando uma cópia da pilha com a ordem dos elementos invertidos. Os elementos da cópia são exibidos.  
  
 Uma matriz duas vezes o tamanho da pilha é criado e o <xref:System.Collections.Generic.Stack%601.CopyTo%2A> método é usado para copiar os elementos de matriz, começando no meio da matriz. O <xref:System.Collections.Generic.Stack%601.%23ctor%2A> construtor é usado novamente para criar uma cópia da pilha com a ordem dos elementos invertidos; portanto, os três elementos nulos estão no final.  
  
 O <xref:System.Collections.Generic.Stack%601.Contains%2A> método é usado para mostrar que a cadeia de caracteres "quatro" é na primeira cópia da pilha, após o qual o <xref:System.Collections.Generic.Stack%601.Clear%2A> método limpa a cópia e o <xref:System.Collections.Generic.Stack%601.Count%2A> propriedade mostra que a pilha está vazia.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Definirá a capacidade para o número real de elementos no <see cref="T:System.Collections.Generic.Stack`1" />, se esse número for menor que 90% da capacidade atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser usado para minimizar a memória de uma coleção sobrecarga se nenhum elemento novo será adicionado à coleção. O custo de realocar e copiar uma grande <xref:System.Collections.Generic.Stack%601> pode ser considerável, no entanto, para que o <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> método não fará nada se a lista estiver em mais de 90% da capacidade. Isso evita a incorrer um custo de realocação grande para um ganho relativamente pequeno.  
  
 Este método é uma operação O(`n`), em que `n` é <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
 Para redefinir uma <xref:System.Collections.Generic.Stack%601> para seu estado inicial, chamar o <xref:System.Collections.Generic.Stack%601.Clear%2A> método antes de chamar <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> método. Cortar um vazio <xref:System.Collections.Generic.Stack%601> define a capacidade do <xref:System.Collections.Generic.Stack%601> para a capacidade padrão.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>