<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="List`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e6add71f8155950c8b8db1f2c266f86c847f8658.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6add71f8155950c8b8db1f2c266f86c847f8658</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The type of elements in the list.</source>
          <target state="translated">O tipo dos elementos na lista.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Represents a strongly typed list of objects that can be accessed by index.</source>
          <target state="translated">Representa uma lista fortemente tipada de objetos que podem ser acessados por índice.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Provides methods to search, sort, and manipulate lists.</source>
          <target state="translated">Fornece métodos para pesquisar, classificar e manipular listas.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is the generic equivalent of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe é o equivalente genérico de <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface by using an array whose size is dynamically increased as required.</source>
          <target state="translated">Ele implementa o <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface genérica usando uma matriz cujo tamanho é aumentado dinamicamente conforme necessário.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>You can add items to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> by using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> methods.</source>
          <target state="translated">Você pode adicionar itens a um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses both an equality comparer and an ordering comparer.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe usa uma comparação de igualdade e um comparador de classificação.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> use an equality comparer for the list elements.</source>
          <target state="translated">Métodos como <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> usar um comparador de igualdade para os elementos da lista.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default equality comparer for type <ph id="ph1">`T`</ph> is determined as follows.</source>
          <target state="translated">O comparador de igualdade padrão para o tipo <ph id="ph1">`T`</ph> é determinado como segue.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, then the equality comparer is the <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id="ph4">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> implementa o <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface genérica e, em seguida, o comparador de igualdade é o <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> método da interface; caso contrário, o comparador de igualdade padrão é <ph id="ph4">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> use an ordering comparer for the list elements.</source>
          <target state="translated">Métodos como <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> usar um comparador de classificação para os elementos da lista.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default comparer for type <ph id="ph1">`T`</ph> is determined as follows.</source>
          <target state="translated">O comparador padrão para o tipo <ph id="ph1">`T`</ph> é determinado como segue.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface, then the default comparer is the <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method of that interface; otherwise, if type <ph id="ph4">`T`</ph> implements the nongeneric <ph id="ph5">&lt;xref:System.IComparable&gt;</ph> interface, then the default comparer is the <ph id="ph6">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph> method of that interface.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> implementa o <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e, em seguida, o comparador padrão será o <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> método da interface; caso contrário, se tipo <ph id="ph4">`T`</ph> implementa não genérica <ph id="ph5">&lt;xref:System.IComparable&gt;</ph> de interface, então o comparador padrão será o <ph id="ph6">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph> método da interface.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> implementa nenhuma interface, em seguida, não há nenhum comparador padrão e um delegado de comparação ou comparação deve ser fornecido explicitamente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is not guaranteed to be sorted.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> não é garantida a ser classificada.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>You must sort the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> before performing operations (such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) that require the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to be sorted.</source>
          <target state="translated">Você deve classificar o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> antes de executar operações (como <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) que exigem o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> a ser classificada.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">Elementos nesta coleção podem ser acessados usando um índice de inteiro.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">Índices nesta coleção são baseadas em zero.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">Para grandes <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objetos, você pode aumentar a capacidade máxima para 2 bilhões de elementos em um sistema de 64 bits definindo o <ph id="ph2">`enabled`</ph> atributo do elemento de configuração para <ph id="ph3">`true`</ph> no ambiente de tempo de execução.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> aceita <ph id="ph2">`null`</ph> como um valor válido para a referência de tipos e permite que os elementos duplicados.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For an immutable version of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, see <ph id="ph2">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>.</source>
          <target state="translated">Para obter uma versão imutável o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de classe, consulte <ph id="ph2">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Performance Considerations</source>
          <target state="translated">Considerações sobre desempenho</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>In deciding whether to use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class, both of which have similar functionality, remember that the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class performs better in most cases and is type safe.</source>
          <target state="translated">Ao decidir se deve usar o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ou <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> classe, ambos com funcionalidade semelhante, lembre-se de que o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe melhor na maioria dos casos e é do tipo seguro.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If a reference type is used for type <ph id="ph1">`T`</ph> of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, the behavior of the two classes is identical.</source>
          <target state="translated">Se um tipo de referência for usado para o tipo <ph id="ph1">`T`</ph> do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe, o comportamento das duas classes é idêntico.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>However, if a value type is used for type <ph id="ph1">`T`</ph>, you need to consider implementation and boxing issues.</source>
          <target state="translated">No entanto, se um tipo de valor é usado para o tipo <ph id="ph1">`T`</ph>, você precisa considerar os problemas de conversão boxing e implementação.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If a value type is used for type <ph id="ph1">`T`</ph>, the compiler generates an implementation of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class specifically for that value type.</source>
          <target state="translated">Se um tipo de valor é usado para o tipo <ph id="ph1">`T`</ph>, o compilador gera uma implementação de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe especificamente para esse tipo de valor.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>That means a list element of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</source>
          <target state="translated">Isso significa que um elemento de lista de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objeto não tem que ser boxed antes que o elemento pode ser usado, e depois de aproximadamente 500 elementos da lista são criados a memória salva não conversão boxing elementos da lista é maior que a memória usada para gerar a implementação da classe.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Make certain the value type used for type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">Verifique se o tipo de valor usado para o tipo <ph id="ph1">`T`</ph> implementa o <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If not, methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> must call the <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method, which boxes the affected list element.</source>
          <target state="translated">Se não, os métodos como <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> deve chamar o <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> método, que caixas o elemento de lista afetados.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If the value type implements the <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface and you own the source code, also implement the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface to prevent the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods from boxing list elements.</source>
          <target state="translated">Se o tipo de valor implementa o <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface e você possuir o código-fonte, também implemente o <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface genérica para impedir que o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> métodos de conversão boxing elementos da lista.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If you do not own the source code, pass an <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods</source>
          <target state="translated">Se você não possui o código-fonte, passar um <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> o objeto para o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> métodos</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It is to your advantage to use the type-specific implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class instead of using the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class or writing a strongly typed wrapper collection yourself.</source>
          <target state="translated">É vantajoso usar a implementação de um tipo específico do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe em vez de usar o <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> classe ou gravar uma coleção fortemente tipada de wrapper por conta própria.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</source>
          <target state="translated">O motivo é sua implementação deve fazer o que o .NET Framework faz para você já, e o common language runtime pode compartilhar código Microsoft intermediate language e metadados, que não é de sua implementação.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>F# Considerations</source>
          <target state="translated">Considerações de F #</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is used infrequently in F# code.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe é usada com pouca frequência em código F #.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Instead, <bpt id="p1">[</bpt>Lists<ept id="p1">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>, which are immutable, singly-linked lists, are typically preferred.</source>
          <target state="translated">Em vez disso, <bpt id="p1">[</bpt>lista<ept id="p1">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>, que são listas imutáveis, vinculados individualmente, são geralmente preferido.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</source>
          <target state="translated">Uma lista de F # fornece uma série de imutável, ordenada de valores e tem suporte para uso em desenvolvimento de estilo funcional.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>When used from F#, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is typically referred to by the  <bpt id="p1">[</bpt>ResizeArray<ph id="ph2">\&lt;</ph>'T&gt;<ept id="p1">](https://msdn.microsoft.com/library/ee353447.aspx)</ept> type abbreviation to avoid naming conflicts with F# Lists</source>
          <target state="translated">Quando usado de F #, a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe costuma ser referenciada pelo <bpt id="p1">[</bpt>ResizeArray<ph id="ph2">\&lt;</ph>' t &gt;<ept id="p1">](https://msdn.microsoft.com/library/ee353447.aspx)</ept> abreviação para evitar conflitos com F # lista de nomes de tipo</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como adicionar, remover e inserir um objeto de negócios simples em um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The following example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class of type string.</source>
          <target state="translated">O exemplo a seguir demonstra várias propriedades e métodos para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica do tipo cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>(For an example of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of complex types, see the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method.)</source>
          <target state="translated">(Para obter um exemplo de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de tipos complexos, consulte o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> método.)</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default constructor is used to create a list of strings with the default capacity.</source>
          <target state="translated">O construtor padrão é usado para criar uma lista de cadeias de caracteres com a capacidade padrão.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method is used to add several items.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida e, em seguida, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> método é usado para adicionar vários itens.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The items are listed, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">Os itens são listados e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida novamente, juntamente com o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedade, para mostrar que a capacidade foi aumentada conforme necessário.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method is used to test for the presence of an item in the list, the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> método é usado para testar a presença de um item na lista, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método é usado para inserir um novo item no meio da lista e o conteúdo da lista é exibido novamente.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#) is used to retrieve an item, the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</source>
          <target state="translated">O padrão <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade (indexador em c#) é usada para recuperar um item, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> método é usado para remover a primeira instância do item duplicado adicionada anteriormente e o conteúdo é exibido novamente.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method always removes the first instance it encounters.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> método sempre remove a primeira instância que encontrar.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método é usado para reduzir a capacidade de corresponder à contagem e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedades são exibidas.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</source>
          <target state="translated">Se a capacidade não utilizada tivesse sido menos de 10% da capacidade total, a lista seria não foram redimensionada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> método é usado para remover todos os itens da lista e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedades são exibidas.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Os membros estáticos públicos (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) desse são thread-safe.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Não há garantia de que qualquer membro de instância seja thread-safe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It is safe to perform multiple read operations on a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, but issues can occur if the collection is modified while it’s being read.</source>
          <target state="translated">É seguro executar várias operações de leitura em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, mas os problemas podem ocorrer se a coleção é modificada enquanto está sendo lido.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>To ensure thread safety, lock the collection during a read or write operation.</source>
          <target state="translated">Para garantir a segurança do thread, bloquear a coleção durante uma leitura ou operação de gravação.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para habilitar uma coleção seja acessada por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For collections with built-in synchronization, see the classes in the <ph id="ph1">&lt;see cref="N:System.Collections.Concurrent" /&gt;</ph> namespace.</source>
          <target state="translated">Para coleções com sincronização interna, consulte as classes de <ph id="ph1">&lt;see cref="N:System.Collections.Concurrent" /&gt;</ph> namespace.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For an inherently thread–safe alternative, see the <ph id="ph1">&lt;see cref="T:System.Collections.Immutable.ImmutableList`1" /&gt;</ph> class.</source>
          <target state="translated">Para obter uma alternativa inerentemente thread-safe, consulte o <ph id="ph1">&lt;see cref="T:System.Collections.Immutable.ImmutableList`1" /&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que está vazia e tem a capacidade inicial padrão.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.</source>
          <target state="translated">A capacidade de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Como os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, a capacidade é aumentada automaticamente conforme necessário ao realocar a matriz interna.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>If the size of the collection can be estimated, using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Se o tamanho da coleção pode ser previsto, usando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> construtor e especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The capacity can be decreased by calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">A capacidade pode ser diminuída chamando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método ou definindo o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade explicitamente.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Reduzir a capacidade realoca a memória e copia todos os elementos de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este construtor é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The following example demonstrates the default constructor of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">O exemplo a seguir demonstra o construtor padrão da <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The default constructor creates a list with the default capacity, as demonstrated by displaying the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">O construtor padrão cria uma lista com a capacidade padrão, conforme demonstrado exibindo o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</source>
          <target state="translated">O exemplo adiciona, insere e remove itens, mostrando como a capacidade muda à medida que esses métodos são usados.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new list.</source>
          <target state="translated">A coleção cujos elementos são copiados para a nova lista.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, que contém os elementos copiados da coleção especificada e tem capacidade suficiente para acomodar o número de elementos copiados.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> in the same order they are read by the enumerator of the collection.</source>
          <target state="translated">Os elementos são copiados para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> na mesma ordem em que são lidas pelo enumerador da coleção.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in <ph id="ph1">`collection`</ph>.</source>
          <target state="translated">Este construtor é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos em <ph id="ph1">`collection`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%2A&gt;</ph> constructor and various methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%2A&gt;</ph> construtor e vários métodos para o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe que atuam em intervalos.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array of strings is created and passed to the constructor, populating the list with the elements of the array.</source>
          <target state="translated">Uma matriz de cadeias de caracteres é criada e transferida ao construtor, preencher a lista com os elementos da matriz.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade, em seguida, é exibida para mostrar que a capacidade inicial é exatamente o que é necessário para manter os elementos de entrada.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The number of elements that the new list can initially store.</source>
          <target state="translated">O número de elementos que a nova lista pode armazenar inicialmente.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that is empty and has the specified initial capacity.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que está vazia e tem a capacidade inicial especificada.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.</source>
          <target state="translated">A capacidade de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Como os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, a capacidade é aumentada automaticamente conforme necessário ao realocar a matriz interna.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">A capacidade pode ser diminuída chamando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método ou definindo o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade explicitamente.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Reduzir a capacidade realoca a memória e copia todos os elementos de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>This constructor is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`capacity`</ph>.</source>
          <target state="translated">Este construtor é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres com uma capacidade de 4 é criado, porque o tamanho máximo da lista é conhecido por ser exatamente 4.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The list is populated with four strings, and a read-only copy is created by using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">A lista é preenchida com quatro cadeias de caracteres e uma cópia somente leitura é criada usando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The object to be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser adicionado ao final do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Adiciona um objeto ao final do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> aceita <ph id="ph2">`null`</ph> como um valor válido para a referência de tipos e permite que os elementos duplicados.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> já for igual a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, a capacidade do <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é aumentado, automaticamente realocando matriz interna, e os elementos existentes são copiados para a nova matriz antes de adicionar o novo elemento.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> é menor que <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, esse método é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Se a capacidade precisa ser aumentado para acomodar o novo elemento, esse método se torna um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como adicionar, remover e inserir um objeto de negócios simples em um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The following example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra várias propriedades e métodos para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica, incluindo o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The default constructor is used to create a list of strings with a capacity of 0.</source>
          <target state="translated">O construtor padrão é usado para criar uma lista de cadeias de caracteres com uma capacidade de 0.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method is used to add several items.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida e, em seguida, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> método é usado para adicionar vários itens.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The items are listed, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">Os itens são listados e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida novamente, juntamente com o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedade, para mostrar que a capacidade foi aumentada conforme necessário.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</source>
          <target state="translated">Outras propriedades e métodos são usados para pesquisar, inserir e remover os elementos da lista e, finalmente, para limpar a lista.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements should be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">A coleção cujos elementos devem ser adicionados ao final do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is a reference type.</source>
          <target state="translated">A coleção em si não pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, mas poderá conter elementos que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se tipo <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> for um tipo de referência.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>Adds the elements of the specified collection to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Adiciona os elementos da coleção especificada ao final do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The order of the elements in the collection is preserved in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">A ordem dos elementos na coleção é preservada no <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">Se o novo <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (atual <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> mais o tamanho da coleção) será maior <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, a capacidade do <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é aumentado, automaticamente realocando a matriz interna para acomodar os novos elementos, e os elementos existentes são copiados para a nova matriz antes que os novos elementos são adicionados.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can accommodate the new elements without increasing the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements to be added.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> pode acomodar os novos elementos sem aumentar o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos a serem adicionados.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of elements to be added and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Se a capacidade precisa ser aumentado para acomodar os novos elementos, esse método se torna um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operação, onde <bpt id="p3">*</bpt>n<ept id="p3">*</ept> é o número de elementos a ser adicionado e <bpt id="p4">*</bpt>m<ept id="p4">*</ept> é <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> método e vários outros métodos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe que atuam em intervalos.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>An array of strings is created and passed to the constructor, populating the list with the elements of the array.</source>
          <target state="translated">Uma matriz de cadeias de caracteres é criada e transferida ao construtor, preencher a lista com os elementos da matriz.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> method is called, with the list as its argument.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> método é chamado, com a lista como seu argumento.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</source>
          <target state="translated">O resultado é que os elementos atuais da lista são adicionados ao final da lista, duplicar todos os elementos.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>Returns a read-only <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> wrapper for the current collection.</source>
          <target state="translated">Retorna um wrapper <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> somente leitura para a coleção atual.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>An object that acts as a read-only wrapper around the current <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Um objeto que atua como um wrapper somente leitura em torno do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>To prevent any modifications to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, expose it only through this wrapper.</source>
          <target state="translated">Para impedir que todas as modificações de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de objeto, expô-la apenas por esse wrapper.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>A  <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> object does not expose methods that modify the collection.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> objeto não expor os métodos que modificam a coleção.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>However, if changes are made to the underlying <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, the read-only collection reflects those changes.</source>
          <target state="translated">No entanto, se forem feitas alterações em subjacente <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> do objeto, a coleção somente leitura reflete as alterações.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres com uma capacidade de 4 é criado, porque o tamanho máximo da lista é conhecido por ser exatamente 4.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>The list is populated with four strings, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method is used to get a read-only <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface implementation that wraps the original list.</source>
          <target state="translated">A lista é preenchida com quatro cadeias de caracteres e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> método é usado para obter somente leitura <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> implementação de interface genérica que encapsula a lista original.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>An element of the original list is set to "Coelophysis" using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</source>
          <target state="translated">Um elemento da lista original é definido para "Coelophysis" usando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade (indexador em c#) e o conteúdo da lista somente leitura é exibidas novamente para demonstrar que é apenas um wrapper para a lista original.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Uses a binary search algorithm to locate a specific element in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Usa um algoritmo de pesquisa binária para localizar um elemento específico no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado ou parte dele.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The object to locate.</source>
          <target state="translated">O objeto a ser localizado.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the default comparer and returns the zero-based index of the element.</source>
          <target state="translated">Pesquisa todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado para um elemento usando o comparador padrão e retorna o índice baseado em zero do elemento.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">O índice baseado em zero da <ph id="ph1">&lt;paramref name="item" /&gt;</ph> no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado, se <ph id="ph3">&lt;paramref name="item" /&gt;</ph> for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <ph id="ph4">&lt;paramref name="item" /&gt;</ph>, ou, se não houver nenhum elemento maior, o complemento bit a bit de <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>This method uses the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for type <ph id="ph2">`T`</ph> to determine the order of list elements.</source>
          <target state="translated">Esse método usa o comparador padrão <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para tipo <ph id="ph2">`T`</ph> para determinar a ordem dos elementos da lista.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> property checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verificações de propriedade se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e usa essa implementação, se disponível.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> não implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lança um <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> já devem ser classificados de acordo com a implementação de comparador; caso contrário, o resultado é incorreto.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">Comparando <ph id="ph1">`null`</ph> com qualquer referência de tipo é permitido e não gerará uma exceção ao usar o <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">Durante a classificação, <ph id="ph1">`null`</ph> é considerado menor que qualquer outro objeto.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contém mais de um elemento com o mesmo valor, o método retornará somente uma das ocorrências e pode retornar qualquer uma das ocorrências, não necessariamente o primeiro deles.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">Caso o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> não contenha o valor especificado, o método retorna um inteiro negativo.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">Você pode aplicar a operação de complemento bit a bit (~) para esse número inteiro negativo para obter o índice do primeiro elemento que é maior do que o valor de pesquisa.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">Ao inserir o valor para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, esse índice deve ser usado como o ponto de inserção para manter a ordem de classificação.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">Esse método é um O (log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos do intervalo.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> sobrecarga de método e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com quatro cadeias de caracteres, em nenhuma ordem específica.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The list is displayed, sorted, and displayed again.</source>
          <target state="translated">A lista é exibida, classificada e exibida novamente.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload is then used to search for two strings that are not in the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert them.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> sobrecarga do método é usada para procurar por duas cadeias de caracteres que não estão na lista, e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método é usado para inseri-los.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The return value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method is negative in each case, because the strings are not in the list.</source>
          <target state="translated">O valor de retorno de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> método for negativo em cada caso, porque as cadeias de caracteres não estão na lista.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Taking the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</source>
          <target state="translated">Levando o complemento bit a bit (o ~ operador em c# e Visual C++, <ph id="ph1">`Xor`</ph> -1 no Visual Basic) disso produz número negativo o índice do primeiro elemento na lista que é maior do que a cadeia de caracteres de pesquisa e inserção neste local preserva a classificação ordem.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The second search string is larger than any element in the list, so the insertion position is at the end of the list.</source>
          <target state="translated">A segunda cadeia de caracteres de pesquisa é maior que qualquer elemento na lista, portanto, é a posição de inserção no final da lista.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The default comparer <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">O comparador padrão <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> não consegue encontrar uma implementação da interface genérica <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou a interface <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> para o tipo <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The object to locate.</source>
          <target state="translated">O objeto a ser localizado.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">A implementação de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> a ser usada durante a comparação de elementos.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph2">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> para usar o comparador padrão <ph id="ph2">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">Pesquisa um elemento em todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado usando o comparador especificado e retorna o índice baseado em zero do elemento.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">O índice baseado em zero da <ph id="ph1">&lt;paramref name="item" /&gt;</ph> no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado, se <ph id="ph3">&lt;paramref name="item" /&gt;</ph> for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <ph id="ph4">&lt;paramref name="item" /&gt;</ph>, ou, se não houver nenhum elemento maior, o complemento bit a bit de <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">A comparação personaliza como os elementos são comparados.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">Por exemplo, você pode usar um <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instância como o comparador para executar pesquisas de cadeia de caracteres de maiusculas e minúsculas.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> for fornecido, os elementos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> são comparados com o valor especificado usando especificado <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph4">`T`</ph> implementa o <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e usa essa implementação, se disponível.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> não implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lança <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> já devem ser classificados de acordo com a implementação de comparador; caso contrário, o resultado é incorreto.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">Comparando <ph id="ph1">`null`</ph> com qualquer referência de tipo é permitido e não gerará uma exceção ao usar o <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">Durante a classificação, <ph id="ph1">`null`</ph> é considerado menor que qualquer outro objeto.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contém mais de um elemento com o mesmo valor, o método retornará somente uma das ocorrências e pode retornar qualquer uma das ocorrências, não necessariamente o primeiro deles.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">Caso o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> não contenha o valor especificado, o método retorna um inteiro negativo.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">Você pode aplicar a operação de complemento bit a bit (~) para esse número inteiro negativo para obter o índice do primeiro elemento que é maior do que o valor de pesquisa.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">Ao inserir o valor para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, esse índice deve ser usado como o ponto de inserção para manter a ordem de classificação.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">Esse método é um O (log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos do intervalo.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga de método e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">O exemplo define um comparador alternativo para cadeias de caracteres chamado DinoCompare, que implementa o <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> no Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> no Visual C++) interface genérica.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">O comparador funciona da seguinte maneira: primeiro, os termos de comparação são testados para <ph id="ph1">`null`</ph>, e uma referência nula é tratada como menor que não null.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">Segundo, os comprimentos de cadeia de caracteres são comparados, e a cadeia de caracteres mais longa é considerada maior.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Em terceiro lugar, se os tamanhos forem iguais, a comparação de cadeia de caracteres comum é usada.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com quatro cadeias de caracteres, em nenhuma ordem específica.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, sorted using the alternate comparer, and displayed again.</source>
          <target state="translated">A lista é exibida, classificado usando o comparador alternativo e exibida novamente.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método é usada para pesquisar várias cadeias de caracteres que não estão na lista, usamos o comparador alternativo.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert the strings.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método é usado para inserir as cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>These two methods are located in the function named <ph id="ph1">`SearchAndInsert`</ph>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph2">`Xor`</ph> -1 in Visual Basic) of the negative number returned by <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> and use it as an index for inserting the new string.</source>
          <target state="translated">Esses dois métodos estão localizados na função nomeada <ph id="ph1">`SearchAndInsert`</ph>, junto com o código para levar o complemento bit a bit (o ~ operador em c# e Visual C++, <ph id="ph2">`Xor`</ph> -1 no Visual Basic) do número negativo retornado por <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> e usá-lo como um índice para Inserir nova cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> não consegue encontrar uma implementação da interface genérica <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou a interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> para o tipo <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based starting index of the range to search.</source>
          <target state="translated">O índice baseado em zero inicial do intervalo a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The length of the range to search.</source>
          <target state="translated">O tamanho do intervalo a ser procurado.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The object to locate.</source>
          <target state="translated">O objeto a ser localizado.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">A implementação <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> a ser usada na comparação de elementos ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> para usar o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Searches a range of elements in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">Pesquisa um intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado para encontrar um elemento que usa o comparador especificado e retorna o índice baseado em zero do elemento.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">O índice baseado em zero da <ph id="ph1">&lt;paramref name="item" /&gt;</ph> no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> classificado, se <ph id="ph3">&lt;paramref name="item" /&gt;</ph> for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <ph id="ph4">&lt;paramref name="item" /&gt;</ph>, ou, se não houver nenhum elemento maior, o complemento bit a bit de <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">A comparação personaliza como os elementos são comparados.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">Por exemplo, você pode usar um <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instância como o comparador para executar pesquisas de cadeia de caracteres de maiusculas e minúsculas.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> for fornecido, os elementos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> são comparados com o valor especificado usando especificado <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph4">`T`</ph> implementa o <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e usa essa implementação, se disponível.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> não implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lança <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> já devem ser classificados de acordo com a implementação de comparador; caso contrário, o resultado é incorreto.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">Comparando <ph id="ph1">`null`</ph> com qualquer referência de tipo é permitido e não gerará uma exceção ao usar o <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">Durante a classificação, <ph id="ph1">`null`</ph> é considerado menor que qualquer outro objeto.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contém mais de um elemento com o mesmo valor, o método retornará somente uma das ocorrências e pode retornar qualquer uma das ocorrências, não necessariamente o primeiro deles.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">Caso o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> não contenha o valor especificado, o método retorna um inteiro negativo.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">Você pode aplicar a operação de complemento bit a bit (~) para esse número inteiro negativo para obter o índice do primeiro elemento que é maior do que o valor de pesquisa.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">Ao inserir o valor para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, esse índice deve ser usado como o ponto de inserção para manter a ordem de classificação.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">Esse método é um O (log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos do intervalo.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga de método e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">O exemplo define um comparador alternativo para cadeias de caracteres chamado DinoCompare, que implementa o <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> no Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> no Visual C++) interface genérica.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">O comparador funciona da seguinte maneira: primeiro, os termos de comparação são testados para <ph id="ph1">`null`</ph>, e uma referência nula é tratada como menor que não null.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">Segundo, os comprimentos de cadeia de caracteres são comparados, e a cadeia de caracteres mais longa é considerada maior.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Em terceiro lugar, se os tamanhos forem iguais, a comparação de cadeia de caracteres comum é usada.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com os nomes de cinco dinossauros herbivorous e três dinossauros carnivorous.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Within each of the two groups, the names are not in any particular sort order.</source>
          <target state="translated">Em cada um dos dois grupos, os nomes não estão em qualquer ordem de classificação específico.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</source>
          <target state="translated">A lista é exibida, o intervalo de herbivores é classificado usando o comparador alternativo e a lista é exibida novamente.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search only the range of herbivores for "Brachiosaurus".</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método é usada para pesquisar somente o intervalo de herbivores "Brachiosaurus".</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of the negative number returned by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method is used as an index for inserting the new string.</source>
          <target state="translated">A cadeia de caracteres não for encontrada e o complemento bit a bit (o ~ operador em c# e Visual C++, <ph id="ph1">`Xor`</ph> -1 no Visual Basic) do número negativo retornado pelo <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> método é usado como um índice para inserir a nova cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não denotam um intervalo válido em <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> não consegue encontrar uma implementação da interface genérica <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou a interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> para o tipo <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Gets or sets the total number of elements the internal data structure can hold without resizing.</source>
          <target state="translated">Obtém ou define o número total de elementos que a estrutura de dados interna pode manter sem redimensionamento.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> can contain before resizing is required.</source>
          <target state="translated">O número de elementos que <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> pode conter antes que o redimensionamento seja necessário.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required, whereas <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> pode armazenar antes de redimensionamento é necessário, enquanto <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> é o número de elementos que estão realmente no <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> sempre é maior que ou igual a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> excede <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> durante a adição de elementos, a capacidade é aumentada, automaticamente realocando a matriz interna antes de copiar os elementos antigos e adição de novos elementos.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>If the capacity is significantly larger than the count and you want to reduce the memory used by the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>,  you can  decrease capacity by calling the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly to a lower value.</source>
          <target state="translated">Se a capacidade é significativamente maior do que a contagem de e para reduzir a memória usada pelo <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, você pode diminuir a capacidade chamando o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método ou definindo o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade explicitamente um valor inferior.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>When the value of <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</source>
          <target state="translated">Quando o valor de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> é definido explicitamente, a matriz interna também seja realocada para acomodar a capacidade especificada e todos os elementos são copiados.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the new capacity.</source>
          <target state="translated">Recuperar o valor dessa propriedade é uma operação de (1); configuração da propriedade é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é a nova capacidade.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The following example demonstrates how to check the capacity and count of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">O exemplo a seguir demonstra como verificar a capacidade e a contagem de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém um objeto de negócios simples e ilustra o uso de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método para remover uma capacidade extra.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property at several points in the life of a list.</source>
          <target state="translated">A exemplo a seguir mostra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade em vários pontos da vida útil de uma lista.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The default constructor is used to create a list of strings with a capacity of 0, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed to demonstrate this.</source>
          <target state="translated">O construtor padrão é usado para criar uma lista de cadeias de caracteres com uma capacidade de 0 e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida para demonstrar isso.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>After the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method has been used to add several items, the items are listed, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">Após o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> método foi usado para adicionar vários itens, os itens são listados e, em seguida, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida novamente, juntamente com o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedade, para mostrar que a capacidade foi aumentada conforme necessário.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again after the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade é exibida novamente após o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método é usado para reduzir a capacidade de corresponder à contagem.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed again.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> método é usado para remover todos os itens da lista e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedades são exibidas novamente.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;see cref="P:System.Collections.Generic.List`1.Capacity" /&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Collections.Generic.List`1.Capacity" /&gt;</ph> é definido como um valor menor que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">Não há memória suficiente disponível no sistema.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Remove todos os elementos do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is set to 0, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> é definido como 0, e referências a outros objetos de elementos da coleção também são liberadas.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> remains unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> permanece inalterado.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or set the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property directly.</source>
          <target state="translated">Para redefinir a capacidade do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, chamar o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método ou conjunto de <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade diretamente.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Reduzir a capacidade realoca a memória e copia todos os elementos de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Cortar vazio <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> define a capacidade do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à capacidade padrão.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method and various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> método e várias outras propriedades e métodos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used at the end of the program, to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are then displayed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> método é usado no final do programa, para remover todos os itens da lista e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedades são exibidas.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Determina se um elemento está no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="item" /&gt;</ph> for encontrado no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>This method determines equality by using the default equality comparer, as defined by the object's implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method for <ph id="ph2">`T`</ph> (the type of values in the list).</source>
          <target state="translated">Este método determina igualdade usando o comparador de igualdade padrão, conforme definido pela implementação do objeto do <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> método para <ph id="ph2">`T`</ph> (o tipo de valores na lista).</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object that implements <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> métodos em um <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém um objeto de negócios simples que implementa <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The following example contains a list of complex objects of type <ph id="ph1">`Cube`</ph>.</source>
          <target state="translated">O exemplo a seguir contém uma lista de objetos complexos do tipo <ph id="ph1">`Cube`</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The <ph id="ph1">`Cube`</ph> class implements the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method so that two cubes are considered equal if their dimensions are the same.</source>
          <target state="translated">O <ph id="ph1">`Cube`</ph> classe implementa o <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> método para que os dois cubos são considerados iguais se suas dimensões forem iguais.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, because a cube that has the specified dimensions is already in the collection.</source>
          <target state="translated">Neste exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> método retorna <ph id="ph2">`true`</ph>, pois um cubo com as dimensões especificadas já está na coleção.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The type of the elements of the target array.</source>
          <target state="translated">O tipo dos elementos da matriz de destino.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Converter`2" /&gt;</ph> delegate that converts each element from one type to another type.</source>
          <target state="translated">Um delegado <ph id="ph1">&lt;see cref="T:System.Converter`2" /&gt;</ph> que converte cada elemento de um tipo em outro tipo.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>Converts the elements in the current <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to another type, and returns a list containing the converted elements.</source>
          <target state="translated">Converte os elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> atual para outro tipo e retorna uma lista contendo os elementos convertidos.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> of the target type containing the converted elements from the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> do tipo de destino que contém os elementos convertidos do <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> is a delegate to a method that converts an object to the target type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> é um delegado para um método que converte um objeto para o tipo de destino.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Converter%602&gt;</ph> delegate, and the converted elements are saved in the new <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Converter%602&gt;</ph> delegado e os elementos convertidos são salvos na nova <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> remains unchanged.</source>
          <target state="translated">Atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> permanece inalterado.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The following example defines a method named <ph id="ph1">`PointFToPoint`</ph> that converts a <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structure to a <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structure.</source>
          <target state="translated">O exemplo a seguir define um método chamado <ph id="ph1">`PointFToPoint`</ph> que converte um <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> estrutura para um <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> estrutura.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The example then creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structures, creates a <ph id="ph3">`Converter\&lt;PointF, Point&gt;`</ph> delegate (<ph id="ph4">`Converter(Of PointF, Point)`</ph> in Visual Basic) to represent the <ph id="ph5">`PointFToPoint`</ph> method, and passes the delegate to the <ph id="ph6">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo cria um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> estruturas, cria um <ph id="ph3">`Converter\&lt;PointF, Point&gt;`</ph> delegar (<ph id="ph4">`Converter(Of PointF, Point)`</ph> no Visual Basic) para representar o <ph id="ph5">`PointFToPoint`</ph> método e passa o delegado para o <ph id="ph6">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> method passes each element of the input list to the <ph id="ph2">`PointFToPoint`</ph> method and puts the converted elements into a new list of <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> método passa cada elemento da lista de entrada para o <ph id="ph2">`PointFToPoint`</ph> método e coloca os elementos convertidos em uma nova lista de <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> estruturas.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>Both lists are displayed.</source>
          <target state="translated">Ambas as listas são exibidas.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source><ph id="ph1">&lt;paramref name="converter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="converter" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it to an array.</source>
          <target state="translated">Copia o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou parte dele para uma matriz.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the beginning of the target array.</source>
          <target state="translated">Copia todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> em uma matriz unidimensional compatível, a partir do início da matriz de destino.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Este método usa <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> para copiar os elementos.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados para o <ph id="ph1">&lt;xref:System.Array&gt;</ph> na mesma ordem em que o enumerador que itera por meio de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com 5 cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">Uma matriz de cadeia de caracteres vazia de 15 elementos é criada e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> sobrecarga do método é usada para copiar todos os elementos da lista para a matriz a partir do primeiro elemento da matriz.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para copiar todos os elementos da lista para o início da matriz em 6 de índice de matriz (deixar vazio de índice 5).</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para copiar 3 elementos na lista, começando com o índice 2, para o início da matriz na matriz de índice 12 (deixar vazio 11 índice).</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">O conteúdo da matriz é exibido.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the number of elements that the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph> can contain.</source>
          <target state="translated">O número de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de origem é maior que o número de elementos que o <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino pode conter.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.</source>
          <target state="translated">Copia todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Este método usa <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> para copiar os elementos.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados para o <ph id="ph1">&lt;xref:System.Array&gt;</ph> na mesma ordem em que o enumerador que itera por meio de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com 5 cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">Uma matriz de cadeia de caracteres vazia de 15 elementos é criada e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> sobrecarga do método é usada para copiar todos os elementos da lista para a matriz a partir do primeiro elemento da matriz.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para copiar todos os elementos da lista para o início da matriz em 6 de índice de matriz (deixar vazio de índice 5).</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para copiar 3 elementos na lista, começando com o índice 2, para o início da matriz na matriz de índice 12 (deixar vazio 11 índice).</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">O conteúdo da matriz é exibido.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O número de elementos na origem <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> é maior do que o espaço disponível de <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> até o final do <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The zero-based index in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at which copying begins.</source>
          <target state="translated">O índice baseado em zero no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de origem em que a cópia começa.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The number of elements to copy.</source>
          <target state="translated">O número de elementos a serem copiados.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>Copies a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.</source>
          <target state="translated">Copia um intervalo de elementos do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> para uma matriz unidimensional compatível, começando pelo índice especificado da matriz de destino.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Este método usa <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> para copiar os elementos.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados para o <ph id="ph1">&lt;xref:System.Array&gt;</ph> na mesma ordem em que o enumerador que itera por meio de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com 5 cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">Uma matriz de cadeia de caracteres vazia de 15 elementos é criada e o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> sobrecarga do método é usada para copiar todos os elementos da lista para a matriz a partir do primeiro elemento da matriz.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para copiar todos os elementos da lista para o início da matriz em 6 de índice de matriz (deixar vazio de índice 5).</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para copiar 3 elementos na lista, começando com o índice 2, para o início da matriz na matriz de índice 12 (deixar vazio 11 índice).</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">O conteúdo da matriz é exibido.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> of the source <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é igual a ou maior que o <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> do <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de origem.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The number of elements from <ph id="ph1">&lt;paramref name="index" /&gt;</ph> to the end of the source <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the available space from <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph4">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O número de elementos de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> até o final do <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de origem é maior que o espaço disponível do <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> até o final do <ph id="ph4">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> pode armazenar antes de redimensionamento é necessário.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> é o número de elementos que estão realmente no <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> sempre é maior que ou igual a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> excede <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> durante a adição de elementos, a capacidade é aumentada, automaticamente realocando a matriz interna antes de copiar os elementos antigos e adição de novos elementos.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The following example demonstrates how to check the capacity and count of a  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">O exemplo a seguir demonstra como verificar a capacidade e a contagem de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém um objeto de negócios simples e ilustra o uso de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método para remover uma capacidade extra.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The following example shows the value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property at various points in the life of a list.</source>
          <target state="translated">O exemplo a seguir mostra o valor de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedade em vários pontos da vida útil de uma lista.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>After the list has been created and populated and its elements displayed, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Depois que a lista foi criada e preenchida e seus elementos exibidos, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedades são exibidas.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>These properties are displayed again after the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method has been called, and again after the contents of the list are cleared.</source>
          <target state="translated">Essas propriedades são exibidas novamente após o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método foi chamado e novamente após o conteúdo da lista é limpos.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições dos elementos a serem pesquisados.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contains elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">Determina se o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contém elementos que correspondem às condições definidas pelo predicado especificado.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when a match is found.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado e o processamento é interrompido quando uma correspondência for encontrada.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object that implements <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> métodos em um <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém um objeto de negócios simples que implementa <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method and several other methods that use the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> método e vários outros métodos que usam o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado genérico.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, que contém nomes de dinossauro 8, dois deles (em posições 1 e 5) terminam com "saurus".</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">O exemplo também define um método de predicado de pesquisa denominado <ph id="ph1">`EndsWithSaurus`</ph>, que aceita um parâmetro de cadeia de caracteres e retorna um valor booleano um valor que indica se a cadeia de caracteres de entrada termina em "saurus".</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> methods are used to search the list with the search predicate method, and then the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method is used to remove all entries ending with "saurus".</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> métodos são usados para a lista de pesquisa com o método de predicado de pesquisa e, em seguida, o <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> método é usado para remover todas as entradas que terminam com "saurus".</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method is called.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>It traverses the list from the beginning, passing each element in turn to the <ph id="ph1">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">Ele percorre a lista desde o início, passando a cada elemento sucessivamente para o <ph id="ph1">`EndsWithSaurus`</ph> método.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The search stops and the method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`EndsWithSaurus`</ph> method returns <ph id="ph3">`true`</ph> for any element.</source>
          <target state="translated">A pesquisa é interrompida e o método retorna <ph id="ph1">`true`</ph> se o <ph id="ph2">`EndsWithSaurus`</ph> método retorna <ph id="ph3">`true`</ph> para qualquer elemento.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method returns <ph id="ph2">`false`</ph> because all such elements have been removed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> método retorna <ph id="ph2">`false`</ph> porque todos os elementos foram removidos.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">No C# e no Visual Basic, não é necessário criar o representante <ph id="ph1">`Predicate&lt;string&gt;`</ph> (<ph id="ph2">`Predicate(Of String)`</ph> no Visual Basic) explicitamente.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context and create it automatically.</source>
          <target state="translated">Essas linguagens inferem o representante correto pelo contexto e criam-no automaticamente.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving forward in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the first element and ending with the last element.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado, avançando <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, começando com o primeiro elemento e terminando com o último elemento.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Processing is stopped when a match is found.</source>
          <target state="translated">O processamento será interrompido quando uma correspondência for encontrada.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</source>
          <target state="translated">Ao procurar uma lista que contém os tipos de valor, verifique se que o valor padrão para o tipo não satisfaz o predicado de pesquisa.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</source>
          <target state="translated">Caso contrário, não é possível distinguir entre um elemento de lista que acontece com o valor padrão para o tipo e um valor padrão indicando que nenhuma correspondência foi encontrada.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>If the default value satisfies the search predicate, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method instead.</source>
          <target state="translated">Se o valor padrão satisfaz o predicado de pesquisa, use o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph> method on a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple complex object.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph> método em um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém um objeto complexo simple.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">O exemplo a seguir demonstra os métodos de localização para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">O exemplo para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contém <ph id="ph2">`book`</ph> objetos da classe <ph id="ph3">`Book`</ph>, usando os dados a <bpt id="p1">[</bpt>arquivo XML de exemplo: livros (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">O <ph id="ph1">`FillList`</ph> usa o método no exemplo <bpt id="p1">[</bpt>LINQ para XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> para analisar os valores do XML para valores de propriedade do <ph id="ph2">`book`</ph> objetos.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">A tabela a seguir descreve os exemplos fornecidos para os métodos de localização.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Método</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Localiza um catálogo usando uma ID de <ph id="ph1">`IDToFind`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localizar todos os livros que cujo <ph id="ph1">`Genre`</ph> propriedade é "Computador" usando o <ph id="ph2">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Localiza o último registro na coleção que tem uma data de publicação antes de 2001, usando o <ph id="ph1">`PubBefore2001`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições dos elementos a serem pesquisados.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Retrieves all the elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que contém todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrados; caso contrário, um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> vazio.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are saved in the returned <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado e os elementos que correspondem às condições são salvos no retornado <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">O exemplo a seguir demonstra os métodos de localização para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">O exemplo para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contém <ph id="ph2">`book`</ph> objetos da classe <ph id="ph3">`Book`</ph>, usando os dados a <bpt id="p1">[</bpt>arquivo XML de exemplo: livros (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">O <ph id="ph1">`FillList`</ph> usa o método no exemplo <bpt id="p1">[</bpt>LINQ para XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> para analisar os valores do XML para valores de propriedade do <ph id="ph2">`book`</ph> objetos.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">A tabela a seguir descreve os exemplos fornecidos para os métodos de localização.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Método</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Localiza um catálogo usando uma ID de <ph id="ph1">`IDToFind`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localizar todos os livros que cujo <ph id="ph1">`Genre`</ph> propriedade é "Computador" usando o <ph id="ph2">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Localiza o último registro na coleção que tem uma data de publicação antes de 2001, usando o <ph id="ph1">`PubBefore2001`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Pesquisa um elemento que corresponda às condições definidas por um predicado especificado e retorna o índice baseado em zero da primeira ocorrência no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou parte dele.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>This method returns -1 if an item that matches the conditions is not found.</source>
          <target state="translated">Esse método retornará -1 se não for encontrado um item que corresponda às condições.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado forward iniciando no primeiro elemento e terminando no último elemento.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">O representante tem a assinatura:</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`Employee`</ph> classe com dois campos, <ph id="ph2">`Name`</ph> e <ph id="ph3">`Id`</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">Ele também define um <ph id="ph1">`EmployeeSearch`</ph> classe com um único método, <ph id="ph2">`StartsWith`</ph>, que indica se o <ph id="ph3">`Employee.Name`</ph> campo começa com uma subcadeia de caracteres especificada que é fornecida para o <ph id="ph4">`EmployeeSearch`</ph> construtor da classe.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">Observe a assinatura do método</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">corresponde à assinatura do delegado que pode ser passado para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the entire collection , the first time for the first <ph id="ph4">`Employee`</ph> object whose <ph id="ph5">`Name`</ph> field begins with "J", and the second time for the first <ph id="ph6">`Employee`</ph> object whose <ph id="ph7">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">O exemplo cria um <ph id="ph1">`List&lt;Employee&gt;`</ph> de objeto, adiciona um número de <ph id="ph2">`Employee`</ph> objetos a ele e, em seguida, chama o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> método duas vezes para pesquisar toda a coleção, na primeira vez para o primeiro <ph id="ph4">`Employee`</ph> do objeto cuja <ph id="ph5">`Name`</ph> campo começa com "J" e a segunda vez para a primeira <ph id="ph6">`Employee`</ph> do objeto cuja <ph id="ph7">`Name`</ph> campo começa com "Ju".</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que se estende do índice especificado ao último elemento.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at the last element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado forward começando em <ph id="ph2">`startIndex`</ph> e terminando no último elemento.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">O representante tem a assinatura:</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from <ph id="ph1">`startIndex`</ph> to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos do <ph id="ph1">`startIndex`</ph> ao final do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`Employee`</ph> classe com dois campos, <ph id="ph2">`Name`</ph> e <ph id="ph3">`Id`</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">Ele também define um <ph id="ph1">`EmployeeSearch`</ph> classe com um único método, <ph id="ph2">`StartsWith`</ph>, que indica se o <ph id="ph3">`Employee.Name`</ph> campo começa com uma subcadeia de caracteres especificada que é fornecida para o <ph id="ph4">`EmployeeSearch`</ph> construtor da classe.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">Observe a assinatura do método</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">corresponde à assinatura do delegado que pode ser passado para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</source>
          <target state="translated">O exemplo cria um <ph id="ph1">`List&lt;Employee&gt;`</ph> de objeto, adiciona um número de <ph id="ph2">`Employee`</ph> objetos a ele e, em seguida, chama o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> método duas vezes para pesquisar a coleção começando com o membro quinto (ou seja, o membro no índice 4).</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The first time, it searches for the first <ph id="ph1">`Employee`</ph> object whose <ph id="ph2">`Name`</ph> field begins with "J"; the second time, it searches for the first <ph id="ph3">`Employee`</ph> object whose <ph id="ph4">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">Na primeira vez, ele procura a primeira <ph id="ph1">`Employee`</ph> do objeto cuja <ph id="ph2">`Name`</ph> campo começa com "J"; pela segunda vez, ele procura a primeira <ph id="ph3">`Employee`</ph> do objeto cuja <ph id="ph4">`Name`</ph> campo começa com "Ju".</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The number of elements in the section to search.</source>
          <target state="translated">O número de elementos na seção a ser pesquisada.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated">Pesquisa um elemento que coincida com as condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que começa no índice especificado e contém o número de elementos especificado.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado forward começando em <ph id="ph2">`startIndex`</ph> e final em <ph id="ph3">`startIndex`</ph> mais <ph id="ph4">`count`</ph> menos 1, se <ph id="ph5">`count`</ph> for maior que 0.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">O representante tem a assinatura:</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`Employee`</ph> classe com dois campos, <ph id="ph2">`Name`</ph> e <ph id="ph3">`Id`</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">Ele também define um <ph id="ph1">`EmployeeSearch`</ph> classe com um único método, <ph id="ph2">`StartsWith`</ph>, que indica se o <ph id="ph3">`Employee.Name`</ph> campo começa com uma subcadeia de caracteres especificada que é fornecida para o <ph id="ph4">`EmployeeSearch`</ph> construtor da classe.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">Observe a assinatura do método</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">corresponde à assinatura do delegado que pode ser passado para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the entire collection (that is, the members from index 0 to index <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> - 1).</source>
          <target state="translated">O exemplo cria um <ph id="ph1">`List&lt;Employee&gt;`</ph> de objeto, adiciona um número de <ph id="ph2">`Employee`</ph> objetos a ele e, em seguida, chama o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> método duas vezes para pesquisar toda a coleção (ou seja, os membros do índice 0 para índice <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> - 1).</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The first time, it searches for the first <ph id="ph1">`Employee`</ph> object whose <ph id="ph2">`Name`</ph> field begins with "J"; the second time, it searches for the first <ph id="ph3">`Employee`</ph> object whose <ph id="ph4">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">Na primeira vez, ele procura a primeira <ph id="ph1">`Employee`</ph> do objeto cuja <ph id="ph2">`Name`</ph> campo começa com "J"; pela segunda vez, ele procura a primeira <ph id="ph3">`Employee`</ph> do objeto cuja <ph id="ph4">`Name`</ph> campo começa com "Ju".</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não especificam uma seção válida no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving backward in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the last element and ending with the first element.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado, mover para trás no <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, começando com o último elemento e terminando com o primeiro elemento.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Processing is stopped when a match is found.</source>
          <target state="translated">O processamento será interrompido quando uma correspondência for encontrada.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</source>
          <target state="translated">Ao procurar uma lista que contém os tipos de valor, verifique se que o valor padrão para o tipo não satisfaz o predicado de pesquisa.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</source>
          <target state="translated">Caso contrário, não é possível distinguir entre um elemento de lista que acontece com o valor padrão para o tipo e um valor padrão indicando que nenhuma correspondência foi encontrada.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>If the default value satisfies the search predicate, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph> method instead.</source>
          <target state="translated">Se o valor padrão satisfaz o predicado de pesquisa, use o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">O exemplo a seguir demonstra os métodos de localização para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">O exemplo para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contém <ph id="ph2">`book`</ph> objetos da classe <ph id="ph3">`Book`</ph>, usando os dados a <bpt id="p1">[</bpt>arquivo XML de exemplo: livros (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">O <ph id="ph1">`FillList`</ph> usa o método no exemplo <bpt id="p1">[</bpt>LINQ para XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> para analisar os valores do XML para valores de propriedade do <ph id="ph2">`book`</ph> objetos.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">A tabela a seguir descreve os exemplos fornecidos para os métodos de localização.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Método</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Localiza um catálogo usando uma ID de <ph id="ph1">`IDToFind`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localizar todos os livros que cujo <ph id="ph1">`Genre`</ph> propriedade é "Computador" usando o <ph id="ph2">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Localiza o último registro na coleção que tem uma data de publicação antes de 2001, usando o <ph id="ph1">`PubBefore2001`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Pesquisa um elemento que corresponda às condições definidas por um predicado especificado e retorna o índice baseado em zero da última ocorrência no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou parte dele.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado para trás, começando no último elemento e terminando no primeiro elemento.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">O exemplo a seguir demonstra os métodos de localização para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">O exemplo para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contém <ph id="ph2">`book`</ph> objetos da classe <ph id="ph3">`Book`</ph>, usando os dados a <bpt id="p1">[</bpt>arquivo XML de exemplo: livros (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">O <ph id="ph1">`FillList`</ph> usa o método no exemplo <bpt id="p1">[</bpt>LINQ para XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> para analisar os valores do XML para valores de propriedade do <ph id="ph2">`book`</ph> objetos.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">A tabela a seguir descreve os exemplos fornecidos para os métodos de localização.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Método</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Localiza um catálogo usando uma ID de <ph id="ph1">`IDToFind`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localizar todos os livros que cujo <ph id="ph1">`Genre`</ph> propriedade é "Computador" usando o <ph id="ph2">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Localiza o último registro na coleção que tem uma data de publicação antes de 2001, usando o <ph id="ph1">`PubBefore2001`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa inversa.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que se estende do primeiro elemento ao índice especificado.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at the first element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisada começando com versões anteriores em <ph id="ph2">`startIndex`</ph> e terminando no primeiro elemento.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id="ph2">`startIndex`</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos desde o início do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> para <ph id="ph2">`startIndex`</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa inversa.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The number of elements in the section to search.</source>
          <target state="translated">O número de elementos na seção a ser pesquisada.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições do elemento a ser pesquisado.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated">Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que contém o número de elementos especificado e termina no índice especificado.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisada começando com versões anteriores em <ph id="ph2">`startIndex`</ph> e final em <ph id="ph3">`startIndex`</ph> menos <ph id="ph4">`count`</ph> mais 1, se <ph id="ph5">`count`</ph> for maior que 0.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">O exemplo a seguir demonstra os métodos de localização para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">O exemplo para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contém <ph id="ph2">`book`</ph> objetos da classe <ph id="ph3">`Book`</ph>, usando os dados a <bpt id="p1">[</bpt>arquivo XML de exemplo: livros (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">O <ph id="ph1">`FillList`</ph> usa o método no exemplo <bpt id="p1">[</bpt>LINQ para XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> para analisar os valores do XML para valores de propriedade do <ph id="ph2">`book`</ph> objetos.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">A tabela a seguir descreve os exemplos fornecidos para os métodos de localização.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Método</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Localiza um catálogo usando uma ID de <ph id="ph1">`IDToFind`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localizar todos os livros que cujo <ph id="ph1">`Genre`</ph> propriedade é "Computador" usando o <ph id="ph2">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Localiza o último registro na coleção que tem uma data de publicação antes de 2001, usando o <ph id="ph1">`PubBefore2001`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">O exemplo c# usa um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro computador usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do primeiro registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Localiza o índice do último registro de computador na segunda metade da coleção, usando o <ph id="ph1">`FindComputer`</ph> delegado de predicado.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não especificam uma seção válida no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> delegate to perform on each element of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> a ser executado em cada elemento do <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>Performs the specified action on each element of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Executa a ação especificada em cada elemento do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> is a delegate to a method that performs an action on the object passed to it.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> um delegado para um método que executa uma ação no objeto passado para ele.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>Modifying the underlying collection in the body of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate is not supported and causes undefined behavior.</source>
          <target state="translated">Modificar a coleção subjacente no corpo do <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegado não tem suporte e causa um comportamento indefinido.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate to print the contents of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">O exemplo a seguir demonstra o uso do <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegado para imprimir o conteúdo de um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>In this example the <ph id="ph1">`Print`</ph> method is used to display the contents of the list to the console.</source>
          <target state="translated">Neste exemplo o <ph id="ph1">`Print`</ph> método é usado para exibir o conteúdo da lista para o console.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>In addition to displaying the contents using the <ph id="ph1">`Print`</ph> method, the C# example demonstrates the use of  to display the results to the console.</source>
          <target state="translated">Além de exibir o conteúdo usando o <ph id="ph1">`Print`</ph> método, o exemplo c# demonstra o uso de exibir os resultados para o console.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source><ph id="ph1">&lt;paramref name="action" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="action" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>An element in the collection has been modified.</source>
          <target state="translated">Um elemento na coleção foi modificado.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Retorna um enumerador que itera por meio de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1.Enumerator" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">A instrução <ph id="ph1">`foreach`</ph> da linguagem C# (<ph id="ph2">`for each`</ph> no C++, <ph id="ph3">`For Each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">Nesta posição, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> propriedade está definida.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar o método <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> propriedade retorna o mesmo objeto até <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> é chamado.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Caso a última chamada para <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> tenha retornado <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Não é possível definir <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente; você deve criar uma nova instância de enumerador em vez disso.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">As implementações padrão de coleções no namespace <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> não são sincronizadas.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The zero-based <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> index at which the range starts.</source>
          <target state="translated">O índice <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> baseado em zero no qual é iniciado o intervalo.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The number of elements in the range.</source>
          <target state="translated">O número de elementos no intervalo.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>Creates a shallow copy of a range of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Cria uma cópia superficial de um intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de origem.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a range of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Uma cópia superficial de um intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de origem.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</source>
          <target state="translated">Uma cópia superficial de uma coleção de tipos de referência ou um subconjunto da coleção, contém somente as referências para os elementos da coleção.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The objects themselves are not copied.</source>
          <target state="translated">Os objetos em si não são copiados.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The references in the new list point to the same objects as the references in the original list.</source>
          <target state="translated">As referências na nova lista apontam para os mesmos objetos as referências da lista original.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</source>
          <target state="translated">Uma cópia superficial de uma coleção de tipos de valor ou um subconjunto da coleção, contém os elementos da coleção.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>However, if the elements of the collection contain references to other objects, those objects are not copied.</source>
          <target state="translated">No entanto, se os elementos da coleção contém referências a outros objetos, esses objetos não são copiados.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</source>
          <target state="translated">As referências de elementos da nova coleção apontam para os mesmos objetos as referências de elementos da coleção original.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">Em contraste, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciado por elementos.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method and other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> método e outros métodos para o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe que atuam em intervalos.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>At the end of the example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method is used to get three items from the list, beginning with index location 2.</source>
          <target state="translated">No final do exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> método é usado para obter três itens na lista, começando com o local do índice 2.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method is called on the resulting <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, creating an array of three elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> método é chamado em resultante <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, criando uma matriz de três elementos.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The elements of the array are displayed.</source>
          <target state="translated">Os elementos da matriz são exibidos.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não denotam um intervalo válido de elementos no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Returns the zero-based index of the first occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or in a portion of it.</source>
          <target state="translated">Retorna o índice baseado em zero da primeira ocorrência de um valor no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou em uma parte dele.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro de todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da primeira ocorrência de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> em todo o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, se encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado forward iniciando no primeiro elemento e terminando no último elemento.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, com uma entrada que aparece duas vezes no local de índice 0 e o local de índice 5.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> sobrecarga do método de pesquisa a lista desde o início e localiza a primeira ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar o lista começando com o local de índice 3 e continua até o fim da lista e localiza a segunda ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar um intervalo de duas entradas, começando no local de índice dois; ele retorna -1, porque não há nenhuma instância da cadeia de caracteres de pesquisa nesse intervalo.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0 (zero) é válido em uma lista vazia.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated">Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos em <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que se estende do índice especificado para o último elemento.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from <ph id="ph3">&lt;paramref name="index" /&gt;</ph> to the last element, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da primeira ocorrência de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> dentro do intervalo de elementos no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que se estende do <ph id="ph3">&lt;paramref name="index" /&gt;</ph> ao último elemento, se for encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`index`</ph> and ending at the last element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado forward começando em <ph id="ph2">`index`</ph> e terminando no último elemento.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from <ph id="ph1">`index`</ph> to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos do <ph id="ph1">`index`</ph> ao final do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, com uma entrada que aparece duas vezes no local de índice 0 e o local de índice 5.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> sobrecarga do método de pesquisa a lista desde o início e localiza a primeira ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar o lista começando com o local de índice 3 e continua até o fim da lista e localiza a segunda ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar um intervalo de duas entradas, começando no local de índice dois; ele retorna -1, porque não há nenhuma instância da cadeia de caracteres de pesquisa nesse intervalo.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0 (zero) é válido em uma lista vazia.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">O número de elementos na seção a ser pesquisada.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que começa no índice especificado e contém o número de elementos especificado.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at <ph id="ph3">&lt;paramref name="index" /&gt;</ph> and contains <ph id="ph4">&lt;paramref name="count" /&gt;</ph> number of elements, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da primeira ocorrência de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> no intervalo de elementos no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que começa em <ph id="ph3">&lt;paramref name="index" /&gt;</ph> e contém o número de elementos <ph id="ph4">&lt;paramref name="count" /&gt;</ph>, se encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`index`</ph> and ending at <ph id="ph3">`index`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado forward começando em <ph id="ph2">`index`</ph> e final em <ph id="ph3">`index`</ph> mais <ph id="ph4">`count`</ph> menos 1, se <ph id="ph5">`count`</ph> for maior que 0.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, com uma entrada que aparece duas vezes no local de índice 0 e o local de índice 5.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> sobrecarga do método de pesquisa a lista desde o início e localiza a primeira ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar o lista começando com o local de índice 3 e continua até o fim da lista e localiza a segunda ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar um intervalo de duas entradas, começando no local de índice dois; ele retorna -1, porque não há nenhuma instância da cadeia de caracteres de pesquisa nesse intervalo.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não especificam uma seção válida no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">O índice baseado em zero no qual o <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> deve ser inserido.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The object to insert.</source>
          <target state="translated">O objeto a ser inserido.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insere um elemento no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, no índice especificado.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> aceita <ph id="ph2">`null`</ph> como um valor válido para a referência de tipos e permite que os elementos duplicados.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> já for igual a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, a capacidade do <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é aumentado, automaticamente realocando matriz interna, e os elementos existentes são copiados para a nova matriz antes de adicionar o novo elemento.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`index`</ph> é igual a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> é adicionada ao final da <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como adicionar, remover e inserir um objeto de negócios simples em um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method, along with various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método, juntamente com várias propriedades e métodos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>After the list is created, elements are added.</source>
          <target state="translated">Depois que a lista é criada, os elementos são adicionados.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert an item into the middle of the list.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método é usado para inserir um item no meio da lista.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The item inserted is a duplicate, which is later removed using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method.</source>
          <target state="translated">O item inserido é uma duplicata, que é removida posteriormente usando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The zero-based index at which the new elements should be inserted.</source>
          <target state="translated">O índice baseado em zero no qual os novos elementos devem ser inseridos.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements should be inserted into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">A coleção cujos elementos devem ser inseridos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is a reference type.</source>
          <target state="translated">A coleção em si não pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, mas poderá conter elementos que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se tipo <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> for um tipo de referência.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>Inserts the elements of a collection into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insere os elementos de uma coleção no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> no índice especificado.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> aceita <ph id="ph2">`null`</ph> como um valor válido para a referência de tipos e permite que os elementos duplicados.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">Se o novo <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (atual <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> mais o tamanho da coleção) será maior <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, a capacidade do <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é aumentado, automaticamente realocando a matriz interna para acomodar os novos elementos, e os elementos existentes são copiados para a nova matriz antes que os novos elementos são adicionados.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, the elements are added to the end of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`index`</ph> é igual a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, os elementos são adicionados ao final da <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The order of the elements in the collection is preserved in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">A ordem dos elementos na coleção é preservada no <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> * </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of elements to be added and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> * </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operação, onde <bpt id="p3">*</bpt>n<ept id="p3">*</ept> é o número de elementos a serem adicionados e <bpt id="p4">*</bpt>m<ept id="p4">*</ept> é <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">O exemplo a seguir demonstra <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> método e vários outros métodos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe que atuam em intervalos.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</source>
          <target state="translated">Depois que a lista foi criada e preenchida com os nomes dos vários tranquilo destruidores de fábrica dinossauros, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> método é usado para inserir uma matriz de três dinossauros um Feroz comer a parte mais importante na lista, começando no local de índice 3.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">O índice com base em zero do elemento a ser obtido ou definido.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">Obtém ou define o elemento no índice especificado.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">O elemento no índice especificado.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> aceita <ph id="ph2">`null`</ph> como um valor válido para a referência de tipos e permite que os elementos duplicados.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: <ph id="ph1">`myCollection[index]`</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">Recuperar o valor dessa propriedade é uma operação de (1); definindo a propriedade também é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The example in this section demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#) and various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">O exemplo nesta seção demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade (indexador em c#) e várias outras propriedades e métodos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>After the list has been created and populated using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method, an element is retrieved and displayed using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">Depois que a lista foi criada e preenchida usando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> método, um elemento é recuperado e exibido usando o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>(For an example that uses the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property to set the value of a list element, see <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>.)</source>
          <target state="translated">(Para obter um exemplo que usa o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade para definir o valor de um elemento da lista, consulte <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Visual Basic, C#, and C++ all have syntax for accessing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property without using its name.</source>
          <target state="translated">Visual Basic, c# e C++ todos têm sintaxe para acessar o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade sem usar seu nome.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Instead, the variable containing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is used as if it were an array.</source>
          <target state="translated">Em vez disso, a variável que contém o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é usado como se fosse uma matriz.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é igual a ou maior que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Returns the zero-based index of the last occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or in a portion of it.</source>
          <target state="translated">Retorna o índice baseado em zero da última ocorrência de um valor no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou em uma parte dele.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da última ocorrência de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> em todo o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, se encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisado para trás, começando no último elemento e terminando no primeiro elemento.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, com uma entrada que aparece duas vezes no local de índice 0 e o local de índice 5.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> sobrecarga do método de pesquisa a lista inteira do final e localiza a segunda ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar a lista de versões anteriores, começando com o local de índice 3 e continuando até o início da lista, para que ele localiza a primeira ocorrência da cadeia de caracteres na lista.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar um intervalo de quatro entradas, começando no local de índice 4 e estendendo para trás (ou seja, ele procura os itens nos locais 4, 3, 2 e 1); a pesquisa retorna -1 porque não há nenhuma instância da pesquisa cadeia de caracteres nesse intervalo.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa inversa.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated">Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos em <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que se estende do primeiro elemento ao índice especificado.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to <ph id="ph3">&lt;paramref name="index" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da última ocorrência de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> dentro do intervalo de elementos em <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que se estende do primeiro elemento a <ph id="ph3">&lt;paramref name="index" /&gt;</ph>, se encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`index`</ph> and ending at the first element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisada começando com versões anteriores em <ph id="ph2">`index`</ph> e terminando no primeiro elemento.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id="ph2">`index`</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o número de elementos desde o início do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> para <ph id="ph2">`index`</ph>.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, com uma entrada que aparece duas vezes no local de índice 0 e o local de índice 5.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> sobrecarga do método de pesquisa a lista inteira do final e localiza a segunda ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar a lista de versões anteriores, começando com o local de índice 3 e continuando até o início da lista, para que ele localiza a primeira ocorrência da cadeia de caracteres na lista.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar um intervalo de quatro entradas, começando no local de índice 4 e estendendo para trás (ou seja, ele procura os itens nos locais 4, 3, 2 e 1); a pesquisa retorna -1 porque não há nenhuma instância da pesquisa cadeia de caracteres nesse intervalo.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">O índice inicial com base em zero da pesquisa inversa.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">O número de elementos na seção a ser pesquisada.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que contém o número de elementos especificado e termina no índice especificado.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains <ph id="ph3">&lt;paramref name="count" /&gt;</ph> number of elements and ends at <ph id="ph4">&lt;paramref name="index" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">O índice baseado em zero da última ocorrência de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> dentro do intervalo de elementos no <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que contém a <ph id="ph3">&lt;paramref name="count" /&gt;</ph> de número de elementos e termina no <ph id="ph4">&lt;paramref name="index" /&gt;</ph>, se encontrado; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`index`</ph> and ending at <ph id="ph3">`index`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> é pesquisada começando com versões anteriores em <ph id="ph2">`index`</ph> e final em <ph id="ph3">`index`</ph> menos <ph id="ph4">`count`</ph> mais 1, se <ph id="ph5">`count`</ph> for maior que 0.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra todos os três sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, com uma entrada que aparece duas vezes no local de índice 0 e o local de índice 5.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> sobrecarga do método de pesquisa a lista inteira do final e localiza a segunda ocorrência da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar a lista de versões anteriores, começando com o local de índice 3 e continuando até o início da lista, para que ele localiza a primeira ocorrência da cadeia de caracteres na lista.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método é usada para pesquisar um intervalo de 4 entradas, começando no local de índice 4 e estendendo para trás (ou seja, ele procura os itens nos locais 4, 3, 2 e 1); a pesquisa retorna -1 porque não há nenhuma instância da pesquisa cadeia de caracteres nesse intervalo.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> está fora do intervalo de índices válidos para o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não especificam uma seção válida no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a remover do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para tipos de referência.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Remove a primeira ocorrência de um objeto específico do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is successfully removed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="item" /&gt;</ph> for removido com êxito; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> was not found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Esse método também retornará <ph id="ph1">&lt;see langword="false" /&gt;</ph> se <ph id="ph2">&lt;paramref name="item" /&gt;</ph> não tiver sido encontrado no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, the equality comparer is the <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> implementa o <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface genérica, o comparador de igualdade é o <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> método da interface; caso contrário, o comparador de igualdade padrão é <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como adicionar, remover e inserir um objeto de negócios simples em um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The following example demonstrates <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>Several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class are used to add, insert, and search the list.</source>
          <target state="translated">Várias propriedades e métodos para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe genérica são usados para adicionar, insert e a lista de pesquisa.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>After these operations, the list contains a duplicate.</source>
          <target state="translated">Depois que essas operações, a lista contém uma duplicata.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method is used to remove the first instance of the duplicate item, and the contents are displayed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> método é usado para remover a primeira instância do item duplicado e o conteúdo é exibido.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method always removes the first instance it encounters.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> método sempre remove a primeira instância que encontrar.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to remove.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições dos elementos a serem removidos.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>Removes all the elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The number of elements removed from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> .</source>
          <target state="translated">O número de elementos removidos de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are removed from the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado e os elementos que correspondem às condições são removidos do <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method and several other methods that use the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> método e vários outros métodos que usam o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado genérico.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, que contém nomes de dinossauro 8, dois deles (em posições 1 e 5) terminam com "saurus".</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">O exemplo também define um método de predicado de pesquisa denominado <ph id="ph1">`EndsWithSaurus`</ph>, que aceita um parâmetro de cadeia de caracteres e retorna um valor booleano um valor que indica se a cadeia de caracteres de entrada termina em "saurus".</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> methods are used to search the list with the search predicate method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> métodos são usados para a lista de pesquisa com o método de predicado de pesquisa.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method is used to remove all entries ending with "saurus".</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> método é usado para remover todas as entradas que terminam com "saurus".</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>It traverses the list from the beginning, passing each element in turn to the <ph id="ph1">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">Ele percorre a lista desde o início, passando a cada elemento sucessivamente para o <ph id="ph1">`EndsWithSaurus`</ph> método.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The element is removed if the <ph id="ph1">`EndsWithSaurus`</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">O elemento seja removido se a <ph id="ph1">`EndsWithSaurus`</ph> método retornará <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">No C# e no Visual Basic, não é necessário criar o representante <ph id="ph1">`Predicate&lt;string&gt;`</ph> (<ph id="ph2">`Predicate(Of String)`</ph> no Visual Basic) explicitamente.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context, and create it automatically.</source>
          <target state="translated">Essas linguagens inferir o representante correto do contexto e criá-lo automaticamente.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method verifies that there are no strings in the list that end with "saurus".</source>
          <target state="translated">Por fim, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> método verifica se não há nenhum cadeias de caracteres na lista que terminam com "saurus".</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">O índice de base zero do elemento a ser removido.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Remove o elemento no índice especificado do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>When you call <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> to remove an item, the remaining items in the list are renumbered to replace the removed item.</source>
          <target state="translated">Quando você chama <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> para remover um item, os itens restantes na lista são renumerados para substituir o item removido.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</source>
          <target state="translated">Por exemplo, se você remover o item no índice 3, o item no índice 4 é movido para a posição de 3.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>In addition, the number of items in the list (as represented by the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property) is reduced by 1.</source>
          <target state="translated">Além disso, o número de itens na lista (conforme representado pelo <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedade) é reduzida em 1.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is (<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">`index`</ph>).</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é (<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">`index`</ph>).</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como adicionar, remover e inserir um objeto de negócios simples em um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é igual a ou maior que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range of elements to remove.</source>
          <target state="translated">O índice inicial baseado em zero do intervalo de elementos a serem removidos.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The number of elements to remove.</source>
          <target state="translated">O número de elementos a serem removidos.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>Removes a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Remove um intervalo de elementos do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The items are removed and all the elements following them in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> have their indexes reduced by <ph id="ph2">`count`</ph>.</source>
          <target state="translated">Os itens serão removidos e todos os elementos a seguir no <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ter seus índices reduzidas <ph id="ph2">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> método e vários outros métodos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe que atuam em intervalos.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>After the list has been created and modified, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> method is used to remove two elements from the list, beginning at index location 2.</source>
          <target state="translated">Depois que a lista foi criada e modificada, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> método é usado para remover os dois elementos da lista, começando no local do índice 2.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não denotam um intervalo válido de elementos no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Reverses the order of the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Inverte a ordem dos elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> em uma parte dele.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>Reverses the order of the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Inverte a ordem dos elementos em todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements.</source>
          <target state="translated">Esse método usa <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> para inverter a ordem dos elementos.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The following example demonstrates both overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra as duas sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings and adds six strings.</source>
          <target state="translated">O exemplo cria um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres e adiciona seis cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> method overload is used to reverse the list, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> sobrecarga do método usada para reverter a lista e, em seguida, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método usada para reverter o meio da lista, começando com o elemento 1 e abrangendo quatro elementos.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range to reverse.</source>
          <target state="translated">O índice inicial baseado em zero do intervalo a ser revertido.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The number of elements in the range to reverse.</source>
          <target state="translated">O número de elementos no intervalo a serem revertidos.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>Reverses the order of the elements in the specified range.</source>
          <target state="translated">Inverte a ordem dos elementos no intervalo especificado.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements.</source>
          <target state="translated">Esse método usa <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> para inverter a ordem dos elementos.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The following example demonstrates both overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra as duas sobrecargas do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings and adds six strings.</source>
          <target state="translated">O exemplo cria um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres e adiciona seis cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> method overload is used to reverse the list, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> sobrecarga do método usada para reverter a lista e, em seguida, o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> sobrecarga do método usada para reverter o meio da lista, começando com o elemento 1 e abrangendo quatro elementos.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não denotam um intervalo válido de elementos no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Sorts the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Classifica os elementos no <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou parte dele.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Overloaded method syntax</source>
          <target state="translated">Sintaxe de método sobrecarregada</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> métodos permitem que você classifique com o comparador padrão para o tipo de objeto na lista ou especifique um método de classificação do cliente.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort()<ept id="p1">](xref:System.Collections.Generic.List`1.Sort*)</ept> Sorts the elements in the entire list using the default comparer of the object type held in the list.</source>
          <target state="translated"><bpt id="p1">[</bpt>Lista<ph id="ph1">\&lt;</ph>T &gt;. Sort<ept id="p1">](xref:System.Collections.Generic.List`1.Sort*)</ept> classifica os elementos em toda a lista usando o comparador padrão do tipo de objeto são mantidos na lista.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort M(Comparison<ph id="ph2">\&lt;</ph>T&gt; comparison)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)</ept> Sorts the elements in the entire list using the specified comparer.</source>
          <target state="translated"><bpt id="p1">[</bpt>Lista<ph id="ph1">\&lt;</ph>T &gt;. Classificação M (comparação<ph id="ph2">\&lt;</ph>T &gt; comparação)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)</ept> classifica os elementos em toda a lista usando o comparador especificado.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in the entire list using the specified <ph id="ph3">&lt;xref:System.Comparison%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Lista<ph id="ph1">\&lt;</ph>T &gt;. Classificar (IComparer<ph id="ph2">\&lt;</ph>T &gt; comparador)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)</ept> classifica os elementos na lista de inteiros usando especificado <ph id="ph3">&lt;xref:System.Comparison%601?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(Int32 index, Int32 count, IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in a range of elements in list using the specified comparer.</source>
          <target state="translated"><bpt id="p1">[</bpt>Lista<ph id="ph1">\&lt;</ph>T &gt;. Classificar (índice de Int32, contagem de Int32 IComparer<ph id="ph2">\&lt;</ph>T &gt; comparador)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)</ept> classifica os elementos em um intervalo de elementos na lista usando o comparador especificado.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Parameters</source>
          <target state="translated">Parâmetros</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Parameter</source>
          <target state="translated">Parâmetro</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Type</source>
          <target state="translated">Tipo</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The delegate method to use when comparing elements</source>
          <target state="translated">O método delegado para uso na comparação entre elementos</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>comparer</source>
          <target state="translated">comparador</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use when comparing elements, or null to use the default comparer <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação para usar ao comparar os elementos, ou null para usar o comparador padrão <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">O índice inicial baseado em zero do intervalo a ser classificado.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The length of the range to sort.</source>
          <target state="translated">O tamanho do intervalo a ser classificado.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Exceptions</source>
          <target state="translated">Exceções</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Exception</source>
          <target state="translated">Exceção</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Condition</source>
          <target state="translated">Condição</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`comparer`</ph> is not specified or <ph id="ph2">`null`</ph>, and the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> generic interface or the <ph id="ph5">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph> interface for type T.</source>
          <target state="translated"><ph id="ph1">`comparer`</ph> não foi especificado ou <ph id="ph2">`null`</ph>e o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> não é possível encontrar a implementação do <ph id="ph4">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> interface genérica ou <ph id="ph5">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph> interface para o tipo T.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`comparison`</ph> is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`comparison`</ph> é <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The implementation of <ph id="ph1">`comparison`</ph> or <ph id="ph2">`comparer`</ph> caused an error during the sort.</source>
          <target state="translated">A implementação de <ph id="ph1">`comparison`</ph> ou <ph id="ph2">`comparer`</ph> causou um erro durante a classificação.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For example, <ph id="ph1">`comparison`</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`comparison`</ph> não pode retornar 0 ao comparar um item com ele próprio.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`index`</ph> and <ph id="ph2">`count`</ph> do not specify a valid range in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`index`</ph> e <ph id="ph2">`count`</ph> não especificam um intervalo válido no <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`index`</ph> is less than 0 or <ph id="ph2">`count`</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">`index`</ph> é menor que 0 ou <ph id="ph2">`count`</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the default comparer.</source>
          <target state="translated">Classifica os elementos em todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> usando o comparador padrão.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This method uses the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for type <ph id="ph2">`T`</ph> to determine the order of list elements.</source>
          <target state="translated">Esse método usa o comparador padrão <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para tipo <ph id="ph2">`T`</ph> para determinar a ordem dos elementos da lista.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> property checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verificações de propriedade se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e usa essa implementação, se disponível.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> não implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lança um <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method, which applies the introspective sort as follows:</source>
          <target state="translated">Esse método usa o <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> método, que se aplica a classificação introspectiva da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</source>
          <target state="translated">Se o tamanho da partição é menos do que 16 elementos, ele usa um algoritmo de classificação de inserção.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a Heapsort algorithm.</source>
          <target state="translated">Se o número de partições exceder 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o intervalo da matriz de entrada, ele usa um algoritmo de Heapsort.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Caso contrário, ele usa um algoritmo Quicksort.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Esta implementação realiza uma classificação instável; ou seja, se dois elementos são iguais, a ordem não deve ser preservada.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">Por outro lado, uma classificação estável preserva a ordem de elementos iguais.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">Em média, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operação, onde <bpt id="p3">*</bpt>n<ept id="p3">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; no pior caso é um O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operação.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following example adds some names to a <ph id="ph1">`List&lt;String&gt;`</ph> object, displays the list in unsorted order, calls the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method, and then displays the sorted list.</source>
          <target state="translated">O exemplo a seguir adiciona alguns nomes para um <ph id="ph1">`List&lt;String&gt;`</ph> objeto, exibe a lista em ordem não classificado, chama o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> método e, em seguida, exibe a lista classificada.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following code demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method overloads on a simple business object.</source>
          <target state="translated">O código a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> sobrecargas de método em um objeto de negócios simples.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method results in the use of the default comparer for the Part type, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method is implemented by using an anonymous method.</source>
          <target state="translated">Chamando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> método resulta no uso do comparador padrão para o tipo de parte e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> método é implementado usando um método anônimo.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> sobrecarga de método e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com quatro cadeias de caracteres, em nenhuma ordem específica.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The list is displayed, sorted, and displayed again.</source>
          <target state="translated">A lista é exibida, classificada e exibida novamente.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload is then used to search for two strings that are not in the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert them.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> sobrecarga do método é usada para procurar por duas cadeias de caracteres que não estão na lista, e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método é usado para inseri-los.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The return value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> method is negative in each case, because the strings are not in the list.</source>
          <target state="translated">O valor de retorno de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> método for negativo em cada caso, porque as cadeias de caracteres não estão na lista.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Taking the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</source>
          <target state="translated">Levando o complemento bit a bit (o ~ operador em c# e Visual C++, <ph id="ph1">`Xor`</ph> -1 no Visual Basic) disso produz número negativo o índice do primeiro elemento na lista que é maior do que a cadeia de caracteres de pesquisa e inserção neste local preserva a classificação ordem.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The second search string is larger than any element in the list, so the insertion position is at the end of the list.</source>
          <target state="translated">A segunda cadeia de caracteres de pesquisa é maior que qualquer elemento na lista, portanto, é a posição de inserção no final da lista.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The default comparer <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">O comparador padrão <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> não consegue encontrar uma implementação da interface genérica <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou a interface <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> para o tipo <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">A implementação <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> a ser usada na comparação de elementos ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> para usar o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">Classifica os elementos em todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> usando o comparador especificado.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> for fornecido, os elementos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> são classificados usando especificado <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph4">`T`</ph> implementa o <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e usa essa implementação, se disponível.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> não implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lança um <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method, which applies the introspective sort as follows:</source>
          <target state="translated">Esse método usa o <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> método, que se aplica a classificação introspectiva da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</source>
          <target state="translated">Se o tamanho da partição é menos do que 16 elementos, ele usa um algoritmo de classificação de inserção.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a Heapsort algorithm.</source>
          <target state="translated">Se o número de partições exceder 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o intervalo da matriz de entrada, ele usa um algoritmo de Heapsort.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Caso contrário, ele usa um algoritmo Quicksort.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Esta implementação realiza uma classificação instável; ou seja, se dois elementos são iguais, a ordem não deve ser preservada.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">Por outro lado, uma classificação estável preserva a ordem de elementos iguais.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">Em média, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operação, onde <bpt id="p3">*</bpt>n<ept id="p3">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; no pior caso é um O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operação.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga de método e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">O exemplo define um comparador alternativo para cadeias de caracteres chamado DinoCompare, que implementa o <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> no Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> no Visual C++) interface genérica.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">O comparador funciona da seguinte maneira: primeiro, os termos de comparação são testados para <ph id="ph1">`null`</ph>, e uma referência nula é tratada como menor que não null.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">Segundo, os comprimentos de cadeia de caracteres são comparados, e a cadeia de caracteres mais longa é considerada maior.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Em terceiro lugar, se os tamanhos forem iguais, a comparação de cadeia de caracteres comum é usada.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com quatro cadeias de caracteres, em nenhuma ordem específica.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, sorted using the alternate comparer, and displayed again.</source>
          <target state="translated">A lista é exibida, classificado usando o comparador alternativo e exibida novamente.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método é usada para pesquisar várias cadeias de caracteres que não estão na lista, usamos o comparador alternativo.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert the strings.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> método é usado para inserir as cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>These two methods are located in the function named <ph id="ph1">`SearchAndInsert`</ph>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph2">`Xor`</ph> -1 in Visual Basic) of the negative number returned by <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> and use it as an index for inserting the new string.</source>
          <target state="translated">Esses dois métodos estão localizados na função nomeada <ph id="ph1">`SearchAndInsert`</ph>, junto com o código para levar o complemento bit a bit (o ~ operador em c# e Visual C++, <ph id="ph2">`Xor`</ph> -1 no Visual Basic) do número negativo retornado por <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> e usá-lo como um índice para Inserir nova cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>, e o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> não pode encontrar a implementação da interface genérica <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou da interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> para o tipo <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated">A implementação de <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> causou um erro durante a classificação.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> não pode retornar 0 ao comparar um item com ele próprio.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Comparison`1" /&gt;</ph> to use when comparing elements.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Comparison`1" /&gt;</ph> a ser usado na comparação de elementos.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Comparison`1" /&gt;</ph>.</source>
          <target state="translated">Classifica os elementos em todo o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> usando o <ph id="ph2">&lt;see cref="T:System.Comparison`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If <ph id="ph1">`comparison`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the method represented by the delegate.</source>
          <target state="translated">Se <ph id="ph1">`comparison`</ph> for fornecido, os elementos de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> são classificados usando o método representado pelo delegado.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If <ph id="ph1">`comparison`</ph> is <ph id="ph2">`null`</ph>, an <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.</source>
          <target state="translated">Se <ph id="ph1">`comparison`</ph> é <ph id="ph2">`null`</ph>, uma <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which applies the introspective sort as follows:</source>
          <target state="translated">Esse método usa <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, que se aplica a classificação introspectiva da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</source>
          <target state="translated">Se o tamanho da partição é menos do que 16 elementos, ele usa um algoritmo de classificação de inserção</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a <bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.</source>
          <target state="translated">Se o número de partições exceder 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o intervalo da matriz de entrada, ele usa um <bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept> algoritmo.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Caso contrário, ele usa um algoritmo Quicksort.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Esta implementação realiza uma classificação instável; ou seja, se dois elementos são iguais, a ordem não deve ser preservada.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">Por outro lado, uma classificação estável preserva a ordem de elementos iguais.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">Em média, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operação, onde <bpt id="p3">*</bpt>n<ept id="p3">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; no pior caso é um O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operação.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The following code demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method overloads on a simple business object.</source>
          <target state="translated">O código a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> sobrecargas de método em um objeto de negócios simples.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method results in the use of the default comparer for the Part type, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method is implemented using an anonymous method.</source>
          <target state="translated">Chamando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> método resulta no uso do comparador padrão para o tipo de parte e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> método é implementado usando um método anônimo.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The example defines an alternative comparison method for strings, named <ph id="ph1">`CompareDinosByLength`</ph>.</source>
          <target state="translated">O exemplo define um método alternativo de comparação para cadeias de caracteres, denominado <ph id="ph1">`CompareDinosByLength`</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This method works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">Esse método funciona da seguinte maneira: primeiro, os termos de comparação são testados para <ph id="ph1">`null`</ph>, e uma referência nula é tratada como menor que não null.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">Segundo, os comprimentos de cadeia de caracteres são comparados, e a cadeia de caracteres mais longa é considerada maior.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Em terceiro lugar, se os tamanhos forem iguais, a comparação de cadeia de caracteres comum é usada.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com quatro cadeias de caracteres, em nenhuma ordem específica.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The list also includes an empty string and a null reference.</source>
          <target state="translated">A lista também inclui uma cadeia de caracteres vazia e uma referência nula.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The list is displayed, sorted using a <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> generic delegate representing the <ph id="ph2">`CompareDinosByLength`</ph> method, and displayed again.</source>
          <target state="translated">A lista é exibida, classificados usando um <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> delegado genérico que representa o <ph id="ph2">`CompareDinosByLength`</ph> método e exibida novamente.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated">A implementação de <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> causou um erro durante a classificação.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> não pode retornar 0 ao comparar um item com ele próprio.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">O índice inicial baseado em zero do intervalo a ser classificado.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The length of the range to sort.</source>
          <target state="translated">O tamanho do intervalo a ser classificado.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">A implementação <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> a ser usada na comparação de elementos ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> para usar o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Sorts the elements in a range of elements in <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">Classifica os elementos em um intervalo de elementos em <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> usando o comparador especificado.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> for fornecido, os elementos do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> são classificados usando especificado <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph4">`T`</ph> implementa o <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface genérica e usa essa implementação, se disponível.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> verifica se tipo <ph id="ph2">`T`</ph> implementa o <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se tipo <ph id="ph1">`T`</ph> não implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lança um <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which applies the introspective sort as follows:</source>
          <target state="translated">Esse método usa <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, que se aplica a classificação introspectiva da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</source>
          <target state="translated">Se o tamanho da partição é menos do que 16 elementos, ele usa um algoritmo de classificação de inserção</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a <bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.</source>
          <target state="translated">Se o número de partições exceder 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é o intervalo da matriz de entrada, ele usa um <bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept> algoritmo.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Caso contrário, ele usa um algoritmo Quicksort.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Esta implementação realiza uma classificação instável; ou seja, se dois elementos são iguais, a ordem não deve ser preservada.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">Por outro lado, uma classificação estável preserva a ordem de elementos iguais.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">Em média, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operação, onde <bpt id="p3">*</bpt>n<ept id="p3">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; no pior caso é um O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operação.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga de método e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">O exemplo define um comparador alternativo para cadeias de caracteres chamado DinoCompare, que implementa o <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> no Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> no Visual C++) interface genérica.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">O comparador funciona da seguinte maneira: primeiro, os termos de comparação são testados para <ph id="ph1">`null`</ph>, e uma referência nula é tratada como menor que não null.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">Segundo, os comprimentos de cadeia de caracteres são comparados, e a cadeia de caracteres mais longa é considerada maior.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Em terceiro lugar, se os tamanhos forem iguais, a comparação de cadeia de caracteres comum é usada.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criada e preenchida com os nomes de cinco dinossauros herbivorous e três dinossauros carnivorous.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Within each of the two groups, the names are not in any particular sort order.</source>
          <target state="translated">Em cada um dos dois grupos, os nomes não estão em qualquer ordem de classificação específico.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</source>
          <target state="translated">A lista é exibida, o intervalo de herbivores é classificado usando o comparador alternativo e a lista é exibida novamente.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search only the range of herbivores for "Brachiosaurus".</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> sobrecarga do método é usada para pesquisar somente o intervalo de herbivores "Brachiosaurus".</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of the negative number returned by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method is used as an index for inserting the new string.</source>
          <target state="translated">A cadeia de caracteres não for encontrada e o complemento bit a bit (o ~ operador em c# e Visual C++, <ph id="ph1">`Xor`</ph> -1 no Visual Basic) do número negativo retornado pelo <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> método é usado como um índice para inserir a nova cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> não especificam um intervalo válido no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated">A implementação de <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> causou um erro durante a classificação.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> não pode retornar 0 ao comparar um item com ele próprio.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>, e o comparador padrão <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> não pode encontrar a implementação da interface genérica <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou da interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> para o tipo <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtém um valor que indica se o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> for somente leitura; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Na implementação padrão de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, essa propriedade sempre retorna <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Uma coleção que seja somente leitura não permite a adição, a remoção ou a modificação de elementos após a coleção ser criada.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Uma coleção somente leitura é apenas uma coleção com um wrapper que impede a modificação da coleção; por isso, caso as alterações sejam feitas na coleção subjacente, a coleção somente leitura reflete as alterações.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retorna um enumerador que itera em uma coleção.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> que pode ser usado para iterar pela coleção.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">A instrução <ph id="ph1">`foreach`</ph> da linguagem C# (<ph id="ph2">`for each`</ph> no C++, <ph id="ph3">`For Each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">Nesta posição, o <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> propriedade está definida.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar o método <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> propriedade retorna o mesmo objeto até <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> é chamado.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Caso a última chamada para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> tenha retornado <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Não é possível definir <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente; você deve criar uma nova instância de enumerador em vez disso.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">As implementações padrão de coleções no namespace <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> não são sincronizadas.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copia os elementos do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> para um <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, começando em um determinado índice <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the nongeneric implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Se o tipo da fonte de <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> não pode ser convertido automaticamente para o tipo de destino <ph id="ph2">`array`</ph>, as implementações não genéricas de <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> gerar <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, enquanto as implementações genéricas lançam <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é multidimensional.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="array" /&gt;</ph> não tem indexação baseada em zero.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O número de elementos na origem <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> é maior do que o espaço disponível de <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> até o final do <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O tipo do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origem não pode ser automaticamente convertido para o tipo de <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtém um valor que indica se o acesso à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> é sincronizado (thread-safe).</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso o acesso ao <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> seja sincronizado (thread-safe); do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Na implementação padrão de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, essa propriedade sempre retorna <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">As implementações padrão de coleções no namespace <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> não são sincronizadas.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Em casos raros em que a enumeração afirma com acessos de gravação, você pode bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Retorna um objeto que pode ser usado para sincronizar o acesso a <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">A sincronização é eficaz somente se todos os threads bloquear este objeto antes de acessar a coleção.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtém um objeto que pode ser usado para sincronizar o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Um objeto que pode ser usado para sincronizar o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">Na implementação padrão da <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, essa propriedade sempre retorna a instância atual.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">As implementações padrão de coleções no namespace <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> não são sincronizadas.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Retorna um objeto que pode ser usado para sincronizar o acesso a <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">A sincronização é eficaz somente se todos os threads bloquear este objeto antes de acessar a coleção.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">O código a seguir mostra o uso do <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propriedade para c#, C++ e Visual Basic.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retorna um enumerador que itera em uma coleção.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que pode ser usado para iterar pela coleção.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">A instrução <ph id="ph1">`foreach`</ph> da linguagem C# (<ph id="ph2">`for each`</ph> no C++, <ph id="ph3">`For Each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> também traz o enumerador de volta para essa posição.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">Nesta posição, o <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriedade está definida.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar o método <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriedade retorna o mesmo objeto até que o <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> é chamado.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Caso a última chamada para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> tenha retornado <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para definir <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente, é possível chamar <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> seguido de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">As implementações padrão de coleções no namespace <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> não são sincronizadas.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> para adicionar ao <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Adiciona um item ao <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">A posição na qual o novo elemento foi inserido.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> é menor que <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, esse método é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Se a capacidade precisa ser aumentado para acomodar o novo elemento, esse método se torna um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="item" /&gt;</ph> é de um tipo que não é atribuível à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser localizado no <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> contains a specific value.</source>
          <target state="translated">Determinará se o <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> contiver um valor específico.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="item" /&gt;</ph> for encontrado no <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Determina o índice de um item específico em <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> if found in the list; otherwise, –1.</source>
          <target state="translated">O índice de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> se encontrado na lista; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="item" /&gt;</ph> é de um tipo que não é atribuível à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">O índice baseado em zero no qual o <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> deve ser inserido.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The object to insert into the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser inserido no <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insere um item na <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> no índice especificado.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, then <ph id="ph3">`item`</ph> is appended to the end.</source>
          <target state="translated">Se <ph id="ph1">`index`</ph> é igual ao número de itens no <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, em seguida, <ph id="ph3">`item`</ph> é acrescentado ao final.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> não é um índice válido no <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="item" /&gt;</ph> é de um tipo que não é atribuível à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size.</source>
          <target state="translated">Obtém um valor que indica se o <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> tem um tamanho fixo.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> tiver um valor fixo; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Na implementação padrão de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, essa propriedade sempre retorna <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">Uma coleção com um tamanho fixo não permite a adição ou a remoção de elementos após a coleção ser criada, mas permite a modificação de elementos existentes.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e a remoção de elementos; por isso, caso as alterações sejam feitas na coleção subjacente, inclusive a adição ou a remoção de elementos, a coleção de tamanho fixo reflete essas alterações.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtém um valor que indica se o <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> for somente leitura; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Na implementação padrão de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, essa propriedade sempre retorna <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Uma coleção que seja somente leitura não permite a adição, a remoção ou a modificação de elementos após a coleção ser criada.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Uma coleção somente leitura é apenas uma coleção com um wrapper que impede a modificação da coleção; por isso, caso as alterações sejam feitas na coleção subjacente, a coleção somente leitura reflete as alterações.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">O índice com base em zero do elemento a ser obtido ou definido.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">Obtém ou define o elemento no índice especificado.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">O elemento no índice especificado.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> property.</source>
          <target state="translated">A linguagem c# usa o <bpt id="p1">[</bpt>isso<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> palavra-chave para definir os indexadores em vez de implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">Recuperar o valor dessa propriedade é uma operação de (1); definindo a propriedade também é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> não é um índice válido no <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The property is set and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">A propriedade é definida e <ph id="ph1">&lt;paramref name="value" /&gt;</ph> é de um tipo que não é atribuível ao <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O objeto a remover do <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Remove a primeira ocorrência de um objeto específico do <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina a igualdade usando o comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, o tipo de valores na lista.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método executa uma pesquisa linear; Portanto, esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="item" /&gt;</ph> é de um tipo que não é atribuível à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Copia os elementos do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> em uma nova matriz.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>An array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Uma matriz que contém cópias dos elementos do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The elements are copied using <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, which is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados usando <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, que é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method and other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> método e outros métodos para o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe que atuam em intervalos.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>At the end of the example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method is used to get three items from the list, beginning with index location 2.</source>
          <target state="translated">No final do exemplo, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> método é usado para obter três itens na lista, começando com o local do índice 2.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method is called on the resulting <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, creating an array of three elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> método é chamado em resultante <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, criando uma matriz de três elementos.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The elements of the array are displayed.</source>
          <target state="translated">Os elementos da matriz são exibidos.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if that number is less than a threshold value.</source>
          <target state="translated">Define a capacidade para o número real de elementos de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, se esse número for menor que um valor limite.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Esse método pode ser usado para minimizar a memória da coleção sobrecarga se nenhum elemento novo será adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">O custo de realocar e copiar uma grande <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> pode ser considerável, no entanto, para que o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método não fará nada se a lista estiver em mais de 90% da capacidade.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Isso evita a incorrer em um custo de realocação grande para um ganho relativamente pequeno.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The current threshold of 90 percent might change in future releases.</source>
          <target state="translated">O limite atual de 90 por cento pode mudar em versões futuras.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method before calling the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Para redefinir um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> para seu estado inicial, chame o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> método antes de chamar o <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Cortar vazio <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> define a capacidade do <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à capacidade padrão.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The capacity can also be set using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">A capacidade também pode ser definida usando o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The following example demonstrates how to check the capacity and count of a  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">O exemplo a seguir demonstra como verificar a capacidade e a contagem de um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém um objeto de negócios simples e ilustra o uso de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método para remover uma capacidade extra.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class are used to add, insert, and remove items from a list of strings.</source>
          <target state="translated">Várias propriedades e métodos para o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe são usados para adicionar, inserir e remover itens de uma lista de cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Then the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Em seguida, o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> método é usado para reduzir a capacidade de corresponder à contagem e o <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriedades são exibidas.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</source>
          <target state="translated">Se a capacidade não utilizada tivesse sido menos de 10% da capacidade total, a lista seria não foram redimensionada.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Finally, the contents of the list are cleared.</source>
          <target state="translated">Por fim, o conteúdo da lista é desmarcado.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions to check against the elements.</source>
          <target state="translated">O delegado <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> que define as condições a serem verificadas nos elementos.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>Determines whether every element in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> matches the conditions defined by the specified predicate.</source>
          <target state="translated">Determina se cada elemento do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> corresponde às condições definidas pelo predicado especificado.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> matches the conditions defined by the specified predicate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se cada elemento do <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> corresponder às condições definidas pelo predicado especificado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>If the list has no elements, the return value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Se a lista não tiver elementos, o valor retornado será <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> é um representante para um método que retorna <ph id="ph2">`true`</ph> caso o objeto passado para ele corresponda às condições definidas no representante.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when the delegate returns <ph id="ph3">`false`</ph> for any element.</source>
          <target state="translated">Os elementos da atual <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> individualmente são passados para o <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado e o processamento é interrompido quando o delegado retorna <ph id="ph3">`false`</ph> para qualquer elemento.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The elements are processed in order, and all calls are made on a single thread.</source>
          <target state="translated">Os elementos são processados em ordem, e todas as chamadas são feitas em um único thread.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operação, onde <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> method and several other methods that use <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> método e vários outros métodos que usam <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegado genérico.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de cadeias de caracteres é criado, que contém nomes de dinossauro 8, dois deles (em posições 1 e 5) terminam com "saurus".</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">O exemplo também define um método de predicado de pesquisa denominado <ph id="ph1">`EndsWithSaurus`</ph>, que aceita um parâmetro de cadeia de caracteres e retorna um valor booleano um valor que indica se a cadeia de caracteres de entrada termina em "saurus".</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> method traverses the list from the beginning, passing each element in turn to the <ph id="ph2">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> método percorre a lista desde o início, passando a cada elemento sucessivamente para o <ph id="ph2">`EndsWithSaurus`</ph> método.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The search stops when the <ph id="ph1">`EndsWithSaurus`</ph> method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">A pesquisa é interrompida quando o <ph id="ph1">`EndsWithSaurus`</ph> método retornará <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">No C# e no Visual Basic, não é necessário criar o representante <ph id="ph1">`Predicate&lt;string&gt;`</ph> (<ph id="ph2">`Predicate(Of String)`</ph> no Visual Basic) explicitamente.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context and create it automatically.</source>
          <target state="translated">Essas linguagens inferem o representante correto pelo contexto e criam-no automaticamente.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>