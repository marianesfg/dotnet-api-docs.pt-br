<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="KeyedCollection`2.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53375080ab008f35379a851d18f700db732edfd23.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3375080ab008f35379a851d18f700db732edfd23</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The type of keys in the collection.</source>
          <target state="translated">O tipo das chaves da coleção.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The type of items in the collection.</source>
          <target state="translated">O tipo de itens na coleção.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Provides the abstract base class for a collection whose keys are embedded in the values.</source>
          <target state="translated">Fornece a classe base abstrata para uma coleção cujas chaves são incorporadas nos valores.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> classe fornece dois (1) a recuperação indexada e com a chave de recuperação que se aproxima (1).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</source>
          <target state="translated">É um tipo abstrato ou com mais precisão um infinito conjunto de tipos abstratos, porque cada um dos seus tipos genéricos construídos é uma classe base abstrata.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>To use <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, derive your collection type from the appropriate constructed type.</source>
          <target state="translated">Para usar <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, o tipo de coleção é derivado do tipo construído apropriado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is a hybrid between a collection based on the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface and a collection based on the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> classe é um híbrido entre uma coleção com base no <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface genérica e uma coleção com base no <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Like collections based on the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is an indexed list of items.</source>
          <target state="translated">Como as coleções com base no <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface genérica, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> é uma lista indexada de itens.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Like collections based on the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a key associated with each element.</source>
          <target state="translated">Como as coleções com base no <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface genérica, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> tem uma chave associada a cada elemento.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Unlike dictionaries, an element of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</source>
          <target state="translated">Ao contrário de dicionários, um elemento de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> não é um par chave/valor; em vez disso, todo o elemento é o valor e a chave é incorporada dentro do valor.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For example, an element of a collection derived from <ph id="ph1">`KeyedCollection\&lt;String,String&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of String, String)`</ph> in Visual Basic) might be "John Doe Jr."</source>
          <target state="translated">Por exemplo, um elemento de uma coleção derivada de <ph id="ph1">`KeyedCollection\&lt;String,String&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of String, String)`</ph> no Visual Basic) pode ser "John Doe Jr."</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>where the value is "John Doe Jr."</source>
          <target state="translated">onde o valor é "John Doe Jr."</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>and the key is "Doe"; or a collection of employee records containing integer keys could be derived from <ph id="ph1">`KeyedCollection\&lt;int,Employee&gt;`</ph>.</source>
          <target state="translated">e a chave é "Doe"; ou uma coleção de registros de funcionário que contém chaves inteiro pode ser derivada de <ph id="ph1">`KeyedCollection\&lt;int,Employee&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The abstract <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method extracts the key from the element.</source>
          <target state="translated">O resumo <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> método extrai a chave do elemento.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that you can obtain with the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A&gt;</ph> property.</source>
          <target state="translated">Por padrão, o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> inclui um dicionário de pesquisa que você pode obter com o <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">Quando um item é adicionado ao <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, a chave do item será extraída uma vez e salva no dicionário de pesquisa para pesquisas mais rápidas.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This behavior is overridden by specifying a dictionary creation threshold when you create the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">Esse comportamento é substituído pela especificação de um limite de criação do dicionário quando você cria o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The lookup dictionary is created the first time the number of elements exceeds that threshold.</source>
          <target state="translated">O dicionário de pesquisa é criado na primeira vez em que o número de elementos excede esse limite.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>If you specify –1 as the threshold, the lookup dictionary is never created.</source>
          <target state="translated">Se você especificar -1 como o limite, o dicionário de pesquisa nunca será criado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>When the internal lookup dictionary is used, it contains references to all the items in the collection if <ph id="ph1">`TItem`</ph> is a reference type, or copies of all the items in the collection if <ph id="ph2">`TItem`</ph> is a value type.</source>
          <target state="translated">Quando o dicionário de pesquisa interno é usado, ele contém referências a todos os itens na coleção se <ph id="ph1">`TItem`</ph> é um tipo de referência, ou cópias de todos os itens na coleção se <ph id="ph2">`TItem`</ph> é um tipo de valor.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Thus, using the lookup dictionary may not be appropriate if <ph id="ph1">`TItem`</ph> is a value type.</source>
          <target state="translated">Portanto, usando o dicionário de pesquisa pode não ser apropriado se <ph id="ph1">`TItem`</ph> é um tipo de valor.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>You can access an item by its index or key by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Você pode acessar um item por seu índice ou chave usando o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>You can add items without a key, but these items can subsequently be accessed only by index.</source>
          <target state="translated">Você pode adicionar itens sem uma chave, mas esses itens subsequentemente podem ser acessados somente por índice.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This section contains two code examples.</source>
          <target state="translated">Esta seção contém dois exemplos de código.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The first example shows the minimum code required to derive from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and demonstrates many of the inherited methods.</source>
          <target state="translated">O primeiro exemplo mostra o código mínimo necessário para derivar de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>e demonstra muitos dos métodos herdados.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The second example shows how to override the protected methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> to provide custom behavior.</source>
          <target state="translated">O segundo exemplo mostra como substituir os métodos protegidos de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> para fornecer um comportamento personalizado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemplo 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">Este exemplo de código mostra o código mínimo necessário a ser derivado de uma classe de coleção de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: substituindo o método <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> e fornecendo um construtor público que representa um construtor de classe base.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">O exemplo de código também demonstra muitas das propriedades e dos métodos herdados das classes <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated">A classe <ph id="ph1">`SimpleOrder`</ph> é uma lista muito simples de requisição que contém objetos <ph id="ph2">`OrderItem`</ph>, cada um representando um item de linha na ordem.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">A chave de <ph id="ph1">`OrderItem`</ph> é imutável, uma consideração importante para classes que derivam de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemplo 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir os métodos <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para fornecer um comportamento personalizado para os métodos <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> e <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>, além de definir a propriedade <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> padrão (o indexador em C#).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">O comportamento personalizado fornecido neste exemplo é um evento de notificação chamado <ph id="ph1">`Changed`</ph>, gerado ao final de cada um dos métodos substituídos.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">O exemplo de código cria a classe <ph id="ph1">`SimpleOrder`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e representa um formulário de pedido simples.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">O formulário do pedido contém objetos <ph id="ph1">`OrderItem`</ph> representando itens ordenados.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">O exemplo de código também cria uma classe <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> para conter informações do evento, e uma enumeração para identificar o tipo de alteração.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">O exemplo de código demonstra o comportamento personalizado chamando as propriedades e os métodos da classe derivada, no método <ph id="ph1">`Main`</ph> da classe <ph id="ph2">`Demo`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">Este exemplo de código usa objetos com chaves imutáveis.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the default equality comparer.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> que usa o comparador de igualdade padrão.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> criado com esse construtor usa o comparador de igualdade genérico padrão para o tipo de chave, obtido <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>To specify a different generic equality comparer, use the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor or the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">Para especificar um comparador de igualdade genérico diferente, use o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> construtor ou <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">Por padrão, <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> inclui um dicionário de pesquisa, criado quando o primeiro item é adicionado.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">Quando um item é adicionado ao <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, a chave do item será extraída uma vez e salva no dicionário de pesquisa para pesquisas mais rápidas.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">Esse comportamento pode ser substituído usando o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> construtor e especificando um limite de criação do dicionário.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> classe é abstrata (<ph id="ph2">`MustInherit`</ph> no Visual Basic), você deve derivar dele para usá-lo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">No construtor para o tipo derivado, chame o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">Não é necessário para expor a funcionalidade como o comparador de igualdade ou o limite de criação do dicionário em seus construtores.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este construtor é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">Este exemplo de código mostra o código mínimo necessário a ser derivado de uma classe de coleção de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: substituindo o método <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> e fornecendo um construtor público que representa um construtor de classe base.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">O exemplo de código também demonstra muitas das propriedades e dos métodos herdados das classes <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated">A classe <ph id="ph1">`SimpleOrder`</ph> é uma lista muito simples de requisição que contém objetos <ph id="ph2">`OrderItem`</ph>, cada um representando um item de linha na ordem.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">A chave de <ph id="ph1">`OrderItem`</ph> é imutável, uma consideração importante para classes que derivam de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default equality comparer for the type of the key, obtained from <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">A implementação da interface genérica <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para uso na comparação de chaves ou para <ph id="ph2">&lt;see langword="null" /&gt;</ph> usar o comparador de igualdade padrão para o tipo da chave, obtido em <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the specified equality comparer.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> que usa o comparador de igualdade especificado.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">Por padrão, <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> inclui um dicionário de pesquisa, criado quando o primeiro item é adicionado.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">Quando um item é adicionado ao <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, a chave do item será extraída uma vez e salva no dicionário de pesquisa para pesquisas mais rápidas.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">Esse comportamento pode ser substituído usando o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> construtor e especificando um limite de criação do dicionário.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> classe é abstrata (<ph id="ph2">`MustInherit`</ph> no Visual Basic), você deve derivar dele para usá-lo.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">No construtor para o tipo derivado, chame o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">Não é necessário para expor a funcionalidade como o comparador de igualdade ou o limite de criação do dicionário em seus construtores.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este construtor é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default equality comparer for the type of the key, obtained from <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">A implementação da interface genérica <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para uso na comparação de chaves ou para <ph id="ph2">&lt;see langword="null" /&gt;</ph> usar o comparador de igualdade padrão para o tipo da chave, obtido em <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</source>
          <target state="translated">O número de elementos que a coleção pode conter sem criar um dicionário de pesquisa (0 cria o dicionário de pesquisa quando o primeiro item é adicionado) ou -1 para especificar que um dicionário de pesquisa nunca é criado.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> que usa o comparador de igualdade especificado e cria um dicionário de pesquisa quando o limite especificado é excedido.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">Por padrão, <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> inclui um dicionário de pesquisa, criado quando o primeiro item é adicionado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">Quando um item é adicionado ao <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, a chave do item será extraída uma vez e salva no dicionário de pesquisa para pesquisas mais rápidas.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This constructor allows you to override that behavior.</source>
          <target state="translated">Este construtor permite substituir esse comportamento.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</source>
          <target state="translated">Especifique 0 para criar o dicionário quando o primeiro elemento é adicionado, 1 para criar o dicionário quando o segundo elemento é adicionado e assim por diante.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>If you specify –1 as the threshold, the lookup dictionary is never created.</source>
          <target state="translated">Se você especificar -1 como o limite, o dicionário de pesquisa nunca será criado.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</source>
          <target state="translated">Para coleções muito pequenas a melhoria de velocidade de recuperação fornecida pelo dicionário de pesquisa pode não ser que vale a pena a memória extra necessária para o dicionário.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Setting a threshold allows you to decide when to make that tradeoff.</source>
          <target state="translated">Definir o limite permite que você decida quando tornar essa compensação.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> classe é abstrata (<ph id="ph2">`MustInherit`</ph> no Visual Basic), você deve derivar dele para usá-lo.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">No construtor para o tipo derivado, chame o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">Não é necessário para expor a funcionalidade como o comparador de igualdade ou o limite de criação do dicionário em seus construtores.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este construtor é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir os métodos <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para fornecer um comportamento personalizado para os métodos <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> e <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>, além de definir a propriedade <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> padrão (o indexador em C#).</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">O comportamento personalizado fornecido neste exemplo é um evento de notificação chamado <ph id="ph1">`Changed`</ph>, gerado ao final de cada um dos métodos substituídos.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</source>
          <target state="translated">O exemplo de código usa o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> construtor com um limite de 0, para que o dicionário interno é criado na primeira vez que um objeto é adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">O exemplo de código cria a classe <ph id="ph1">`SimpleOrder`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e representa um formulário de pedido simples.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">O formulário do pedido contém objetos <ph id="ph1">`OrderItem`</ph> representando itens ordenados.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">O exemplo de código também cria uma classe <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> para conter informações do evento, e uma enumeração para identificar o tipo de alteração.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">O exemplo de código demonstra o comportamento personalizado chamando as propriedades e os métodos da classe derivada, no método <ph id="ph1">`Main`</ph> da classe <ph id="ph2">`Demo`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">Este exemplo de código usa objetos com chaves imutáveis.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="dictionaryCreationThreshold" /&gt;</ph> is less than –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionaryCreationThreshold" /&gt;</ph> é menor que -1.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The element to change the key of.</source>
          <target state="translated">O elemento do qual alterar a chave.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The new key for <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A nova chave para o <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Changes the key associated with the specified element in the lookup dictionary.</source>
          <target state="translated">Altera a chave associada ao elemento especificado no dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method does not modify the key embedded in <ph id="ph1">`item`</ph>; it simply replaces the key saved in the lookup dictionary.</source>
          <target state="translated">Esse método não modifica a chave inserida em <ph id="ph1">`item`</ph>; ele simplesmente substitui a chave salva no dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Therefore, if <ph id="ph1">`newKey`</ph> is different from the key that is embedded in <ph id="ph2">`item`</ph>, you cannot access <ph id="ph3">`item`</ph> by using the key returned by <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</source>
          <target state="translated">Portanto, se <ph id="ph1">`newKey`</ph> é diferente da chave que é inserido no <ph id="ph2">`item`</ph>, você não pode acessar <ph id="ph3">`item`</ph> usando a chave retornada pelo <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method does nothing if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> does not have a lookup dictionary.</source>
          <target state="translated">Esse método não fará nada se o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> não tem um dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> must be unique.</source>
          <target state="translated">Todas as chaves em um <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> devem ser exclusivos.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>A key cannot be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Uma chave não pode ser <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Notes for Implementers</source>
          <target state="translated">Observações para implementadores</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</source>
          <target state="translated">Antes de modificar a chave inserida em um item, você deve chamar esse método para atualizar a chave no dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>If the dictionary creation threshold is –1, calling this method is not necessary.</source>
          <target state="translated">Se o limite de criação de dicionário for -1, chamar este método não é necessário.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Do not expose the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method as a public method of a derived class.</source>
          <target state="translated">Não exponha o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> método como um método público de uma classe derivada.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Misuse of this method puts the lookup dictionary out of sync with item keys.</source>
          <target state="translated">Uso incorreto desse método coloca o dicionário de pesquisa fora de sincronia com chaves de item.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>For example, setting the key to <ph id="ph1">`null`</ph> and then setting it to another value adds multiple keys for an item to the lookup dictionary.</source>
          <target state="translated">Por exemplo, definindo a chave <ph id="ph1">`null`</ph> e, em seguida, configurá-lo como outro valor adiciona várias chaves de um item ao dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</source>
          <target state="translated">Expor esse método internamente para permitir chaves item mutável: quando a chave para um item é alterado, esse método é usado para alterar a chave no dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> protegido para dar suporte a chaves mutáveis e como substituir os métodos <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> e <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para manter a integridade das chaves e da coleção.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">O exemplo de código cria a coleção <ph id="ph1">`MutableKeys`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, e a classe <ph id="ph3">`MutableKey`</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated">A classe <ph id="ph1">`MutableKey`</ph> tem uma propriedade <ph id="ph2">`Key`</ph> definível.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">Quando uma nova chave é atribuída à propriedade, o setter da propriedade chama o método <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> no Visual Basic) <ph id="ph3">`ChangeKey`</ph> da coleção para testar se a nova chave entraria em conflito com uma chave existente.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">Em caso afirmativo, uma exceção é gerada e o valor da propriedade não é alterado.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">Para manter a conexão entre um objeto <ph id="ph1">`MutableKey`</ph> e a coleção <ph id="ph2">`MutableKeys`</ph> e evitar que um objeto seja inserido em duas coleções, a classe <ph id="ph3">`MutableKey`</ph> tem um campo <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> no Visual Basic) <ph id="ph6">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">Este campo é mantido pelos métodos protegidos que fornecem o comportamento personalizado para adicionar e remover itens da coleção, como o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">O campo é definido quando o item é adicionado a uma coleção e desmarcado quando o item é removido.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> already exists in the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;paramref name="key" /&gt;</ph> já existe em <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">Remove todos os elementos do <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If there is a lookup dictionary, this method clears it but does not delete it.</source>
          <target state="translated">Se houver um dicionário de pesquisa, esse método limpa-lo, mas não o exclui.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">Se o número de elementos excedeu o limite de criação de dicionário e <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> é usar um dicionário de pesquisa, ele continuará a usar um dicionário de pesquisa, mesmo que o número de elementos novamente está abaixo do limite.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Notes for Implementers</source>
          <target state="translated">Observações para implementadores</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method, inherited from the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">Substitua este método para fornecer um comportamento personalizado para o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> método, herdado da <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</source>
          <target state="translated">Chame a implementação da classe base deste método para limpar a coleção subjacente e para limpar o dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> method to provide custom behavior for clearing all objects from the collection.</source>
          <target state="translated">Esta seção contém dois exemplos de código que demonstram substituindo o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> método para fornecer um comportamento personalizado para limpar todos os objetos da coleção.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">O primeiro exemplo adiciona um evento de notificação personalizado e o segundo dá suporte para uma coleção de objetos com chaves mutáveis.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Example 1</source>
          <target state="translated">Exemplo 1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir os métodos <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para fornecer um comportamento personalizado para os métodos <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> e <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>, além de definir a propriedade <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> padrão (o indexador em C#).</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">O comportamento personalizado fornecido neste exemplo é um evento de notificação chamado <ph id="ph1">`Changed`</ph>, gerado ao final de cada um dos métodos substituídos.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">O exemplo de código cria a classe <ph id="ph1">`SimpleOrder`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e representa um formulário de pedido simples.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">O formulário do pedido contém objetos <ph id="ph1">`OrderItem`</ph> representando itens ordenados.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">O exemplo de código também cria uma classe <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> para conter informações do evento, e uma enumeração para identificar o tipo de alteração.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">O exemplo de código demonstra o comportamento personalizado chamando as propriedades e os métodos da classe derivada, no método <ph id="ph1">`Main`</ph> da classe <ph id="ph2">`Demo`</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">Este exemplo de código usa objetos com chaves imutáveis.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Example 2</source>
          <target state="translated">Exemplo 2</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> protegido para dar suporte a chaves mutáveis e como substituir os métodos <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> e <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para manter a integridade das chaves e da coleção.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">O exemplo de código cria a coleção <ph id="ph1">`MutableKeys`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, e a classe <ph id="ph3">`MutableKey`</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated">A classe <ph id="ph1">`MutableKey`</ph> tem uma propriedade <ph id="ph2">`Key`</ph> definível.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">Quando uma nova chave é atribuída à propriedade, o setter da propriedade chama o método <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> no Visual Basic) <ph id="ph3">`ChangeKey`</ph> da coleção para testar se a nova chave entraria em conflito com uma chave existente.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">Em caso afirmativo, uma exceção é gerada e o valor da propriedade não é alterado.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">Para manter a conexão entre um objeto <ph id="ph1">`MutableKey`</ph> e a coleção <ph id="ph2">`MutableKeys`</ph> e evitar que um objeto seja inserido em duas coleções, a classe <ph id="ph3">`MutableKey`</ph> tem um campo <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> no Visual Basic) <ph id="ph6">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">Este campo é mantido pelos métodos protegidos que fornecem o comportamento personalizado para adicionar e remover itens da coleção, como o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">O campo é definido quando o item é adicionado a uma coleção e desmarcado quando o item é removido.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>Gets the generic equality comparer that is used to determine equality of keys in the collection.</source>
          <target state="translated">Obtém o comparador de igualdade genérico que é usado para determinar a igualdade de chaves na coleção.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface that is used to determine equality of keys in the collection.</source>
          <target state="translated">A implementação do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> interface genérica é usado para determinar igualdade de chaves na coleção.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">A chave a ser localizada no <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>Determines whether the collection contains an element with the specified key.</source>
          <target state="translated">Determina se a coleção contém um elemento com a chave especificada.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> contiver um elemento com a chave especificada; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary, <ph id="ph2">`key`</ph> is used to search the dictionary.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> tem um dicionário de pesquisa, <ph id="ph2">`key`</ph> é usado para pesquisar o dicionário.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>If there is no lookup dictionary, the key of each element is extracted using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and compared with the specified key.</source>
          <target state="translated">Se não houver nenhum dicionário de pesquisa, a chave de cada elemento é extraída usando a <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> método e comparada com a chave especificada.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>This method is an O(1) operation if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary; otherwise it is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Esse método é uma operação de (1) se o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> tem um dicionário de pesquisa; caso contrário, será um O (<ph id="ph2">`n`</ph>) operação, onde <ph id="ph3">`n`</ph> é <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">Este exemplo de código mostra o código mínimo necessário a ser derivado de uma classe de coleção de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: substituindo o método <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> e fornecendo um construtor público que representa um construtor de classe base.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">O exemplo de código também demonstra muitas das propriedades e dos métodos herdados das classes <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated">A classe <ph id="ph1">`SimpleOrder`</ph> é uma lista muito simples de requisição que contém objetos <ph id="ph2">`OrderItem`</ph>, cada um representando um item de linha na ordem.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">A chave de <ph id="ph1">`OrderItem`</ph> é imutável, uma consideração importante para classes que derivam de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>Gets the lookup dictionary of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">Obtém o dicionário de pesquisa do <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The lookup dictionary of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>, if it exists; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O dicionário de pesquisa do <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>, se existir; caso contrário, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">Por padrão, <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> inclui um dicionário de pesquisa, criado quando o primeiro item é adicionado.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">Quando um item é adicionado ao <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, a chave do item será extraída uma vez e salva no dicionário de pesquisa para pesquisas mais rápidas.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">Esse comportamento pode ser substituído usando o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> construtor e especificando um limite de criação do dicionário.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> protegido para dar suporte a chaves mutáveis e como substituir os métodos <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> e <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para manter a integridade das chaves e da coleção.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">O exemplo de código cria a coleção <ph id="ph1">`MutableKeys`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, e a classe <ph id="ph3">`MutableKey`</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated">A classe <ph id="ph1">`MutableKey`</ph> tem uma propriedade <ph id="ph2">`Key`</ph> definível.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">Quando uma nova chave é atribuída à propriedade, o setter da propriedade chama o método <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> no Visual Basic) <ph id="ph3">`ChangeKey`</ph> da coleção para testar se a nova chave entraria em conflito com uma chave existente.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">Em caso afirmativo, uma exceção é gerada e o valor da propriedade não é alterado.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">Para manter a conexão entre um objeto <ph id="ph1">`MutableKey`</ph> e a coleção <ph id="ph2">`MutableKeys`</ph> e evitar que um objeto seja inserido em duas coleções, a classe <ph id="ph3">`MutableKey`</ph> tem um campo <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> no Visual Basic) <ph id="ph6">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">Este campo é mantido pelos métodos protegidos que fornecem o comportamento personalizado para adicionar e remover itens da coleção, como o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">O campo é definido quando o item é adicionado a uma coleção e desmarcado quando o item é removido.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The element from which to extract the key.</source>
          <target state="translated">O elemento do qual a chave será extraída.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>When implemented in a derived class, extracts the key from the specified element.</source>
          <target state="translated">Quando implementado em uma classe derivada, extrai a chave do elemento especificado.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The key for the specified element.</source>
          <target state="translated">A chave do elemento especificado.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>If the key in the lookup dictionary is different from the key that is embedded in <ph id="ph1">`item`</ph>, you cannot access <ph id="ph2">`item`</ph> by using the key returned by <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</source>
          <target state="translated">Se a chave no dicionário de pesquisa é diferente da chave que é inserido no <ph id="ph1">`item`</ph>, você não pode acessar <ph id="ph2">`item`</ph> usando a chave retornada pelo <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>You can implement this method to return <ph id="ph1">`null`</ph> for a collection that contains items without keys, in which case the items can be accessed only by their index.</source>
          <target state="translated">Você pode implementar esse método para retornar <ph id="ph1">`null`</ph> para uma coleção que contém os itens sem chaves, caso em que os itens podem ser acessados somente por seu índice.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>Notes for Implementers</source>
          <target state="translated">Observações para implementadores</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</source>
          <target state="translated">Você deve substituir este método para fornecer o dicionário de uma maneira para extrair as chaves de itens no dicionário.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This method is called internally.</source>
          <target state="translated">Este método é chamado internamente.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>It is not necessary for it to be public.</source>
          <target state="translated">Não é necessário para que seja pública.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">Este exemplo de código mostra o código mínimo necessário a ser derivado de uma classe de coleção de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: substituindo o método <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> e fornecendo um construtor público que representa um construtor de classe base.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">O exemplo de código também demonstra muitas das propriedades e dos métodos herdados das classes <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated">A classe <ph id="ph1">`SimpleOrder`</ph> é uma lista muito simples de requisição que contém objetos <ph id="ph2">`OrderItem`</ph>, cada um representando um item de linha na ordem.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">A chave de <ph id="ph1">`OrderItem`</ph> é imutável, uma consideração importante para classes que derivam de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">O índice baseado em zero no qual o <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> deve ser inserido.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The object to insert.</source>
          <target state="translated">O objeto a ser inserido.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insere um elemento no <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>, no índice especificado.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of the <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`index`</ph> é igual a <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> é adicionada ao final do <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> is called by the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> é chamado pelo <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Notes for Implementers</source>
          <target state="translated">Observações para implementadores</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> methods, inherited from the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">Substitua este método para fornecer um comportamento personalizado para o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> métodos, herdados do <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">Chame a implementação da classe base deste método para inserir o item na coleção subjacente e atualizar o dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method to provide custom behavior for adding or inserting objects into the collection.</source>
          <target state="translated">Esta seção contém dois exemplos de código que demonstram substituindo o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> método para fornecer um comportamento personalizado para adicionar ou inserir objetos na coleção.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">O primeiro exemplo adiciona um evento de notificação personalizado e o segundo dá suporte para uma coleção de objetos com chaves mutáveis.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Example 1</source>
          <target state="translated">Exemplo 1</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir os métodos <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para fornecer um comportamento personalizado para os métodos <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> e <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>, além de definir a propriedade <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> padrão (o indexador em C#).</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">O comportamento personalizado fornecido neste exemplo é um evento de notificação chamado <ph id="ph1">`Changed`</ph>, gerado ao final de cada um dos métodos substituídos.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">O exemplo de código cria a classe <ph id="ph1">`SimpleOrder`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e representa um formulário de pedido simples.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">O formulário do pedido contém objetos <ph id="ph1">`OrderItem`</ph> representando itens ordenados.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">O exemplo de código também cria uma classe <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> para conter informações do evento, e uma enumeração para identificar o tipo de alteração.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">O exemplo de código demonstra o comportamento personalizado chamando as propriedades e os métodos da classe derivada, no método <ph id="ph1">`Main`</ph> da classe <ph id="ph2">`Demo`</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">Este exemplo de código usa objetos com chaves imutáveis.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Example 2</source>
          <target state="translated">Exemplo 2</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> protegido para dar suporte a chaves mutáveis e como substituir os métodos <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> e <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para manter a integridade das chaves e da coleção.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">O exemplo de código cria a coleção <ph id="ph1">`MutableKeys`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, e a classe <ph id="ph3">`MutableKey`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated">A classe <ph id="ph1">`MutableKey`</ph> tem uma propriedade <ph id="ph2">`Key`</ph> definível.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">Quando uma nova chave é atribuída à propriedade, o setter da propriedade chama o método <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> no Visual Basic) <ph id="ph3">`ChangeKey`</ph> da coleção para testar se a nova chave entraria em conflito com uma chave existente.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">Em caso afirmativo, uma exceção é gerada e o valor da propriedade não é alterado.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">Para manter a conexão entre um objeto <ph id="ph1">`MutableKey`</ph> e a coleção <ph id="ph2">`MutableKeys`</ph> e evitar que um objeto seja inserido em duas coleções, a classe <ph id="ph3">`MutableKey`</ph> tem um campo <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> no Visual Basic) <ph id="ph6">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">Este campo é mantido pelos métodos protegidos que fornecem o comportamento personalizado para adicionar e remover itens da coleção, como o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">O campo é definido quando o item é adicionado a uma coleção e desmarcado quando o item é removido.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The key of the element to get.</source>
          <target state="translated">A chave do elemento a obter.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Gets the element with the specified key.</source>
          <target state="translated">Obtém o elemento com a chave especificada.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The element with the specified key.</source>
          <target state="translated">O elemento com a chave especificada.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If an element with the specified key is not found, an exception is thrown.</source>
          <target state="translated">Se um elemento com a chave especificada não for encontrado, uma exceção será lançada.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This property is distinct from the inherited <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property, which gets and sets elements by numeric index.</source>
          <target state="translated">Essa propriedade é diferente de herdadas <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> propriedade, que obtém e define os elementos por índice numérico.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>However, if <ph id="ph1">`TKey`</ph> is of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, this property masks the inherited property.</source>
          <target state="translated">No entanto, se <ph id="ph1">`TKey`</ph> é do tipo <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, essa propriedade mascara a propriedade herdada.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>In that case, you can access the inherited property by casting the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> to its base type.</source>
          <target state="translated">Nesse caso, você pode acessar a propriedade herdada convertendo o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> para seu tipo base.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>For example, <ph id="ph1">`KeyedCollection&lt;int, MyType&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of Integer, MyType)`</ph> in Visual Basic, <ph id="ph3">`KeyedCollection&lt;int, MyType^&gt;`</ph> in C++) can be cast to <ph id="ph4">`Collection&lt;MyType&gt;`</ph> (<ph id="ph5">`Collection(Of MyType)`</ph> in Visual Basic, <ph id="ph6">`Collection&lt;MyType^&gt;`</ph> in C++).</source>
          <target state="translated">Por exemplo, <ph id="ph1">`KeyedCollection&lt;int, MyType&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of Integer, MyType)`</ph> no Visual Basic, <ph id="ph3">`KeyedCollection&lt;int, MyType^&gt;`</ph> em C++) pode ser convertido em <ph id="ph4">`Collection&lt;MyType&gt;`</ph> (<ph id="ph5">`Collection(Of MyType)`</ph> no Visual Basic, <ph id="ph6">`Collection&lt;MyType^&gt;`</ph> em C++).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary, <ph id="ph2">`key`</ph> is used to retrieve the element from the dictionary.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> tem um dicionário de pesquisa, <ph id="ph2">`key`</ph> é usado para recuperar o elemento do dicionário.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If there is no lookup dictionary, the key of each element is extracted using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and compared with the specified key.</source>
          <target state="translated">Se não houver nenhum dicionário de pesquisa, a chave de cada elemento é extraída usando a <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> método e comparada com a chave especificada.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Retrieving the value of this property is an O(1) operation if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary; otherwise it is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Recuperar o valor dessa propriedade é uma operação de (1) se o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> tem um dicionário de pesquisa; caso contrário, será um O (<ph id="ph2">`n`</ph>) operação, onde <ph id="ph3">`n`</ph> é <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">Este exemplo de código mostra o código mínimo necessário a ser derivado de uma classe de coleção de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: substituindo o método <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> e fornecendo um construtor público que representa um construtor de classe base.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">O exemplo de código também demonstra muitas das propriedades e dos métodos herdados das classes <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The code example calls both the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is read-only and retrieves by key, and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is settable and retrieves by index.</source>
          <target state="translated">O exemplo de código chama ambos o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> propriedade, que é somente leitura e recupera pela chave, e o <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> propriedade, que é configurável e recupera pelo índice.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</source>
          <target state="translated">Ele mostra como acessar a propriedade última quando os objetos na coleção derivada têm chaves inteiro, indistinguíveis de inteiros usados para recuperação indexada.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated">A classe <ph id="ph1">`SimpleOrder`</ph> é uma lista muito simples de requisição que contém objetos <ph id="ph2">`OrderItem`</ph>, cada um representando um item de linha na ordem.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">A chave de <ph id="ph1">`OrderItem`</ph> é imutável, uma consideração importante para classes que derivam de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>An element with the specified key does not exist in the collection.</source>
          <target state="translated">Um elemento com a chave especificada não existe na coleção.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">A chave do elemento a ser removido.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">Remove o elemento com a chave especificada do <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o elemento for removido com êxito; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not found in the <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">Esse método também retornará <ph id="ph1">&lt;see langword="false" /&gt;</ph>, se <ph id="ph2">&lt;paramref name="key" /&gt;</ph> não tiver sido localizado no <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of the element is also removed from the lookup dictionary.</source>
          <target state="translated">A chave do elemento também é removida do dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">Se o número de elementos excedeu o limite de criação de dicionário e <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> é usar um dicionário de pesquisa, ele continuará a usar um dicionário de pesquisa, mesmo que o número de elementos novamente está abaixo do limite.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>To customize the behavior of this method, override the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> method.</source>
          <target state="translated">Para personalizar o comportamento desse método, substitua o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">Este exemplo de código mostra o código mínimo necessário a ser derivado de uma classe de coleção de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: substituindo o método <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> e fornecendo um construtor público que representa um construtor de classe base.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">O exemplo de código também demonstra muitas das propriedades e dos métodos herdados das classes <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The example demonstrates <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> method inherited from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, which removes the item with a specified key, and also the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> methods inherited from <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, which remove by object and by index respectively.</source>
          <target state="translated">O exemplo demonstra <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> método herdado do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, que remove o item com uma chave especificada e também o <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> métodos herdados de <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, que remova por objeto e por índice respectivamente.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated">A classe <ph id="ph1">`SimpleOrder`</ph> é uma lista muito simples de requisição que contém objetos <ph id="ph2">`OrderItem`</ph>, cada um representando um item de linha na ordem.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">A chave de <ph id="ph1">`OrderItem`</ph> é imutável, uma consideração importante para classes que derivam de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The index of the element to remove.</source>
          <target state="translated">O índice do elemento a ser removido.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">Remove o elemento no índice especificado do <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The key of the element is also removed from the lookup dictionary.</source>
          <target state="translated">A chave do elemento também é removida do dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">Se o número de elementos excedeu o limite de criação de dicionário e <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> é usar um dicionário de pesquisa, ele continuará a usar um dicionário de pesquisa, mesmo que o número de elementos novamente está abaixo do limite.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Notes for Implementers</source>
          <target state="translated">Observações para implementadores</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29&gt;</ph> methods, inherited from the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and the <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29&gt;</ph> method.</source>
          <target state="translated">Substitua este método para fornecer um comportamento personalizado para o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29&gt;</ph> métodos, herdados do <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classe genérica e o <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">Chame a implementação da classe base deste método para remover o item da coleção subjacente e atualizar o dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> method to provide custom behavior for removing objects from the collection.</source>
          <target state="translated">Esta seção contém dois exemplos de código que demonstram substituindo o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> método para fornecer um comportamento personalizado para a remoção de objetos da coleção.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">O primeiro exemplo adiciona um evento de notificação personalizado e o segundo dá suporte para uma coleção de objetos com chaves mutáveis.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Example 1</source>
          <target state="translated">Exemplo 1</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir os métodos <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para fornecer um comportamento personalizado para os métodos <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> e <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>, além de definir a propriedade <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> padrão (o indexador em C#).</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">O comportamento personalizado fornecido neste exemplo é um evento de notificação chamado <ph id="ph1">`Changed`</ph>, gerado ao final de cada um dos métodos substituídos.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">O exemplo de código cria a classe <ph id="ph1">`SimpleOrder`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e representa um formulário de pedido simples.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">O formulário do pedido contém objetos <ph id="ph1">`OrderItem`</ph> representando itens ordenados.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">O exemplo de código também cria uma classe <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> para conter informações do evento, e uma enumeração para identificar o tipo de alteração.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">O exemplo de código demonstra o comportamento personalizado chamando as propriedades e os métodos da classe derivada, no método <ph id="ph1">`Main`</ph> da classe <ph id="ph2">`Demo`</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">Este exemplo de código usa objetos com chaves imutáveis.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Example 2</source>
          <target state="translated">Exemplo 2</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> protegido para dar suporte a chaves mutáveis e como substituir os métodos <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> e <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para manter a integridade das chaves e da coleção.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">O exemplo de código cria a coleção <ph id="ph1">`MutableKeys`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, e a classe <ph id="ph3">`MutableKey`</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated">A classe <ph id="ph1">`MutableKey`</ph> tem uma propriedade <ph id="ph2">`Key`</ph> definível.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">Quando uma nova chave é atribuída à propriedade, o setter da propriedade chama o método <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> no Visual Basic) <ph id="ph3">`ChangeKey`</ph> da coleção para testar se a nova chave entraria em conflito com uma chave existente.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">Em caso afirmativo, uma exceção é gerada e o valor da propriedade não é alterado.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">Para manter a conexão entre um objeto <ph id="ph1">`MutableKey`</ph> e a coleção <ph id="ph2">`MutableKeys`</ph> e evitar que um objeto seja inserido em duas coleções, a classe <ph id="ph3">`MutableKey`</ph> tem um campo <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> no Visual Basic) <ph id="ph6">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">Este campo é mantido pelos métodos protegidos que fornecem o comportamento personalizado para adicionar e remover itens da coleção, como o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">O campo é definido quando o item é adicionado a uma coleção e desmarcado quando o item é removido.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The zero-based index of the item to be replaced.</source>
          <target state="translated">O índice de base zero do item a ser substituído.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The new item.</source>
          <target state="translated">O novo item.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Replaces the item at the specified index with the specified item.</source>
          <target state="translated">Substitui o item no índice especificado pelo item especificado.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The lookup dictionary is updated accordingly.</source>
          <target state="translated">O dicionário de pesquisa é atualizado adequadamente.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</source>
          <target state="translated">Ou seja, a chave do item que está sendo substituída será removida do dicionário de pesquisa e a chave do novo item é adicionada.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Notes for Implementers</source>
          <target state="translated">Observações para implementadores</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Override this method to provide customized behavior for setting the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property inherited from the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">Substitua este método para fornecer um comportamento personalizado para a configuração de <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> propriedade herdada do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classe genérica.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This method does not affect the behavior of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is read-only.</source>
          <target state="translated">Esse método não afeta o comportamento do <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> propriedade, que é somente leitura.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">Chame a implementação da classe base deste método para definir o item na coleção e atualizar o dicionário de pesquisa.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> method to provide custom behavior for setting the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Esta seção contém dois exemplos de código que demonstram substituindo o <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> método para fornecer um comportamento personalizado para a configuração de <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">O primeiro exemplo adiciona um evento de notificação personalizado e o segundo dá suporte para uma coleção de objetos com chaves mutáveis.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Example 1</source>
          <target state="translated">Exemplo 1</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir os métodos <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para fornecer um comportamento personalizado para os métodos <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> e <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>, além de definir a propriedade <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> padrão (o indexador em C#).</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">O comportamento personalizado fornecido neste exemplo é um evento de notificação chamado <ph id="ph1">`Changed`</ph>, gerado ao final de cada um dos métodos substituídos.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">O exemplo de código cria a classe <ph id="ph1">`SimpleOrder`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> e representa um formulário de pedido simples.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">O formulário do pedido contém objetos <ph id="ph1">`OrderItem`</ph> representando itens ordenados.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">O exemplo de código também cria uma classe <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> para conter informações do evento, e uma enumeração para identificar o tipo de alteração.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">O exemplo de código demonstra o comportamento personalizado chamando as propriedades e os métodos da classe derivada, no método <ph id="ph1">`Main`</ph> da classe <ph id="ph2">`Demo`</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">Este exemplo de código usa objetos com chaves imutáveis.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">Para um exemplo de código que usa chaves mutáveis, consulte <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Example 2</source>
          <target state="translated">Exemplo 2</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">O exemplo de código a seguir mostra como substituir o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> protegido para dar suporte a chaves mutáveis e como substituir os métodos <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> e <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> protegidos para manter a integridade das chaves e da coleção.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">O exemplo de código cria a coleção <ph id="ph1">`MutableKeys`</ph>, que deriva do <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, e a classe <ph id="ph3">`MutableKey`</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated">A classe <ph id="ph1">`MutableKey`</ph> tem uma propriedade <ph id="ph2">`Key`</ph> definível.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">Quando uma nova chave é atribuída à propriedade, o setter da propriedade chama o método <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> no Visual Basic) <ph id="ph3">`ChangeKey`</ph> da coleção para testar se a nova chave entraria em conflito com uma chave existente.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">Em caso afirmativo, uma exceção é gerada e o valor da propriedade não é alterado.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">Para manter a conexão entre um objeto <ph id="ph1">`MutableKey`</ph> e a coleção <ph id="ph2">`MutableKeys`</ph> e evitar que um objeto seja inserido em duas coleções, a classe <ph id="ph3">`MutableKey`</ph> tem um campo <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> no Visual Basic) <ph id="ph6">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">Este campo é mantido pelos métodos protegidos que fornecem o comportamento personalizado para adicionar e remover itens da coleção, como o método <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">O campo é definido quando o item é adicionado a uma coleção e desmarcado quando o item é removido.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>