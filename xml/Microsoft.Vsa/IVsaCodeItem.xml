<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="02ffa3d80165d4caa3178d3b714320a67262d734" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52736990" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um item de código a ser compilado pelo mecanismo de script.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
O item de código especificada pode conter classes, módulos ou outro texto de origem.

Nenhuma permissão é necessária para chamar todos os membros da interface IVsaCodeItem.

O mecanismo de script implementa essa interface para adicionar itens de código.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Um nome programático da origem do evento.</param>
        <param name="eventSourceType">O nome de tipo da origem do evento.</param>
        <summary>Adiciona uma origem de evento ao item de código. O item de código usa a origem do evento para associar um evento à origem do evento nomeado chamando o método IVsaSite.GetEventSourceInstance, que é implementado pelo host.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
O mecanismo de script usa as informações fornecidas pelo método AddEventSource para conectar eventos à origem do evento nomeado. Ele obtém as fontes de evento chamando o método Ivsasite, que é implementado pelo host. O método AddEventSource cria uma classe que trata eventos originados por um objeto fornecido pelo host.

> [!NOTE]
> O mecanismo de script JScript .NET não oferece suporte a esse método. Em casos em que o mecanismo JScript .NET deve associar um evento, você deve fazer isso usando um item global. Em vez de fontes de evento, o mecanismo JScript .NET usa tipos de item de AppGlobal. Para obter mais informações, consulte VsaItemType.


Dentro do item de código, você pode acessar o objeto de origem do evento por nome e, quando acessado, você pode escrever manipuladores de eventos com o objeto. O tipo de origem do evento é passado como uma cadeia de caracteres em vez de um objeto de tipo para facilitar a implementação de fontes de eventos por hosts não gerenciados.

O compilador usa o parâmetro eventSourceType para associar a métodos fornecidos pelo tipo. Ele também é usado mais tarde quando o mecanismo de script chama o método Ivsasite para solicitar uma instância do objeto de tipo.

Para obter mais informações sobre os mecanismos para conectar eventos para o mecanismo de script, consulte o método Ivsasite.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">O texto a ser acrescentado ao item de código.</param>
        <summary>Acrescenta o texto especificado ao final do item de código.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Texto de origem acrescentados não está sujeita à validação. Por esse motivo, erros, se houver, serão exibidos na próxima chamada para o método IVsaEngine.Compile.

O texto de origem acrescentadas é fornecido como uma única cadeia de caracteres. Deve a cadeia de caracteres exigir qualquer formatação, você deve fornecer isso sozinho.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o CodeDOM (modelo de objeto do documento de código) representado no item de código.</summary>
        <value>Retorna o CodeDOM para o item de código.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
A propriedade de CodeDOM normalmente é gerada como parte da etapa de compilação do mecanismo de script, portanto, ele não está disponível até depois de uma chamada ao método IVsaEngine.Compile. Algumas implementações do VSA podem ser capazes de fornecer o CodeDOM dinamicamente, sem a necessidade de uma etapa de compilação explícita, mas hosts não podem confiar nesse comportamento. Alguns mecanismos de script, por exemplo, o mecanismo de script JScript .NET, não dão suporte a esse comportamento.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">O nome programático da origem do evento a ser removida.</param>
        <summary>Remove a origem do evento especificado do item de código.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Remover uma origem do evento não remove o manipulador de eventos subjacente do texto de origem. Em vez disso, os eventos não geram notificações ao manipulador de eventos. Portanto, você obterá um erro do compilador se você excluir uma fonte de evento, mas deixar a função subjacente no código-fonte.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Define ou obtém o texto de um item de código especificado, incluindo o código gerado automaticamente, se houver.</summary>
        <value>Retorna o texto de origem do item de código.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Quando você definir essa propriedade, o texto não está sujeita à validação. Por esse motivo, erros, se houver, serão exibidos na próxima chamada para o método IVsaEngine.Compile.

A propriedade SourceText retorna o texto de origem em uma grande cadeia de caracteres, incluindo caracteres de formatação, como o carro retorna.

Não deve ser fechado obter essa propriedade o mecanismo. Para definir essa propriedade o mecanismo deve não ser fechado e não deve estar executando o mecanismo.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>