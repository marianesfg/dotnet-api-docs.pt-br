<Type Name="ControlStyles" FullName="System.Windows.Forms.ControlStyles">
  <TypeSignature Language="C#" Value="public enum ControlStyles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ControlStyles extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ControlStyles" />
  <TypeSignature Language="VB.NET" Value="Public Enum ControlStyles" />
  <TypeSignature Language="C++ CLI" Value="public enum class ControlStyles" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bef0a-101">Especifica o estilo e comportamento de um controle.</span><span class="sxs-lookup"><span data-stu-id="bef0a-101">Specifies the style and behavior of a control.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bef0a-102">Controles de usam essa enumeração em várias propriedades e métodos para especificar a funcionalidade.</span><span class="sxs-lookup"><span data-stu-id="bef0a-102">Controls use this enumeration in various properties and methods to specify functionality.</span></span> <span data-ttu-id="bef0a-103">Um controle pode habilitar um estilo chamando o <xref:System.Windows.Forms.Control.SetStyle%2A> método e passando apropriada <xref:System.Windows.Forms.ControlStyles> bit (ou bits) e o valor booliano para definir o ão para.</span><span class="sxs-lookup"><span data-stu-id="bef0a-103">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to.</span></span> <span data-ttu-id="bef0a-104">Por exemplo, a seguinte linha de código do Visual Basic deve habilitar o buffer duplo.</span><span class="sxs-lookup"><span data-stu-id="bef0a-104">For example, the following line of Visual Basic code would enable double-buffering.</span></span>  
  
```  
myControl.SetStyle(UserPaint Or AllPaintingInWmPaint Or DoubleBuffer, True)  
```  
  
 <span data-ttu-id="bef0a-105">Se o bit AllPaintingInWmPaint é definido como `true`, a mensagem de janela WM_ERASEBKGND é ignorado e ambos <xref:System.Windows.Forms.Control.OnPaintBackground%2A> e <xref:System.Windows.Forms.Control.OnPaint%2A> métodos são chamados diretamente da mensagem de janela WM_PAINT.</span><span class="sxs-lookup"><span data-stu-id="bef0a-105">If the AllPaintingInWmPaint bit is set to `true`, the window message WM_ERASEBKGND is ignored, and both <xref:System.Windows.Forms.Control.OnPaintBackground%2A> and <xref:System.Windows.Forms.Control.OnPaint%2A> methods are called directly from the window message WM_PAINT.</span></span> <span data-ttu-id="bef0a-106">Isso geralmente reduz a cintilação, a menos que outros controles de enviar a mensagem de janela WM_ERASEBKGND para o controle.</span><span class="sxs-lookup"><span data-stu-id="bef0a-106">This generally reduces flicker unless other controls send the window message WM_ERASEBKGND to the control.</span></span> <span data-ttu-id="bef0a-107">Você pode enviar a mensagem de janela WM_ERASEBKGRND para atingir um efeito de transparência pseudo semelhante a SupportsTransparentBackColor; Por exemplo, um <xref:System.Windows.Forms.ToolBar> com aparência simples faz isso.</span><span class="sxs-lookup"><span data-stu-id="bef0a-107">You might send the window message WM_ERASEBKGRND to achieve a pseudo-transparent effect similar to SupportsTransparentBackColor; for example, a <xref:System.Windows.Forms.ToolBar> with flat appearance does this.</span></span>  
  
 <span data-ttu-id="bef0a-108">Para habilitar completamente o buffer duplo, você pode definir os bits OptimizedDoubleBuffer e AllPaintingInWmPaint para `true`.</span><span class="sxs-lookup"><span data-stu-id="bef0a-108">To fully enable double-buffering, you can set the OptimizedDoubleBuffer and AllPaintingInWmPaint bits to `true`.</span></span> <span data-ttu-id="bef0a-109">No entanto, o método preferencial para habilitar o buffer duplo, o que produz o mesmo resultado, é definir o <xref:System.Windows.Forms.Control.DoubleBuffered%2A> propriedade para o controle `true`.</span><span class="sxs-lookup"><span data-stu-id="bef0a-109">However the preferred method for enabling double buffering, which yields the same result, is to set the <xref:System.Windows.Forms.Control.DoubleBuffered%2A> property for the control to `true`.</span></span>  
  
 <span data-ttu-id="bef0a-110">Se o bit SupportsTransparentBackColor é definido como `true`e o <xref:System.Windows.Forms.Control.BackColor%2A> é definido como uma cor cujo componente alfa é menor que 255 <xref:System.Windows.Forms.Control.OnPaintBackground%2A> simulará transparência solicitando controle pai para pintar o plano de fundo.</span><span class="sxs-lookup"><span data-stu-id="bef0a-110">If the SupportsTransparentBackColor bit is set to `true`, and the <xref:System.Windows.Forms.Control.BackColor%2A> is set to a color whose alpha component is less than 255, <xref:System.Windows.Forms.Control.OnPaintBackground%2A> will simulate transparency by asking its parent control to paint the background.</span></span> <span data-ttu-id="bef0a-111">Isso não é verdadeira transparência.</span><span class="sxs-lookup"><span data-stu-id="bef0a-111">This is not true transparency.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bef0a-112">Se houver outro controle entre o controle e seu pai, o controle atual não mostrará o controle no meio.</span><span class="sxs-lookup"><span data-stu-id="bef0a-112">If there is another control between the control and its parent, the current control will not show the control in the middle.</span></span>  
  
 <span data-ttu-id="bef0a-113">Quando o bit UserMouse é definido como `true`, ainda são chamados de métodos a seguir: <xref:System.Windows.Forms.Control.OnMouseDown%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseUp%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseEnter%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseMove%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseHover%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseLeave%2A?displayProperty=nameWithType>, e <xref:System.Windows.Forms.Control.OnMouseWheel%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bef0a-113">When the UserMouse bit is set to `true`, the following methods are still called: <xref:System.Windows.Forms.Control.OnMouseDown%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseUp%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseEnter%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseMove%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseHover%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseLeave%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.Control.OnMouseWheel%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bef0a-114">Quando o controle é clicado, se o bit StandardClick é definido como `true` o <xref:System.Windows.Forms.Control.OnClick%2A?displayProperty=nameWithType> é chamado de método e gera o <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> evento.</span><span class="sxs-lookup"><span data-stu-id="bef0a-114">When the control is clicked, if the StandardClick bit is set to `true` the <xref:System.Windows.Forms.Control.OnClick%2A?displayProperty=nameWithType> method is called and it raises the <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="bef0a-115">Quando o controle é clicado duas vezes, e o StandardClick e StandardDoubleClick bits são definidos como `true`, clique em é passado para o <xref:System.Windows.Forms.Control.DoubleClick> evento.</span><span class="sxs-lookup"><span data-stu-id="bef0a-115">When the control is double-clicked, and both the StandardClick and StandardDoubleClick bits are set to `true`, the click is passed on to the <xref:System.Windows.Forms.Control.DoubleClick> event.</span></span> <span data-ttu-id="bef0a-116">Em seguida, o <xref:System.Windows.Forms.Control.OnDoubleClick%2A?displayProperty=nameWithType> é chamado de método e gera o <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType> evento.</span><span class="sxs-lookup"><span data-stu-id="bef0a-116">Then the <xref:System.Windows.Forms.Control.OnDoubleClick%2A?displayProperty=nameWithType> method is called and it raises the <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="bef0a-117">No entanto, o controle pode chamar <xref:System.Windows.Forms.Control.OnClick%2A> ou <xref:System.Windows.Forms.Control.OnDoubleClick%2A> diretamente, independentemente do StandardClick e StandardDoubleClick valores de bit.</span><span class="sxs-lookup"><span data-stu-id="bef0a-117">However, the control can call <xref:System.Windows.Forms.Control.OnClick%2A> or <xref:System.Windows.Forms.Control.OnDoubleClick%2A> directly regardless of the StandardClick and StandardDoubleClick bit values.</span></span> <span data-ttu-id="bef0a-118">Para obter mais informações sobre o controle clique e clique duas vezes em comportamentos, consulte o <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType> tópicos.</span><span class="sxs-lookup"><span data-stu-id="bef0a-118">For more information on control click and double click behaviors, see the <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType> topics.</span></span>  
  
 <span data-ttu-id="bef0a-119">Quando o bit UseTextForAccessibility é definido e houver um valor no controle do `Text` propriedade, o valor desse controle `Text` determina de propriedade do controle padrão acessibilidade ativa nome e tecla de atalho.</span><span class="sxs-lookup"><span data-stu-id="bef0a-119">When the UseTextForAccessibility bit is set and there is a value in the control's `Text` property, the value of that control's `Text` property determines the control's default Active Accessibility name and shortcut key.</span></span> <span data-ttu-id="bef0a-120">Caso contrário, o texto dos <xref:System.Windows.Forms.Label> controle será usado.</span><span class="sxs-lookup"><span data-stu-id="bef0a-120">Otherwise, the text of the preceding <xref:System.Windows.Forms.Label> control will be used instead.</span></span> <span data-ttu-id="bef0a-121">Este estilo é definido por padrão.</span><span class="sxs-lookup"><span data-stu-id="bef0a-121">This style is set by default.</span></span> <span data-ttu-id="bef0a-122">Tipos de determinado controle interno, como <xref:System.Windows.Forms.TextBox> e <xref:System.Windows.Forms.ComboBox>, redefinir esse estilo para que o `Text` propriedade desses controles não será usada pela acessibilidade ativa.</span><span class="sxs-lookup"><span data-stu-id="bef0a-122">Certain built-in control types, such as <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ComboBox>, reset this style so that the `Text` property of those controls will not be used by Active Accessibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bef0a-123">O exemplo a seguir demonstra um uso de <xref:System.Windows.Forms.ControlStyles> com o <xref:System.Windows.Forms.Control.StyleChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="bef0a-123">The following example demonstrates a use of <xref:System.Windows.Forms.ControlStyles> with the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span>  
  
 [!code-cpp[Control_StyleChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_StyleChanged/CPP/control_stylechanged.cpp#1)]
 [!code-csharp[Control_StyleChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_StyleChanged/CS/control_stylechanged.cs#1)]
 [!code-vb[Control_StyleChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_StyleChanged/VB/control_stylechanged.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="bef0a-124">Herdando um controle de formulários do Windows padrão e alterando o <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> ou <see cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" /> bit valores <see langword="true" /> pode causar um comportamento inesperado ou pode não ter nenhum efeito de se o controle não oferece suporte a <see cref="E:System.Windows.Forms.Control.Click" /> ou <see cref="E:System.Windows.Forms.Control.DoubleClick" /> eventos.</span><span class="sxs-lookup"><span data-stu-id="bef0a-124">Inheriting from a standard Windows Forms control and changing the <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> or <see cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" /> bit values to <see langword="true" /> can cause unexpected behavior or can have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.</span></span></para>
    </block>
    <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
    <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
  </Docs>
  <Members>
    <Member MemberName="AllPaintingInWmPaint">
      <MemberSignature Language="C#" Value="AllPaintingInWmPaint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles AllPaintingInWmPaint = int32(8192)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" />
      <MemberSignature Language="VB.NET" Value="AllPaintingInWmPaint" />
      <MemberSignature Language="C++ CLI" Value="AllPaintingInWmPaint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>8192</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-125">Se for <see langword="true" />, o controle ignorará a mensagem da janela WM_ERASEBKGND para reduzir a cintilação.</span><span class="sxs-lookup"><span data-stu-id="bef0a-125">If <see langword="true" />, the control ignores the window message WM_ERASEBKGND to reduce flicker.</span></span> <span data-ttu-id="bef0a-126">Esse estilo deverá ser aplicado somente se o bit <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> for definido como <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="bef0a-126">This style should only be applied if the <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> bit is set to <see langword="true" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="CacheText">
      <MemberSignature Language="C#" Value="CacheText" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles CacheText = int32(16384)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.CacheText" />
      <MemberSignature Language="VB.NET" Value="CacheText" />
      <MemberSignature Language="C++ CLI" Value="CacheText" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>16384</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-127">Se for <see langword="true" />, o controle manterá uma cópia do texto, em vez de obtê-lo do <see cref="P:System.Windows.Forms.Control.Handle" /> sempre que necessário.</span><span class="sxs-lookup"><span data-stu-id="bef0a-127">If <see langword="true" />, the control keeps a copy of the text rather than getting it from the <see cref="P:System.Windows.Forms.Control.Handle" /> each time it is needed.</span></span> <span data-ttu-id="bef0a-128">Esse estilo usa <see langword="false" /> como padrão.</span><span class="sxs-lookup"><span data-stu-id="bef0a-128">This style defaults to <see langword="false" />.</span></span> <span data-ttu-id="bef0a-129">Esse comportamento melhora o desempenho, mas dificulta manter o texto sincronizado.</span><span class="sxs-lookup"><span data-stu-id="bef0a-129">This behavior improves performance, but makes it difficult to keep the text synchronized.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ContainerControl">
      <MemberSignature Language="C#" Value="ContainerControl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles ContainerControl = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.ContainerControl" />
      <MemberSignature Language="VB.NET" Value="ContainerControl" />
      <MemberSignature Language="C++ CLI" Value="ContainerControl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-130">Se for <see langword="true" />, o controle será um controle semelhante ao contêiner.</span><span class="sxs-lookup"><span data-stu-id="bef0a-130">If <see langword="true" />, the control is a container-like control.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffer">
      <MemberSignature Language="C#" Value="DoubleBuffer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles DoubleBuffer = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.DoubleBuffer" />
      <MemberSignature Language="VB.NET" Value="DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="DoubleBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-131">Se for <see langword="true" />, um desenho será feito em um buffer e, após sua conclusão, o resultado será gerado na tela.</span><span class="sxs-lookup"><span data-stu-id="bef0a-131">If <see langword="true" />, drawing is performed in a buffer, and after it completes, the result is output to the screen.</span></span> <span data-ttu-id="bef0a-132">O buffer duplo impede a cintilação causada pelo redesenho do controle.</span><span class="sxs-lookup"><span data-stu-id="bef0a-132">Double-buffering prevents flicker caused by the redrawing of the control.</span></span> <span data-ttu-id="bef0a-133">Se você definir <see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer" /> como <see langword="true" />, também deverá definir <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> e <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /> como <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="bef0a-133">If you set <see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer" /> to <see langword="true" />, you should also set <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> and <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /> to <see langword="true" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="EnableNotifyMessage">
      <MemberSignature Language="C#" Value="EnableNotifyMessage" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles EnableNotifyMessage = int32(32768)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" />
      <MemberSignature Language="VB.NET" Value="EnableNotifyMessage" />
      <MemberSignature Language="C++ CLI" Value="EnableNotifyMessage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>32768</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-134">Se for <see langword="true" />, o método <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> será chamado para cada mensagem enviada para o <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> do controle.</span><span class="sxs-lookup"><span data-stu-id="bef0a-134">If <see langword="true" />, the <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> method is called for every message sent to the control's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.</span></span> <span data-ttu-id="bef0a-135">Esse estilo usa <see langword="false" /> como padrão.</span><span class="sxs-lookup"><span data-stu-id="bef0a-135">This style defaults to <see langword="false" />.</span></span> <span data-ttu-id="bef0a-136"><see cref="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" /> não funciona em uma relação de confiança parcial.</span><span class="sxs-lookup"><span data-stu-id="bef0a-136"><see cref="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" /> does not work in partial trust.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="FixedHeight">
      <MemberSignature Language="C#" Value="FixedHeight" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles FixedHeight = int32(64)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.FixedHeight" />
      <MemberSignature Language="VB.NET" Value="FixedHeight" />
      <MemberSignature Language="C++ CLI" Value="FixedHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-137">Se for <see langword="true" />, o controle terá uma altura fixa quando sua escala for ajustada automaticamente.</span><span class="sxs-lookup"><span data-stu-id="bef0a-137">If <see langword="true" />, the control has a fixed height when auto-scaled.</span></span> <span data-ttu-id="bef0a-138">Por exemplo, se uma operação de layout tentar ajustar a escala do controle para acomodar um novo <see cref="T:System.Drawing.Font" />, o <see cref="P:System.Windows.Forms.Control.Height" /> do controle permanecerá inalterado.</span><span class="sxs-lookup"><span data-stu-id="bef0a-138">For example, if a layout operation attempts to rescale the control to accommodate a new <see cref="T:System.Drawing.Font" />, the control's <see cref="P:System.Windows.Forms.Control.Height" /> remains unchanged.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="FixedWidth">
      <MemberSignature Language="C#" Value="FixedWidth" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles FixedWidth = int32(32)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.FixedWidth" />
      <MemberSignature Language="VB.NET" Value="FixedWidth" />
      <MemberSignature Language="C++ CLI" Value="FixedWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-139">Se for <see langword="true" />, o controle terá uma largura fixa quando sua escala for ajustada automaticamente.</span><span class="sxs-lookup"><span data-stu-id="bef0a-139">If <see langword="true" />, the control has a fixed width when auto-scaled.</span></span> <span data-ttu-id="bef0a-140">Por exemplo, se uma operação de layout tentar ajustar a escala do controle para acomodar um novo <see cref="T:System.Drawing.Font" />, o <see cref="P:System.Windows.Forms.Control.Width" /> do controle permanecerá inalterado.</span><span class="sxs-lookup"><span data-stu-id="bef0a-140">For example, if a layout operation attempts to rescale the control to accommodate a new <see cref="T:System.Drawing.Font" />, the control's <see cref="P:System.Windows.Forms.Control.Width" /> remains unchanged.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Opaque">
      <MemberSignature Language="C#" Value="Opaque" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles Opaque = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.Opaque" />
      <MemberSignature Language="VB.NET" Value="Opaque" />
      <MemberSignature Language="C++ CLI" Value="Opaque" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-141">Se for <see langword="true" />, o controle será desenhado opaco e a tela de fundo não será pintada.</span><span class="sxs-lookup"><span data-stu-id="bef0a-141">If <see langword="true" />, the control is drawn opaque and the background is not painted.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OptimizedDoubleBuffer">
      <MemberSignature Language="C#" Value="OptimizedDoubleBuffer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles OptimizedDoubleBuffer = int32(131072)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      <MemberSignature Language="VB.NET" Value="OptimizedDoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="OptimizedDoubleBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>131072</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-142">Se for <see langword="true" />, o controle será desenhado primeiro em um buffer, em vez de diretamente na tela, o que poderá reduzir a cintilação.</span><span class="sxs-lookup"><span data-stu-id="bef0a-142">If <see langword="true" />, the control is first drawn to a buffer rather than directly to the screen, which can reduce flicker.</span></span> <span data-ttu-id="bef0a-143">Se você definir essa propriedade como <see langword="true" />, também deverá definir o <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /> como <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="bef0a-143">If you set this property to <see langword="true" />, you should also set the <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /> to <see langword="true" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="ResizeRedraw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles ResizeRedraw = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      <MemberSignature Language="VB.NET" Value="ResizeRedraw" />
      <MemberSignature Language="C++ CLI" Value="ResizeRedraw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-144">Se for <see langword="true" />, o controle será redesenhado quando for redimensionado.</span><span class="sxs-lookup"><span data-stu-id="bef0a-144">If <see langword="true" />, the control is redrawn when it is resized.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Selectable">
      <MemberSignature Language="C#" Value="Selectable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles Selectable = int32(512)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.Selectable" />
      <MemberSignature Language="VB.NET" Value="Selectable" />
      <MemberSignature Language="C++ CLI" Value="Selectable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-145">Se for <see langword="true" />, o controle poderá receber o foco.</span><span class="sxs-lookup"><span data-stu-id="bef0a-145">If <see langword="true" />, the control can receive focus.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="StandardClick">
      <MemberSignature Language="C#" Value="StandardClick" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles StandardClick = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.StandardClick" />
      <MemberSignature Language="VB.NET" Value="StandardClick" />
      <MemberSignature Language="C++ CLI" Value="StandardClick" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-146">Se for <see langword="true" />, o controle implementará o comportamento <see cref="E:System.Windows.Forms.Control.Click" /> padrão.</span><span class="sxs-lookup"><span data-stu-id="bef0a-146">If <see langword="true" />, the control implements the standard <see cref="E:System.Windows.Forms.Control.Click" /> behavior.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="StandardDoubleClick">
      <MemberSignature Language="C#" Value="StandardDoubleClick" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles StandardDoubleClick = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
      <MemberSignature Language="VB.NET" Value="StandardDoubleClick" />
      <MemberSignature Language="C++ CLI" Value="StandardDoubleClick" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-147">Se for <see langword="true" />, o controle implementará o comportamento <see cref="E:System.Windows.Forms.Control.DoubleClick" /> padrão.</span><span class="sxs-lookup"><span data-stu-id="bef0a-147">If <see langword="true" />, the control implements the standard <see cref="E:System.Windows.Forms.Control.DoubleClick" /> behavior.</span></span> <span data-ttu-id="bef0a-148">Esse estilo será ignorado se o bit <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> não for definido como <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="bef0a-148">This style is ignored if the <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> bit is not set to <see langword="true" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="SupportsTransparentBackColor">
      <MemberSignature Language="C#" Value="SupportsTransparentBackColor" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles SupportsTransparentBackColor = int32(2048)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor" />
      <MemberSignature Language="VB.NET" Value="SupportsTransparentBackColor" />
      <MemberSignature Language="C++ CLI" Value="SupportsTransparentBackColor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>2048</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-149">Se for <see langword="true" />, o controle aceitará um <see cref="P:System.Windows.Forms.Control.BackColor" /> com um componente alfa de menos de 255 para simular a transparência.</span><span class="sxs-lookup"><span data-stu-id="bef0a-149">If <see langword="true" />, the control accepts a <see cref="P:System.Windows.Forms.Control.BackColor" /> with an alpha component of less than 255 to simulate transparency.</span></span> <span data-ttu-id="bef0a-150">A transparência será simulada somente se o bit <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> for definido como <see langword="true" /> e o controle pai for derivado de <see cref="T:System.Windows.Forms.Control" />.</span><span class="sxs-lookup"><span data-stu-id="bef0a-150">Transparency will be simulated only if the <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> bit is set to <see langword="true" /> and the parent control is derived from <see cref="T:System.Windows.Forms.Control" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="UserMouse">
      <MemberSignature Language="C#" Value="UserMouse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UserMouse = int32(1024)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UserMouse" />
      <MemberSignature Language="VB.NET" Value="UserMouse" />
      <MemberSignature Language="C++ CLI" Value="UserMouse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-151">Se for <see langword="true" />, o controle fará seu próprio processamento de mouse e os eventos do mouse não serão manipulados pelo sistema operacional.</span><span class="sxs-lookup"><span data-stu-id="bef0a-151">If <see langword="true" />, the control does its own mouse processing, and mouse events are not handled by the operating system.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="UserPaint">
      <MemberSignature Language="C#" Value="UserPaint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UserPaint = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UserPaint" />
      <MemberSignature Language="VB.NET" Value="UserPaint" />
      <MemberSignature Language="C++ CLI" Value="UserPaint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-152">Se for <see langword="true" />, o controle pintará a si próprio em vez de ser pintado pelo sistema operacional.</span><span class="sxs-lookup"><span data-stu-id="bef0a-152">If <see langword="true" />, the control paints itself rather than the operating system doing so.</span></span> <span data-ttu-id="bef0a-153">Se for <see langword="false" />, o evento <see cref="E:System.Windows.Forms.Control.Paint" /> não será gerado.</span><span class="sxs-lookup"><span data-stu-id="bef0a-153">If <see langword="false" />, the <see cref="E:System.Windows.Forms.Control.Paint" /> event is not raised.</span></span> <span data-ttu-id="bef0a-154">Esse estilo se aplica apenas às classes derivadas de <see cref="T:System.Windows.Forms.Control" />.</span><span class="sxs-lookup"><span data-stu-id="bef0a-154">This style only applies to classes derived from <see cref="T:System.Windows.Forms.Control" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="UseTextForAccessibility">
      <MemberSignature Language="C#" Value="UseTextForAccessibility" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UseTextForAccessibility = int32(262144)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UseTextForAccessibility" />
      <MemberSignature Language="VB.NET" Value="UseTextForAccessibility" />
      <MemberSignature Language="C++ CLI" Value="UseTextForAccessibility" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>262144</MemberValue>
      <Docs>
        <summary><span data-ttu-id="bef0a-155">Especifica que o valor da propriedade <c>Text</c> do controle, se for definido, determinará o nome e a tecla de atalho padrão da Acessibilidade Ativa do controle.</span><span class="sxs-lookup"><span data-stu-id="bef0a-155">Specifies that the value of the control's <c>Text</c> property, if set, determines the control's default Active Accessibility name and shortcut key.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>