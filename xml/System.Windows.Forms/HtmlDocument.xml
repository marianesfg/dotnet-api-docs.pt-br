<Type Name="HtmlDocument" FullName="System.Windows.Forms.HtmlDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa5c50c795de13580125bc432eb2f8089f4ce924" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55386130" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlDocument sealed" />
  <TypeSignature Language="F#" Value="type HtmlDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece acesso programático de nível superior a um documento HTML hospedado pelo controle <see cref="T:System.Windows.Forms.WebBrowser" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> Fornece um wrapper gerenciado em torno do objeto de documento do Internet Explorer, também conhecido como o HTML DOM Document Object Model (). Obtenha uma instância de <xref:System.Windows.Forms.HtmlDocument> por meio de <xref:System.Windows.Forms.WebBrowser.Document%2A> propriedade do <xref:System.Windows.Forms.WebBrowser> controle.  
  
 Marcas HTML dentro de um documento HTML podem ser aninhadas dentro uma da outra. <xref:System.Windows.Forms.HtmlDocument> Assim, representa uma árvore de documentos, cujos filhos são instâncias da <xref:System.Windows.Forms.HtmlElement> classe. O exemplo de código a seguir mostra um arquivo HTML simples.  
  
```  
<HTML>  
    <BODY>  
        <DIV name="Span1">Simple HTML Form</DIV>  
        <FORM>  
            <SPAN name="TextLabel">Enter Your Name:</SPAN>  
            <INPUT type="text" size="20" name="Text1">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 Neste exemplo, <xref:System.Windows.Forms.HtmlDocument> representa o documento inteiro dentro do `HTML` marcas. O `BODY`, `DIV`, `FORM` e `SPAN` marcas são representadas por indivíduo <xref:System.Windows.Forms.HtmlElement> objetos.  
  
 Há várias maneiras que você pode acessar os elementos nessa árvore. Use o <xref:System.Windows.Forms.HtmlDocument.Body%2A> propriedade para acessar o `BODY` marca e todos os seus filhos. O <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> propriedade lhe dá o <xref:System.Windows.Forms.HtmlElement> para o elemento em uma página HTML que tem o foco de entrada do usuário. Todos os elementos em uma página HTML podem ter um nome; o <xref:System.Windows.Forms.HtmlDocument.All%2A> coleção fornece acesso a cada <xref:System.Windows.Forms.HtmlElement> usando seu nome como um índice. <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A> retornará um <xref:System.Windows.Forms.HtmlElementCollection> de todos os <xref:System.Windows.Forms.HtmlElement> objetos com um determinado nome da marca HTML, como `DIV` ou `TABLE`. <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> Retorna o único <xref:System.Windows.Forms.HtmlElement> correspondente para a ID exclusiva que você fornecer. <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> retornará o <xref:System.Windows.Forms.HtmlElement> que pode ser encontrado na tela nas coordenadas do ponteiro de mouse fornecido.  
  
 Você também pode usar o <xref:System.Windows.Forms.HtmlDocument.Forms%2A> e <xref:System.Windows.Forms.HtmlDocument.Images%2A> coleção para iterar por meio de elementos que representam o usuário de entrada formulários e elementos gráficos, respectivamente.  
  
 <xref:System.Windows.Forms.HtmlDocument> se baseia em interfaces não gerenciadas implementadas pelo DOM do DHTML do Internet Explorer: `IHTMLDocument`, `IHTMLDocument2`, `IHTMLDocument3`, e `IHTMLDocument4`. Somente propriedades usada com mais frequência e métodos nessas interfaces não gerenciadas são expostos por <xref:System.Windows.Forms.HtmlDocument>. Você pode acessar todas as outras propriedades e métodos diretamente usando o <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> propriedade, que pode ser convertido para o ponteiro de interface não gerenciada desejado.  
  
 Um documento HTML pode conter quadros, que são janelas diferentes dentro do <xref:System.Windows.Forms.WebBrowser> controle. Cada quadro exibe sua própria página HTML. O <xref:System.Windows.Forms.HtmlWindow.Frames%2A> coleção está disponível por meio de <xref:System.Windows.Forms.HtmlDocument.Window%2A> propriedade. Você também pode usar o <xref:System.Windows.Forms.HtmlDocument.Window%2A> propriedade para redimensionar a página exibida, rolar o documento ou exibir alertas e solicita ao usuário.  
  
 <xref:System.Windows.Forms.HtmlDocument> expõe os eventos mais comuns que você esperaria para lidar com ao hospedar páginas HTML. Para eventos que não são expostos diretamente pela interface, você pode adicionar um manipulador de eventos usando <xref:System.Windows.Forms.HtmlDocument.AttachEventHandler%2A>.  
  
 Arquivos HTML podem conter `SCRIPT` marcas que encapsulam código escrito em uma das linguagens de script ativo, como o VBScript ou JScript. O <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> método fornece para a execução das propriedades e métodos definidos em um `SCRIPT` marca.  
  
> [!NOTE]
>  Enquanto a maioria da propriedades, métodos e eventos em <xref:System.Windows.Forms.HtmlDocument> tiver mantido os mesmos nomes que eles têm sobre o DOM não gerenciado, alguns foram alterados para manter a consistência com o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
   
  
## Examples  
 O exemplo de código a seguir usa dados do banco de dados Northwind para criar uma `HTML TABLE` dinamicamente usando <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. O <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> método também é usado, pela primeira vez para adicionar as células (`TD` elementos) para linhas (`TR` elementos), em seguida, para adicionar linhas à tabela e, finalmente, para anexar a tabela ao final do documento atual. O exemplo de código requer que o aplicativo tem um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`. O código deve ser chamado depois que um documento foi carregado.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-US/docs/Web/API/Document">documento – APIs da Web</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752574(v=vs.85)">Interface IHTMLDocument2</related>
  </Docs>
  <Members>
    <Member MemberName="ActiveElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement ActiveElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement ActiveElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActiveElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ ActiveElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fornece o <see cref="T:System.Windows.Forms.HtmlElement" /> que tem o foco de entrada do usuário no momento.</summary>
        <value>O <see cref="T:System.Windows.Forms.HtmlElement" /> que tem o foco de entrada do usuário no momento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o documento tem o foco, mas nenhum elemento do documento tem foco, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> retorna o elemento correspondente a `<BODY>` marca.  
  
 Se o documento não tem o foco, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> retorna `null`.  
  
 Se o elemento atual com o foco de entrada for uma célula (`TD`) em um HTML `TABLE` marca <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> retornará o elemento que contém o `TABLE` elemento.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752581(v=vs.85)">Propriedade activeElement</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Drawing.Color" /> de um hiperlink quando clicado por um usuário.</summary>
        <value>O <see cref="T:System.Drawing.Color" /> para links ativos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um link está ativo quando um usuário é clicando nele. Altere essa propriedade para alterar a cor do link antes da navegação.  
  
 O <xref:System.Drawing.Color> digite o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] dá suporte a um `Alpha` valor, mas o HTML DOM não. Portanto, `Alpha` não terá efeito quando atribuído a essa propriedade.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752564.aspx">Propriedade alinkColor</related>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma instância de <see cref="T:System.Windows.Forms.HtmlElementCollection" />, que armazena todos os objetos <see cref="T:System.Windows.Forms.HtmlElement" /> para o documento.</summary>
        <value>O <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de todos os elementos no documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.HtmlDocument.All%2A> coleção fornece acesso aleatório a qualquer elemento no documento HTML, independentemente de sua posição na árvore do documento. Usá-lo para acessar qualquer elemento em um documento HTML por nome, ID ou índice. Você também pode iterar sobre todos os elementos dentro de um documento.  
  
 Alguns elementos, tais como `HEAD` e `TITLE`, nunca terão nomes associados a eles. Todos os outros elementos terão nomes apenas se o autor do arquivo HTML atribuídos a eles. Você pode acessar elementos sem nomes por ID ou índice.  
  
 Você não pode adicionar elementos diretamente para o <xref:System.Windows.Forms.HtmlDocument.All%2A> coleta, porque todos os elementos em um HTML arquivo fora do `HTML` marca deve ter um elemento pai. Use o <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> método ou o <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propriedade em <xref:System.Windows.Forms.HtmlElement> para adicionar novos elementos na árvore.  
  
   
  
## Examples  
 O exemplo de código a seguir itera em todos os elementos em um documento e conjuntos de `Enabled=True`, permitindo que todos os elementos que podem ter sido desabilitados por padrão para impedir que a entrada do usuário enquanto o documento estava sendo carregado. O exemplo de código requer que o aplicativo contém um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752582.aspx">todas as propriedades</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">O nome do evento que você deseja manipular.</param>
        <param name="eventHandler">O código gerenciado que manipula o evento.</param>
        <summary>Adiciona um manipulador de eventos para o evento HTML DOM nomeado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você não deve anexar a um evento para o documento ou um de seus objetos até que o documento tiver concluído o carregamento. É o mais antigo que você deve chamar esse método na <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos do <xref:System.Windows.Forms.WebBrowser> controle.  
  
 Esse método permite que você anexar manipuladores a eventos do DOM não gerenciados não são expostos por <xref:System.Windows.Forms.HtmlDocument>. Para obter mais informações sobre os eventos DOM não gerenciados disponíveis, consulte [acessando membros não expostos no modelo de objeto de documento HTML gerenciado](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md) e as interfaces IHTMLDocument: [IHTMLDocument](https://go.microsoft.com/fwlink/?LinkId=104882), [IHTMLDocument2](https://go.microsoft.com/fwlink/?LinkId=104884), [IHTMLDocument3](https://go.microsoft.com/fwlink/?LinkId=104886), [IHTMLDocument4](https://go.microsoft.com/fwlink/?LinkId=104887), [IHTMLDocument5](https://go.microsoft.com/fwlink/?LinkId=104888).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752535.aspx">attachEvent método</related>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cor da tela de fundo do nó documento HTML.</summary>
        <value>O <see cref="T:System.Drawing.Color" /> do plano de fundo do documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.BackColor%2A> será exibida quando o elemento não ocupa a área da tela.  
  
 O <xref:System.Drawing.Color> digite o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] dá suporte a um `Alpha` valor, mas o HTML DOM não. Portanto, `Alpha` não terá efeito quando atribuído a essa propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752565.aspx">Propriedade bgColor</related>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Body" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Body { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Windows.Forms.HtmlElement" /> para a marca <c>BODY</c>.</summary>
        <value>O <see cref="T:System.Windows.Forms.HtmlElement" /> do objeto para o <c>corpo</c> marca.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um documento HTML é dividido em duas seções principais:  
  
-   `HEAD`, que contém o título do documento, qualquer documento metadados, e `SCRIPT` elementos.  
  
-   `BODY`, que contém todos os elementos envolvidos no na tela aparência do documento.  
  
 Não há nenhum equivalente `Head` propriedade <xref:System.Windows.Forms.HtmlDocument>. Para obter o `HEAD` elemento, use <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um novo `DIV` elemento e o anexa à parte inferior do documento usando o <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> método.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752585.aspx">Propriedade Body</related>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário clica em qualquer lugar no documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir detecta um clique no documento, localiza o elemento e usa <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> para alinhar o elemento com a parte superior da página da Web.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752611.aspx">onclick eventos</related>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.ContextMenuShowing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuShowing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ ContextMenuShowing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário solicita para exibir o menu de contexto do documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, se o botão direito do mouse o mouse em um documento ou um elemento em um documento, ele exibirá um determinado do menu de contexto padrão para o elemento. Use esse evento para cancelar a exibição do menu de contexto e exibir um de seus próprios.  
  
   
  
## Examples  
 O código a seguir capturas de exemplo o <xref:System.Windows.Forms.HtmlDocument.ContextMenuShowing> eventos e usa-o para exibir um <xref:System.Windows.Forms.ContextMenuStrip>.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536914.aspx">oncontextmenu eventos</related>
      </Docs>
    </Member>
    <Member MemberName="Cookie">
      <MemberSignature Language="C#" Value="public string Cookie { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Cookie" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookie As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Cookie { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cookie : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define os cookies HTTP associados a esse documento.</summary>
        <value>Um <see cref="T:System.String" /> contendo uma lista de cookies, com cada cookie separado por um ponto e vírgula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> propriedade de <xref:System.Windows.Forms.HtmlDocument> expõe todos os cookies definido para uma página da Web.  
  
 Um *cookie* é um par de nome/valor arbitrário associado a uma determinada página. Os desenvolvedores da Web usam cookies para acompanhar quando os usuários visita ou retornam a um site da Web. Um cookie é composto de várias partes, chamados trilhas de cookie, que determinam o seguinte:  
  
-   O documento definido ao qual o cookie se aplica; seu domínio e caminho.  
  
-   O nome e o valor do cookie.  
  
-   A data de expiração do cookie.  
  
-   Se o cookie só pode ser enviado usando uma conexão segura.  
  
 O <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> propriedade pode conter vários cookies.  
  
 Você só pode usar o <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> propriedade para definir um cookie por vez.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752569.aspx">Propriedade do cookie</related>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement CreateElement (string elementTag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement CreateElement(string elementTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (elementTag As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ CreateElement(System::String ^ elementTag);" />
      <MemberSignature Language="F#" Value="member this.CreateElement : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.CreateElement elementTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementTag">O nome do elemento HTML a ser criado.</param>
        <summary>Cria um novo <see langword="HtmlElement" /> do tipo de marca HTML especificado.</summary>
        <returns>Um novo elemento do tipo de marca especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `elementTag` pode ser um de qualquer uma das marcas HTML com suporte no Internet Explorer, exceto para `FRAME` ou `IFRAME`.  
  
 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Retorna um elemento não conectado à árvore do documento atual. Para adicionar o elemento no documento, use o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> ou <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> métodos.  
  
 Esse método não afetará o estado do código-fonte de um documento existente quando você usa o <xref:System.Windows.Forms.WebBrowser> do controle **Exibir código-fonte** comando de menu de contexto ou a <xref:System.Windows.Forms.WebBrowser.DocumentText%2A> e <xref:System.Windows.Forms.WebBrowser.DocumentStream%2A> propriedades do <xref:System.Windows.Forms.WebBrowser> controle.  
  
 Quando você cria novos elementos com <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, você não poderá definir determinadas propriedades, tais como `Name`. Em casos em que você precisa definir o atributo de nome, atribuí-los como HTML para o <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propriedade de outro objeto no documento.  
  
   
  
## Examples  
 O seguinte exemplo de código usa a tabela de dados do banco de dados Northwind para criar um HTML usando <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. O <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> método também é usado, pela primeira vez para adicionar as células (`TD` elementos) para linhas (`TR` elementos), em seguida, para adicionar linhas à tabela e, finalmente, para anexar a tabela ao final do documento atual. O exemplo de código requer que o aplicativo tem um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752570.aspx">Método de createElement</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncoding">
      <MemberSignature Language="C#" Value="public string DefaultEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultEncoding { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultEncoding : string" Usage="System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a codificação usada por padrão para o documento atual.</summary>
        <value>O <see cref="T:System.String" /> que representa a codificação que o navegador usa quando a página é o primeira exibido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A codificação padrão é a codificação de gerenciado HTML documento Object Model (DOM) tentará usar quando a página é inicialmente carregada. Essa codificação é derivada a partir do Internet Explorer **Encoding** as configurações, ou de um `META` marca inserida dentro da página.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms537500.aspx">Reconhecimento de conjunto de caracteres</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ms533714.aspx">Propriedade defaultCharset</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">O nome do evento que você deseja deixar de manipular.</param>
        <param name="eventHandler">O código gerenciado que manipula o evento.</param>
        <summary>Remove um manipulador de eventos de um evento nomeado no DOM HTML.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752539.aspx">detachEvent, método</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cadeia de caracteres que descreve o domínio deste documento para fins de segurança.</summary>
        <value>Um domínio válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, duas páginas da Web em diferentes quadros são impedidas de acessar uns dos outros conteúdo usando script; até mesmo www.microsoft.com e msdn.microsoft.com são, nessa instância, considerados domínios diferentes. Para habilitar o script cross-frame para páginas do mesmo domínio de nível superior, você pode atribuir um novo valor para o <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propriedade. No exemplo de URL a concluírem, definindo <xref:System.Windows.Forms.HtmlDocument.Domain%2A> Microsoft.com permitiria que ambas as páginas para se comunicar entre si.  
  
 Cadeias de caracteres atribuídas para o <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propriedade deve ser válidos domínios de nível superior. No exemplo anterior de URL, você pode definir <xref:System.Windows.Forms.HtmlDocument.Domain%2A> Microsoft.com, mas não para .com, que permitiria que qualquer página na Internet para o conteúdo de uma página de script.  
  
 Não é possível usar o <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propriedade para habilitar scripts entre quadros de páginas acessadas usando os dois protocolos diferentes. Se trata de um quadro em sua página de um servidor Web (o protocolo http://) e outro vem do protocolo de sistema (o file://) do arquivo, eles não poderão se comunicar entre si, independentemente do valor da <xref:System.Windows.Forms.HtmlDocument.Domain%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O argumento para a propriedade <c>Domain</c> deve ser um nome de domínio válido usando as convenções de DNS (Sistema de Nomes de Domínio).</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752575.aspx">Propriedade de domínio</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ms533028.aspx">Sobre script Cross-Frame e segurança</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ms535250.aspx">Objeto de quadro</related>
      </Docs>
    </Member>
    <Member MemberName="DomDocument">
      <MemberSignature Language="C#" Value="public object DomDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomDocument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomDocument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomDocument { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomDocument : obj" Usage="System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o ponteiro da interface não gerenciada para este <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
        <value>Uma <see cref="T:System.Object" /> que representa uma <c>IDispatch</c> ponteiro para o documento não gerenciado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> é um wrapper para o Internet Explorer modelo DOM (Document Object), que é escrito em COM. Se você precisar acessar propriedades não expostas ou métodos nas interfaces COM subjacente, como `IHTMLDocument2`, você pode usar esse objeto para a consulta para eles.  
  
 Para usar as interfaces não gerenciadas, importe a biblioteca MSHTML (Mshtml. dll) para seu aplicativo. No entanto, você também pode executar não expostos de propriedades e métodos usando o `IDispatch::Invoke` método.  
  
   
  
## Examples  
 Conversões de exemplo de código a seguir a <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> para um `IHTMLDocument2` ponteiro e exibe o valor da `lastModified` propriedade, que informa que o proprietário do documento atualizado seu conteúdo. O exemplo de código requer que você tenha um <xref:System.Windows.Forms.Button> em seu formulário chamado `Button6`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> permissão. Enumeração associada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752574(v=vs.85)">Interface IHTMLDocument2</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=128638">Referência MSHTML</related>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public string Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Encoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a codificação de caracteres desse documento.</summary>
        <value>O <see cref="T:System.String" /> que representa a codificação de caracteres atual.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms537500.aspx">Reconhecimento de conjunto de caracteres</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752566.aspx">Propriedade charset</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlDocument.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser testado.</param>
        <summary>Testa o objeto quanto a igualdade em relação ao objeto atual.</summary>
        <returns><see langword="true" /> se os objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecCommand">
      <MemberSignature Language="C#" Value="public void ExecCommand (string command, bool showUI, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecCommand(string command, bool showUI, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecCommand (command As String, showUI As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecCommand(System::String ^ command, bool showUI, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.ExecCommand : string * bool * obj -&gt; unit" Usage="htmlDocument.ExecCommand (command, showUI, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">O nome do comando a ser executado.</param>
        <param name="showUI">Se as caixas de diálogo específicas a um comando ou caixas de mensagem devem ou não ser mostradas ao usuário.</param>
        <param name="value">O valor a ser atribuído usando o comando. Não aplicável a todos os comandos.</param>
        <summary>Executa o comando especificado no documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> expõe uma grande variedade de comandos para o qual há são sem métodos expostos no <xref:System.Windows.Forms.HtmlDocument>. Usando <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> inserir novos elementos HTML, selecionar e formatar o texto e desmarque quaisquer credenciais de autenticação em cache. Para obter uma lista completa de comandos, consulte [identificadores de comando](https://go.microsoft.com/fwlink/?LinkId=198814).  
  
> [!NOTE]
>  Alguns comandos, como a cópia, têm valores de retorno. Na implementação atual de <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A>, não é possível obter um valor de retorno da sua chamada. Para recuperar valores de retorno, use o método não gerenciado correspondente em um <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> de referência em vez disso.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536419.aspx">execCommand método</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=198814">Identificadores de comando</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlDocument.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o foco de entrada do usuário no documento atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando <xref:System.Windows.Forms.HtmlDocument.Focus%2A> definirá o foco no <xref:System.Windows.Forms.WebBrowser> controle, se o controle atualmente não tem o foco. Se o documento é hospedado dentro de um `FRAME`, esse método irá colocar o foco em que `FRAME` dentro de `FRAMESET`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /> permissão para definir o foco em um formulário. Enumeração associada: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752527.aspx">Concentre-se o método</related>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Focused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.HtmlDocument.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o documento tem foco de entrada do usuário.</summary>
        <value><see langword="true" /> Se o documento tiver foco; Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.Focus" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.Focusing" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre antes do foco ser fornecido para o documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.Focusing> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.Focusing> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#424](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#424)]
 [!code-vb[System.Windows.Forms.EventExamples#424](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#424)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752520.aspx">onfocusin evento</related>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cor do texto do documento.</summary>
        <value>A cor do texto no documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Drawing.Color> <xref:System.Drawing.Color> digite o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] dá suporte a um `Alpha` valor, mas o HTML DOM não. Portanto, `Alpha` não terá efeito quando atribuído a essa propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752580.aspx">Propriedade fgColor</related>
      </Docs>
    </Member>
    <Member MemberName="Forms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Forms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Forms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Forms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forms As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Forms { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Forms : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Forms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de todos os elementos <c>&lt;FORM&gt;</c> no documento.</summary>
        <value>Uma <see cref="T:System.Windows.Forms.HtmlElementCollection" /> do <c>&lt;formulário&gt;</c> elementos dentro do documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um documento HTML pode ter um ou mais `FORM` elementos com campos de entrada para enviar dados de volta para um servidor.  
  
 Você pode enviar de forma programática um `FORM` obtendo seu <xref:System.Windows.Forms.HtmlElement> e chamar seu `Submit` usando o método o <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> método.  
  
 Para adicionar uma nova `FORM` a um documento, você pode criar um novo `FORM` marcar como uma cadeia de caracteres e atribuí-lo para o <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propriedade de um elemento adicionados anteriormente no DOM do HTML; ou você pode usar o <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> método, defina suas propriedades usando <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>, e adicioná-lo como um filho de um elemento existente usando <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir itera em todos os `Form` elementos em uma Web de página e limpa todas as entrada do usuário, a configuração de formulários de volta para seus valores padrão.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752591.aspx">Propriedade Forms</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752432.aspx">Interface IHTMLFormElement</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementById (id As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetElementById : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">O atributo de ID do elemento a ser recuperado.</param>
        <summary>Recupera um único <see cref="T:System.Windows.Forms.HtmlElement" /> usando o atributo <c>ID</c> do elemento como um termo de pesquisa.</summary>
        <returns>Retorna o primeiro objeto com o mesmo atributo <c>ID</c> que o do valor especificado ou então <see langword="null" />, caso o <paramref name="id" /> não possa ser encontrado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se houver vários elementos no documento com o mesmo valor de ID, <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> retornará a primeira é que ele encontra.  
  
   
  
## Examples  
 O exemplo de código a seguir recupera uma nomeada `TABLE` de um documento conta o número de linhas e exibe o resultado na página da Web. O exemplo de código requer que você tenha um <xref:System.Windows.Forms.WebBrowser> controle em seu projeto chamado `WebBrowser1`, e que você carregou uma página da Web com um `TABLE` cujo `ID` atributo é `Table1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752543.aspx">getElementById método</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementFromPoint(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementFromPoint(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromPoint : System.Drawing.Point -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementFromPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">A posição x e y do elemento na tela, em relação ao canto superior esquerdo do documento.</param>
        <summary>Recupera o elemento HTML localizado nas coordenadas de cliente especificadas.</summary>
        <returns>O <see cref="T:System.Windows.Forms.HtmlElement" /> no local da tela especificado no documento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> usa as coordenadas do cliente, na qual o canto superior esquerdo do documento é atribuído o valor de (0,0). Coordenadas do cliente para a posição atual do cursor podem ser obtidas usando o <xref:System.Windows.Forms.HtmlWindow.Position%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir detecta um clique no documento, localiza o elemento e usa <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> para alinhar o elemento com a parte superior da página da Web.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752576.aspx">elementFromPoint método</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlDocument.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">O nome da marca HTML para os objetos <see cref="T:System.Windows.Forms.HtmlElement" /> que você deseja recuperar.</param>
        <summary>Recupera uma coleção de elementos com a marca HTML especificada.</summary>
        <returns>A coleção de elementos cujo nome da marca é igual ao argumento <paramref name="tagName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Páginas HTML geralmente usam o `META` marca para inserir informações arbitrárias sobre o documento. O exemplo de código HTML a seguir recupera todos os `META` localiza as marcas dentro de um documento HTML, o `META` marca com o nome `Description`e o exibe para o usuário. O exemplo de código requer que o aplicativo tem um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752545.aspx">getElementsByTagName método</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlDocument.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera o código hash para esse objeto.</summary>
        <returns>Um <see cref="T:System.Int32" /> que representa um hash na memória desse objeto.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Images" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Images" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Images As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Images { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Images : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de todas as marcas de imagem no documento.</summary>
        <value>Uma coleção de objetos <see cref="T:System.Windows.Forms.HtmlElement" />, um para cada marca IMG no documento. Elementos são retornados da coleção na ordem de origem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.Images%2A> Retorna uma coleção de <xref:System.Windows.Forms.HtmlElement> objetos. Para acessar atributos, como `ALT` e `SRC`, que não são diretamente expostas pela <xref:System.Windows.Forms.HtmlElement>, use o <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> método.  
  
 Para adicionar uma nova imagem a um documento, crie uma nova `IMG` marcar como uma cadeia de caracteres e atribuí-lo para o <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propriedade de um elemento adicionado anteriormente no DOM do HTML; ou usar o <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> método, defina suas propriedades usando <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>e adicioná-lo como um filho de um elemento existente usando <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir examina o `ALT` atributos de todas as imagens no documento e define um padrão `ALT` atributo se um valor já não estiver definido.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752593.aspx">imagens de propriedade</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeScript">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Executa uma função de script ativo definida em uma página HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir executa o conteúdo de um script em uma página da Web. O exemplo de código requer que você carregou a seguinte página da Web.  
  
```  
<HTML>  
<SCRIPT>  
function test(name, address) {  
window.alert("Name is " + name + "; address is " + address);  
}  
</SCRIPT>  
  
<BODY>  
</BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string -&gt; obj" Usage="htmlDocument.InvokeScript scriptName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">O nome do método de script que será invocado.</param>
        <summary>Executa uma função de script ativo definida em uma página HTML.</summary>
        <returns>O objeto retornado pela chamada de Script Ativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tipo subjacente do objeto retornado por <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> irão variar. Se a função de script ativo chamada retornar dados escalares, como uma cadeia de caracteres ou um número inteiro, ele será retornado como uma cadeia de caracteres. Se ele retorna um objeto baseado em script, como um objeto criado usando do VBScript ou JScript `new` operador, ela será do tipo `Object`. (Você pode fazer chamadas nesses objetos, chamando <xref:System.Object.GetType%2A> e usando <xref:System.Type.InvokeMember%2A>.) Se ele retorna um elemento HTML DOM, como um `DIV` ou um `TABLE`, ela será do tipo `Object`; se você tiver adicionado uma referência projeto a MSHTML. DLL, no entanto, ele será convertido para seu tipo específico de DOM não gerenciado.  
  
 Você pode chamar qualquer função escrita em qualquer linguagem de script ativo instalada no computador do usuário, incluindo o JScript e VBScript.  
  
 O <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> fará nada se o usuário desativou explicitamente a execução de scripts no Internet Explorer, ou se a configuração de segurança atual para a página da Web não permite.  
  
   
  
## Examples  
 O exemplo de código a seguir executa o conteúdo de um script em uma página da Web. O exemplo de código requer que você tenha um <xref:System.Windows.Forms.WebBrowser> em seu aplicativo chamado `WebBrowser1`, e que você carregou a seguinte página da Web.  
  
```  
<HTML>  
  
    <HEAD>  
        <TITLE>Invoke Script Sample</TITLE>  
  
        <SCRIPT>  
            function MyObject() {  
                this.Data = "Data for my private object.";  
            }  
            // Return a string.  
            function test() {  
                return("This is a test.");  
            }  
            // Return a JScript object.  
            function testJScriptObject() {  
                return(new(MyObject));  
            }  
            // Return a DOM element.  
            function testElement() {  
                return(div1);  
            }  
        </SCRIPT>  
    </HEAD>  
  
    <BODY>  
  
        <DIV id="div1">  
        </DIV>  
  
    </BODY>  
  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string * obj[] -&gt; obj" Usage="htmlDocument.InvokeScript (scriptName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="scriptName">O nome do método de script que será invocado.</param>
        <param name="args">Os argumentos a serem passados para o método de script.</param>
        <summary>Executa uma função de script ativo definida em uma página HTML.</summary>
        <returns>O objeto retornado pela chamada de Script Ativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tipo subjacente do objeto retornado por <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> irão variar. Se a função de script ativo chamada retornar dados escalares, como uma cadeia de caracteres ou um número inteiro, ele será retornado como uma cadeia de caracteres. Se ele retorna um objeto baseado em script, como um objeto criado usando do VBScript ou JScript `new` operador, ela será do tipo `Object`. (Você pode fazer chamadas nesses objetos, chamando <xref:System.Object.GetType%2A> e usando <xref:System.Type.InvokeMember%2A>.) Se ele retorna um elemento HTML DOM, como um `DIV` ou um `TABLE`, ela será do tipo `Object`; se você tiver adicionado uma referência projeto a MSHTML. DLL, no entanto, ele será convertido para seu tipo específico de DOM não gerenciado.  
  
 Você pode chamar qualquer função escrita em qualquer linguagem de script ativo instalada no computador do usuário, incluindo o JScript e VBScript.  
  
 Esse método não fará nada se o usuário desativou explicitamente a execução de scripts no Internet Explorer, ou se a configuração de segurança atual para a página da Web não permite.  
  
   
  
## Examples  
 O exemplo de código a seguir executa o conteúdo de um script em uma página da Web. O exemplo de código requer que você tenha um <xref:System.Windows.Forms.WebBrowser> em seu aplicativo chamado `WebBrowser1`, e que você carregou a seguinte página da Web.  
  
```  
<HTML>  
    <SCRIPT>  
        function test(name, address) {  
            window.alert("Name is " + name + "; address is " + address);  
        }  
    </SCRIPT>  
  
    <BODY>  
    </BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cor dos hiperlinks.</summary>
        <value>A cor dos hiperlinks no documento atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Drawing.Color> digite o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] dá suporte a um `Alpha` valor, mas o HTML DOM não. Portanto, `Alpha` não terá efeito quando atribuído a essa propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752608.aspx">Propriedade linkColor</related>
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Links { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Links : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Links" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma lista de todos os hiperlinks neste documento HTML.</summary>
        <value>Um <see cref="T:System.Windows.Forms.HtmlElementCollection" /> de <see cref="T:System.Windows.Forms.HtmlElement" /> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa coleção conterá todos os links criados usando o `A`, `LINK`, e `AREA` marcas em HTML.  
  
 O <xref:System.Windows.Forms.HtmlElement> encapsulam a objetos contidos nesta coleção não gerenciada `IHTMLLinkElement` interface. Para acessar as propriedades da interface subjacente com segurança, use o <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> método.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752595.aspx">links de propriedade</related>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre enquanto o foco está saindo de um controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.LosingFocus> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.LosingFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#425](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#425)]
 [!code-vb[System.Windows.Forms.EventExamples#425](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#425)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752521.aspx">onfocusout evento</related>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário clica no botão esquerdo do mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.HtmlDocument.MouseDown> evento ocorre antes do <xref:System.Windows.Forms.HtmlDocument.Click> eventos.  
  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.MouseDown> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.MouseDown> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#426](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#426)]
 [!code-vb[System.Windows.Forms.EventExamples#426](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#426)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752619.aspx">onmousedown eventos</related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o cursor do mouse não está mais passando sobre o documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.MouseLeave> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.MouseLeave> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#427](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#427)]
 [!code-vb[System.Windows.Forms.EventExamples#427](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#427)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536948.aspx">Evento onmouseout</related>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o mouse é movido sobre o documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.MouseMove> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.MouseMove> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#428](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#428)]
 [!code-vb[System.Windows.Forms.EventExamples#428](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#428)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752620.aspx">onmousemove eventos</related>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o mouse é movido sobre o documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.MouseOver> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.MouseOver> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#429](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#429)]
 [!code-vb[System.Windows.Forms.EventExamples#429](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#429)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752622.aspx">onmouseover eventos</related>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário libera o botão esquerdo do mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlDocument.MouseUp> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlDocument> chamado `HtmlDocument1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlDocument.MouseUp> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#430](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#430)]
 [!code-vb[System.Windows.Forms.EventExamples#430](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#430)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752623.aspx">onmouseup eventos</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">A primeira instância a ser comparada.</param>
        <param name="right">A segunda instância a ser comparada.</param>
        <summary>Retorna um valor que indica se as instâncias de <see cref="T:System.Windows.Forms.HtmlDocument" /> especificadas representam o mesmo valor.</summary>
        <returns><see langword="true" /> se as instâncias especificadas forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[É o método equivalente para esse operador <xref:System.Windows.Forms.HtmlDocument.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="System.Windows.Forms.HtmlDocument.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">A primeira instância a ser comparada.</param>
        <param name="right">A segunda instância a ser comparada.</param>
        <summary>Retorna um valor que indica se as instâncias de <see cref="T:System.Windows.Forms.HtmlDocument" /> especificadas não representam o mesmo valor.</summary>
        <returns><see langword="true" /> se as instâncias especificadas não forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlDocument OpenNew(bool replaceInHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (replaceInHistory As Boolean) As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlDocument ^ OpenNew(bool replaceInHistory);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : bool -&gt; System.Windows.Forms.HtmlDocument" Usage="htmlDocument.OpenNew replaceInHistory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replaceInHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="replaceInHistory">Indica se a navegação da nova janela deve substituir o elemento anterior no histórico de navegação do DOM.</param>
        <summary>Obtém um novo <see cref="T:System.Windows.Forms.HtmlDocument" /> a ser usado com o método <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />.</summary>
        <returns>Um novo documento para gravação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> limpará o documento carregado anterior, incluindo qualquer estado associado, como variáveis. Ele não fará com que eventos de navegação em <xref:System.Windows.Forms.WebBrowser> a ser gerado.  
  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> sempre cria um novo documento na janela atual. Para abrir um documento em uma nova janela, use o <xref:System.Windows.Forms.HtmlWindow.Open%2A> método no <xref:System.Windows.Forms.HtmlWindow> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir prepara o DOM para gravação e grava um novo documento usando o <xref:System.Windows.Forms.HtmlDocument.Write%2A> método.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752628.aspx">Método Open</related>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool with get, set" Usage="System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a direção do texto no documento atual.</summary>
        <value><see langword="true" /> Se o texto é renderizado da direita para a esquerda; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> não terá qualquer valor, a menos que ele foi definido explicitamente, no código ou em HTML.  
  
 Ao contrário do <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> propriedade em controles dos Windows Forms, <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> no HTML DOM gerenciado não afetará a direção do texto latino.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752540.aspx">Propriedade dir</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Stop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Stop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Stop As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Stop;" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a navegação para outra página da Web é interrompida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O carregamento de uma página da Web será interrompido se o código de programa chamar o <xref:System.Windows.Forms.WebBrowser.Stop%2A> método da <xref:System.Windows.Forms.WebBrowser> controle. Falhas de navegação causadas por interrupções de rede ou sites com defeito não causará <xref:System.Windows.Forms.HtmlDocument.Stop> ocorra.  
  
 Para obter mais informações sobre como manipular eventos, consulte [tratando e gerando eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 O exemplo de código a seguir redefine a barra de status em um aplicativo do Windows Forms quando o `Stop` evento ocorreu. O exemplo de código requer que você tenha um <xref:System.Windows.Forms.StatusBar> controle chamado `StatusBar1` em seu aplicativo.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752561.aspx">OnStop eventos</related>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor de texto da marca <c>&lt;TITLE&gt;</c> no documento HTML atual.</summary>
        <value>O título do documento atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Forms.HtmlDocument.Title%2A> propriedade para identificar o documento por meio de um nome legível por humanos.  
  
 As alterações a essa propriedade também se refletirão na <xref:System.Windows.Forms.WebBrowser.DocumentTitle%2A> propriedade do <xref:System.Windows.Forms.WebBrowser> controle.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um hiperlink HTML para o documento atual usando a URL do documento como o local do link e o título do documento como o texto do link. O exemplo de código requer que o aplicativo tem um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#14)]
 [!code-vb[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.WebBrowser.DocumentTitle" />
        <altmember cref="T:System.Windows.Forms.WebBrowser" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlDocument.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a URL que descreve o local deste documento.</summary>
        <value>Um <see cref="T:System.Uri" /> que representa a URL deste documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade é somente para leitura. Para navegar para um novo documento, use o <xref:System.Windows.Forms.WebBrowser.Url%2A> propriedade no <xref:System.Windows.Forms.WebBrowser> controle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.VisitedLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cor dos links para páginas HTML que o usuário já visitou.</summary>
        <value>A cor dos links visitados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Color` digite o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] dá suporte a um `Alpha` valor, mas o HTML DOM não. Portanto, `Alpha` não terá efeito quando atribuído a essa propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752638.aspx">Propriedade vlinkColor</related>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Window" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Window" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Window As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Window { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Window : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlDocument.Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Windows.Forms.HtmlWindow" /> associado a esse documento.</summary>
        <value>A janela desse documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos os documentos HTML têm um objeto DOM do HTML chamado de uma janela, que pode ser usada para manipular o tamanho da tela do documento e abrir novas janelas, bem como acessar outros objetos importantes, como um <xref:System.Windows.Forms.HtmlHistory>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752599.aspx">Propriedade parentWindow</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.Write : string -&gt; unit" Usage="htmlDocument.Write text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">O texto HTML a ser gravado no documento.</param>
        <summary>Grava uma nova página HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas as chamadas para <xref:System.Windows.Forms.HtmlDocument.Write%2A> deve ser precedido por uma chamada para <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>, que removerá o documento atual e todas as suas variáveis. Suas chamadas para <xref:System.Windows.Forms.HtmlDocument.Write%2A> criará um novo documento HTML em seu lugar. Para alterar apenas uma parte específica do documento, obter o <xref:System.Windows.Forms.HtmlElement> e defina seu <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> propriedade.  
  
 É recomendável que você grave um inteiro válido documento HTML usando o <xref:System.Windows.Forms.HtmlDocument.Write%2A> método, incluindo `HTML` e `BODY` marcas. No entanto, se você gravar apenas os elementos HTML, o modelo de objeto de documento (DOM) fornecerá esses elementos para você.  
  
   
  
## Examples  
 O exemplo de código a seguir abre um novo <xref:System.Windows.Forms.HtmlDocument> e grava em um novo arquivo HTML.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
        <related type="Article" href="https://msdn.microsoft.com/library/default.asp?url=/workshop/browser/mshtml/reference/ifaces/document2/write.asp">Método de gravação</related>
      </Docs>
    </Member>
  </Members>
</Type>