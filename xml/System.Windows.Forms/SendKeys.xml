<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6b90a41865a14f9941de6661b51f1a014e0d0ae" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36514845" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece métodos para enviar pressionamentos de teclas para um aplicativo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.SendKeys> para enviar pressionamentos de tecla e pressionamento de tecla combinações para o aplicativo ativo. Não é possível criar uma instância dessa classe. Para enviar um pressionamento de tecla a uma classe e continuar imediatamente com o fluxo do programa, use <xref:System.Windows.Forms.SendKeys.Send%2A>. Para aguardar até que todos os processos iniciados pelo pressionamento de tecla, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Cada chave é representado por um ou mais caracteres. Para especificar um caractere de teclado única, use o caractere em si. Por exemplo, para representar a letra A, passe na cadeia de caracteres "A" para o método. Para representar a mais de um caractere, acrescente cada caractere adicional para o anterior. Para representar as letras A, B e C, especifique o parâmetro como "ABC".  
  
 O sinal de adição (+), acento circunflexo (^), sinal de porcentagem (%), til (~) e parênteses () têm um significado especial para <xref:System.Windows.Forms.SendKeys>. Para especificar um desses caracteres, coloque-o entre chaves ({}). Por exemplo, para especificar o sinal de adição, use "{+}". Para especificar caracteres de chave, use "{{}"e"{}}". Colchetes ([]) não tenham nenhum significado especial para <xref:System.Windows.Forms.SendKeys>, mas você deve colocá-los entre chaves. Em outros aplicativos, colchetes têm um significado especial que pode ser significativo quando ocorre a troca dinâmica de dados (DDE).  
  
> [!CAUTION]
>  Se seu aplicativo destina para uso internacional com uma variedade de teclados, o uso de <xref:System.Windows.Forms.SendKeys.Send%2A> pode produzir resultados imprevisíveis e deve ser evitado.  
  
 Para especificar caracteres que não são exibidos quando você pressiona uma tecla, como ENTER ou TAB e as chaves que representam ações em vez de caracteres, use os códigos na tabela a seguir.  
  
|Chave|Código|  
|---------|----------|  
|BACKSPACE|{BACKSPACE}, {BS} ou {BKSP}|  
|QUEBRA|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL ou DELETE|{EXCLUIR} ou {DEL}|  
|SETA PARA BAIXO|{DOWN}|  
|END|{END}|  
|ENTER|{Inserir} ou ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|HOME|{HOME}|  
|INS ou INSERT|{Inserir} ou {INS}|  
|SETA PARA A ESQUERDA|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|TELA DE IMPRESSÃO|{PRTSC} (reservado para uso futuro)|  
|SETA PARA A DIREITA|{RIGHT}|  
|BLOQUEIO DE ROLAGEM|{SCROLLLOCK}|  
|TAB|{TAB}|  
|SETA PARA CIMA|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Adicionar de teclado|{ADD}|  
|Subtrair de teclado|{SUBTRACT}|  
|Multiplicar de teclado|{MULTIPLY}|  
|Divisão do teclado|{DIVIDE}|  
  
 Para especificar chaves combinadas com qualquer combinação de teclas ALT, SHIFT e CTRL, preceda o código de chave com um ou mais dos seguintes códigos de erro.  
  
|Chave|Código|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Para especificar que qualquer combinação de SHIFT, CTRL e ALT deve ser mantida pressionado enquanto pressionadas várias outras chaves, coloque o código para essas chaves entre parênteses. Por exemplo, para especificar para manter pressionada a tecla SHIFT enquanto E e C são pressionados, use "+ (EC)". Para especificar para manter pressionada a tecla SHIFT enquanto E é pressionado, seguido de C sem SHIFT, use "+ EC".  
  
 Para especificar teclas de repetição, use o formato {número da chave}. Você deve colocar um espaço entre a chave e o número. Por exemplo, {LEFT 42} significa pressione a tecla de seta para a esquerda 42 vezes; {h 10} significa pressione que h 10 vezes.  
  
> [!NOTE]
>  Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.  
  
> [!NOTE]
>  O <xref:System.Windows.Forms.SendKeys> classe foi atualizada para o .NET Framework 3.0 ativar seu uso em aplicativos que são executados no Windows Vista. A segurança avançada do Windows Vista (conhecida como Controle de Conta de Usuário ou UAC) impede que a implementação anterior funcione conforme o esperado.  
>   
>  O <xref:System.Windows.Forms.SendKeys> classe é suscetível a problemas de atraso, que alguns desenvolvedores tiveram que contornar. A implementação atualizada ainda está suscetível a problemas de atraso, mas é ligeiramente mais rápida e pode exigir alterações para as soluções alternativas. O <xref:System.Windows.Forms.SendKeys> classe tenta usar a implementação anterior primeiro e, se isso falhar, usa a nova implementação. Como resultado, o <xref:System.Windows.Forms.SendKeys> classe comporte de forma diferente em diferentes sistemas operacionais. Além disso, quando o <xref:System.Windows.Forms.SendKeys> classe usa a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A> método não aguardará por mensagens a serem processadas quando elas são enviadas para outro processo.  
>   
>  Se seu aplicativo depende de um comportamento consistente independentemente do sistema operacional, você pode forçar o <xref:System.Windows.Forms.SendKeys> classe para usar a nova implementação adicionando a seguinte configuração de aplicativo ao seu arquivo App. config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Para forçar o <xref:System.Windows.Forms.SendKeys> classe para usar a implementação anterior, use o valor `"JournalHook"` em vez disso.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.SendKeys.Send%2A> método. Para executar o exemplo, cole o seguinte código em um formulário chamado Form1 contendo um botão chamado Button1. Certifique-se de que os eventos de clique estão associados com seus métodos de manipulação de eventos neste exemplo. O controle de botão <xref:System.Windows.Forms.Control.TabIndex%2A> propriedade deve ser definida como 0. Quando o exemplo é executado, clique duas vezes no formulário para disparar o clique do botão eventos.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Processa todas as mensagens do Windows que estão na fila de mensagens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.SendKeys.Flush%2A> para aguardar o aplicativo processe pressionamentos de tecla e outras mensagens de sistema operacional que estão na fila de mensagem. Isso é equivalente a chamar <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> até que existem mais chaves para processar.  
  
> [!NOTE]
>  Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">A cadeia de caracteres de pressionamentos de teclas a ser enviada.</param>
        <summary>Envia pressionamentos de teclas para um aplicativo ativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada chave é representado por um ou mais caracteres. Para especificar um caractere de teclado única, use o caractere em si. Por exemplo, para representar a letra A, passe na cadeia de caracteres "A" para o método. Para representar a mais de um caractere, acrescente cada caractere adicional para o anterior. Para representar as letras A, B e C, especifique o parâmetro como "ABC".  
  
 O sinal de adição (+), acento circunflexo (^), sinal de porcentagem (%), til (~) e parênteses () têm um significado especial para <xref:System.Windows.Forms.SendKeys>. Para especificar um desses caracteres, coloque-o entre chaves ({}). Por exemplo, para especificar o sinal de adição, use "{+}". Para especificar caracteres de chave, use "{{}"e"{}}". Colchetes ([]) não tenham nenhum significado especial para <xref:System.Windows.Forms.SendKeys>, mas você deve colocá-los entre chaves. Em outros aplicativos, colchetes têm um significado especial que pode ser significativo quando ocorre a troca dinâmica de dados (DDE).  
  
> [!CAUTION]
>  Se seu aplicativo destina para uso internacional com uma variedade de teclados, o uso de <xref:System.Windows.Forms.SendKeys.Send%2A> pode produzir resultados imprevisíveis e deve ser evitado.  
  
 Para especificar caracteres que não são exibidos quando você pressiona uma tecla, como ENTER ou TAB e as chaves que representam ações em vez de caracteres, use os códigos na tabela a seguir.  
  
|Chave|Código|  
|---------|----------|  
|BACKSPACE|{BACKSPACE}, {BS} ou {BKSP}|  
|QUEBRA|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL ou DELETE|{EXCLUIR} ou {DEL}|  
|SETA PARA BAIXO|{DOWN}|  
|END|{END}|  
|ENTER|{Inserir} ou ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|HOME|{HOME}|  
|INS ou INSERT|{Inserir} ou {INS}|  
|SETA PARA A ESQUERDA|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|TELA DE IMPRESSÃO|{PRTSC} (reservado para uso futuro)|  
|SETA PARA A DIREITA|{RIGHT}|  
|BLOQUEIO DE ROLAGEM|{SCROLLLOCK}|  
|TAB|{TAB}|  
|SETA PARA CIMA|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Adicionar de teclado|{ADD}|  
|Subtrair de teclado|{SUBTRACT}|  
|Multiplicar de teclado|{MULTIPLY}|  
|Divisão do teclado|{DIVIDE}|  
  
 Para especificar chaves combinadas com qualquer combinação de teclas ALT, SHIFT e CTRL, preceda o código de chave com um ou mais dos seguintes códigos de erro.  
  
|Chave|Código|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Para especificar que qualquer combinação de SHIFT, CTRL e ALT deve ser mantida pressionado enquanto pressionadas várias outras chaves, coloque o código para essas chaves entre parênteses. Por exemplo, para especificar para manter pressionada a tecla SHIFT enquanto E e C são pressionados, use "+ (EC)". Para especificar para manter pressionada a tecla SHIFT enquanto E é pressionado, seguido de C sem SHIFT, use "+ EC".  
  
 Para especificar teclas de repetição, use o formato {número da chave}. Você deve colocar um espaço entre a chave e o número. Por exemplo, {LEFT 42} significa pressione a tecla de seta para a esquerda 42 vezes; {h 10} significa pressione que h 10 vezes.  
  
> [!NOTE]
>  Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.  
  
> [!NOTE]
>  O <xref:System.Windows.Forms.SendKeys> classe foi atualizada para o .NET Framework 3.0 ativar seu uso em aplicativos que são executados no Windows Vista. A segurança avançada do Windows Vista (conhecida como Controle de Conta de Usuário ou UAC) impede que a implementação anterior funcione conforme o esperado.  
>   
>  O <xref:System.Windows.Forms.SendKeys> classe é suscetível a problemas de atraso, que alguns desenvolvedores tiveram que contornar. A implementação atualizada ainda está suscetível a problemas de atraso, mas é ligeiramente mais rápida e pode exigir alterações para as soluções alternativas. O <xref:System.Windows.Forms.SendKeys> classe tenta usar a implementação anterior primeiro e, se isso falhar, usa a nova implementação. Como resultado, o <xref:System.Windows.Forms.SendKeys> classe comporte de forma diferente em diferentes sistemas operacionais. Além disso, quando o <xref:System.Windows.Forms.SendKeys> classe usa a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A> método não aguardará por mensagens a serem processadas quando elas são enviadas para outro processo.  
>   
>  Se seu aplicativo depende de um comportamento consistente independentemente do sistema operacional, você pode forçar o <xref:System.Windows.Forms.SendKeys> classe para usar a nova implementação adicionando a seguinte configuração de aplicativo ao seu arquivo App. config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Para forçar o <xref:System.Windows.Forms.SendKeys> classe para usar a implementação anterior, use o valor `"JournalHook"` em vez disso.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.SendKeys.Send%2A> método. Para executar o exemplo, cole o seguinte código em um formulário chamado Form1 contendo um botão chamado Button1. Certifique-se de que os eventos de clique estão associados com seus métodos de manipulação de eventos neste exemplo. O controle de botão <xref:System.Windows.Forms.Control.TabIndex%2A> propriedade deve ser definida como 0. Quando o exemplo é executado, clique duas vezes no formulário para disparar o clique do botão eventos.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Não há um aplicativo ativo para o qual enviar pressionamentos de teclas.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> não representa pressionamentos de tecla válidos</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para código não gerenciado chamar esse método. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">A cadeia de caracteres de pressionamentos de teclas a ser enviada.</param>
        <summary>Envia chaves especificadas para o aplicativo ativo e aguarda até que as mensagens sejam processadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Windows.Forms.SendKeys.SendWait%2A> para enviar pressionamentos de tecla ou combinações de teclas para o aplicativo ativo e aguarde até que as mensagens de pressionamento de tecla a ser processado. Você pode usar esse método para enviar pressionamentos de teclas para um aplicativo e aguarde até que todos os processos que são iniciados por pressionamentos de teclas para ser concluída. Isso pode ser importante se o outro aplicativo deve terminar antes que o aplicativo pode continuar.  
  
> [!NOTE]
>  Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.  
  
> [!NOTE]
>  O <xref:System.Windows.Forms.SendKeys> classe foi atualizada para o .NET Framework 3.0 ativar seu uso em aplicativos que são executados no Windows Vista. A segurança avançada do Windows Vista (conhecida como Controle de Conta de Usuário ou UAC) impede que a implementação anterior funcione conforme o esperado.  
>   
>  O <xref:System.Windows.Forms.SendKeys> classe é suscetível a problemas de atraso, que alguns desenvolvedores tiveram que contornar. A implementação atualizada ainda está suscetível a problemas de atraso, mas é ligeiramente mais rápida e pode exigir alterações para as soluções alternativas. O <xref:System.Windows.Forms.SendKeys> classe tenta usar a implementação anterior primeiro e, se isso falhar, usa a nova implementação. Como resultado, o <xref:System.Windows.Forms.SendKeys> classe comporte de forma diferente em diferentes sistemas operacionais. Além disso, quando o <xref:System.Windows.Forms.SendKeys> classe usa a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A> método não aguardará por mensagens a serem processadas quando elas são enviadas para outro processo.  
>   
>  Se seu aplicativo depende de um comportamento consistente independentemente do sistema operacional, você pode forçar o <xref:System.Windows.Forms.SendKeys> classe para usar a nova implementação adicionando a seguinte configuração de aplicativo ao seu arquivo App. config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Para forçar o <xref:System.Windows.Forms.SendKeys> classe para usar a implementação anterior, use o valor `"JournalHook"` em vez disso.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para código não gerenciado chamar esse método. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>