<Type Name="DataGridViewCell" FullName="System.Windows.Forms.DataGridViewCell">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="12de7144e1307b453670745bf4e837e2e775a3ba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36346677" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DataGridViewCell : System.Windows.Forms.DataGridViewElement, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataGridViewCell extends System.Windows.Forms.DataGridViewElement implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataGridViewCell" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataGridViewCell&#xA;Inherits DataGridViewElement&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataGridViewCell abstract : System::Windows::Forms::DataGridViewElement, ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type DataGridViewCell = class&#xA;    inherit DataGridViewElement&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataGridViewElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataGridViewCellConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an individual cell in a <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell> classe representa uma célula individual em um <xref:System.Windows.Forms.DataGridView> controle. Você pode recuperar células por meio de <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> coleção de um <xref:System.Windows.Forms.DataGridViewRow>.  
  
 A linha e coluna para um <xref:System.Windows.Forms.DataGridViewCell> identificar o local da célula a <xref:System.Windows.Forms.DataGridView>. Uma célula típica contém dados específicos para a linha e coluna na qual ele está contido. A célula pode ser personalizada de várias maneiras, definindo suas propriedades e manipular os eventos associados a ele.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra o uso desse tipo. Para obter mais informações sobre esse exemplo, consulte [como: adicionar dicas de ferramenta para células individuais em um controle DataGridView do Windows Forms](~/docs/framework/winforms/controls/add-tooltips-to-individual-cells-in-a-wf-datagridview-control.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/cpp/datagridviewcell.tooltiptext.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/CS/datagridviewcell.tooltiptext.cs#1)]
 [!code-vb[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/VB/datagridviewcell.tooltiptext.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Quando você deriva de <see cref="T:System.Windows.Forms.DataGridViewCell" /> e adicionar novas propriedades para a classe derivada, certifique-se de substituir o <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> método para copiar as novas propriedades durante operações de clonagem. Você também deve chamar a classe base <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> método para que as propriedades da classe base são copiadas para a nova célula.</para>
    </block>
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.ICloneable" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataGridViewCell ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataGridViewCell();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridViewCell" /> class.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.AccessibilityObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessibilityObject As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleObject ^ AccessibilityObject { System::Windows::Forms::AccessibleObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessibilityObject : System.Windows.Forms.AccessibleObject" Usage="System.Windows.Forms.DataGridViewCell.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" /> assigned to the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <value>O <see cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" /> atribuído para o <see cref="T:System.Windows.Forms.DataGridViewCell" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para controlar a instância retornada deste método, substituir o <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> método.  
  
 Se nenhum <xref:System.Windows.Forms.AccessibleObject> atualmente atribuído ao controle, uma nova instância de um é criada.  
  
> [!NOTE]
>  Para obter ou definir o <xref:System.Windows.Forms.Control.AccessibilityObject%2A> propriedade, você deve adicionar uma referência para o `Accessibility` assembly instalado com o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 Para obter mais informações sobre objetos acessíveis, consulte a seção "Acessibilidade ativa" biblioteca MSDN em [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="AdjustCellBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustCellBorderStyle (System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustCellBorderStyle(class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AdjustCellBorderStyle (dataGridViewAdvancedBorderStyleInput As DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder As DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded As Boolean, singleHorizontalBorderAdded As Boolean, isFirstDisplayedColumn As Boolean, isFirstDisplayedRow As Boolean) As DataGridViewAdvancedBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ AdjustCellBorderStyle(System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ dataGridViewAdvancedBorderStyleInput, System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="F#" Value="abstract member AdjustCellBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle * bool * bool * bool * bool -&gt; System.Windows.Forms.DataGridViewAdvancedBorderStyle&#xA;override this.AdjustCellBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle * bool * bool * bool * bool -&gt; System.Windows.Forms.DataGridViewAdvancedBorderStyle" Usage="dataGridViewCell.AdjustCellBorderStyle (dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, singleVerticalBorderAdded, singleHorizontalBorderAdded, isFirstDisplayedColumn, isFirstDisplayedRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewAdvancedBorderStyleInput" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="dataGridViewAdvancedBorderStylePlaceholder" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataGridViewAdvancedBorderStyleInput">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the cell border style to modify.</param>
        <param name="dataGridViewAdvancedBorderStylePlaceholder">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that is used to store intermediate changes to the cell border style.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" /> to add a vertical border to the cell; otherwise, <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" /> to add a horizontal border to the cell; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" /> if the hosting cell is in the first visible column; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> if the hosting cell is in the first visible row; otherwise, <see langword="false" />.</param>
        <summary>Modifies the input cell border style according to the specified criteria.</summary>
        <returns>The modified <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridView> internamente controlar chamadas de <xref:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle%2A> método para determinar a aparência das bordas da célula. O <xref:System.Windows.Forms.DataGridView> controle normalmente usa o valor da <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> propriedade para o `dataGridViewAdvancedBorderStyleInput` parâmetro.  
  
 O <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.OutsetPartial?displayProperty=nameWithType> não há suporte para o valor como uma entrada para as células.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle%2A> método para personalizar as bordas das células. Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> classe.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#20)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Substitua este método se você quiser personalizar a aparência das bordas da célula.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetInheritedStyle(System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Boolean)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.HasStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Style" />
      </Docs>
    </Member>
    <Member MemberName="BorderWidths">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle BorderWidths (System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle BorderWidths(class System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.BorderWidths(System.Windows.Forms.DataGridViewAdvancedBorderStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function BorderWidths (advancedBorderStyle As DataGridViewAdvancedBorderStyle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle BorderWidths(System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ advancedBorderStyle);" />
      <MemberSignature Language="F#" Value="abstract member BorderWidths : System.Windows.Forms.DataGridViewAdvancedBorderStyle -&gt; System.Drawing.Rectangle&#xA;override this.BorderWidths : System.Windows.Forms.DataGridViewAdvancedBorderStyle -&gt; System.Drawing.Rectangle" Usage="dataGridViewCell.BorderWidths advancedBorderStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advancedBorderStyle" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
      </Parameters>
      <Docs>
        <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that the margins are to be calculated for.</param>
        <summary>Returns a <see cref="T:System.Drawing.Rectangle" /> that represents the widths of all the cell margins.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the widths of all the cell margins.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A largura padrão da borda da célula é um pixel. Use a seguinte <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle> valores para modificar a largura da borda:  
  
-   O <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.None> valor denota uma largura de 0 pixels.  
  
-   O <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.OutsetDouble> ou <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.InsetDouble> valores aumentam a largura padrão 1 pixel.  
  
 Além disso, se o <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A> está definida para a célula da linha de propriedade, a altura do retângulo é aumentada, o valor de <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A>. Se o <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> está definida para a célula do possui uma coluna, aumenta a largura do retângulo, o valor de <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.DataGridViewCell.BorderWidths%2A> método o <xref:System.Windows.Forms.DataGridViewCell> classe para determinar a área de desenho disponível em uma célula. Este exemplo de código é parte de um exemplo maior fornecido em [como: desabilitar botões em uma coluna de botão no controle de DataGridView dos Windows Forms](~/docs/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool ClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ClickUnsharesRow (e As DataGridViewCellEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ClickUnsharesRow(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool&#xA;override this.ClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool" Usage="dataGridViewCell.ClickUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> containing the data passed to the <see cref="M:System.Windows.Forms.DataGridViewCell.OnClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method.</param>
        <summary>Indicates whether the cell's row will be unshared when the cell is clicked.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.ClickUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnClick%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnClick%2A> tem o efeito de descompartilhar a linha da célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="dataGridViewCell.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an exact copy of this cell.</summary>
        <returns>An <see cref="T:System.Object" /> that represents the cloned <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituir o <xref:System.Windows.Forms.DataGridViewCell.Clone%2A> método sempre que você derivar do <xref:System.Windows.Forms.DataGridViewCell> classe e adicionar novas propriedades para a classe derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir o <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> chamada de método em uma classe derivada, a classe base <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> método para que as propriedades da classe base são copiadas para a nova célula e certifique-se de também copiar os valores de todas as propriedades que foram adicionados à classe derivada.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="ColumnIndex">
      <MemberSignature Language="C#" Value="public int ColumnIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnIndex : int" Usage="System.Windows.Forms.DataGridViewCell.ColumnIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the column index for this cell.</summary>
        <value>O índice da coluna que contém a célula; -1 se a célula não está contida dentro de uma coluna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O índice da coluna para a linha que contém os cabeçalhos de linha tem um valor de -1.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.DataGridViewCell.ColumnIndex%2A> para determinar quais colunas para verificar se há valores inteiros. Neste exemplo, as células de `Description` coluna são ignorados quando o conteúdo das células selecionadas é somado. Este exemplo é parte de um exemplo maior disponível no <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> evento.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="ContentBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ContentBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ContentBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ContentBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentBounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ContentBounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentBounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.DataGridViewCell.ContentBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounding rectangle that encloses the cell's content area.</summary>
        <value>O <see cref="T:System.Drawing.Rectangle" /> que delimita o conteúdo da célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O retângulo retornado relata coordenadas do cliente, em pixels.  
  
 Esta propriedade chama o <xref:System.Windows.Forms.DataGridViewCell.GetContentBounds%2A> método para obter seu valor. Para a base de <xref:System.Windows.Forms.DataGridViewCell> tipo, esse valor é <xref:System.Drawing.Rectangle.Empty>.  
  
 Para obter o retângulo delimitador de célula em vez do conteúdo da célula, use o <xref:System.Windows.Forms.DataGridView.GetCellDisplayRectangle%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> property is less than 0, indicating that the cell is a row header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.GetCellDisplayRectangle(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Size" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.PreferredSize" />
        <altmember cref="F:System.Drawing.Rectangle.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ContentClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool ContentClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ContentClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ContentClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ContentClickUnsharesRow (e As DataGridViewCellEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ContentClickUnsharesRow(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ContentClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool&#xA;override this.ContentClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool" Usage="dataGridViewCell.ContentClickUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> containing the data passed to the <see cref="M:System.Windows.Forms.DataGridViewCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method.</param>
        <summary>Indicates whether the cell's row will be unshared when the cell's content is clicked.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.ContentClickUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnContentClick%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnContentClick%2A> tem o efeito de descompartilhar a linha da célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ContentDoubleClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool ContentDoubleClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ContentDoubleClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ContentDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ContentDoubleClickUnsharesRow (e As DataGridViewCellEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ContentDoubleClickUnsharesRow(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ContentDoubleClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool&#xA;override this.ContentDoubleClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool" Usage="dataGridViewCell.ContentDoubleClickUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> containing the data passed to the <see cref="M:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method.</param>
        <summary>Indicates whether the cell's row will be unshared when the cell's content is double-clicked.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.ContentDoubleClickUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick%2A> tem o efeito de descompartilhar a linha da célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenuStrip As ContextMenuStrip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenuStrip ^ ContextMenuStrip { System::Windows::Forms::ContextMenuStrip ^ get(); void set(System::Windows::Forms::ContextMenuStrip ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStrip : System.Windows.Forms.ContextMenuStrip with get, set" Usage="System.Windows.Forms.DataGridViewCell.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu associated with the cell.</summary>
        <value>O <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associado à célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade indica o menu de atalho que geralmente é exibido quando o usuário clica na célula.  
  
 Quando o <xref:System.Windows.Forms.DataGridView> controle <xref:System.Windows.Forms.DataGridView.DataSource%2A> está definida ou seu <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> é de propriedade `true`, obter o valor do <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> propriedade gera o <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> eventos do controle e retorna o valor da <xref:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=nameWithType> a propriedade como especificado no evento manipulador. Se não houver nenhum manipulador para o evento, obtendo o valor de <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> propriedade retorna o valor especificado anteriormente ou seu valor padrão de `null`.  
  
 Tratamento de <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> evento é principalmente útil ao trabalhar com grandes quantidades de dados para evitar penalidades de desempenho ao definir a célula <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> valor para várias células. Para obter mais informações, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 A alteração dessa propriedade gera o <xref:System.Windows.Forms.DataGridView.CellContextMenuStripChanged> evento na posse <xref:System.Windows.Forms.DataGridView>, se houver.  
  
 Você também pode especificar os menus de atalho para linhas individuais em vez de células individuais, definindo a linha <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> propriedade ou manipulação de <xref:System.Windows.Forms.DataGridView> do controle <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> evento. A célula <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> configuração da propriedade substitui a linha <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> configuração de propriedade e o <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> substituições de evento de ambos os <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> evento e a linha <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> configuração da propriedade. Você pode especificar `null` para um menu de atalho célula, no entanto, para impedir que um menu de atalho da linha que está sendo substituído.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetInheritedContextMenuStrip(System.Int32)" />
        <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="dataGridViewCell.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessible object for the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <returns>A new <see cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" /> for the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você não chamar explicitamente o <xref:System.Windows.Forms.DataGridViewCell.CreateAccessibilityInstance%2A> método, ele será chamado quando o <xref:System.Windows.Forms.DataGridViewCell.AccessibilityObject%2A> propriedade é referenciada.  
  
> [!NOTE]
>  Para obter ou definir <xref:System.Windows.Forms.DataGridViewCell.AccessibilityObject%2A>, você deve adicionar uma referência para o `Accessibility` assembly instalado com o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.AccessibilityObject" />
        <altmember cref="N:Accessibility" />
      </Docs>
    </Member>
    <Member MemberName="DefaultNewRowValue">
      <MemberSignature Language="C#" Value="public virtual object DefaultNewRowValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultNewRowValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefaultNewRowValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ DefaultNewRowValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultNewRowValue : obj" Usage="System.Windows.Forms.DataGridViewCell.DefaultNewRowValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default value for a cell in the row for new records.</summary>
        <value>Um <see cref="T:System.Object" /> que representa o valor padrão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> propriedade na classe base <xref:System.Windows.Forms.DataGridViewCell> sempre retorna `null`. No entanto, essa propriedade pode ser substituída nas classes derivadas de célula para retornar outros valores padrão.  
  
 O valor retornado por essa propriedade será exibido se a célula estiver na linha para novos registros. Esse valor pode ser substituído por um manipulador para o <xref:System.Windows.Forms.DataGridView.DefaultValuesNeeded?displayProperty=nameWithType> evento quando o foco entra na linha para novos registros.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> propriedade em uma `CalendarCell` classe que deriva de <xref:System.Windows.Forms.DataGridViewTextBoxCell>. Este exemplo é parte de um exemplo de código maior fornecido no [como: hospedar controles em células de DataGridView do Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#200)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
      </Docs>
    </Member>
    <Member MemberName="DetachEditingControl">
      <MemberSignature Language="C#" Value="public virtual void DetachEditingControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetachEditingControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.DetachEditingControl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DetachEditingControl ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DetachEditingControl();" />
      <MemberSignature Language="F#" Value="abstract member DetachEditingControl : unit -&gt; unit&#xA;override this.DetachEditingControl : unit -&gt; unit" Usage="dataGridViewCell.DetachEditingControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the cell's editing control from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridView> chama este método quando a célula atual hospeda um controle de edição e termina de modo de edição. Este método Remove o <xref:System.Windows.Forms.DataGridView.EditingControl%2A> do <xref:System.Windows.Forms.DataGridView.EditingPanel%2A>e, em seguida, remove o <xref:System.Windows.Forms.DataGridView.EditingPanel%2A> do <xref:System.Windows.Forms.Control.Controls%2A> coleção do <xref:System.Windows.Forms.DataGridView>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This cell is not associated with a <see cref="T:System.Windows.Forms.DataGridView" />.  -or-  The <see cref="P:System.Windows.Forms.DataGridView.EditingControl" /> property of the associated <see cref="T:System.Windows.Forms.DataGridView" /> has a value of <see langword="null" />. This is the case, for example, when the control is not in edit mode.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EditingControl" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EditingPanel" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
      </Docs>
    </Member>
    <Member MemberName="Displayed">
      <MemberSignature Language="C#" Value="public virtual bool Displayed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Displayed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Displayed" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Displayed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Displayed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Displayed : bool" Usage="System.Windows.Forms.DataGridViewCell.Displayed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the cell is currently displayed on-screen.</summary>
        <value>
          <see langword="true" /> se a célula estiver na tela ou parcialmente na tela, caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use essa propriedade para determinar se uma determinada célula tenha sido rolada fora da tela.  
  
 Se a célula <xref:System.Windows.Forms.DataGridViewCell.Visible%2A> é o valor da propriedade `false`, esta propriedade retornará `false` também.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Visible" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Releases the resources used by the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dataGridViewCell.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> quando tiver terminado de usar o <xref:System.Windows.Forms.DataGridViewCell>. O <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> método deixa o <xref:System.Windows.Forms.DataGridViewCell> em um estado inutilizável. Depois de chamar <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A>, você deve liberar todas as referências para o <xref:System.Windows.Forms.DataGridViewCell> para o coletor de lixo possa recuperar a memória que o <xref:System.Windows.Forms.DataGridViewCell> estava ocupando. Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Sempre chamar <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> antes de liberar sua última referência para o <xref:System.Windows.Forms.DataGridViewCell>. Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.Windows.Forms.DataGridViewCell> do objeto `Finalize` método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="dataGridViewCell.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataGridViewCell" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método é chamado pelo método público `Dispose` e pelo método <xref:System.Object.Finalize%2A>. `Dispose` invoca o método `Dispose(Boolean)` protegido com o parâmetro `disposing` definido como `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` com `disposing` definido como `false`.  
  
 Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Windows.Forms.DataGridViewCell> referências. Este método invoca o método `Dispose` de cada objeto referenciado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> pode ser chamado várias vezes por outros objetos. Ao substituir <see langword="Dispose(Boolean)" /> cuidado para não fazer referência a objetos que têm foi descartados anteriormente em uma chamada anterior para <see langword="Dispose" />. Para obter mais informações sobre como implementar <see langword="Dispose(Boolean)" />, consulte [implementando um Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Para obter mais informações sobre <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, consulte [limpeza Resources](~/docs/standard/garbage-collection/unmanaged.md) não gerenciado e [substituindo o método Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DoubleClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.DoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DoubleClickUnsharesRow (e As DataGridViewCellEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool DoubleClickUnsharesRow(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member DoubleClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool&#xA;override this.DoubleClickUnsharesRow : System.Windows.Forms.DataGridViewCellEventArgs -&gt; bool" Usage="dataGridViewCell.DoubleClickUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> containing the data passed to the <see cref="M:System.Windows.Forms.DataGridViewCell.OnDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method.</param>
        <summary>Indicates whether the cell's row will be unshared when the cell is double-clicked.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.DoubleClickUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnDoubleClick%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnDoubleClick%2A> tem o efeito de descompartilhar a linha da célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="EditedFormattedValue">
      <MemberSignature Language="C#" Value="public object EditedFormattedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditedFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.EditedFormattedValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditedFormattedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ EditedFormattedValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditedFormattedValue : obj" Usage="System.Windows.Forms.DataGridViewCell.EditedFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current, formatted value of the cell, regardless of whether the cell is in edit mode and the value has not been committed.</summary>
        <value>O valor atual, formatado do <see cref="T:System.Windows.Forms.DataGridViewCell" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor atual da célula ou controle de edição, se a célula estiver no modo de edição. Caso contrário, obtendo o valor dessa propriedade converte o valor da célula em um valor de exibição equivalente do tipo indicado pelo <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedade. Isso gera o <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> evento, que você pode manipular para personalizar a conversão do valor.  
  
 Se a formatação for bem-sucedido, o <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> evento ocorre. Se não houver nenhum manipulador para este evento ou os conjuntos de manipulador de <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> propriedade `true`, uma exceção será lançada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.DataGridViewCell.EditedFormattedValue%2A> propriedade. Neste exemplo, o <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> propriedade é usada para determinar se foram editado conteúdo da célula atual e não confirmado e, se a célula tiver sido modificada, o valor editado será usado. Este exemplo é parte de um exemplo maior disponível no <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> evento.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.Exception">Formatting failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event of the <see cref="T:System.Windows.Forms.DataGridView" /> control or the handler set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditType">
      <MemberSignature Language="C#" Value="public virtual Type EditType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EditType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.EditType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EditType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EditType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditType : Type" Usage="System.Windows.Forms.DataGridViewCell.EditType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the cell's hosted editing control.</summary>
        <value>Um <see cref="T:System.Type" /> que representa o tipo <see cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um tipo de célula derivada substitui essa propriedade para retornar o tipo de seu controle de edição hospedado. Se a célula não tem um controle de edição, assim como acontece com <xref:System.Windows.Forms.DataGridViewButtonCell>, o <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> propriedade retorna `null`.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> propriedade em uma `CalendarCell` classe que deriva de <xref:System.Windows.Forms.DataGridViewTextBoxCell>. Este exemplo é parte de um exemplo de código maior fornecido no [como: hospedar controles em células de DataGridView do Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#200)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingControl" />
        <altmember cref="T:System.Windows.Forms.DataGridViewButtonCell" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
      </Docs>
    </Member>
    <Member MemberName="EnterUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool EnterUnsharesRow (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EnterUnsharesRow(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.EnterUnsharesRow(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EnterUnsharesRow (rowIndex As Integer, throughMouseClick As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool EnterUnsharesRow(int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="F#" Value="abstract member EnterUnsharesRow : int * bool -&gt; bool&#xA;override this.EnterUnsharesRow : int * bool -&gt; bool" Usage="dataGridViewCell.EnterUnsharesRow (rowIndex, throughMouseClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="throughMouseClick">
          <see langword="true" /> if a user action moved focus to the cell; <see langword="false" /> if a programmatic operation moved focus to the cell.</param>
        <summary>Indicates whether the parent row will be unshared when the focus moves to the cell.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared; otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.EnterUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnEnter%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnEnter%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnEnter(System.Int32,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnLeave(System.Int32,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorIconBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ErrorIconBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ErrorIconBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ErrorIconBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorIconBounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ErrorIconBounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorIconBounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.DataGridViewCell.ErrorIconBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the error icon for the cell.</summary>
        <value>Um <see cref="T:System.Drawing.Rectangle" /> que representa os limites do ícone de erro do <see cref="T:System.Windows.Forms.DataGridViewCell" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O retângulo retornado relata coordenadas do cliente, em pixels.  
  
 Quando o <xref:System.Windows.Forms.DataGridView.ShowCellErrors%2A?displayProperty=nameWithType> é de propriedade `false`, o valor dessa propriedade é <xref:System.Drawing.Rectangle.Empty>.  
  
 Esta propriedade chama o <xref:System.Windows.Forms.DataGridViewCell.GetErrorIconBounds%2A> método para obter seu valor. Para a base de <xref:System.Windows.Forms.DataGridViewCell> tipo, esse valor é sempre <xref:System.Drawing.Rectangle.Empty>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView" /> control.  -or-  <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="ErrorText">
      <MemberSignature Language="C#" Value="public string ErrorText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ErrorText" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ErrorText : string with get, set" Usage="System.Windows.Forms.DataGridViewCell.ErrorText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text describing an error condition associated with the cell.</summary>
        <value>O texto que descreve uma condição de erro associada à célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, o <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> propriedade é usada ao tratar o <xref:System.Windows.Forms.DataGridView.CellValidating> eventos do <xref:System.Windows.Forms.DataGridView>. Se o valor da célula não alguns critérios de validação, defina o <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> propriedade e cancelar a operação de confirmação, definindo o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriedade o <xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs> para `true`. O texto que você especificar, em seguida, é exibido pelo <xref:System.Windows.Forms.DataGridView>, e o usuário é solicitado para corrigir o erro nos dados da célula.  
  
 Quando o <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> propriedade o <xref:System.Windows.Forms.DataGridView> é `true`, você pode fornecer o texto de erro para linhas e células usando o <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> e <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> eventos.  
  
 Quando você atribui um diferente <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> cadeia de caracteres para uma célula, o <xref:System.Windows.Forms.DataGridView.CellErrorTextChanged> evento o <xref:System.Windows.Forms.DataGridView> controle é gerado.  
  
 Começando com o .NET Framework 4.5.2, redimensionamento do ícone de erro é determinado pela configuração de DPI do sistema quando o arquivo App. config contém a seguinte entrada:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
```  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar essa propriedade ao lidar com condições de erro em um desassociado <xref:System.Windows.Forms.DataGridView>. O `AnnotateCell` método define uma cadeia de caracteres de mensagem de erro o <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> propriedade.  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#9)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidating" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~DataGridViewCell ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!DataGridViewCell ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="dataGridViewCell.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the unmanaged resources and performs other cleanup operations before the <see cref="T:System.Windows.Forms.DataGridViewCell" /> is reclaimed by garbage collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método chama o <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> método com `false` como um parâmetro.  
  
 Este método substitui <xref:System.Object.Finalize%2A>. O código do aplicativo não deve chamar este método; o método `Finalize` de um objeto é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo tenha sido desabilitada por uma chamada para o método <xref:System.GC.SuppressFinalize%2A>.  
  
 Para obter mais informações, consulte [métodos Finalize e destruidores](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md), e [substituindo o método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="FormattedValue">
      <MemberSignature Language="C#" Value="public object FormattedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FormattedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormattedValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormattedValue : obj" Usage="System.Windows.Forms.DataGridViewCell.FormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the cell as formatted for display.</summary>
        <value>O valor formatado da célula ou <see langword="null" /> se a célula não pertencer a um controle <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.Value%2A> propriedade é o objeto de dados reais contido na célula, enquanto o <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> é a representação formatada deste objeto. O <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> e <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedades correspondem aos tipos de dados desses valores, respectivamente.  
  
 Obtendo o valor dessa propriedade chama o <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> método para converter o valor da célula em um valor de exibição equivalente do tipo indicado pelo <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedade. Isso gera o <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> evento, que você pode manipular para personalizar a conversão do valor.  
  
 Se a formatação for bem-sucedido, o <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> evento ocorre. Se não houver nenhum manipulador para este evento ou os conjuntos de manipulador de <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> propriedade `true`, uma exceção será lançada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> propriedade. Neste exemplo, o <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> propriedade é usada para determinar se o conteúdo da célula atual foram editado e não confirmado e, se a célula tiver sido modificada, o <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> é usado. Este exemplo é parte de um exemplo maior disponível no <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> evento.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <exception cref="T:System.Exception">Formatting failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event of the <see cref="T:System.Windows.Forms.DataGridView" /> control or the handler set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ValueType" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingControl" />
      </Docs>
    </Member>
    <Member MemberName="FormattedValueType">
      <MemberSignature Language="C#" Value="public virtual Type FormattedValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type FormattedValueType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FormattedValueType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ FormattedValueType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormattedValueType : Type" Usage="System.Windows.Forms.DataGridViewCell.FormattedValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the formatted value associated with the cell.</summary>
        <value>Um <see cref="T:System.Type" /> que representa o tipo do valor formatado da célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.Value%2A> propriedade é o objeto de dados reais contido na célula, enquanto o <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> propriedade é a representação de formatação dos dados. O <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> e <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedades correspondem aos tipos de dados desses valores, respectivamente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedade para determinar o tipo do conteúdo da célula. Neste exemplo, o <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedade é usada para determinar se a célula contém um <xref:System.String> antes de tentar converter o valor. Este exemplo é parte de um exemplo maior disponível no <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> evento.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
      </Docs>
    </Member>
    <Member MemberName="Frozen">
      <MemberSignature Language="C#" Value="public virtual bool Frozen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Frozen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Frozen" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Frozen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Frozen { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Frozen : bool" Usage="System.Windows.Forms.DataGridViewCell.Frozen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the cell is frozen.</summary>
        <value>
          <see langword="true" /> se a célula está congelada; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.Windows.Forms.DataGridViewCell.Frozen%2A> propriedade depende do estado da linha pai e a coluna da célula. Se o `Frozen` propriedade da linha ou coluna é definida como `true`, a célula <xref:System.Windows.Forms.DataGridViewCell.Frozen%2A> propriedade também serão `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Frozen" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.Frozen" />
      </Docs>
    </Member>
    <Member MemberName="GetClipboardContent">
      <MemberSignature Language="C#" Value="protected virtual object GetClipboardContent (int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetClipboardContent(int32 rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetClipboardContent(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetClipboardContent (rowIndex As Integer, firstCell As Boolean, lastCell As Boolean, inFirstRow As Boolean, inLastRow As Boolean, format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetClipboardContent : int * bool * bool * bool * bool * string -&gt; obj&#xA;override this.GetClipboardContent : int * bool * bool * bool * bool * string -&gt; obj" Usage="dataGridViewCell.GetClipboardContent (rowIndex, firstCell, lastCell, inFirstRow, inLastRow, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="firstCell" Type="System.Boolean" />
        <Parameter Name="lastCell" Type="System.Boolean" />
        <Parameter Name="inFirstRow" Type="System.Boolean" />
        <Parameter Name="inLastRow" Type="System.Boolean" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The zero-based index of the row containing the cell.</param>
        <param name="firstCell">
          <see langword="true" /> to indicate that the cell is in the first column of the region defined by the selected cells; otherwise, <see langword="false" />.</param>
        <param name="lastCell">
          <see langword="true" /> to indicate that the cell is the last column of the region defined by the selected cells; otherwise, <see langword="false" />.</param>
        <param name="inFirstRow">
          <see langword="true" /> to indicate that the cell is in the first row of the region defined by the selected cells; otherwise, <see langword="false" />.</param>
        <param name="inLastRow">
          <see langword="true" /> to indicate that the cell is in the last row of the region defined by the selected cells; otherwise, <see langword="false" />.</param>
        <param name="format">The current format string of the cell.</param>
        <summary>Retrieves the formatted value of the cell to copy to the <see cref="T:System.Windows.Forms.Clipboard" />.</summary>
        <returns>An <see cref="T:System.Object" /> that represents the value of the cell to copy to the <see cref="T:System.Windows.Forms.Clipboard" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método é chamado pelo <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A?displayProperty=nameWithType> método para recuperar um valor formatado da área de transferência que representa o valor da célula.  
  
 O valor da célula é recuperado primeiro em seu formato de exibição do <xref:System.Windows.Forms.DataGridViewCell.GetEditedFormattedValue%2A> método. Isso pode gerar o <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> evento para formatar o valor e o <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> evento se a formatação for malsucedida.  
  
 Os parâmetros relacionados a posição deste método indicam onde esta célula está localizada na tabela de dados que representa a região definida pelas células selecionadas no <xref:System.Windows.Forms.DataGridView> controle. Dependendo da posição da célula, informações de formatação adicionais podem ser retornadas por este método junto com o valor da célula de exibição formatada. Por exemplo, o formato HTML para uma célula na primeira coluna de uma linha incluirá a marca que indica o início de uma linha.  
  
 Os formatos da área de transferência com suporte incluem <xref:System.Windows.Forms.DataFormats.Text?displayProperty=nameWithType>, <xref:System.Windows.Forms.DataFormats.UnicodeText?displayProperty=nameWithType>, <xref:System.Windows.Forms.DataFormats.Html?displayProperty=nameWithType>, e <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue?displayProperty=nameWithType>.  
  
 Para obter mais informações, consulte a classe <xref:System.Windows.Forms.Clipboard>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is less than 0 or greater than or equal to the number of rows in the control.</exception>
        <exception cref="T:System.InvalidOperationException">The value of the cell's <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property is <see langword="null" />.  -or-  <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.Exception">Formatting failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event of the <see cref="T:System.Windows.Forms.DataGridView" /> control or the handler set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
        <block subset="none" type="overrides">
          <para>Substitua este método para fornecer valores personalizados de área de transferência. Por exemplo, você pode substituir esse método para dar suporte a cópia de valores de tipos de célula personalizado.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetContentBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the bounding rectangle that encloses the cell's content area.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetContentBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetContentBounds (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetContentBounds(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetContentBounds(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContentBounds (rowIndex As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetContentBounds(int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.GetContentBounds : int -&gt; System.Drawing.Rectangle" Usage="dataGridViewCell.GetContentBounds rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Returns the bounding rectangle that encloses the cell's content area using a default <see cref="T:System.Drawing.Graphics" /> and cell style currently in effect for the cell.</summary>
        <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the cell's contents.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tamanho do conteúdo da célula é calculado dinamicamente quando este método é chamado. Retorna a implementação da classe base sempre <xref:System.Drawing.Rectangle.Empty?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="GetContentBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetContentBounds (System.Drawing.Graphics graphics, System.Windows.Forms.DataGridViewCellStyle cellStyle, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetContentBounds(class System.Drawing.Graphics graphics, class System.Windows.Forms.DataGridViewCellStyle cellStyle, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle GetContentBounds(System::Drawing::Graphics ^ graphics, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetContentBounds : System.Drawing.Graphics * System.Windows.Forms.DataGridViewCellStyle * int -&gt; System.Drawing.Rectangle&#xA;override this.GetContentBounds : System.Drawing.Graphics * System.Windows.Forms.DataGridViewCellStyle * int -&gt; System.Drawing.Rectangle" Usage="dataGridViewCell.GetContentBounds (graphics, cellStyle, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="graphics">The graphics context for the cell.</param>
        <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be applied to the cell.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Returns the bounding rectangle that encloses the cell's content area, which is calculated using the specified <see cref="T:System.Drawing.Graphics" /> and cell style.</summary>
        <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the cell's contents.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tamanho do conteúdo da célula é calculado dinamicamente quando este método é chamado. Retorna a implementação da classe base sempre <xref:System.Drawing.Rectangle.Empty?displayProperty=nameWithType>.  
  
 Este método é chamado internamente quando o <xref:System.Windows.Forms.DataGridViewCell.ContentBounds%2A> propriedade é lido.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ContentBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetEditedFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditedFormattedValue (int rowIndex, System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetEditedFormattedValue(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetEditedFormattedValue(System.Int32,System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEditedFormattedValue (rowIndex As Integer, context As DataGridViewDataErrorContexts) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetEditedFormattedValue(int rowIndex, System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="member this.GetEditedFormattedValue : int * System.Windows.Forms.DataGridViewDataErrorContexts -&gt; obj" Usage="dataGridViewCell.GetEditedFormattedValue (rowIndex, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The row index of the cell.</param>
        <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the data error context.</param>
        <summary>Returns the current, formatted value of the cell, regardless of whether the cell is in edit mode and the value has not been committed.</summary>
        <returns>The current, formatted value of the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método retorna o valor atual da célula de edição ou controle de edição, se a célula estiver no modo de edição. Caso contrário, este método converte o valor da célula em um valor de exibição equivalente do tipo indicado pelo <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedade. Isso gera o <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> evento, que você pode manipular para personalizar a conversão do valor.  
  
 Se a formatação for bem-sucedido, o <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> evento ocorre. Se não houver nenhum manipulador para este evento ou os conjuntos de manipulador de <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> propriedade `true`, uma exceção será lançada.  
  
 Classes derivadas que substituem este método retornará uma representação de cadeia de caracteres do valor de célula normalmente se o `context` argumento inclui o <xref:System.Windows.Forms.DataGridViewDataErrorContexts.ClipboardContent> valor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.Exception">Formatting failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event of the <see cref="T:System.Windows.Forms.DataGridView" /> control or the handler set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellFormatting" />
      </Docs>
    </Member>
    <Member MemberName="GetErrorIconBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetErrorIconBounds (System.Drawing.Graphics graphics, System.Windows.Forms.DataGridViewCellStyle cellStyle, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetErrorIconBounds(class System.Drawing.Graphics graphics, class System.Windows.Forms.DataGridViewCellStyle cellStyle, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle GetErrorIconBounds(System::Drawing::Graphics ^ graphics, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetErrorIconBounds : System.Drawing.Graphics * System.Windows.Forms.DataGridViewCellStyle * int -&gt; System.Drawing.Rectangle&#xA;override this.GetErrorIconBounds : System.Drawing.Graphics * System.Windows.Forms.DataGridViewCellStyle * int -&gt; System.Drawing.Rectangle" Usage="dataGridViewCell.GetErrorIconBounds (graphics, cellStyle, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="graphics">The graphics context for the cell.</param>
        <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be applied to the cell.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Returns the bounding rectangle that encloses the cell's error icon, if one is displayed.</summary>
        <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the cell's error icon, if one is displayed; otherwise, <see cref="F:System.Drawing.Rectangle.Empty" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tamanho da área de ícone de erro da célula é calculado dinamicamente quando este método é chamado. Retorna a implementação da classe base sempre <xref:System.Drawing.Rectangle.Empty?displayProperty=nameWithType>.  
  
 Este método é chamado internamente quando o <xref:System.Windows.Forms.DataGridViewCell.ErrorIconBounds%2A> propriedade é lido.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ErrorIconBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetErrorText">
      <MemberSignature Language="C#" Value="protected internal virtual string GetErrorText (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetErrorText(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetErrorText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetErrorText (rowIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetErrorText(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetErrorText : int -&gt; string&#xA;override this.GetErrorText : int -&gt; string" Usage="dataGridViewCell.GetErrorText rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The row index of the cell.</param>
        <summary>Returns a string that represents the error for the cell.</summary>
        <returns>A string that describes the error for the current <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="GetFormattedValue">
      <MemberSignature Language="C#" Value="protected virtual object GetFormattedValue (object value, int rowIndex, ref System.Windows.Forms.DataGridViewCellStyle cellStyle, System.ComponentModel.TypeConverter valueTypeConverter, System.ComponentModel.TypeConverter formattedValueTypeConverter, System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetFormattedValue(object value, int32 rowIndex, class System.Windows.Forms.DataGridViewCellStyle&amp; cellStyle, class System.ComponentModel.TypeConverter valueTypeConverter, class System.ComponentModel.TypeConverter formattedValueTypeConverter, valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetFormattedValue (value As Object, rowIndex As Integer, ByRef cellStyle As DataGridViewCellStyle, valueTypeConverter As TypeConverter, formattedValueTypeConverter As TypeConverter, context As DataGridViewDataErrorContexts) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetFormattedValue(System::Object ^ value, int rowIndex, System::Windows::Forms::DataGridViewCellStyle ^ % cellStyle, System::ComponentModel::TypeConverter ^ valueTypeConverter, System::ComponentModel::TypeConverter ^ formattedValueTypeConverter, System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="abstract member GetFormattedValue : obj * int *  * System.ComponentModel.TypeConverter * System.ComponentModel.TypeConverter * System.Windows.Forms.DataGridViewDataErrorContexts -&gt; obj&#xA;override this.GetFormattedValue : obj * int *  * System.ComponentModel.TypeConverter * System.ComponentModel.TypeConverter * System.Windows.Forms.DataGridViewDataErrorContexts -&gt; obj" Usage="dataGridViewCell.GetFormattedValue (value, rowIndex, cellStyle, valueTypeConverter, formattedValueTypeConverter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle&amp;" RefType="ref" />
        <Parameter Name="valueTypeConverter" Type="System.ComponentModel.TypeConverter" />
        <Parameter Name="formattedValueTypeConverter" Type="System.ComponentModel.TypeConverter" />
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="value">The value to be formatted.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> in effect for the cell.</param>
        <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter" /> associated with the value type that provides custom conversion to the formatted value type, or <see langword="null" /> if no such custom conversion is needed.</param>
        <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter" /> associated with the formatted value type that provides custom conversion from the value type, or <see langword="null" /> if no such custom conversion is needed.</param>
        <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values describing the context in which the formatted value is needed.</param>
        <summary>Gets the value of the cell as formatted for display.</summary>
        <returns>The formatted value of the cell or <see langword="null" /> if the cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridView> controle chama esse método para converter um valor de célula em um valor de exibição equivalente do tipo indicado pelo <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedade. O controle passa o valor da célula para este método no `value` parâmetro.  
  
 Este método gera o <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> evento. Um manipulador para esse evento pode modificar tanto o `value` e `cellStyle` parâmetros. Se o manipulador não definir o <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=nameWithType> propriedade `true`, no entanto, esse método formatos `value` usando as propriedades de formatação a `cellStyle` objeto.  
  
> [!NOTE]
>  Esse método não converter `value` para o <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A?displayProperty=nameWithType> valor de propriedade para valores iguais ao <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A?displayProperty=nameWithType> valor de propriedade quando <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> é definida como um valor diferente de <xref:System.DBNull.Value?displayProperty=nameWithType> ou `null`. Nesse caso, você pode manipular o <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> evento para exibir o <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A> o valor da propriedade. Para obter mais informações, consulte o exemplo de código em <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>.  
  
 Se a formatação for bem-sucedido, o <xref:System.Windows.Forms.DataGridView.DataError> evento ocorre. Se não houver nenhum manipulador para este evento ou os conjuntos de manipulador de <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> propriedade `true`, uma exceção será lançada.  
  
 Classes derivadas que substituem este método retornará uma representação de cadeia de caracteres do valor de célula normalmente se o `context` argumento inclui o <xref:System.Windows.Forms.DataGridViewDataErrorContexts.ClipboardContent> valor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Formatting failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event of the <see cref="T:System.Windows.Forms.DataGridView" /> control or the handler set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellFormatting" />
        <altmember cref="E:System.Windows.Forms.DataGridView.DataError" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied" />
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Format" />
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)" />
      </Docs>
    </Member>
    <Member MemberName="GetInheritedContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip GetInheritedContextMenuStrip (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.ContextMenuStrip GetInheritedContextMenuStrip(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetInheritedContextMenuStrip(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInheritedContextMenuStrip (rowIndex As Integer) As ContextMenuStrip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::ContextMenuStrip ^ GetInheritedContextMenuStrip(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetInheritedContextMenuStrip : int -&gt; System.Windows.Forms.ContextMenuStrip&#xA;override this.GetInheritedContextMenuStrip : int -&gt; System.Windows.Forms.ContextMenuStrip" Usage="dataGridViewCell.GetInheritedContextMenuStrip rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The row index of the current cell.</param>
        <summary>Gets the inherited shortcut menu for the current cell.</summary>
        <returns>A <see cref="T:System.Windows.Forms.ContextMenuStrip" /> if the parent <see cref="T:System.Windows.Forms.DataGridView" />, <see cref="T:System.Windows.Forms.DataGridViewRow" />, or <see cref="T:System.Windows.Forms.DataGridViewColumn" /> has a <see cref="T:System.Windows.Forms.ContextMenuStrip" /> assigned; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a célula não tem um tipo de <xref:System.Windows.Forms.ContextMenuStrip>, ele herdará a um de seus pais, usando a seguinte precedência:  
  
1.  Esta célula <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A>  
  
2.  A linha de proprietária <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A?displayProperty=nameWithType>  
  
3.  A coluna de propriedade <xref:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip%2A?displayProperty=nameWithType>  
  
4.  A tabela pai <xref:System.Windows.Forms.ContextMenuStrip?displayProperty=nameWithType>  
  
 Menus de atalho são recursos nativos do Microsoft Windows cujos tempos de vida normalmente são direcionados pelo <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> método ou o destruidor.  
  
 Passar o <xref:System.Windows.Forms.DataGridViewCell.GetInheritedContextMenuStrip%2A> método o índice de linha usado para recuperar o <xref:System.Windows.Forms.DataGridViewCell>. Não use o <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> propriedade para o `rowIndex` parâmetro. Se a linha for compartilhada, <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> é -1, que não é um valor válido para `rowIndex`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property of the cell is not <see langword="null" /> and the specified <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenuStrip" />
        <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumn" />
      </Docs>
    </Member>
    <Member MemberName="GetInheritedState">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewElementStates GetInheritedState (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DataGridViewElementStates GetInheritedState(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetInheritedState(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInheritedState (rowIndex As Integer) As DataGridViewElementStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::DataGridViewElementStates GetInheritedState(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetInheritedState : int -&gt; System.Windows.Forms.DataGridViewElementStates&#xA;override this.GetInheritedState : int -&gt; System.Windows.Forms.DataGridViewElementStates" Usage="dataGridViewCell.GetInheritedState rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewElementStates</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row containing the cell.</param>
        <summary>Returns a value indicating the current state of the cell as inherited from the state of its row and column.</summary>
        <returns>A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values representing the current state of the cell.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é útil para determinar o estado de uma célula em uma linha compartilhada. Linhas compartilhadas têm <xref:System.Windows.Forms.DataGridViewBand.Index%2A> valores de -1, que impede que você use o <xref:System.Windows.Forms.DataGridViewCell.InheritedState%2A> propriedade com as células das linhas compartilhadas. Para usar esse método, passe o índice real da linha que contém essa célula. Você pode recuperar o índice real de uma linha compartilhada chamando o <xref:System.Windows.Forms.DataGridViewRowCollection.IndexOf%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The cell is not contained within a <see cref="T:System.Windows.Forms.DataGridView" /> control and <paramref name="rowIndex" /> is not -1.  -or-  <paramref name="rowIndex" /> is not the index of the row containing this cell.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The cell is contained within a <see cref="T:System.Windows.Forms.DataGridView" /> control and <paramref name="rowIndex" /> is outside the valid range of 0 to the number of rows in the control minus 1.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="GetInheritedStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewCellStyle GetInheritedStyle (System.Windows.Forms.DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewCellStyle GetInheritedStyle(class System.Windows.Forms.DataGridViewCellStyle inheritedCellStyle, int32 rowIndex, bool includeColors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetInheritedStyle(System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInheritedStyle (inheritedCellStyle As DataGridViewCellStyle, rowIndex As Integer, includeColors As Boolean) As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::DataGridViewCellStyle ^ GetInheritedStyle(System::Windows::Forms::DataGridViewCellStyle ^ inheritedCellStyle, int rowIndex, bool includeColors);" />
      <MemberSignature Language="F#" Value="abstract member GetInheritedStyle : System.Windows.Forms.DataGridViewCellStyle * int * bool -&gt; System.Windows.Forms.DataGridViewCellStyle&#xA;override this.GetInheritedStyle : System.Windows.Forms.DataGridViewCellStyle * int * bool -&gt; System.Windows.Forms.DataGridViewCellStyle" Usage="dataGridViewCell.GetInheritedStyle (inheritedCellStyle, rowIndex, includeColors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inheritedCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="includeColors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inheritedCellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be populated with the inherited cell style.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="includeColors">
          <see langword="true" /> to include inherited colors in the returned cell style; otherwise, <see langword="false" />.</param>
        <summary>Gets the style applied to the cell.</summary>
        <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that includes the style settings of the cell inherited from the cell's parent row, column, and <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método retorna um <xref:System.Windows.Forms.DataGridViewCellStyle> que herda as configurações do <xref:System.Windows.Forms.DataGridViewCellStyle> objetos do pai da célula linha, coluna, e <xref:System.Windows.Forms.DataGridView>. Para obter mais informações, consulte [Estilos de célula no controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The cell has no associated <see cref="T:System.Windows.Forms.DataGridView" />.  -or-  <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is less than 0, or greater than or equal to the number of rows in the parent <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.HasStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Style" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size GetPreferredSize (System.Drawing.Graphics graphics, System.Windows.Forms.DataGridViewCellStyle cellStyle, int rowIndex, System.Drawing.Size constraintSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(class System.Drawing.Graphics graphics, class System.Windows.Forms.DataGridViewCellStyle cellStyle, int32 rowIndex, valuetype System.Drawing.Size constraintSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size GetPreferredSize(System::Drawing::Graphics ^ graphics, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, int rowIndex, System::Drawing::Size constraintSize);" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredSize : System.Drawing.Graphics * System.Windows.Forms.DataGridViewCellStyle * int * System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.GetPreferredSize : System.Drawing.Graphics * System.Windows.Forms.DataGridViewCellStyle * int * System.Drawing.Size -&gt; System.Drawing.Size" Usage="dataGridViewCell.GetPreferredSize (graphics, cellStyle, rowIndex, constraintSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="constraintSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to draw the cell.</param>
        <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the style of the cell.</param>
        <param name="rowIndex">The zero-based row index of the cell.</param>
        <param name="constraintSize">The cell's maximum allowable size.</param>
        <summary>Calculates the preferred size, in pixels, of the cell.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> that represents the preferred size, in pixels, of the cell.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.GetPreferredSize%2A> método na classe base <xref:System.Windows.Forms.DataGridViewCell> sempre retorna um <xref:System.Drawing.Size> com uma largura e altura de -1. No entanto, esse método é substituído nas classes derivadas de célula para retornar valores adequados.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="GetSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size GetSize (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size GetSize(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetSize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSize (rowIndex As Integer) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size GetSize(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetSize : int -&gt; System.Drawing.Size&#xA;override this.GetSize : int -&gt; System.Drawing.Size" Usage="dataGridViewCell.GetSize rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Gets the size of the cell.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> representing the cell's dimensions.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não pode ser usado com uma célula em uma linha compartilhada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rowIndex" /> is -1</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="protected virtual object GetValue (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetValue(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetValue (rowIndex As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetValue(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : int -&gt; obj&#xA;override this.GetValue : int -&gt; obj" Usage="dataGridViewCell.GetValue rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Gets the value of the cell.</summary>
        <returns>The value contained in the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Passar o <xref:System.Windows.Forms.DataGridViewCell.GetValue%2A> método o índice de linha usado para recuperar o <xref:System.Windows.Forms.DataGridViewCell>. Não use o <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> propriedade para o `rowIndex` parâmetro. Se a linha for compartilhada, <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> é -1, que não é um valor válido para `rowIndex`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property of the cell is not <see langword="null" /> and <paramref name="rowIndex" /> is less than 0 or greater than or equal to the number of rows in the parent <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property of the cell is not <see langword="null" /> and the value of the <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> property is less than 0, indicating that the cell is a row header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="HasStyle">
      <MemberSignature Language="C#" Value="public bool HasStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.HasStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasStyle { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasStyle : bool" Usage="System.Windows.Forms.DataGridViewCell.HasStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> property has been set.</summary>
        <value>
          <see langword="true" /> Se o <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> propriedade tiver sido definida; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtendo o valor de <xref:System.Windows.Forms.DataGridViewCell.Style%2A> propriedade automaticamente cria um novo <xref:System.Windows.Forms.DataGridViewCellStyle> se a propriedade não tiver sido acessada anteriormente. Portanto, você deve usar o <xref:System.Windows.Forms.DataGridViewCell.HasStyle%2A> propriedade para determinar se o <xref:System.Windows.Forms.DataGridViewCell.Style%2A> propriedade está definida atualmente para um <xref:System.Windows.Forms.DataGridViewCellStyle> instância. Isso é útil para determinar quais propriedades do objeto retornado pelo <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> propriedade representam estilos definido especificamente para a célula.  
  
 Para obter mais informações sobre herança de estilo de célula, consulte [Estilos de célula no controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetInheritedStyle(System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Boolean)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Style" />
      </Docs>
    </Member>
    <Member MemberName="InheritedState">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewElementStates InheritedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewElementStates InheritedState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.InheritedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InheritedState As DataGridViewElementStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewElementStates InheritedState { System::Windows::Forms::DataGridViewElementStates get(); };" />
      <MemberSignature Language="F#" Value="member this.InheritedState : System.Windows.Forms.DataGridViewElementStates" Usage="System.Windows.Forms.DataGridViewCell.InheritedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewElementStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current state of the cell as inherited from the state of its row and column.</summary>
        <value>Uma combinação bit a bit dos valores <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> que representam o estado atual da célula.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The cell is not contained within a <see cref="T:System.Windows.Forms.DataGridView" /> control and the value of its <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> property is not -1.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The cell is contained within a <see cref="T:System.Windows.Forms.DataGridView" /> control and the value of its <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> property is -1.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="InheritedStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle InheritedStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle InheritedStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InheritedStyle As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ InheritedStyle { System::Windows::Forms::DataGridViewCellStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InheritedStyle : System.Windows.Forms.DataGridViewCellStyle" Usage="System.Windows.Forms.DataGridViewCell.InheritedStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style currently applied to the cell.</summary>
        <value>O <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> atualmente aplicado à célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridView> controle exibe suas células usando estilos indicados pela célula <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> propriedade, que herda estilos de outras propriedades do tipo <xref:System.Windows.Forms.DataGridViewCellStyle>. Os estilos especificados por meio de <xref:System.Windows.Forms.DataGridViewCell.Style%2A> propriedade substituem os estilos especificados por meio de todas as outras propriedades de estilo de célula, mas não necessariamente todos os estilos que contribuem para a aparência da célula.  
  
 Para obter mais informações, consulte [Estilos de célula no controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView" /> control.  -or-  <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetInheritedStyle(System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Boolean)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.HasStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Style" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumn" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="InitializeEditingControl">
      <MemberSignature Language="C#" Value="public virtual void InitializeEditingControl (int rowIndex, object initialFormattedValue, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeEditingControl(int32 rowIndex, object initialFormattedValue, class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitializeEditingControl(int rowIndex, System::Object ^ initialFormattedValue, System::Windows::Forms::DataGridViewCellStyle ^ dataGridViewCellStyle);" />
      <MemberSignature Language="F#" Value="abstract member InitializeEditingControl : int * obj * System.Windows.Forms.DataGridViewCellStyle -&gt; unit&#xA;override this.InitializeEditingControl : int * obj * System.Windows.Forms.DataGridViewCellStyle -&gt; unit" Usage="dataGridViewCell.InitializeEditingControl (rowIndex, initialFormattedValue, dataGridViewCellStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="initialFormattedValue" Type="System.Object" />
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The zero-based row index of the cell's location.</param>
        <param name="initialFormattedValue">An <see cref="T:System.Object" /> that represents the value displayed by the cell when editing is started.</param>
        <param name="dataGridViewCellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the style of the cell.</param>
        <summary>Initializes the control used to edit the cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como uma técnica de otimização, normalmente todas as células do mesmo tipo e na mesma <xref:System.Windows.Forms.DataGridView> compartilhar uma única hospedado controle de edição. No entanto, antes do controle é usado por uma célula, ele precisa ser inicializado de <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> método. Na primeira vez que ele é chamado, este método adiciona o controle à lista de edição de controles em seu pai <xref:System.Windows.Forms.DataGridView>. Ele também inicializa algumas das propriedades visuais da célula. Por exemplo, <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> define a cor de plano de fundo da área de edição para coincidir com o parâmetro de estilo de célula fornecida. As chamadas subsequentes para <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> não fazer nada.  
  
 Classes derivadas usam esse método para hospedar uma instância do <xref:System.Windows.Forms.Control> correspondente ao tipo de classe. Por exemplo, uma tabela que contém um ou mais <xref:System.Windows.Forms.DataGridViewTextBoxCell> objetos chama esse método para adicionar um único <xref:System.Windows.Forms.TextBox> a posse do controle de edição <xref:System.Windows.Forms.DataGridView>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Windows.Forms.DataGridViewTextBoxCell.InitializeEditingControl%2A> método em uma classe simple que deriva de <xref:System.Windows.Forms.DataGridViewTextBoxCell> classe. Este exemplo é parte de um exemplo de código maior fornecido no [como: hospedar controles em células de DataGridView do Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">There is no associated <see cref="T:System.Windows.Forms.DataGridView" /> or if one is present, it does not have an associated editing control.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.DetachEditingControl" />
      </Docs>
    </Member>
    <Member MemberName="IsInEditMode">
      <MemberSignature Language="C#" Value="public bool IsInEditMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.IsInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInEditMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInEditMode : bool" Usage="System.Windows.Forms.DataGridViewCell.IsInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this cell is currently being edited.</summary>
        <value>
          <see langword="true" /> se a célula estiver em modo de edição; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade é útil quando você estiver trabalhando diretamente com instâncias de célula. Outra opção é usar a propriedade <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A?displayProperty=nameWithType>. Você também pode manipular o <xref:System.Windows.Forms.DataGridView.CellBeginEdit?displayProperty=nameWithType> evento para determinar quando o usuário insere o modo de edição.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row containing the cell is a shared row.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool KeyDownUnsharesRow (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyDownUnsharesRow(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyDownUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function KeyDownUnsharesRow (e As KeyEventArgs, rowIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool KeyDownUnsharesRow(System::Windows::Forms::KeyEventArgs ^ e, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member KeyDownUnsharesRow : System.Windows.Forms.KeyEventArgs * int -&gt; bool&#xA;override this.KeyDownUnsharesRow : System.Windows.Forms.KeyEventArgs * int -&gt; bool" Usage="dataGridViewCell.KeyDownUnsharesRow (e, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Indicates whether the parent row is unshared if the user presses a key while the focus is on the cell.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.KeyDownUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnKeyDown%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnKeyDown%2A> com o mesmo <xref:System.Windows.Forms.KeyEventArgs> argumento tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyEntersEditMode">
      <MemberSignature Language="C#" Value="public virtual bool KeyEntersEditMode (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool KeyEntersEditMode(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function KeyEntersEditMode (e As KeyEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool KeyEntersEditMode(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member KeyEntersEditMode : System.Windows.Forms.KeyEventArgs -&gt; bool&#xA;override this.KeyEntersEditMode : System.Windows.Forms.KeyEventArgs -&gt; bool" Usage="dataGridViewCell.KeyEntersEditMode e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that represents the key that was pressed.</param>
        <summary>Determines if edit mode should be started based on the given key.</summary>
        <returns>
          <see langword="true" /> if edit mode should be started; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substitua este método para criar uma célula personalizada que pode ser editada.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="KeyPressUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool KeyPressUnsharesRow (System.Windows.Forms.KeyPressEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyPressUnsharesRow(class System.Windows.Forms.KeyPressEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function KeyPressUnsharesRow (e As KeyPressEventArgs, rowIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool KeyPressUnsharesRow(System::Windows::Forms::KeyPressEventArgs ^ e, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member KeyPressUnsharesRow : System.Windows.Forms.KeyPressEventArgs * int -&gt; bool&#xA;override this.KeyPressUnsharesRow : System.Windows.Forms.KeyPressEventArgs * int -&gt; bool" Usage="dataGridViewCell.KeyPressUnsharesRow (e, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Indicates whether a row will be unshared if a key is pressed while a cell in the row has focus.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnKeyPress%2A> método. Em classes derivadas, ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnKeyPress%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool KeyUpUnsharesRow (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyUpUnsharesRow(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyUpUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function KeyUpUnsharesRow (e As KeyEventArgs, rowIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool KeyUpUnsharesRow(System::Windows::Forms::KeyEventArgs ^ e, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member KeyUpUnsharesRow : System.Windows.Forms.KeyEventArgs * int -&gt; bool&#xA;override this.KeyUpUnsharesRow : System.Windows.Forms.KeyEventArgs * int -&gt; bool" Usage="dataGridViewCell.KeyUpUnsharesRow (e, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Indicates whether the parent row is unshared when the user releases a key while the focus is on the cell.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.KeyUpUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnKeyUp%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnKeyUp%2A> com o mesmo <xref:System.Windows.Forms.KeyEventArgs> argumento tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="LeaveUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool LeaveUnsharesRow (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LeaveUnsharesRow(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.LeaveUnsharesRow(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LeaveUnsharesRow (rowIndex As Integer, throughMouseClick As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LeaveUnsharesRow(int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="F#" Value="abstract member LeaveUnsharesRow : int * bool -&gt; bool&#xA;override this.LeaveUnsharesRow : int * bool -&gt; bool" Usage="dataGridViewCell.LeaveUnsharesRow (rowIndex, throughMouseClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="throughMouseClick">
          <see langword="true" /> if a user action moved focus to the cell; <see langword="false" /> if a programmatic operation moved focus to the cell.</param>
        <summary>Indicates whether a row will be unshared when the focus leaves a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.LeaveUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnLeave%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnLeave%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnLeave(System.Int32,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureTextHeight">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the height, in pixels, of the specified text.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureTextHeight">
      <MemberSignature Language="C#" Value="public static int MeasureTextHeight (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, int maxWidth, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MeasureTextHeight(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, int32 maxWidth, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextHeight(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int MeasureTextHeight(System::Drawing::Graphics ^ graphics, System::String ^ text, System::Drawing::Font ^ font, int maxWidth, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member MeasureTextHeight : System.Drawing.Graphics * string * System.Drawing.Font * int * System.Windows.Forms.TextFormatFlags -&gt; int" Usage="System.Windows.Forms.DataGridViewCell.MeasureTextHeight (graphics, text, font, maxWidth, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxWidth" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to render the text.</param>
        <param name="text">The text to measure.</param>
        <param name="font">The <see cref="T:System.Drawing.Font" /> applied to the text.</param>
        <param name="maxWidth">The maximum width of the text.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values to apply to the text.</param>
        <summary>Gets the height, in pixels, of the specified text, given the specified characteristics.</summary>
        <returns>The height, in pixels, of the text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se várias linhas são necessárias e permite a formatação especificada, a altura retornada é a altura combinada de todas as linhas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.  -or-  <paramref name="font" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxWidth" /> is less than 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" /> is not a valid bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="MeasureTextHeight">
      <MemberSignature Language="C#" Value="public static int MeasureTextHeight (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, int maxWidth, System.Windows.Forms.TextFormatFlags flags, out bool widthTruncated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MeasureTextHeight(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, int32 maxWidth, valuetype System.Windows.Forms.TextFormatFlags flags, [out] bool&amp; widthTruncated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextHeight(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Windows.Forms.TextFormatFlags,System.Boolean@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int MeasureTextHeight(System::Drawing::Graphics ^ graphics, System::String ^ text, System::Drawing::Font ^ font, int maxWidth, System::Windows::Forms::TextFormatFlags flags, [Runtime::InteropServices::Out] bool % widthTruncated);" />
      <MemberSignature Language="F#" Value="static member MeasureTextHeight : System.Drawing.Graphics * string * System.Drawing.Font * int * System.Windows.Forms.TextFormatFlags *  -&gt; int" Usage="System.Windows.Forms.DataGridViewCell.MeasureTextHeight (graphics, text, font, maxWidth, flags, widthTruncated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxWidth" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
        <Parameter Name="widthTruncated" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to render the text.</param>
        <param name="text">The text to measure.</param>
        <param name="font">The <see cref="T:System.Drawing.Font" /> applied to the text.</param>
        <param name="maxWidth">The maximum width of the text.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values to apply to the text.</param>
        <param name="widthTruncated">Set to <see langword="true" /> if the required width of the text is greater than <c>maxWidth</c>.</param>
        <summary>Gets the height, in pixels, of the specified text, given the specified characteristics. Also indicates whether the required width is greater than the specified maximum width.</summary>
        <returns>The height, in pixels, of the text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se várias linhas são necessárias e permite a formatação especificada, a altura retornada é a altura combinada de todas as linhas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.  -or-  <paramref name="font" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxWidth" /> is less than 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" /> is not a valid bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="MeasureTextPreferredSize">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureTextPreferredSize (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, float maxRatio, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureTextPreferredSize(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, float32 maxRatio, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextPreferredSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Single,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureTextPreferredSize(System::Drawing::Graphics ^ graphics, System::String ^ text, System::Drawing::Font ^ font, float maxRatio, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member MeasureTextPreferredSize : System.Drawing.Graphics * string * System.Drawing.Font * single * System.Windows.Forms.TextFormatFlags -&gt; System.Drawing.Size" Usage="System.Windows.Forms.DataGridViewCell.MeasureTextPreferredSize (graphics, text, font, maxRatio, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxRatio" Type="System.Single" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to render the text.</param>
        <param name="text">The text to measure.</param>
        <param name="font">The <see cref="T:System.Drawing.Font" /> applied to the text.</param>
        <param name="maxRatio">The maximum width-to-height ratio of the block of text.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values to apply to the text.</param>
        <summary>Gets the ideal height and width of the specified text given the specified characteristics.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> representing the preferred height and width of the text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se várias linhas são necessárias e permite a formatação especificado, o tamanho retornado inclui a altura combinada de todas as linhas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.  -or-  <paramref name="font" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxRatio" /> is less than or equal to 0.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" /> is not a valid bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="MeasureTextSize">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureTextSize (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureTextSize(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureTextSize(System::Drawing::Graphics ^ graphics, System::String ^ text, System::Drawing::Font ^ font, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member MeasureTextSize : System.Drawing.Graphics * string * System.Drawing.Font * System.Windows.Forms.TextFormatFlags -&gt; System.Drawing.Size" Usage="System.Windows.Forms.DataGridViewCell.MeasureTextSize (graphics, text, font, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to render the text.</param>
        <param name="text">The text to measure.</param>
        <param name="font">The <see cref="T:System.Drawing.Font" /> applied to the text.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values to apply to the text.</param>
        <summary>Gets the height and width of the specified text given the specified characteristics.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> representing the height and width of the text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se várias linhas são necessárias e permite a formatação especificado, o tamanho retornado inclui a altura combinada de todas as linhas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.  -or-  <paramref name="font" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" /> is not a valid bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="MeasureTextWidth">
      <MemberSignature Language="C#" Value="public static int MeasureTextWidth (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, int maxHeight, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MeasureTextWidth(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, int32 maxHeight, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextWidth(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int MeasureTextWidth(System::Drawing::Graphics ^ graphics, System::String ^ text, System::Drawing::Font ^ font, int maxHeight, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member MeasureTextWidth : System.Drawing.Graphics * string * System.Drawing.Font * int * System.Windows.Forms.TextFormatFlags -&gt; int" Usage="System.Windows.Forms.DataGridViewCell.MeasureTextWidth (graphics, text, font, maxHeight, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxHeight" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to render the text.</param>
        <param name="text">The text to measure.</param>
        <param name="font">The <see cref="T:System.Drawing.Font" /> applied to the text.</param>
        <param name="maxHeight">The maximum height of the text.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values to apply to the text.</param>
        <summary>Gets the width, in pixels, of the specified text given the specified characteristics.</summary>
        <returns>The width, in pixels, of the text.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.  -or-  <paramref name="font" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxHeight" /> is less than 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" /> is not a valid bitwise combination of <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="MouseClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseClickUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseClickUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseClickUnsharesRow (e As DataGridViewCellMouseEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseClickUnsharesRow(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member MouseClickUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool&#xA;override this.MouseClickUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool" Usage="dataGridViewCell.MouseClickUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Indicates whether a row will be unshared if the user clicks a mouse button while the pointer is on a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseClick%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseClick%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseDoubleClickUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseDoubleClickUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseDoubleClickUnsharesRow (e As DataGridViewCellMouseEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseDoubleClickUnsharesRow(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member MouseDoubleClickUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool&#xA;override this.MouseDoubleClickUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool" Usage="dataGridViewCell.MouseDoubleClickUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Indicates whether a row will be unshared if the user double-clicks a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick%2A> método. Ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="MouseDownUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseDownUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseDownUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseDownUnsharesRow (e As DataGridViewCellMouseEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseDownUnsharesRow(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member MouseDownUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool&#xA;override this.MouseDownUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool" Usage="dataGridViewCell.MouseDownUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Indicates whether a row will be unshared when the user holds down a mouse button while the pointer is on a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseDown%2A> método. Em classes derivadas, ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseDown%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseEnterUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseEnterUnsharesRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseEnterUnsharesRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseEnterUnsharesRow (rowIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseEnterUnsharesRow(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member MouseEnterUnsharesRow : int -&gt; bool&#xA;override this.MouseEnterUnsharesRow : int -&gt; bool" Usage="dataGridViewCell.MouseEnterUnsharesRow rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Indicates whether a row will be unshared when the mouse pointer moves over a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseEnter%2A> método. Em classes derivadas, ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseEnter%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseLeaveUnsharesRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseLeaveUnsharesRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseLeaveUnsharesRow (rowIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseLeaveUnsharesRow(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member MouseLeaveUnsharesRow : int -&gt; bool&#xA;override this.MouseLeaveUnsharesRow : int -&gt; bool" Usage="dataGridViewCell.MouseLeaveUnsharesRow rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Indicates whether a row will be unshared when the mouse pointer leaves the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseLeave%2A> método. Em classes derivadas, ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseLeave%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseMoveUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseMoveUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseMoveUnsharesRow (e As DataGridViewCellMouseEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseMoveUnsharesRow(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member MouseMoveUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool&#xA;override this.MouseMoveUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool" Usage="dataGridViewCell.MouseMoveUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Indicates whether a row will be unshared when the mouse pointer moves over a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseMove%2A> método. Em classes derivadas, ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseMove%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseUpUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseUpUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseUpUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MouseUpUnsharesRow (e As DataGridViewCellMouseEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool MouseUpUnsharesRow(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member MouseUpUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool&#xA;override this.MouseUpUnsharesRow : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; bool" Usage="dataGridViewCell.MouseUpUnsharesRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Indicates whether a row will be unshared when the user releases a mouse button while the pointer is on a cell in the row.</summary>
        <returns>
          <see langword="true" /> if the row will be unshared, otherwise, <see langword="false" />. The base <see cref="T:System.Windows.Forms.DataGridViewCell" /> class always returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow%2A> método é chamado antes de <xref:System.Windows.Forms.DataGridViewCell.OnMouseUp%2A> método. Em classes derivadas, ele deve retornar `true` se a chamada para <xref:System.Windows.Forms.DataGridViewCell.OnMouseUp%2A> tem o efeito de descompartilhar a linha que contém a célula. Caso contrário, ele deverá retornar `false`.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridViewCell.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Called when the cell is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellClick%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellClick?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellClick" />
      </Docs>
    </Member>
    <Member MemberName="OnContentClick">
      <MemberSignature Language="C#" Value="protected virtual void OnContentClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnContentClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridViewCell.OnContentClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Called when the cell's contents are clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellContentClick%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellContentClick?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContentClick" />
      </Docs>
    </Member>
    <Member MemberName="OnContentDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnContentDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentDoubleClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentDoubleClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnContentDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridViewCell.OnContentDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Called when the cell's contents are double-clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellContentDoubleClick%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellContentDoubleClick?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnDataGridViewChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataGridViewChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataGridViewChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnDataGridViewChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataGridViewChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataGridViewChanged();" />
      <MemberSignature Language="F#" Value="override this.OnDataGridViewChanged : unit -&gt; unit" Usage="dataGridViewCell.OnDataGridViewChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property of the cell changes.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoubleClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoubleClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridViewCell.OnDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Called when the cell is double-clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellDoubleClick%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellDoubleClick?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnEnter(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnter (rowIndex As Integer, throughMouseClick As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnter(int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="F#" Value="abstract member OnEnter : int * bool -&gt; unit&#xA;override this.OnEnter : int * bool -&gt; unit" Usage="dataGridViewCell.OnEnter (rowIndex, throughMouseClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="throughMouseClick">
          <see langword="true" /> if a user action moved focus to the cell; <see langword="false" /> if a programmatic operation moved focus to the cell.</param>
        <summary>Called when the focus moves to a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellEnter%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellEnter?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnLeave(System.Int32,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Forms.KeyEventArgs * int -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Forms.KeyEventArgs * int -&gt; unit" Usage="dataGridViewCell.OnKeyDown (e, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Called when a character key is pressed while the focus is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.Control.OnKeyDown%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.Control.KeyDown> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyPress (e As KeyPressEventArgs, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyPress : System.Windows.Forms.KeyPressEventArgs * int -&gt; unit&#xA;override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs * int -&gt; unit" Usage="dataGridViewCell.OnKeyPress (e, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Called when a key is pressed while the focus is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.Control.OnKeyPress%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.Control.KeyPress> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e, int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Forms.KeyEventArgs * int -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Forms.KeyEventArgs * int -&gt; unit" Usage="dataGridViewCell.OnKeyUp (e, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Called when a character key is released while the focus is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.Control.OnKeyUp%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.Control.KeyUp> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnLeave(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLeave (rowIndex As Integer, throughMouseClick As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLeave(int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="F#" Value="abstract member OnLeave : int * bool -&gt; unit&#xA;override this.OnLeave : int * bool -&gt; unit" Usage="dataGridViewCell.OnLeave (rowIndex, throughMouseClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="throughMouseClick">
          <see langword="true" /> if a user action moved focus from the cell; <see langword="false" /> if a programmatic operation moved focus from the cell.</param>
        <summary>Called when the focus moves from a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellLeave%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellLeave?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnEnter(System.Int32,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridViewCell.OnMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Called when the user clicks a mouse button while the pointer is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseClick%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseClick?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso deste método.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDoubleClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDoubleClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridViewCell.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Called when the user double-clicks a mouse button while the pointer is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseDoubleClick?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridViewCell.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Called when the user holds down a mouse button while the pointer is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseDown%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseDown?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellMouseDown" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : int -&gt; unit&#xA;override this.OnMouseEnter : int -&gt; unit" Usage="dataGridViewCell.OnMouseEnter rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Called when the mouse pointer moves over a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseEnter%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseEnter?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra o uso deste método. Este exemplo é parte de um exemplo maior disponível em [como: Personalizar células e colunas no controle DataGridView dos Windows Forms estendendo seus comportamento e aparência](~/docs/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellMouseEnter" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(int rowIndex);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : int -&gt; unit&#xA;override this.OnMouseLeave : int -&gt; unit" Usage="dataGridViewCell.OnMouseLeave rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <summary>Called when the mouse pointer leaves the cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseLeave%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseLeave?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra o uso deste método. Este exemplo é parte de um exemplo maior disponível em [como: Personalizar células e colunas no controle DataGridView dos Windows Forms estendendo seus comportamento e aparência](~/docs/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellMouseLeave" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridViewCell.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Called when the mouse pointer moves within a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseMove%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseMove?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellMouseMove" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridViewCell.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Called when the user releases a mouse button while the pointer is on a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é semelhante de <xref:System.Windows.Forms.DataGridView.OnCellMouseUp%2A?displayProperty=nameWithType> método. As mesmas circunstâncias em que ele é chamado um <xref:System.Windows.Forms.DataGridView.CellMouseUp?displayProperty=nameWithType> é gerado, mas ele não gera o evento realmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellMouseUp" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OwningColumn">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumn OwningColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumn OwningColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.OwningColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwningColumn As DataGridViewColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewColumn ^ OwningColumn { System::Windows::Forms::DataGridViewColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwningColumn : System.Windows.Forms.DataGridViewColumn" Usage="System.Windows.Forms.DataGridViewCell.OwningColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the column that contains this cell.</summary>
        <value>O <see cref="T:System.Windows.Forms.DataGridViewColumn" /> que contém a célula ou <see langword="null" /> se a célula não estiver em uma coluna.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.OwningRow" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />
      </Docs>
    </Member>
    <Member MemberName="OwningRow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow OwningRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow OwningRow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.OwningRow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwningRow As DataGridViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewRow ^ OwningRow { System::Windows::Forms::DataGridViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwningRow : System.Windows.Forms.DataGridViewRow" Usage="System.Windows.Forms.DataGridViewCell.OwningRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the row that contains this cell.</summary>
        <value>O <see cref="T:System.Windows.Forms.DataGridViewRow" /> que contém a célula ou <see langword="null" />, se a célula não estiver em uma linha.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.OwningColumn" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="protected virtual void Paint (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle cellBounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates cellState, object value, object formattedValue, string errorText, System.Windows.Forms.DataGridViewCellStyle cellStyle, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle, System.Windows.Forms.DataGridViewPaintParts paintParts);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Paint(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle cellBounds, int32 rowIndex, valuetype System.Windows.Forms.DataGridViewElementStates cellState, object value, object formattedValue, string errorText, class System.Windows.Forms.DataGridViewCellStyle cellStyle, class System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle, valuetype System.Windows.Forms.DataGridViewPaintParts paintParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Paint(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle clipBounds, System::Drawing::Rectangle cellBounds, int rowIndex, System::Windows::Forms::DataGridViewElementStates cellState, System::Object ^ value, System::Object ^ formattedValue, System::String ^ errorText, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ advancedBorderStyle, System::Windows::Forms::DataGridViewPaintParts paintParts);" />
      <MemberSignature Language="F#" Value="abstract member Paint : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle * int * System.Windows.Forms.DataGridViewElementStates * obj * obj * string * System.Windows.Forms.DataGridViewCellStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle * System.Windows.Forms.DataGridViewPaintParts -&gt; unit&#xA;override this.Paint : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle * int * System.Windows.Forms.DataGridViewElementStates * obj * obj * string * System.Windows.Forms.DataGridViewCellStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle * System.Windows.Forms.DataGridViewPaintParts -&gt; unit" Usage="dataGridViewCell.Paint (graphics, clipBounds, cellBounds, rowIndex, cellState, value, formattedValue, errorText, cellStyle, advancedBorderStyle, paintParts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cellState" Type="System.Windows.Forms.DataGridViewElementStates" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="formattedValue" Type="System.Object" />
        <Parameter Name="errorText" Type="System.String" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="advancedBorderStyle" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="paintParts" Type="System.Windows.Forms.DataGridViewPaintParts" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the <see cref="T:System.Windows.Forms.DataGridViewCell" />.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be repainted.</param>
        <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle" /> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is being painted.</param>
        <param name="rowIndex">The row index of the cell that is being painted.</param>
        <param name="cellState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values that specifies the state of the cell.</param>
        <param name="value">The data of the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is being painted.</param>
        <param name="formattedValue">The formatted data of the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is being painted.</param>
        <param name="errorText">An error message that is associated with the cell.</param>
        <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that contains formatting and style information about the cell.</param>
        <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that contains border styles for the cell that is being painted.</param>
        <param name="paintParts">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewPaintParts" /> values that specifies which parts of the cell need to be painted.</param>
        <summary>Paints the current <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Windows.Forms.DataGridViewCell.Paint%2A> método de um <xref:System.Windows.Forms.DataGridViewButtonCell>. Este exemplo de código é parte de um exemplo maior fornecido em [como: desabilitar botões em uma coluna de botão no controle de DataGridView dos Windows Forms](~/docs/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle)" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="PaintBorder">
      <MemberSignature Language="C#" Value="protected virtual void PaintBorder (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle bounds, System.Windows.Forms.DataGridViewCellStyle cellStyle, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintBorder(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle bounds, class System.Windows.Forms.DataGridViewCellStyle cellStyle, class System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PaintBorder(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle clipBounds, System::Drawing::Rectangle bounds, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ advancedBorderStyle);" />
      <MemberSignature Language="F#" Value="abstract member PaintBorder : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Windows.Forms.DataGridViewCellStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle -&gt; unit&#xA;override this.PaintBorder : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Windows.Forms.DataGridViewCellStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle -&gt; unit" Usage="dataGridViewCell.PaintBorder (graphics, clipBounds, bounds, cellStyle, advancedBorderStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="advancedBorderStyle" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the border.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be repainted.</param>
        <param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> that contains the area of the border that is being painted.</param>
        <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that contains formatting and style information about the current cell.</param>
        <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that contains border styles of the border that is being painted.</param>
        <summary>Paints the border of the current <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir ilustra o uso deste método. Este exemplo é parte de um exemplo maior disponível em [como: desabilitar botões em uma coluna de botão no controle de DataGridView dos Windows Forms](~/docs/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="PaintErrorIcon">
      <MemberSignature Language="C#" Value="protected virtual void PaintErrorIcon (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle cellValueBounds, string errorText);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintErrorIcon(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle cellValueBounds, string errorText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PaintErrorIcon(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PaintErrorIcon(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle clipBounds, System::Drawing::Rectangle cellValueBounds, System::String ^ errorText);" />
      <MemberSignature Language="F#" Value="abstract member PaintErrorIcon : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle * string -&gt; unit&#xA;override this.PaintErrorIcon : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle * string -&gt; unit" Usage="dataGridViewCell.PaintErrorIcon (graphics, clipBounds, cellValueBounds, errorText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellValueBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="errorText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the border.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be repainted.</param>
        <param name="cellValueBounds">The bounding <see cref="T:System.Drawing.Rectangle" /> that encloses the cell's content area.</param>
        <param name="errorText">An error message that is associated with the cell.</param>
        <summary>Paints the error icon of the current <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `errorText` parâmetro sinaliza a existência de um erro. Se `errorText` é `null` ou <xref:System.String.Empty?displayProperty=nameWithType>, o <xref:System.Windows.Forms.DataGridViewCell.PaintErrorIcon%2A> método não fará nada.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle)" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="ParseFormattedValue">
      <MemberSignature Language="C#" Value="public virtual object ParseFormattedValue (object formattedValue, System.Windows.Forms.DataGridViewCellStyle cellStyle, System.ComponentModel.TypeConverter formattedValueTypeConverter, System.ComponentModel.TypeConverter valueTypeConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseFormattedValue(object formattedValue, class System.Windows.Forms.DataGridViewCellStyle cellStyle, class System.ComponentModel.TypeConverter formattedValueTypeConverter, class System.ComponentModel.TypeConverter valueTypeConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseFormattedValue (formattedValue As Object, cellStyle As DataGridViewCellStyle, formattedValueTypeConverter As TypeConverter, valueTypeConverter As TypeConverter) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseFormattedValue(System::Object ^ formattedValue, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, System::ComponentModel::TypeConverter ^ formattedValueTypeConverter, System::ComponentModel::TypeConverter ^ valueTypeConverter);" />
      <MemberSignature Language="F#" Value="abstract member ParseFormattedValue : obj * System.Windows.Forms.DataGridViewCellStyle * System.ComponentModel.TypeConverter * System.ComponentModel.TypeConverter -&gt; obj&#xA;override this.ParseFormattedValue : obj * System.Windows.Forms.DataGridViewCellStyle * System.ComponentModel.TypeConverter * System.ComponentModel.TypeConverter -&gt; obj" Usage="dataGridViewCell.ParseFormattedValue (formattedValue, cellStyle, formattedValueTypeConverter, valueTypeConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formattedValue" Type="System.Object" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="formattedValueTypeConverter" Type="System.ComponentModel.TypeConverter" />
        <Parameter Name="valueTypeConverter" Type="System.ComponentModel.TypeConverter" />
      </Parameters>
      <Docs>
        <param name="formattedValue">The display value of the cell.</param>
        <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> in effect for the cell.</param>
        <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter" /> for the display value type, or <see langword="null" /> to use the default converter.</param>
        <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter" /> for the cell value type, or <see langword="null" /> to use the default converter.</param>
        <summary>Converts a value formatted for display to an actual cell value.</summary>
        <returns>The cell value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o usuário edita um valor de célula e confirma a alteração, o <xref:System.Windows.Forms.DataGridView> controle chama esse método para converter o valor exibido do <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> para o <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A>. O controle, em seguida, define o valor de célula subjacente ou o valor da fonte de dados para o valor convertido.  
  
 A implementação padrão desse método analisa o `formattedValue` usando o parâmetro a <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, e <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> propriedades do estilo de célula é indicado pelo `cellStyle` parâmetro.  
  
 Se `formattedValue` é igual a <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, esse método retorna o valor da <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> propriedade ou `null` se <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> é <xref:System.DBNull.Value?displayProperty=nameWithType> e a célula <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> é um tipo de referência.  
  
 Se `formattedValue` não é igual a <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, esse método analisa `formattedValue` usando o <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> especificado e propriedade ou conversores padrão.  
  
 Se a célula <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> é anulável, este método envolve o valor de retorno como uma <xref:System.Nullable%601> tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cellStyle" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The <see cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" /> property value is <see langword="null" />.  -or-  The <see cref="P:System.Windows.Forms.DataGridViewCell.ValueType" /> property value is <see langword="null" />.  -or-  <paramref name="formattedValue" /> cannot be converted.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="formattedValue" /> is <see langword="null" />.  -or-  The type of <paramref name="formattedValue" /> does not match the type indicated by the <see cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" /> property.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.NullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ValueType" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="T:System.Nullable`1" />
      </Docs>
    </Member>
    <Member MemberName="PositionEditingControl">
      <MemberSignature Language="C#" Value="public virtual void PositionEditingControl (bool setLocation, bool setSize, System.Drawing.Rectangle cellBounds, System.Drawing.Rectangle cellClip, System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PositionEditingControl(bool setLocation, bool setSize, valuetype System.Drawing.Rectangle cellBounds, valuetype System.Drawing.Rectangle cellClip, class System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PositionEditingControl (setLocation As Boolean, setSize As Boolean, cellBounds As Rectangle, cellClip As Rectangle, cellStyle As DataGridViewCellStyle, singleVerticalBorderAdded As Boolean, singleHorizontalBorderAdded As Boolean, isFirstDisplayedColumn As Boolean, isFirstDisplayedRow As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PositionEditingControl(bool setLocation, bool setSize, System::Drawing::Rectangle cellBounds, System::Drawing::Rectangle cellClip, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="F#" Value="abstract member PositionEditingControl : bool * bool * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Windows.Forms.DataGridViewCellStyle * bool * bool * bool * bool -&gt; unit&#xA;override this.PositionEditingControl : bool * bool * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Windows.Forms.DataGridViewCellStyle * bool * bool * bool * bool -&gt; unit" Usage="dataGridViewCell.PositionEditingControl (setLocation, setSize, cellBounds, cellClip, cellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, isFirstDisplayedColumn, isFirstDisplayedRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setLocation" Type="System.Boolean" />
        <Parameter Name="setSize" Type="System.Boolean" />
        <Parameter Name="cellBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellClip" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="setLocation">
          <see langword="true" /> to have the control placed as specified by the other arguments; <see langword="false" /> to allow the control to place itself.</param>
        <param name="setSize">
          <see langword="true" /> to specify the size; <see langword="false" /> to allow the control to size itself.</param>
        <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle" /> that defines the cell bounds.</param>
        <param name="cellClip">The area that will be used to paint the editing control.</param>
        <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the style of the cell being edited.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" /> to add a vertical border to the cell; otherwise, <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" /> to add a horizontal border to the cell; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" /> if the hosting cell is in the first visible column; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> if the hosting cell is in the first visible row; otherwise, <see langword="false" />.</param>
        <summary>Sets the location and size of the editing control hosted by a cell in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Algumas classes derivadas do <xref:System.Windows.Forms.DataGridViewCell> classe, como <xref:System.Windows.Forms.DataGridViewComboBoxCell>, hospedar um controle na célula selecionada. O <xref:System.Windows.Forms.DataGridViewCell.PositionEditingControl%2A> método posiciona o controle de edição dentro da célula de host. Porque o controle de edição pode ocupar mais espaço do que uma única célula, talvez precise ser posicionados de maneira diferente quando você editar uma célula na primeira coluna visível ou da primeira linha visível para que ele não pintado fora o <xref:System.Windows.Forms.DataGridView>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The cell is not contained within a <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxCell" />
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="PositionEditingPanel">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle PositionEditingPanel (System.Drawing.Rectangle cellBounds, System.Drawing.Rectangle cellClip, System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Rectangle PositionEditingPanel(valuetype System.Drawing.Rectangle cellBounds, valuetype System.Drawing.Rectangle cellClip, class System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PositionEditingPanel(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PositionEditingPanel (cellBounds As Rectangle, cellClip As Rectangle, cellStyle As DataGridViewCellStyle, singleVerticalBorderAdded As Boolean, singleHorizontalBorderAdded As Boolean, isFirstDisplayedColumn As Boolean, isFirstDisplayedRow As Boolean) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Drawing::Rectangle PositionEditingPanel(System::Drawing::Rectangle cellBounds, System::Drawing::Rectangle cellClip, System::Windows::Forms::DataGridViewCellStyle ^ cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="F#" Value="abstract member PositionEditingPanel : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Windows.Forms.DataGridViewCellStyle * bool * bool * bool * bool -&gt; System.Drawing.Rectangle&#xA;override this.PositionEditingPanel : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Windows.Forms.DataGridViewCellStyle * bool * bool * bool * bool -&gt; System.Drawing.Rectangle" Usage="dataGridViewCell.PositionEditingPanel (cellBounds, cellClip, cellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, isFirstDisplayedColumn, isFirstDisplayedRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellClip" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle" /> that defines the cell bounds.</param>
        <param name="cellClip">The area that will be used to paint the editing panel.</param>
        <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the style of the cell being edited.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" /> to add a vertical border to the cell; otherwise, <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" /> to add a horizontal border to the cell; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" /> if the cell is in the first column currently displayed in the control; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> if the cell is in the first row currently displayed in the control; otherwise, <see langword="false" />.</param>
        <summary>Sets the location and size of the editing panel hosted by the cell, and returns the normal bounds of the editing control within the editing panel.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the normal bounds of the editing control within the editing panel.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The cell has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.PreferredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size PreferredSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredSize : System.Drawing.Size" Usage="System.Windows.Forms.DataGridViewCell.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size, in pixels, of a rectangular area into which the cell can fit.</summary>
        <value>Um <see cref="T:System.Drawing.Size" /> que contém a altura e largura, em pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.PreferredSize%2A> propriedade retorna o tamanho natural da célula calculada pela célula da propriedade de linha e coluna. <xref:System.Windows.Forms.DataGridViewCell.PreferredSize%2A> Retorna um <xref:System.Drawing.Size> com uma largura e altura de -1 se a célula não está contida em uma tabela.  
  
 Se a célula está em um <xref:System.Windows.Forms.DataGridViewColumn> com seus <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A> propriedade definida como `false`, -1 será retornado para a largura.  
  
 Esse método depende de <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Size" />
        <altmember cref="T:System.Drawing.Size" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Windows.Forms.DataGridViewCell.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the cell's data can be edited.</summary>
        <value>
          <see langword="true" /> quando os dados da célula não podem ser editados, caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> propriedade indica se os dados exibidos por célula podem ser editados. Você pode definir <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> para células individuais, ou você pode fazer uma linha ou coluna inteira de células somente leitura, definindo o <xref:System.Windows.Forms.DataGridViewRow.ReadOnly%2A?displayProperty=nameWithType> ou <xref:System.Windows.Forms.DataGridViewColumn.ReadOnly%2A?displayProperty=nameWithType> propriedades. Por padrão, se a linha pai de uma célula ou coluna é definida como somente leitura, as células filho adotarão o mesmo valor. Você pode substituir esse comportamento padrão definindo <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> para células individuais.  
  
 Você pode navegar para uma célula somente leitura, e você pode definir uma célula somente leitura para a célula atual.  
  
 <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> afeta somente se uma célula é editável; ele não afeta se o usuário pode excluir linhas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">There is no owning row when setting this property.  -or-  The owning row is shared when setting this property.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.ReadOnly" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.ReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Resizable">
      <MemberSignature Language="C#" Value="public virtual bool Resizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Resizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Resizable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Resizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Resizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Resizable : bool" Usage="System.Windows.Forms.DataGridViewCell.Resizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the cell can be resized.</summary>
        <value>
          <see langword="true" /> Se a célula pode ser redimensionada; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.Windows.Forms.DataGridViewCell.Resizable%2A> propriedade é definida por linha pai ou a coluna da célula.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
      </Docs>
    </Member>
    <Member MemberName="RowIndex">
      <MemberSignature Language="C#" Value="public int RowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RowIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RowIndex : int" Usage="System.Windows.Forms.DataGridViewCell.RowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the cell's parent row.</summary>
        <value>O índice da linha que contém a célula; -1 se não houver uma linha proprietária.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> propriedade retorna -1, a célula é um cabeçalho de coluna ou linha da célula é compartilhada.  
  
 Para obter mais informações sobre compartilhamento de linha, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra o uso dessa propriedade.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#080](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#080)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#080](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#080)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Selected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Selected { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Selected : bool with get, set" Usage="System.Windows.Forms.DataGridViewCell.Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the cell has been selected.</summary>
        <value>
          <see langword="true" /> Se a célula foi selecionado; Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">There is no associated <see cref="T:System.Windows.Forms.DataGridView" /> when setting this property.  -or-  The owning row is shared when setting this property.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="protected virtual bool SetValue (int rowIndex, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool SetValue(int32 rowIndex, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.SetValue(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SetValue (rowIndex As Integer, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool SetValue(int rowIndex, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : int * obj -&gt; bool&#xA;override this.SetValue : int * obj -&gt; bool" Usage="dataGridViewCell.SetValue (rowIndex, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the cell's parent row.</param>
        <param name="value">The cell value to set.</param>
        <summary>Sets the value of the cell.</summary>
        <returns>
          <see langword="true" /> if the value has been set; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is less than 0 or greater than or equal to the number of rows in the parent <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetValue(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size" Usage="System.Windows.Forms.DataGridViewCell.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size of the cell.</summary>
        <value>Um <see cref="T:System.Drawing.Size" /> definido como a altura da linha proprietária e a largura da coluna proprietária.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a célula não está associada a um <xref:System.Windows.Forms.DataGridView> controle, o <xref:System.Windows.Forms.DataGridViewCell.Size%2A> propriedade retorna um <xref:System.Drawing.Size> com uma largura e altura de -1.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row containing the cell is a shared row.  -or-  The cell is a column header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.PreferredSize" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ Style { System::Windows::Forms::DataGridViewCellStyle ^ get(); void set(System::Windows::Forms::DataGridViewCellStyle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Forms.DataGridViewCellStyle with get, set" Usage="System.Windows.Forms.DataGridViewCell.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style for the cell.</summary>
        <value>O estilo associado a uma célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.DataGridView> controle exibe suas células usando estilos indicados pela célula <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> propriedade, que herda estilos de outras propriedades do tipo <xref:System.Windows.Forms.DataGridViewCellStyle>. Os estilos especificados por meio de <xref:System.Windows.Forms.DataGridViewCell.Style%2A> propriedade substituem os estilos especificados por meio de todas as outras propriedades de estilo de célula, mas não necessariamente todos os estilos que contribuem para a aparência da célula.  
  
 Para obter mais informações, consulte [Estilos de célula no controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Windows.Forms.DataGridViewCell.Style%2A> para alterar a cor de plano de fundo de uma célula. Este exemplo é parte de um exemplo de código maior fornecido para a <xref:System.Windows.Forms.DataGridViewColumn> classe.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewColumnDemo.cpp#120)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewColumnDemo.cs#120)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewcolumndemo.vb#120)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellStyleChanged" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.DataGridViewCell.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object that contains supplemental data about the cell.</summary>
        <value>Um <see cref="T:System.Object" /> que contém dados sobre a célula. O padrão é <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Qualquer tipo derivado de <xref:System.Object> classe pode ser atribuída a essa propriedade. O <xref:System.Windows.Forms.DataGridViewCell.Tag%2A> propriedade normalmente é usada para armazenar dados que estão estreitamente relacionados com o valor exibido na célula.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="T:System.Object" />
        <altmember cref="P:System.Windows.Forms.Control.Tag" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipText">
      <MemberSignature Language="C#" Value="public string ToolTipText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTipText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ToolTipText" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTipText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ToolTipText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTipText : string with get, set" Usage="System.Windows.Forms.DataGridViewCell.ToolTipText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ToolTip text associated with this cell.</summary>
        <value>O texto de ToolTip associado à célula. O padrão é <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é exibido como a célula de dica de ferramenta quando o ponteiro do mouse está sobre a célula e o valor da propriedade não é <xref:System.String.Empty>. Se o valor dessa propriedade é <xref:System.String.Empty>, a célula exibirá uma dica de ferramenta que contém o valor da célula, se o valor é truncado na exibição de célula; caso contrário, a célula não será exibida uma dica de ferramenta. Você também pode impedir a exibição de uma dica de ferramenta, definindo o <xref:System.Windows.Forms.DataGridView.ShowCellToolTips%2A?displayProperty=nameWithType> propriedade `false`.  
  
 Quando o <xref:System.Windows.Forms.DataGridView> controle <xref:System.Windows.Forms.DataGridView.DataSource%2A> está definida ou seu <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> é de propriedade `true`, obter o valor do <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> propriedade gera o <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> eventos do controle e retorna o valor da <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=nameWithType> a propriedade como especificado no evento manipulador. Se não houver nenhum manipulador para o evento, obtendo o valor de <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> propriedade retorna o valor especificado anteriormente ou seu valor padrão de <xref:System.String.Empty>.  
  
 Tratamento de <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> evento é principalmente útil ao trabalhar com grandes quantidades de dados para evitar penalidades de desempenho ao definir a célula <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> valor para várias células. Para obter mais informações, consulte [Práticas recomendadas para colocação em escala do controle DataGridView dos Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 A alteração dessa propriedade gera o <xref:System.Windows.Forms.DataGridView.CellToolTipTextChanged> evento na posse <xref:System.Windows.Forms.DataGridView>, se houver.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como definir o <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> propriedade dentro de um manipulador de eventos para o <xref:System.Windows.Forms.DataGridView.CellFormatting> evento. Este exemplo é parte de um exemplo de código maior fornecido no [como: adicionar dicas de ferramenta para células individuais em um controle DataGridView do Windows Forms](~/docs/framework/winforms/controls/add-tooltips-to-individual-cells-in-a-wf-datagridview-control.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/cpp/datagridviewcell.tooltiptext.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/CS/datagridviewcell.tooltiptext.cs#1)]
 [!code-vb[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/VB/datagridviewcell.tooltiptext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowCellToolTips" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dataGridViewCell.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that describes the current object.</summary>
        <returns>A string that represents the current object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Salvo indicação em contrário, o <xref:System.Windows.Forms.DataGridViewCell.ToString%2A> método para os vários tipos de célula retornará uma cadeia de caracteres no formato mostrado no exemplo de código a seguir:  
  
 `Classname {RowIndex = #, ColumnIndex = #}`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.Forms.DataGridViewCell.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value associated with this cell.</summary>
        <value>Obtém ou define os dados a serem exibidas pela célula. O padrão é <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você atribui um valor diferente para uma célula, o <xref:System.Windows.Forms.DataGridView.CellValueChanged> evento o <xref:System.Windows.Forms.DataGridView> controle é gerado.  
  
 O <xref:System.Windows.Forms.DataGridViewCell.Value%2A> propriedade é o objeto de dados reais contido na célula, enquanto o <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> propriedade é a representação de formatação dos dados. O <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> e <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedades correspondem aos tipos de dados desses valores, respectivamente.  
  
 Quando você define o <xref:System.Windows.Forms.DataGridViewCell.Value%2A> propriedade, o valor especificado não é automaticamente convertido de um formatado, exibir o valor para um valor de célula subjacente. Por exemplo, o <xref:System.Windows.Forms.DataGridViewCellStyle> em vigor para a célula será ignorada, portanto, a definição <xref:System.Windows.Forms.DataGridViewCell.Value%2A> para <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A?displayProperty=nameWithType> não resulta em um valor da propriedade <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como atualizar o conteúdo da célula com o <xref:System.Windows.Forms.DataGridViewCell.Value%2A> propriedade. Este exemplo é parte de um exemplo de código maior fornecido no [como: manipular linhas no controle de DataGridView dos Windows Forms](~/docs/framework/winforms/controls/how-to-manipulate-rows-in-the-windows-forms-datagridview-control.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewRowDemo.cpp#211)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewRowDemo.cs#211)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewrowdemo.vb#211)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> is outside the valid range of 0 to the number of rows in the control minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> is less than 0, indicating that the cell is a row header cell.</exception>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Tag" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public virtual Type ValueType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ValueType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValueType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ValueType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValueType : Type with get, set" Usage="System.Windows.Forms.DataGridViewCell.ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data type of the values in the cell.</summary>
        <value>Um <see cref="T:System.Type" /> que representa o tipo de dados do valor na célula.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> propriedade da célula não foi definida, o <xref:System.Windows.Forms.DataGridViewColumn.ValueType%2A?displayProperty=nameWithType> propriedade para a coluna de propriedade é usada, se ela existir.  
  
 O <xref:System.Windows.Forms.DataGridViewCell.Value%2A> propriedade é o objeto de dados reais contido na célula, enquanto o <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> propriedade é a representação de formatação dos dados. O <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> e <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> propriedades correspondem aos tipos de dados desses valores, respectivamente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso dessa propriedade.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.ValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool" Usage="System.Windows.Forms.DataGridViewCell.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the cell is in a row or column that has been hidden.</summary>
        <value>
          <see langword="true" /> se a célula estiver visível; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade indica se a célula está em uma linha ou uma coluna com seus <xref:System.Windows.Forms.DataGridViewBand.Visible%2A> propriedade definida como `false`. Ele não indica se a célula tenha sido rolada fora da tela. Para determinar se uma célula estiver visível na área de exibição do controle, use o <xref:System.Windows.Forms.DataGridViewCell.Displayed%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.Visible" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Visible" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Displayed" />
      </Docs>
    </Member>
  </Members>
</Type>