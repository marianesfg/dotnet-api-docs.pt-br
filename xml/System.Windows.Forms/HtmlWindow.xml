<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9b6eb0c6aabc0a722c4f6199ff5a976a9bf30681" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39940629" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa a janela lógica que contém uma ou mais instâncias de <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> não deve ser confundido com o conceito de uma janela no Windows Forms ou a API do Win32; Não há nenhuma `HWND` ou recurso semelhante do Windows que corresponde diretamente a uma instância do <xref:System.Windows.Forms.HtmlWindow>. Em vez disso, <xref:System.Windows.Forms.HtmlWindow> fornece descrições de alto nível de um local do documento na tela do usuário, bem como pela métodos para interagir com os usuários por meio de prompts e caixas de diálogo. <xref:System.Windows.Forms.HtmlWindow> atua como um contêiner lógico para documentos de uma página Web e seus metadados, como a localização do documento e os recursos do navegador da Web.  
  
 Uma Web de página consiste em um único documento ou uma `FRAMESET` que contém um ou mais `FRAME` elementos, cada um dos quais hospeda seu próprio documento. Os desenvolvedores da Web usam conjuntos de quadros para mostrar as páginas relacionadas logicamente lado a lado (por exemplo, uma página de conteúdo ao lado de uma página de navegação). Quando uma página consiste em um único documento, você pode acessá-lo por meio do <xref:System.Windows.Forms.HtmlWindow.Document%2A> propriedade de <xref:System.Windows.Forms.HtmlWindow>; se a página usa quadros, você pode acessar seus documentos por meio de <xref:System.Windows.Forms.HtmlWindow.Frames%2A> coleção, que consiste em um ou mais <xref:System.Windows.Forms.HtmlWindow> objetos.  
  
 Quando o host a <xref:System.Windows.Forms.WebBrowser> controle em um aplicativo Windows Forms, você pode optar por interagir com o usuário usando as classes padrão do Windows Forms, como <xref:System.Windows.Forms.Form> ou <xref:System.Windows.Forms.MessageBox>, ou você pode usar métodos em <xref:System.Windows.Forms.HtmlWindow> definidos para essa finalidade. O <xref:System.Windows.Forms.HtmlWindow.Alert%2A> método apresenta uma caixa de diálogo simples com texto personalizado e um **Okey** botão; <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> apresenta uma linha de texto personalizado e um campo de entrada de texto para o usuário; e <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> apresenta uma caixa de diálogo com uma linha de texto personalizado e **Okey** e **Cancelar** botões.  
  
 Você pode usar <xref:System.Windows.Forms.HtmlWindow> para abrir novas janelas que contém os novos documentos. <xref:System.Windows.Forms.HtmlWindow.Open%2A> carrega a URL especificada na janela nomeada, criá-lo se ele ainda não existir, enquanto <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> sempre abre sua URL em uma janela criada recentemente.  
  
   
  
## Examples  
 O exemplo de código a seguir contém dois métodos. O primeiro abre uma URL em uma janela chamada `displayWindow`, que será criado com uma barra de status exibida. O segundo abre outra URL na mesma janela, mas Especifica que somente a barra de localização deve ser exibida. Observe que as dimensões da janela e os controles que são exibidos depende em qual URL é aberto pela primeira vez. O exemplo de código requer que seu formulário contém um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">O <see cref="T:System.String" /> a ser exibido na caixa de mensagem.</param>
        <summary>Exibe uma caixa de mensagem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.MessageBox> classe oferece uma versão mais poderosa do <xref:System.Windows.Forms.HtmlWindow.Alert%2A> método.  
  
 Embora <xref:System.Windows.Forms.HtmlWindow.Alert%2A> aceita texto Unicode como entrada, o prompt de script do Internet Explorer não exibirá o texto de idiomas não latinos adequadamente no Windows 95, Windows 98, Windows ME ou Windows NT devido a limitações de sistema operacional. Para obter mais informações, consulte [INFO: Prompts de Script do Internet Explorer e MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">O nome do evento que você deseja manipular.</param>
        <param name="eventHandler">Uma referência ao código gerenciado que manipula o evento.</param>
        <summary>Adiciona um manipulador de eventos para o evento HTML DOM nomeado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você não deve anexar a um evento para um documento HTML ou um de seus objetos até que o documento tiver concluído o carregamento. É o mais antigo que você deve chamar esse método na <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventos do <xref:System.Windows.Forms.WebBrowser> controle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha a janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> propriedade para determinar se a janela já está fechada. Se a janela já estiver fechada, esse método não terá nenhum efeito.  
  
 Quando você cria novas janelas usando <xref:System.Windows.Forms.HtmlWindow.Open%2A> ou <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> faz com que o modelo de objeto do documento HTML abrir uma nova instância do Internet Explorer. Se você não chamar <xref:System.Windows.Forms.HtmlWindow.Close%2A> em todas as janelas que você criou, essa instância do Internet Explorer permanecerão em execução mesmo depois que seu aplicativo é fechado.  
  
   
  
## Examples  
 O exemplo de código a seguir abre uma janela e fecha-lo se não tiver usado o usuário nos últimos cinco minutos. O exemplo de código foi escrito com a suposição de que o formulário tem um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`, um <xref:System.Windows.Forms.Button> denominada `Button1`e um <xref:System.Windows.Forms.Timer> classe denominada `Timer1`. Para executar este exemplo com êxito, altere o primeiro argumento fornecido para <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para uma URL válida.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">O texto a ser exibido ao usuário.</param>
        <summary>Exibe uma caixa de diálogo com uma mensagem e botões para solicitar uma resposta sim/não.</summary>
        <returns>
          <see langword="true" /> se o usuário clicou em **Sim**; <see langword="false" /> se o usuário clicou em **Não** ou fechou a caixa de diálogo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Exibe uma caixa de diálogo modal o usuário não será capaz de acessar a página HTML subjacente sem ter que fechar essa caixa de diálogo.  
  
 Embora <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> aceita texto Unicode como entrada, o prompt de script do Internet Explorer não exibirá o texto de idiomas não latinos adequadamente no Windows 95, Windows 98, Windows ME ou Windows NT devido a limitações de sistema operacional. Para obter mais informações, consulte [INFO: Prompts de Script do Internet Explorer e MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
   
  
## Examples  
 Copie o seguinte HTML e salve-o em um formulário chamado orderForm.htm:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 O seguinte código de exemplo exibe uma <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> caixa de diálogo quando o usuário envia `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">O nome do evento que você deseja manipular.</param>
        <param name="eventHandler">Uma referência ao código gerenciado que manipula o evento.</param>
        <summary>Remove o manipulador de eventos nomeado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o documento HTML contido dentro da janela.</summary>
        <value>Uma instância válida de <see cref="T:System.Windows.Forms.HtmlDocument" />, se um documento é carregado. Se essa janela contém um <c>FRAMESET</c>, ou nenhum documento for carregado no momento, ele retornará <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você acessará o <xref:System.Windows.Forms.HtmlWindow.Document%2A> por meio de <xref:System.Windows.Forms.WebBrowser.Document%2A> propriedade do <xref:System.Windows.Forms.WebBrowser> controle. Use essa propriedade quando você precisar acessar um documento dentro de um `FRAME` usando o <xref:System.Windows.Forms.HtmlWindow.Frames%2A> coleção.  
  
   
  
## Examples  
 O exemplo de código a seguir verifica cada documento dentro de uma página que contém quadros e cria uma tabela de todos os hiperlinks de saída de cada página para inspeção futuras.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a interface não gerenciada encapsulada por essa classe.</summary>
        <value>Um objeto que pode ser convertido em um <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, ou <see langword="IHTMLWindow4" /> ponteiro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use os ponteiros de interface não gerenciada subjacente para o modelo DOM (Document Object) para executar métodos não são expostos por <xref:System.Windows.Forms.HtmlWindow>.  
  
 Deve adicionar uma referência para o Mshtml. dll não gerenciada para usar <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Para obter mais informações, consulte [importando uma biblioteca de tipos como um Assembly](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 O exemplo de código a seguir obtém um `IHTMLWindow2` ponteiro de um documento da janela e exibe um novo documento em uma janela modal.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser testado.</param>
        <summary>Testa o objeto quanto a igualdade em relação ao objeto atual.</summary>
        <returns>
          <see langword="true" /> se os objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o script em execução dentro da janela encontra um erro em tempo de execução.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Páginas HTML podem conter código de script, geralmente escrito em JScript ou VBScript, que é executado quando uma página for carregada. <xref:System.Windows.Forms.HtmlWindow.Error> Ocorre sempre que um script encontra um erro de tempo de execução. Como o código de script é a associação tardia, que significa que chamadas contra o objeto não são resolvidos até o tempo de execução, erros podem incluir tudo, desde a referência a um objeto nulo para chamar um método ou propriedade indefinida.  
  
 Você pode definir as <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> propriedade de <xref:System.Windows.Forms.HtmlElementErrorEventArgs> como verdadeiro a fim de impedir a exibição da caixa de diálogo de erro nativo no Internet Explorer.
  
   
  
## Examples  
 O exemplo de código a seguir intercepta o erro que ocorre quando um script em uma página HTML tenta acessar um objeto que não está definido no documento. A página deve ser totalmente carregada antes do <xref:System.Windows.Forms.HtmlWindow.Error> manipulador de eventos está anexado, caso contrário, o exemplo não funcionará.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Coloca o foco na janela atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se outra janela mantido o foco antes <xref:System.Windows.Forms.HtmlWindow.Focus%2A> foi chamado, essa janela perderá o foco.  
  
 Não chame o foco em um elemento dentro de uma janela até a janela <xref:System.Windows.Forms.HtmlWindow.Load> evento foi gerado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência a cada um dos elementos <c>FRAME</c> definidos na página da Web.</summary>
        <value>Uma <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> de um documento <c>quadro</c> e <c>IFRAME</c> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um `FRAME` é um conjunto de janelas definidas dentro de um `FRAMESET`. `FRAME`s habilitar a hospedagem de vários documentos em um único documento. Cada `FRAME` é definido como que possui uma determinada largura de linha e coluna, e é a posição na página em relação a outra `FRAME`s definido dentro a `FRAMESET`; a posição de um `FRAME` for corrigido, embora um usuário, às vezes, pode usar o mouse cursor aumente ou diminua o `FRAME`. Um `IFRAME` é semelhante a um quadro, mas não precisa ser ancorado em uma posição fixa.  
  
 Quadros conterá uma instância do <xref:System.Windows.Forms.HtmlWindow> para cada `FRAME` ou `IFRAME` definido dentro de uma página da Web.  
  
   
  
## Examples  
 O exemplo de código a seguir verifica cada documento dentro de uma página que contém quadros e cria uma tabela de todos os hiperlinks de saída de cada página para inspeção futuras.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serve como uma função de hash para um tipo específico.</summary>
        <returns>Um código hash do <see cref="T:System.Windows.Forms.HtmlWindow" /> atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a janela atual obtém o foco de entrada do usuário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> ocorrerá para:  
  
-   A primeira janela em um `FRAMESET` quando o `FRAMESET` carregado pela primeira vez.  
  
-   O `FRAME` que pela última vez tinha foco quando a janela que contém o <xref:System.Windows.Forms.WebBrowser> controle é colocado em primeiro plano.  
  
-   Um `FRAME` clicado pelo usuário, mas somente se o clique do usuário não colocar o foco em um elemento dentro da janela.  
  
 Você não pode cancelar a ação padrão para o <xref:System.Windows.Forms.HtmlWindow.GotFocus> evento, ou impedir a propagação.
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlWindow.GotFocus> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlWindow> chamado `HtmlWindow1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlWindow.GotFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto que contém as URLs mais visitadas do usuário.</summary>
        <value>O <see cref="T:System.Windows.Forms.HtmlHistory" /> para a janela atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> contém todas as URLs para onde navegadas dentro da janela atual, que é conhecida como o *pilha de navegação*e fornece métodos para navegar de volta a esses documentos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se esta janela está aberta ou fechada.</summary>
        <value>
          <see langword="true" /> Se a janela ainda estiver aberta na tela; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Windows.Forms.HtmlWindow> foi fechada pelo usuário ou por meio de uma chamada para o <xref:System.Windows.Forms.HtmlWindow.Close%2A> método, tentar navegar para uma nova URL ou acessar o documento da janela resultará em erro. Use essa propriedade para determinar se é seguro chamar propriedades e métodos no objeto da janela atual.  
  
   
  
## Examples  
 O exemplo de código a seguir abre uma janela e fecha-lo se não tiver usado o usuário nos últimos cinco minutos. O exemplo de código requer que o formulário tem um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`, um <xref:System.Windows.Forms.Button> denominada `Button1`e um <xref:System.Windows.Forms.Timer> classe denominada `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a inicialização do documento da janela e de todos os seus elementos foi concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.HtmlWindow.Load> evento funciona da mesma forma que o <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> evento no <xref:System.Windows.Forms.WebBrowser> controle: ele sinaliza que é seguro acessar HTML elementos dentro do documento.  
  
 Você não pode cancelar a ação padrão para o <xref:System.Windows.Forms.HtmlWindow.Load> eventos.
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlWindow.Load> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlWindow> chamado `HtmlWindow1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlWindow.Load> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o foco de entrada do usuário saiu da janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlWindow.LostFocus> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlWindow> chamado `HtmlWindow1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlWindow.LostFocus> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Move a janela para as coordenadas especificadas na tela.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">As coordenadas X e Y do canto esquerdo superior da janela.</param>
        <summary>Move a janela para as coordenadas especificadas na tela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Não é possível usar <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> para mover uma janela fora a borda visível da tela; esse método também está disponível por meio de um script em uma página da Web e permitindo que o script não confiável renderizar windows invisíveis não é considerada segura.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> irá gerar um <xref:System.UnauthorizedAccessException> se a janela que você está tentando mover e sua janela pai têm diferentes domínios de nível superior. Por exemplo, se você estiver hospedando o <xref:System.Windows.Forms.WebBrowser> controlar apontando para a.adatum.com, crie uma nova janela usando <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para exibir b.adatum.com. Nesse caso, ambas as janelas são consideradas parte do mesmo domínio de nível superior, e a exceção não é gerada. No entanto, se você chamar <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para exibir www,microsoft.com, as duas janelas agora tem diferentes domínios de nível superior e o <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operação fará com que a exceção ser gerada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">O código tentando executar essa operação não tem permissão para manipular esta janela.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">A coordenada X do canto esquerdo superior da janela.</param>
        <param name="y">A coordenada Y do canto esquerdo superior da janela.</param>
        <summary>Move a janela para as coordenadas especificadas na tela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Não é possível usar <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> para mover uma janela fora a borda visível da tela; esse método também está disponível por meio de um script em uma página da Web e permitindo que o script não confiável renderizar windows invisíveis não é considerada segura.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> irá gerar um <xref:System.UnauthorizedAccessException> se a janela que você está tentando mover e sua janela pai têm diferentes domínios de nível superior. Por exemplo, se você estiver hospedando o <xref:System.Windows.Forms.WebBrowser> controle e ele está apontando para a.adatum.com, você cria uma nova janela usando <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para exibir b.adatum.com. Nesse caso, ambas as janelas são consideradas parte do mesmo domínio de nível superior, e a exceção não é gerada. No entanto, se você chamar <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> para exibir www,microsoft.com, as duas janelas agora tem diferentes domínios de nível superior e o <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operação fará com que a exceção ser gerada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">O código tentando executar essa operação não tem permissão para manipular esta janela.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome da janela.</summary>
        <value>Um <see cref="T:System.String" /> que representa o nome.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Exibe ou baixa o novo conteúdo localizado na URL especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">O recurso a ser exibido, descrito por um Uniform Resource Locator.</param>
        <summary>Exibe ou baixa o novo conteúdo localizado na URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `url` parâmetro aponta para uma página HTML, a página atualmente exibida na janela será destruída e substituída com a nova página; quaisquer referências ao seu aplicativo mantém a objetos gerenciados do DOM na página do antigo não será válidas. Se `url` aponta para um recurso que não pode ser exibido pelo Internet Explorer, o usuário verá uma caixa de diálogo perguntando se você deseja abrir o recurso fora do aplicativo, salve-o em disco, ou cancelar a operação de download.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">O local, especificado como um <see cref="T:System.Uri" />, do documento ou do objeto a ser exibido na janela atual.</param>
        <summary>Exibe um novo documento na janela atual.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">O segundo objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Testa os dois objetos <see cref="T:System.Windows.Forms.HtmlWindow" /> quanto à igualdade.</summary>
        <returns>
          <see langword="true" /> se ambos os parâmetros forem <see langword="null" /> ou se ambos os elementos tiverem a mesma interface COM subjacente; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os testes de operador de igualdade a `IUnknown` ponteiros dos objetos COM subjacente encapsulados por fornecido <xref:System.Windows.Forms.HtmlWindow> classes.  
  
 É o método equivalente para esse operador <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">O segundo objeto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Testa dois objetos <see langword="HtmlWindow" /> quanto à desigualdade.</summary>
        <returns>
          <see langword="true" /> se um, mas não ambos os objetos for <see langword="null" /> ou então se os ponteiros de COM subjacentes não corresponderem; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Exibe um arquivo na janela nomeada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">URL (Uniform Resource Locator) que descreve o local do arquivo a ser carregado.</param>
        <param name="target">O nome da janela na qual abrir o recurso. Pode ser um nome fornecido pelo desenvolvedor ou um dos seguintes valores especiais: 
 <c>_blank</c>: abre <c>url</c> em uma nova janela. Funciona da mesma forma que uma chamada para <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: abre <c>url</c> na barra de Mídia.  
  
 <c>_parent</c>: abre <c>url</c> na janela que criou a janela atual.  
  
 <c>_search</c>: abre <c>url</c> na barra de Pesquisa.  
  
 <c>_self</c>: abre <c>url</c> na janela atual.  
  
 <c>_top</c>: se chamado em uma janela que pertence a um elemento <c>FRAME</c>, abrirá a <c>URL</c> na janela que hospeda seu <c>FRAMESET</c>. Caso contrário, age igual a <c>_self</c>.</param>
        <param name="windowOptions">Uma cadeia de caracteres delimitada por vírgula que consiste em zero ou mais das seguintes opções na forma <c>nome=valor</c>. Exceto para as opções <c>left</c>, <c>top</c>, <c>height</c> e <c>width</c>, que recebem inteiros arbitrários, cada opção aceita <c>yes</c> ou <see langword="1" /> e <c>no</c> ou <see langword="0" /> como os valores válidos.  
  
 <c>channelmode</c>: usado com a tecnologia de canais preteridos do Internet Explorer 4.0. O padrão é <c>não</c>.  
  
 <c>directories</c>: se a janela deve ou não exibir botões de navegação de diretório. O padrão é <c>yes</c>.  
  
 <c>height</c>: a altura da área de cliente da janela, em pixels. O mínimo é de 100; tentativas de abrir uma janela menor do que isso fará a janela ser aberta conforme os padrões do Internet Explorer.  
  
 <c>left</c>: a posição (coordenada X) esquerda da janela em relação ao canto superior esquerdo da tela do usuário, em pixels. Deve ser um inteiro positivo.  
  
 <c>location</c>: determina se deve-se exibir ou não a barra de endereços, que permite aos usuários navegar na janela para uma nova URL. O padrão é <c>yes</c>.  
  
 <c>menubar</c>: determina se deve-se exibir ou não menus na nova janela. O padrão é <c>yes</c>.  
  
 <c>resizable</c>: determina se a janela pode ou não ser redimensionada pelo usuário. O padrão é <c>yes</c>.  
  
 <c>scrollbars</c>: determina se a janela tem ou não barras de rolagem horizontais e verticais. O padrão é <c>yes</c>.  
  
 <c>status</c>: determina se a janela tem ou não uma barra de status na parte inferior. O padrão é <c>yes</c>.  
  
 <c>titlebar</c>: determina se o título da página atual é ou não exibido. Definir essa opção como <c>no</c> não tem efeito em um aplicativo gerenciado; a barra de título sempre aparecerá.  
  
 <c>toolbar</c>: se os botões da barra de ferramentas como **Voltar**, **Avançar** e **Parar** ficam ou não visíveis. O padrão é <c>yes</c>.  
  
 <c>top</c>: a posição superior (coordenada Y) da janela em relação ao canto superior esquerdo da tela do usuário, em pixels. Deve ser um inteiro positivo.  
  
 <c>width</c>: a largura da área de cliente da janela, em pixels. O mínimo é de 100; tentativas de abrir uma janela menor do que isso fará a janela ser aberta conforme os padrões do Internet Explorer.</param>
        <param name="replaceEntry">Se <c>url</c> substitui a URL da janela atual no histórico de navegação. Isso afetará a operação dos métodos da classe <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Exibe um arquivo na janela nomeada.</summary>
        <returns>Um <see cref="T:System.Windows.Forms.HtmlWindow" /> que representa a nova janela ou a janela criada anteriormente chamada pelo parâmetro <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `target` parâmetro pode nomear uma janela que foi criada como resultado de uma chamada anterior a <xref:System.Windows.Forms.HtmlWindow.Open%2A>. O parâmetro também pode apontar para uma janela aberta clicando em um hiperlink (`A` elemento) ou um `FORM` elemento que usa o `TARGET` atributo para abrir a URL em uma nova janela. O seguinte código HTML será aberta uma nova janela chamada `orderWindow` quando o usuário clica nele:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Se você fornecer quaisquer opções para o `windowOptions` parâmetro, qualquer opção que não é incluído automaticamente está desabilitado. Em outras palavras, se você especificar apenas por meio de `windowOptions` que você deseja uma barra de status e barra de menus, barra de ferramentas, título, barras de rolagem e assim por diante não serão exibidos, a menos que explicitamente ativá-las por meio de `windowOptions`.  
  
 Se o arquivo referenciado por `url` é um arquivo HTML, o arquivo de texto ou outro tipo de arquivo que pode ser hospedado dentro do Internet Explorer, ele será exibido na janela nomeada. Se o arquivo não pode ser exibido dentro do Internet Explorer e a janela chamada pelo destino ainda não existir, a janela será aberta apenas por tempo suficiente para o Internet Explorer baixar o recurso. ele será fechado imediatamente posteriormente.  
  
 Quando você cria novas janelas usando <xref:System.Windows.Forms.HtmlWindow.Open%2A> ou <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, faz com que o modelo de objeto do documento HTML abrir uma nova instância do Internet Explorer. Se você não chamar <xref:System.Windows.Forms.HtmlWindow.Close%2A> em todas as janelas que você criou, nesta instância do Internet Explorer continuarão sendo executada, mesmo após sair do seu aplicativo tem.  
  
 Se você usar <xref:System.Windows.Forms.HtmlWindow.Open%2A> para carregar uma URL em uma janela de existente `windowOptions` serão ignoradas; a janela reterá as dimensões, a aparência e o local da tela primeiro atribui-lo pela chamada inicial para <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">URL (Uniform Resource Locator) que descreve o local do arquivo a ser carregado.</param>
        <param name="target">O nome da janela na qual abrir o recurso. Pode ser um nome fornecido pelo desenvolvedor ou um dos seguintes valores especiais: 
 <c>_blank</c>: abre <c>url</c> em uma nova janela. Funciona da mesma forma que uma chamada para <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: abre <c>url</c> na barra de Mídia.  
  
 <c>_parent</c>: abre <c>url</c> na janela que criou a janela atual.  
  
 <c>_search</c>: abre <c>url</c> na barra de Pesquisa.  
  
 <c>_self</c>: abre <c>url</c> na janela atual.  
  
 <c>_top</c>: se chamado em uma janela que pertence a um elemento <c>FRAME</c>, abrirá a <c>URL</c> na janela que hospeda seu <c>FRAMESET</c>. Caso contrário, age igual a <c>_self</c>.</param>
        <param name="windowOptions">Uma cadeia de caracteres delimitada por vírgula que consiste em zero ou mais das seguintes opções na forma <c>nome=valor</c>. Exceto para as opções <c>left</c>, <c>top</c>, <c>height</c> e <c>width</c>, que recebem inteiros arbitrários, cada opção aceita <c>yes</c> ou <see langword="1" /> e <c>no</c> ou <see langword="0" /> como os valores válidos.  
  
 <c>channelmode</c>: usado com a tecnologia de canais preteridos do Internet Explorer 4.0. O padrão é <c>não</c>.  
  
 <c>directories</c>: se a janela deve ou não exibir botões de navegação de diretório. O padrão é <c>yes</c>.  
  
 <c>height</c>: a altura da área de cliente da janela, em pixels. O mínimo é de 100; tentativas de abrir uma janela menor do que isso fará a janela ser aberta conforme os padrões do Internet Explorer.  
  
 <c>left</c>: a posição (coordenada X) esquerda da janela em relação ao canto superior esquerdo da tela do usuário, em pixels. Deve ser um inteiro positivo.  
  
 <c>location</c>: determina se deve-se exibir ou não a barra de endereços, que permite aos usuários navegar na janela para uma nova URL. O padrão é <c>yes</c>.  
  
 <c>menubar</c>: determina se deve-se exibir ou não menus na nova janela. O padrão é <c>yes</c>.  
  
 <c>resizable</c>: determina se a janela pode ou não ser redimensionada pelo usuário. O padrão é <c>yes</c>.  
  
 <c>scrollbars</c>: determina se a janela tem ou não barras de rolagem horizontais e verticais. O padrão é <c>yes</c>.  
  
 <c>status</c>: determina se a janela tem ou não uma barra de status na parte inferior. O padrão é <c>yes</c>.  
  
 <c>titlebar</c>: determina se o título da página atual é ou não exibido. Definir essa opção como <c>no</c> não tem efeito em um aplicativo gerenciado; a barra de título sempre aparecerá.  
  
 <c>toolbar</c>: se os botões da barra de ferramentas como **Voltar**, **Avançar** e **Parar** ficam ou não visíveis. O padrão é <c>yes</c>.  
  
 <c>top</c>: a posição superior (coordenada Y) da janela em relação ao canto superior esquerdo da tela do usuário, em pixels. Deve ser um inteiro positivo.  
  
 <c>width</c>: a largura da área de cliente da janela, em pixels. O mínimo é de 100; tentativas de abrir uma janela menor do que isso fará a janela ser aberta conforme os padrões do Internet Explorer.</param>
        <param name="replaceEntry">Se <c>url</c> substitui a URL da janela atual no histórico de navegação. Isso afetará a operação dos métodos da classe <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Exibe um arquivo na janela nomeada.</summary>
        <returns>Um <see cref="T:System.Windows.Forms.HtmlWindow" /> que representa a nova janela ou a janela criada anteriormente chamada pelo parâmetro <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `target` parâmetro pode nomear uma janela que foi criada como resultado de uma chamada anterior a <xref:System.Windows.Forms.HtmlWindow.Open%2A>. O parâmetro também pode apontar para uma janela aberta clicando em um hiperlink (`A` elemento) ou um `FORM` elemento que usa o `TARGET` atributo para abrir a URL em uma nova janela. O seguinte código HTML será aberta uma nova janela chamada `orderWindow` quando o usuário clica nele:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Se você fornecer quaisquer opções para o `windowOptions` parâmetro, qualquer opção que não é incluído automaticamente está desabilitado. Em outras palavras, se você especificar apenas por meio de `windowOptions` que você deseja uma barra de status e barra de menus, barra de ferramentas, título, barras de rolagem e assim por diante não serão exibidos, a menos que explicitamente ativá-las por meio de `windowOptions`.  
  
 Se o arquivo referenciado por `url` é um arquivo HTML, o arquivo de texto ou outro tipo de arquivo que pode ser hospedado dentro do Internet Explorer, ele será exibido na janela nomeada. Se o arquivo não pode ser exibido dentro do Internet Explorer e a janela chamada pelo destino ainda não existir, a janela será aberta apenas por tempo suficiente para o Internet Explorer baixar o recurso. ele será fechado imediatamente posteriormente.  
  
 Quando você cria novas janelas usando <xref:System.Windows.Forms.HtmlWindow.Open%2A> ou <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, faz com que o modelo de objeto do documento HTML abrir uma nova instância do Internet Explorer. Se você não chamar <xref:System.Windows.Forms.HtmlWindow.Close%2A> em todas as janelas que você criou, nesta instância do Internet Explorer continuarão sendo executada, mesmo após sair do seu aplicativo tem.  
  
 Se você usar <xref:System.Windows.Forms.HtmlWindow.Open%2A> para carregar uma URL em uma janela de existente `windowOptions` serão ignoradas; a janela reterá as dimensões, a aparência e o local da tela primeiro atribui-lo pela chamada inicial para <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 O exemplo de código a seguir contém dois métodos:  
  
-   O primeiro abre uma URL em uma janela chamada `displayWindow`, que será criado com uma barra de status exibida.  
  
-   O segundo abre outra URL na mesma janela, mas Especifica que somente a barra de localização deve ser exibida.  
  
 Observe que as dimensões da janela e os controles que são exibidos depende em qual URL é aberto pela primeira vez. O exemplo de código requer que seu formulário contém um <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência para a janela que abriu a janela atual.</summary>
        <value>O <see cref="T:System.Windows.Forms.HtmlWindow" /> que foi criado por uma chamada para o <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> ou <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> métodos. Se a janela não foi criada usando um desses métodos, essa propriedade retornará <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Exibe um arquivo em uma nova janela.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">URL (Uniform Resource Locator) que descreve o local do arquivo a ser carregado.</param>
        <param name="windowOptions">Uma cadeia de caracteres delimitada por vírgula que consiste em zero ou mais das seguintes opções na forma <c>nome=valor</c>. Consulte <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> para obter uma descrição completa das opções válidas.</param>
        <summary>Exibe um arquivo em uma nova janela.</summary>
        <returns>Um <see cref="T:System.Windows.Forms.HtmlWindow" /> que representa a nova janela.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o arquivo referenciado por `url` é um arquivo HTML, o arquivo de texto ou outro tipo de arquivo que pode ser hospedado dentro do Internet Explorer, ele será exibido em uma nova janela. Se o arquivo não pode ser exibido dentro do Internet Explorer e, em seguida, abrirá a janela de tempo suficiente para o Internet Explorer baixar o recurso. ele será fechado imediatamente posteriormente.  
  
 Quando você cria novas janelas usando <xref:System.Windows.Forms.HtmlWindow.Open%2A> ou <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, faz com que o modelo de objeto do documento HTML abrir uma nova instância do Internet Explorer. Se você não chamar <xref:System.Windows.Forms.HtmlWindow.Close%2A> em todas as janelas que você criou, nesta instância do Internet Explorer continuarão sendo executada, mesmo após sair do seu aplicativo tem.  
  
 Se você quiser carregar um documento em uma janela aberta anteriormente, consulte o <xref:System.Windows.Forms.HtmlWindow.Open%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">URL (Uniform Resource Locator) que descreve o local do arquivo a ser carregado.</param>
        <param name="windowOptions">Uma cadeia de caracteres delimitada por vírgula que consiste em zero ou mais das seguintes opções na forma <c>nome=valor</c>. Consulte <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> para obter uma descrição completa das opções válidas.</param>
        <summary>Exibe um arquivo em uma nova janela.</summary>
        <returns>Um <see cref="T:System.Windows.Forms.HtmlWindow" /> que representa a nova janela.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o arquivo referenciado por `url` é um arquivo HTML, o arquivo de texto ou outro tipo de arquivo que pode ser hospedado dentro do Internet Explorer, ele será exibido em uma nova janela. Se o arquivo não pode ser exibido dentro do Internet Explorer e, em seguida, abrirá a janela de tempo suficiente para o Internet Explorer baixar o recurso. ele será fechado imediatamente posteriormente.  
  
 Quando você cria novas janelas usando <xref:System.Windows.Forms.HtmlWindow.Open%2A> ou <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, faz com que o modelo de objeto do documento HTML abrir uma nova instância do Internet Explorer. Se você não chamar <xref:System.Windows.Forms.HtmlWindow.Close%2A> em todas as janelas que você criou, nesta instância do Internet Explorer continuarão sendo executada, mesmo após sair do seu aplicativo tem.  
  
 Se você quiser carregar um documento em uma janela aberta anteriormente, consulte o <xref:System.Windows.Forms.HtmlWindow.Open%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a janela que está acima da atual em uma página que contém quadros.</summary>
        <value>O <see cref="T:System.Windows.Forms.HtmlWindow" /> que possui a janela atual. Se a janela atual não é um <c>quadro</c>, ou não são inseridos dentro de uma <c>quadro</c>, ele retorna <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um documento que contém quadros, cada `FRAME` dentro de um `FRAMESET` atua como uma janela filho separada, na página. O pai de cada `FRAME` é o `FRAMESET` que contém o `FRAME`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a posição da área de cliente da janela na tela.</summary>
        <value>Um <see cref="T:System.Drawing.Point" /> descrevendo o x- e y do canto superior esquerdo da tela, em pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control.Location%2A> propriedade do <xref:System.Windows.Forms.WebBrowser> controle retornará a posição do controle em relação ao canto superior esquerdo do formulário. Por outro lado, <xref:System.Windows.Forms.HtmlWindow.Position%2A> retornará o local da área de exibição do documento em relação ao canto superior esquerdo do monitor do usuário.  
  
   
  
## Examples  
 O exemplo de código a seguir abre uma nova janela diretamente sobre o <xref:System.Windows.Forms.WebBrowser> controle no formulário. O exemplo de código requer que seu formulário contém uma instância das <xref:System.Windows.Forms.WebBrowser> controle chamado `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">A mensagem a ser exibida ao usuário.</param>
        <param name="defaultInputValue">O valor padrão exibido na caixa de texto.</param>
        <summary>Mostra uma caixa de diálogo que exibe uma mensagem e uma caixa de texto ao usuário.</summary>
        <returns>Um <see cref="T:System.String" /> que representa o texto inserido pelo usuário.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> Fornece uma maneira rápida e fácil de obter entrada de texto simples do usuário.  
  
 Embora <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> aceita texto Unicode como entrada, o prompt de script do Internet Explorer não exibirá o texto de idiomas não latinos adequadamente no Windows 95, Windows 98, Windows ME ou Windows NT devido a limitações de sistema operacional. Para obter mais informações, consulte [INFO: Prompts de Script do Internet Explorer e MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tira o foco da janela atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando chamado em um `FRAME` janela em um `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> fará com que essa janela perca o foco, mas ele não será definido automaticamente foco em outra janela.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário usa o mouse para alterar as dimensões da janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlWindow.Resize> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlWindow> chamado `HtmlWindow1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlWindow.Resize> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Altera o tamanho da janela para as dimensões especificadas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">Um <see cref="T:System.Drawing.Size" /> que descreve a largura e a altura desejadas da janela, em pixels. Deve ser 100 pixels ou mais em ambas as dimensões.</param>
        <summary>Altera o tamanho da janela para as dimensões especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir abre uma nova janela e é redimensionado para preencher a área disponível na tela.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">A janela que você está tentando redimensionar está em um domínio diferente da janela pai dela. Essa restrição é parte da segurança para script cross-frame; para obter mais informações, consulte [Sobre script cross-frame e segurança](http://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Descreve a largura desejada da janela, em pixels. Deve ser de 100 pixels ou mais.</param>
        <param name="height">Descreve a altura desejada da janela, em pixels. Deve ser de 100 pixels ou mais.</param>
        <summary>Altera o tamanho da janela para as dimensões especificadas.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">A janela que você está tentando redimensionar está em um domínio diferente da janela pai dela. Essa restrição é parte da segurança para script cross-frame; para obter mais informações, consulte [Sobre script cross-frame e segurança](http://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário rola pela janela para exibir o texto fora da tela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlWindow.Scroll> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlWindow> chamado `HtmlWindow1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlWindow.Scroll> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Role a janela para a posição designada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">As coordenadas X e Y relativas ao canto superior esquerdo da janela atual, em direção às quais a página deve rolar.</param>
        <summary>Move a janela para as coordenadas especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> fará com que o documento rolar para que a coordenada especificada no documento está localizada no canto superior esquerdo da janela do documento. Se o documento não é longo ou largas o suficiente para que isso aconteça, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> será rolar o documento máximo possível na direção especificada.  
  
   
  
## Examples  
 O exemplo de código a seguir percorre o documento a posição da coordenada clicado pelo usuário.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">A coordenada X relativa ao canto superior esquerdo da janela atual, em direção à qual a página deve rolar.</param>
        <param name="y">A coordenada Y relativa ao canto superior esquerdo da janela atual, em direção ao qual a página deve rolar.</param>
        <summary>Role a janela para a posição designada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> fará com que o documento rolar para que a coordenada especificada no documento está localizada no canto superior esquerdo da janela do documento. Se o documento não é longo ou largas o suficiente para que isso aconteça, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> será rolar o documento máximo possível na direção especificada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o tamanho da janela atual.</summary>
        <value>Um <see cref="T:System.Drawing.Size" /> que descreve o tamanho da janela em pixels.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o texto exibido na barra de status de uma janela.</summary>
        <value>Um <see cref="T:System.String" /> que contém o texto de status atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.WebBrowser> controle não exibirá uma barra de status. Qualquer nova janela abra com o <xref:System.Windows.Forms.HtmlWindow.Open%2A> ou <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> métodos, no entanto, exibirá uma barra de status por padrão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a página atual está descarregando e uma nova página está prestes a ser exibida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra o uso desse membro. No exemplo, um manipulador de eventos relata a ocorrência da <xref:System.Windows.Forms.HtmlWindow.Unload> eventos. Este relatório ajuda você a saber quando o evento ocorre e pode ajudar na depuração. Para relatar em vários eventos ou em eventos que ocorrem com frequência, considere substituir <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> com <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou acrescentar a mensagem como um multiline <xref:System.Windows.Forms.TextBox>.  
  
 Para executar o exemplo de código, cole-o em um projeto que contém uma instância do tipo <xref:System.Windows.Forms.HtmlWindow> chamado `HtmlWindow1`. Em seguida, certifique-se de que o manipulador de eventos está associado com o <xref:System.Windows.Forms.HtmlWindow.Unload> eventos.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a URL correspondente ao item atual exibido na janela.</summary>
        <value>Um <see cref="T:System.Uri" /> descrevendo a URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade é somente para leitura. Para navegar a janela para um novo documento, use o <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o elemento de quadro correspondente a essa janela.</summary>
        <value>Uma <see cref="T:System.Windows.Forms.HtmlElement" /> correspondente a essa janela <c>quadro</c> elemento. Se essa janela não for um quadro, ela retornará <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você recuperar um `FRAME` elemento o <xref:System.Windows.Forms.HtmlWindow.Frames%2A> coleção, ele retorna um <xref:System.Windows.Forms.HtmlWindow>. Chame <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> nesse objeto, se você precisar acessar atributos de subjacente `FRAME` elemento, como o `SRC` atributo.  
  
   
  
## Examples  
 O código a seguir exemplo compara os `SRC` atributo de quadros em um `FRAMESET` para o local atual. Se eles forem diferentes, os quadros são redefinidos para as URLs originais.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Você não pode acessar uma <c>quadro</c> elementos ou o <c>quadro</c>do documento se o <c>quadro</c> está em uma zona diferente que o <c>FRAMESET</c> que contém -lo. Para obter uma explicação completa, consulte [sobre script Cross-Frame e segurança](http://msdn.microsoft.com/library/ms533028.aspx).</permission>
      </Docs>
    </Member>
  </Members>
</Type>