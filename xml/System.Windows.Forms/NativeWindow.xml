<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39979281" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornece um encapsulamento de nível baixo de um identificador de janela e um procedimento de janela.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe gerencia automaticamente o registro e a criação de classes de janela.  
  
 Uma janela não está qualificada para coleta de lixo quando ele está associado um identificador de janela. Para garantir que a coleta de lixo adequada, identificadores devem ou ser destruídos manualmente usando <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> ou liberado usando <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  O <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> método é chamado quando a mensagem WM_NCDESTROY é processada. Isso significa que há casos em que, quando você não precisa chamar manualmente <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, mas é uma boa prática fazer isso.  
  
 O <xref:System.Windows.Forms.NativeWindow> classe fornece as seguintes propriedades e métodos para gerenciar os identificadores: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a interceptação mensagens de janela do sistema operacional em um procedimento de janela e criação de uma janela com um nome de classe de janela específicas do sistema operacional. O exemplo cria duas classes que herdam de <xref:System.Windows.Forms.NativeWindow> que fazer isso.  
  
 O `MyNativeWindowListener` conectando-se ao procedimento de janela do formulário passado para o construtor de classe e substitui o <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar o `WM_ACTIVATEAPP` mensagem em janela. A classe demonstra o uso do <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar o identificador de janela a <xref:System.Windows.Forms.NativeWindow> usará. O identificador é atribuir com base nas <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Quando o `WM_ACTIVATEAPP` janela de mensagem é recebida, a classe chama o `form1.ApplicationActivated` método.  
  
 O `MyNativeWindow` classe cria uma nova janela com o <xref:System.Windows.Forms.CreateParams.ClassName%2A> definido como `BUTTON`. A classe demonstra como usar o <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e substituindo o <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar mensagens de janela que são recebidas.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para o chamador imediato chamar código não gerenciado. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma instância da classe <see cref="T:System.Windows.Forms.NativeWindow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse é o padrão <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> construtor fornecido pelo compilador. O <xref:System.Windows.Forms.NativeWindow> classe também tem um construtor estático que inicializa os manipuladores de mensagens de todo o domínio de aplicativo e tabelas de hash.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">O identificador a ser atribuído a essa janela.</param>
        <summary>Atribui um identificador a essa janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepta mensagens de janela enviadas para o `handle` parâmetro. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> para redefinir o procedimento de janela do identificador para o procedimento de janela padrão.  
  
 O <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> chamadas de método de <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para indicar que o valor da <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriedade foi alterada.  
  
> [!NOTE]
>  O identificador a ser atribuído não pode ser um processo de aplicativo diferente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a interceptação mensagens de janela do sistema operacional em um procedimento de janela. O exemplo cria uma classe que herda de <xref:System.Windows.Forms.NativeWindow> para fazer isso.  
  
 O `MyNativeWindowListener` conectando-se ao procedimento de janela do formulário passado para o construtor de classe e substitui o <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método intercepta as `WM_ACTIVATEAPP` mensagem em janela. A classe demonstra o uso do <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar qual janela lidar com o <xref:System.Windows.Forms.NativeWindow> usará. O identificador é atribuído com base nas <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Quando o `WM_ACTIVATEAPP` janela de mensagem é recebida, a classe chama o `form1.ApplicationActivated` método.  
  
 Esse código é um trecho do exemplo mostrado o <xref:System.Windows.Forms.NativeWindow> visão geral da classe. Algum código não é mostrado para fins de brevidade. Consulte <xref:System.Windows.Forms.NativeWindow> para a listagem de código inteiro.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Esta janela já tem um identificador.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Não foi possível recuperar o procedimento de janelas para a janela nativa associada.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">Um <see cref="T:System.Windows.Forms.CreateParams" /> que especifica os parâmetros de criação para essa janela.</param>
        <summary>Cria uma janela e sua alça com os parâmetros de criação especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `cp` parâmetro especifica os valores que são passados para o Win32 nativo `CreateWindowEx` método para criar uma janela e seu identificador.  
  
 Quando o <xref:System.Windows.Forms.CreateParams.ClassName%2A> campo não for `null`, o identificador de janela recém-criado herda da classe especificada. Por exemplo, se <xref:System.Windows.Forms.CreateParams.ClassName%2A> é definido como `BUTTON`, a janela recém-criado se baseia no Win32 `BUTTON` classe de janela. O <xref:System.Windows.Forms.CreateParams.Param%2A> propriedade do <xref:System.Windows.Forms.CreateParams.ClassName%2A> objeto deve ser `null` ou fazer referência a uma instância de uma classe que foi declarada como uma estrutura.  
  
 Esse código é um trecho do exemplo mostrado o <xref:System.Windows.Forms.NativeWindow> visão geral da classe. Algum código não é mostrado para fins de brevidade. Consulte <xref:System.Windows.Forms.NativeWindow> para a listagem de código inteiro.  
  
> [!NOTE]
>  O nome de classe fornecido está registrado com o sistema operacional.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma janela com um nome de classe de janela específicas do sistema operacional. O exemplo cria uma classe que herda de <xref:System.Windows.Forms.NativeWindow> para fazer isso.  
  
 O `MyNativeWindow` classe cria uma nova janela com o <xref:System.Windows.Forms.CreateParams.ClassName%2A> definido como `BUTTON`. Isso cria uma janela de botão do Win32. O local e o tamanho do botão é definido, juntamente com a especificação de estilos de janela adicionais. A classe demonstra como usar o <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e substituição de <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar mensagens de janela que são recebidas. Embora o exemplo procura a mensagem WM_ACTIVATEAPP, isso pode ser substituído em um programa real com mensagens de janela específicas para o tipo criado.  
  
> [!NOTE]
>  Alguns tipos de controle de enviam suas mensagens de janela para o pai da janela em vez da janela. Consulte o SDK da plataforma Windows para obter mais informações.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">O sistema operacional ficou sem recursos ao tentar criar a janela nativa.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">A API do Win32 nativa não pôde criar a janela especificada.</exception>
        <exception cref="T:System.InvalidOperationException">A alça da janela nativa atual já foi atribuída. A explicação é que a propriedade <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> não é igual a <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">para criar uma janela de nível superior. Essa permissão é exigida apenas se o estilo da janela não é um filho ou se a janela não tem um pai. Enumeração associada: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A mensagem que está sendo processada.</param>
        <summary>Chama o procedimento de janela padrão associado a esta janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você apenas chamar o <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> método quando são interceptar mensagens de janela e gostaria que o procedimento de janela padrão para manipular a mensagem. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> não deve ser chamado para enviar uma mensagem de janela para a janela; Chame o Win32 `SendMessage` function em vez disso.  
  
 É um erro ao chamar <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> quando o <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriedade é 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Substitua este método em uma classe derivada implementar generalizada mensagem personalizada de tratamento de uma janela nativa específica ou .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Processamento personalizado pode ser executado antes, depois ou em vez de uma chamada para a implementação da classe base desse método, que executa o processamento de mensagem padrão.  Em contraste, adicionando personalizado para um aplicativo pode ser feito por meio de manipulação de mensagens a <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> método da <see cref="T:System.Windows.Forms.Application" /> classe.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Destrói a janela e seu identificador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método destrói a janela associada a <xref:System.Windows.Forms.NativeWindow.Handle%2A>, define o <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriedade como 0 e chama o <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para refletir a alteração. Normalmente, você apenas chamar <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> quando você terminar com a janela nativa.  
  
> [!NOTE]
>  O <xref:System.Windows.Forms.NativeWindow> classe automaticamente destruir a janela associada e liberar seus recursos em resposta a uma mensagem WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos do sistema operacional associados a esta janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.NativeWindow.Finalize%2A> método remove a classe Win32 derivados associada ao atual <xref:System.Windows.Forms.NativeWindow> instância, libera o identificador e envia uma mensagem WM_CLOSE para a janela associada.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">O identificador de uma janela.</param>
        <summary>Recupera a janela associada ao identificador especificado.</summary>
        <returns>O <see cref="T:System.Windows.Forms.NativeWindow" /> associado ao identificador especificado. Esse método retorna <see langword="null" /> quando o identificador não tiver uma janela associada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você receber um identificador de outro método, use esse método para recuperar a associado ao identificador de janela. O identificador já deve pertencer a outro <xref:System.Windows.Forms.NativeWindow> atual processo; caso contrário, `null` será retornado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador para essa janela.</summary>
        <value>Se for bem-sucedido, um <see cref="T:System.IntPtr" /> que representa o identificador para a janela Win32 nativa associada; caso contrário, 0 se nenhum identificador estiver associado à janela.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use esse método ao chamar métodos da API do Windows que exigem um identificador para uma janela ou controle.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma janela com um nome de classe de janela específicas do sistema operacional. O exemplo cria uma classe que herda de <xref:System.Windows.Forms.NativeWindow> para fazer isso. O exemplo também demonstra substituindo o <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para ser notificado quando o <xref:System.Windows.Forms.NativeWindow.Handle%2A> alterações.  
  
 O `MyNativeWindow` classe cria uma nova janela com o <xref:System.Windows.Forms.CreateParams.ClassName%2A> definido como um botão. Isso cria uma janela de botão do Win32. O local e o tamanho do botão é definido, juntamente com a especificação de estilos de janela adicionais. A classe demonstra como usar o <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e substituição de <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar mensagens de janela que são recebidas. Embora o exemplo procura a mensagem WM_ACTIVATEAPP, isso pode ser substituído em um programa real com mensagens de janela específicas para o tipo criado.  
  
> [!NOTE]
>  Alguns tipos de controle de enviam suas mensagens de janela para o pai da janela em vez da janela. Consulte o SDK da plataforma Windows para obter mais informações.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Especifica um método de notificação que é chamado quando o identificador de uma janela é alterado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é invocado quando o valor da <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriedade foi alterada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma janela com um nome de classe de janela específicas do sistema operacional. O exemplo cria uma classe que herda de <xref:System.Windows.Forms.NativeWindow> para fazer isso. O exemplo também demonstra substituindo o <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> método para ser notificado quando o <xref:System.Windows.Forms.NativeWindow.Handle%2A> alterações.  
  
 O `MyNativeWindow` classe cria uma nova janela com o <xref:System.Windows.Forms.CreateParams.ClassName%2A> definido como `BUTTON`. Isso cria uma janela de botão do Win32. O local e o tamanho do botão é definido, juntamente com a especificação de estilos de janela adicionais. A classe demonstra como usar o <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> método e substituição de <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método para interceptar mensagens de janela que são recebidas. Embora o exemplo procura a mensagem WM_ACTIVATEAPP, isso pode ser substituído em um programa real com mensagens de janela específicas para o tipo criado.  
  
 Esse código é um trecho do exemplo mostrado o <xref:System.Windows.Forms.NativeWindow> visão geral da classe. Algum código não é mostrado para fins de brevidade. Consulte <xref:System.Windows.Forms.NativeWindow> para a listagem de código inteiro.  
  
> [!NOTE]
>  Alguns tipos de controle de enviam suas mensagens de janela para o pai da janela em vez da janela. Consulte o SDK da plataforma Windows para obter mais informações.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Substitua este método para controlar as alterações que são feitas para o identificador de janela.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Exception" /> que especifica a exceção de thread sem tratamento.</param>
        <summary>Quando substituído em uma classe derivada, gerencia uma exceção de thread sem tratamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, <xref:System.Windows.Forms.Application.OnThreadException%2A> manipula exceções de thread.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera o identificador associado a esta janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não destrói o identificador de janela. Em vez disso, ele define o procedimento de janela do identificador para o procedimento de janela padrão. Ele define a <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriedade como 0 e chamadas <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> para refletir a alteração.  
  
 Uma janela automaticamente chama esse método se ela recebe uma mensagem WM_NCDESTROY Win32 nativa, que indica que o Windows tem destruídos o identificador.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a interceptação mensagens de janela do sistema operacional em um procedimento de janela. O exemplo cria uma classe que herda de <xref:System.Windows.Forms.NativeWindow> para fazer isso.  
  
 O `MyNativeWindowListener` conectando-se ao procedimento de janela do formulário passado para o construtor de classe e substitui o <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método intercepta as `WM_ACTIVATEAPP` mensagem em janela. A classe demonstra o uso do <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar o identificador de janela a <xref:System.Windows.Forms.NativeWindow> usará. O identificador é atribuir com base nas <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Quando o `WM_ACTIVATEAPP` janela de mensagem é recebida, a classe chama o `form1.ApplicationActivated` método.  
  
 Esse código é um trecho do exemplo mostrado o <xref:System.Windows.Forms.NativeWindow> visão geral da classe. Algum código não é mostrado para fins de brevidade. Consulte <xref:System.Windows.Forms.NativeWindow> para a listagem de código inteiro.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Um <see cref="T:System.Windows.Forms.Message" /> que está associado com a mensagem atual do Windows.</param>
        <summary>Chama o procedimento de janela padrão associado a esta janela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é chamado quando uma mensagem de janela é enviada para o identificador da janela.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a interceptação mensagens de janela do sistema operacional em um procedimento de janela. O exemplo cria uma classe que herda de <xref:System.Windows.Forms.NativeWindow> para fazer isso.  
  
 O `MyNativeWindowListener` conectando-se ao procedimento de janela do formulário passado para o construtor de classe e substitui o <xref:System.Windows.Forms.NativeWindow.WndProc%2A> método interceptar o `WM_ACTIVATEAPP` mensagem em janela. A classe demonstra o uso do <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> métodos para identificar o identificador de janela a <xref:System.Windows.Forms.NativeWindow> usará. O identificador é atribuído com base nas <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventos. Quando o `WM_ACTIVATEAPP` janela de mensagem é recebida, a classe chama o `form1.ApplicationActivated` método.  
  
 Esse código é um trecho do exemplo mostrado o <xref:System.Windows.Forms.NativeWindow> visão geral da classe. Algum código não é mostrado para fins de brevidade. Consulte <xref:System.Windows.Forms.NativeWindow> para a listagem de código inteiro.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Substitua este método para implementar o processamento de mensagem específica. Chamar <c>base. WndProc</c> para mensagens sem tratamento.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>