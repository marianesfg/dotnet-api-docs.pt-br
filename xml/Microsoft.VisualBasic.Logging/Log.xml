<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73237f80471b93f5a2329bdf91fc2663bba06829" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51890159" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece uma propriedade e métodos para gravar informações de evento e de exceção para os ouvintes de log do aplicativo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.Log` objeto fornece um ponto de entrada simples de acessar o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]do log de serviços. O `WriteEntry` e `WriteException` métodos gravam mensagens de ouvintes de log do aplicativo. Os ouvintes podem ser configurados pelo arquivo de configuração do aplicativo. Para obter mais informações, consulte [instruções passo a passo: alterando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) e [trabalhando com Logs de aplicativo](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 O `My.Application.Log` objeto está disponível somente para aplicativos cliente. Para aplicativos Web, use `My.Log`. Para obter mais informações, consulte <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `My.Application.Log` objeto.  
  
|Para|Consulte|  
|--------|---------|  
|Gravar informações de evento para os ouvintes de log do aplicativo|[Como gravar mensagens de log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Gravar informações de exceção nos ouvintes de log do aplicativo|[Como registrar em log as exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinar onde `My.Application.Log` grava informações|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Este exemplo mostra como usar o método `My.Application.Log.WriteEntry` para registrar em log informações de rastreamento. Para obter mais informações, consulte [como: gravar mensagens de Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />. O nome a ser atribuído ao objeto da propriedade <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o arquivo do objeto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> que dá suporte ao objeto <see langword="Log" />.</summary>
        <value>Retorna o objeto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> que dá suporte ao objeto <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar essa propriedade para determinar a configuração atual do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> objeto.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Solucionando problemas: ouvintes de Log</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um novo objeto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> e o adiciona à coleção <see cref="P:System.Diagnostics.TraceSource.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método cria uma nova <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, define seu nome como `FileLog`e configura-o para registrar em log mensagens com nível de severidade <xref:System.Diagnostics.SourceLevels.Information> e maior. O novo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> objeto é adicionado para o <xref:System.Diagnostics.TraceSource.Listeners%2A> coleção.  
  
 O <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> chama o método se o <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> propriedade não foi configurada. A origem de rastreamento pode ser configurada no arquivo de configuração do aplicativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém para o objeto <see cref="T:System.Diagnostics.TraceSource" /> que dá suporte ao objeto <see langword="Log" />.</summary>
        <value>Retorna o objeto <see cref="T:System.Diagnostics.TraceSource" /> que dá suporte ao objeto <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar essa propriedade para determinar a configuração atual do `Log` objeto.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Isso é um membro avançado; ele não aparece no IntelliSense a menos que você selecione os **todas as** guia.  
  
 A tabela a seguir lista um exemplo de uma tarefa que envolvem o `TraceSource` propriedade.  
  
|Para|Consulte|  
|--------|---------|  
|Obtenha informações para cada um do `Log` ouvintes de log do objeto.|[Solução de problemas: ouvintes de Log](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Solucionando problemas: ouvintes de Log</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava uma mensagem nos ouvintes de log do aplicativo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Necessário. A mensagem a ser registrada. Se <c>mensagem</c> for <see langword="Nothing" />, uma cadeia de caracteres vazia será usada.</param>
        <summary>Grava uma mensagem nos ouvintes de log do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `WriteEntry` método grava uma mensagem nos ouvintes de log de eventos do aplicativo.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Para saber que log ouvintes recebem as `WriteEntry` mensagens do método, consulte [passo a passo: Determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Você pode alterar os ouvintes de log padrão. Para obter mais informações, consulte [Working with Application Logs (Trabalhando com logs de aplicativo)](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para sobrecargas que não usam o `id` argumento, o `id` gravado no log é definido pela tabela a seguir.  
  
|`severity`|Padrão `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `WriteEntry` método.  
  
|Para|Consulte|  
|--------|---------|  
|Gravar informações de evento para os ouvintes de log do aplicativo|[Como gravar mensagens de log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinar onde `Log` grava informações|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
   
  
## Examples  
 Este exemplo mostra como usar o método `My.Application.Log.WriteEntry` para registrar em log informações de rastreamento. Para obter mais informações, consulte [como: gravar mensagens de Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Este exemplo de código pode executar somente em um aplicativo cliente. Alteração `My.Application.Log.WriteEntry` para `My.Log.WriteEntry` para aplicativos da Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Código com confiança parcial chama o método, mas grava em um ouvinte de log de eventos que requer confiança total.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabalhando com logs de aplicativo no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Como gravar mensagens de log</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Instruções passo a passo: determinando onde My.Application.Log grava informações</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Necessário. A mensagem a ser registrada. Se <c>mensagem</c> for <see langword="Nothing" />, uma cadeia de caracteres vazia será usada.</param>
        <param name="severity">O tipo de mensagem. Por padrão, <see langword="TraceEventType.Information" />.</param>
        <summary>Grava uma mensagem nos ouvintes de log do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `WriteEntry` método grava uma mensagem nos ouvintes de log de eventos do aplicativo.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Para saber que log ouvintes recebem as `WriteEntry` mensagens do método, consulte [passo a passo: Determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Você pode alterar os ouvintes de log padrão. Para obter mais informações, consulte [Working with Application Logs (Trabalhando com logs de aplicativo)](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para sobrecargas que não usam o `id` argumento, o `id` gravado no log é definido pela tabela a seguir.  
  
|`severity`|Padrão `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `WriteEntry` método.  
  
|Para|Consulte|  
|--------|---------|  
|Gravar informações de evento para os ouvintes de log do aplicativo|[Como gravar mensagens de log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinar onde `Log` grava informações|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
   
  
## Examples  
 Este exemplo mostra como usar o método `My.Application.Log.WriteEntry` para registrar em log informações de rastreamento. Para obter mais informações, consulte [como: gravar mensagens de Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Este exemplo de código pode executar somente em um aplicativo cliente. Alteração `My.Application.Log.WriteEntry` para `My.Log.WriteEntry` para aplicativos da Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">O tipo de mensagem não é um dos valores de enumeração de <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código com confiança parcial chama o método, mas grava em um ouvinte de log de eventos que requer confiança total.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabalhando com logs de aplicativo no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Como gravar mensagens de log</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Instruções passo a passo: determinando onde My.Application.Log grava informações</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Necessário. A mensagem a ser registrada. Se <c>mensagem</c> for <see langword="Nothing" />, uma cadeia de caracteres vazia será usada.</param>
        <param name="severity">O tipo de mensagem. Por padrão, <see langword="TraceEventType.Information" />.</param>
        <param name="id">Identificador de mensagem, normalmente usado para correlação. Por padrão, relacionado a <c>entryType</c> conforme descrito na tabela.</param>
        <summary>Grava uma mensagem nos ouvintes de log do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `WriteEntry` método grava uma mensagem nos ouvintes de log de eventos do aplicativo.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Para saber que log ouvintes recebem as `WriteEntry` mensagens do método, consulte [passo a passo: Determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Você pode alterar os ouvintes de log padrão. Para obter mais informações, consulte [Working with Application Logs (Trabalhando com logs de aplicativo)](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para sobrecargas que não usam o `id` argumento, o `id` gravado no log é definido pela tabela a seguir.  
  
|`severity`|Padrão `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `WriteEntry` método.  
  
|Para|Consulte|  
|--------|---------|  
|Gravar informações de evento para os ouvintes de log do aplicativo|[Como gravar mensagens de log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinar onde `Log` grava informações|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
   
  
## Examples  
 Este exemplo mostra como usar o método `My.Application.Log.WriteEntry` para registrar em log informações de rastreamento. Para obter mais informações, consulte [como: gravar mensagens de Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Este exemplo de código pode executar somente em um aplicativo cliente. Alteração `My.Application.Log.WriteEntry` para `My.Log.WriteEntry` para aplicativos da Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">O tipo de mensagem não é um dos valores de enumeração de <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código com confiança parcial chama o método, mas grava em um ouvinte de log de eventos que requer confiança total.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabalhando com logs de aplicativo no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Como gravar mensagens de log</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Instruções passo a passo: determinando onde My.Application.Log grava informações</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava informações de exceção nos ouvintes de log do aplicativo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Necessário. Exceção do log.</param>
        <summary>Grava informações de exceção nos ouvintes de log do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `WriteException` método grava as informações contidas em uma exceção nos ouvintes de log de eventos do aplicativo.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Para saber que log ouvintes recebem as `WriteException` mensagens do método, consulte [passo a passo: Determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Você pode alterar os ouvintes de log padrão. Para obter mais informações, consulte [Working with Application Logs (Trabalhando com logs de aplicativo)](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para sobrecargas que não usam o `id` argumento, o identificador gravado no log é definido pela tabela a seguir.  
  
|`severity`|Padrão `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `WriteException` método.  
  
|Para|Consulte|  
|--------|---------|  
|Grave informações de exceção nos ouvintes de log de eventos do aplicativo.|[Como registrar em log as exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determine o local em que `Log` grava as informações.|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
   
  
## Examples  
 Este exemplo mostra como usar o `My.Application.Log.WriteException` método para registrar exceções. Remova a marca de comentário das linhas `Dim` e `MsgBox` para lançar uma exceção <xref:System.NullReferenceException>. Para obter mais informações, consulte [como: Log exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Este exemplo de código pode executar somente em um aplicativo cliente. Alteração `My.Application.Log.WriteException` para `My.Log.WriteException` para aplicativos da Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> é <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código com confiança parcial chama o método, mas grava em um ouvinte de log de eventos que requer confiança total.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabalhando com logs de aplicativo no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Como registrar em log as exceções no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Instruções passo a passo: determinando onde My.Application.Log grava informações</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Necessário. Exceção do log.</param>
        <param name="severity">O tipo de mensagem. Por padrão, <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Cadeia de caracteres a acrescentar à mensagem. Por padrão, é uma cadeia de caracteres vazia.</param>
        <summary>Grava informações de exceção nos ouvintes de log do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `WriteException` método grava as informações contidas em uma exceção nos ouvintes de log de eventos do aplicativo.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Para saber que log ouvintes recebem as `WriteException` mensagens do método, consulte [passo a passo: Determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Você pode alterar os ouvintes de log padrão. Para obter mais informações, consulte [Working with Application Logs (Trabalhando com logs de aplicativo)](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para sobrecargas que não usam o `id` argumento, o identificador gravado no log é definido pela tabela a seguir.  
  
|`severity`|Padrão `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `WriteException` método.  
  
|Para|Consulte|  
|--------|---------|  
|Grave informações de exceção nos ouvintes de log de eventos do aplicativo.|[Como registrar em log as exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determine o local em que `Log` grava as informações.|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
   
  
## Examples  
 Este exemplo mostra como usar o `My.Application.Log.WriteException` método para registrar exceções. Remova a marca de comentário das linhas `Dim` e `MsgBox` para lançar uma exceção <xref:System.NullReferenceException>. Para obter mais informações, consulte [como: Log exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Este exemplo de código pode executar somente em um aplicativo cliente. Alteração `My.Application.Log.WriteException` para `My.Log.WriteException` para aplicativos da Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> é <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">O tipo de mensagem não é um dos valores de enumeração de <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código com confiança parcial chama o método, mas grava em um ouvinte de log de eventos que requer confiança total.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabalhando com logs de aplicativo no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Como registrar em log as exceções no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Instruções passo a passo: determinando onde My.Application.Log grava informações</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Necessário. Exceção do log.</param>
        <param name="severity">O tipo de mensagem. Por padrão, <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Cadeia de caracteres a acrescentar à mensagem. Por padrão, é uma cadeia de caracteres vazia.</param>
        <param name="id">Identificador de mensagem, normalmente usado para correlação. Por padrão, relacionado a <c>entryType</c> conforme descrito na tabela na seção Comentários.</param>
        <summary>Grava informações de exceção nos ouvintes de log do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `WriteException` método grava as informações contidas em uma exceção nos ouvintes de log de eventos do aplicativo.  
  
 Em aplicativos cliente, o `Log` objeto está disponível por meio de `My.Application.Log` objeto. Em aplicativos Web, o `Log` objeto está disponível por meio de `My.Log` objeto.  
  
 Para saber que log ouvintes recebem as `WriteException` mensagens do método, consulte [passo a passo: Determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Você pode alterar os ouvintes de log padrão. Para obter mais informações, consulte [Working with Application Logs (Trabalhando com logs de aplicativo)](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para sobrecargas que não usam o `id` argumento, o identificador gravado no log é definido pela tabela a seguir.  
  
|`severity`|Padrão `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `WriteException` método.  
  
|Para|Consulte|  
|--------|---------|  
|Grave informações de exceção nos ouvintes de log de eventos do aplicativo.|[Como registrar em log as exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determine o local em que `Log` grava as informações.|[Instruções passo a passo: determinando onde My.Application.Log grava informações](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|------------------|---------------|  
|Aplicativo do Windows|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de controle do Windows|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|**Sim**|  
  
   
  
## Examples  
 Este exemplo mostra como usar o `My.Application.Log.WriteException` método para registrar exceções. Remova a marca de comentário das linhas `Dim` e `MsgBox` para lançar uma exceção <xref:System.NullReferenceException>. Para obter mais informações, consulte [como: Log exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Este exemplo de código pode executar somente em um aplicativo cliente. Alteração `My.Application.Log.WriteException` para `My.Log.WriteException` para aplicativos da Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> é <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">O tipo de mensagem não é um dos valores de enumeração de <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código com confiança parcial chama o método, mas grava em um ouvinte de log de eventos que requer confiança total.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabalhando com logs de aplicativo no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Como registrar em log as exceções no Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Instruções passo a passo: determinando onde My.Application.Log grava informações</related>
      </Docs>
    </Member>
  </Members>
</Type>