<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="994e2025e1f3a2359af6858e83f5ea135065e4f7" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48661817" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="42787-101">Fornece serviços para gerenciar a fila de itens de trabalho de um thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="42787-101">Provides services for managing the queue of work items for a thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-102">O <xref:System.Windows.Threading.Dispatcher> mantém uma fila de prioridade de itens de trabalho para um thread específico.</span><span class="sxs-lookup"><span data-stu-id="42787-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="42787-103">Quando um <xref:System.Windows.Threading.Dispatcher> é criado em um thread, torna-se a única <xref:System.Windows.Threading.Dispatcher> que pode ser associada ao thread, mesmo se o <xref:System.Windows.Threading.Dispatcher> é desligado.</span><span class="sxs-lookup"><span data-stu-id="42787-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="42787-104">Se você tentar obter o <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> para o thread atual e uma <xref:System.Windows.Threading.Dispatcher> não está associada ao thread um <xref:System.Windows.Threading.Dispatcher> será criado.</span><span class="sxs-lookup"><span data-stu-id="42787-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="42787-105">Um <xref:System.Windows.Threading.Dispatcher> também é criado quando você cria um <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="42787-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="42787-106">Se você criar um <xref:System.Windows.Threading.Dispatcher> em um thread em segundo plano, certifique-se de desligar o dispatcher antes de encerrar o thread.</span><span class="sxs-lookup"><span data-stu-id="42787-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="42787-107">Se um <xref:System.Windows.Threading.Dispatcher> estiver desligado para baixo, ele não pode ser reiniciado.</span><span class="sxs-lookup"><span data-stu-id="42787-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="42787-108">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], um <xref:System.Windows.Threading.DispatcherObject> só pode ser acessado pelo <xref:System.Windows.Threading.Dispatcher> está associado.</span><span class="sxs-lookup"><span data-stu-id="42787-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="42787-109">Por exemplo, um thread em segundo plano não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que está associado com o <xref:System.Windows.Threading.Dispatcher> no [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span><span class="sxs-lookup"><span data-stu-id="42787-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="42787-110">Para que o thread em segundo plano acessar o <xref:System.Windows.Controls.ContentControl.Content%2A> propriedade do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado com o [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span><span class="sxs-lookup"><span data-stu-id="42787-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="42787-111">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-113">A operação é adicionada à fila do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-114">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="42787-115">Todos os métodos em <xref:System.Windows.Threading.Dispatcher>, com exceção de <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, são de thread livre.</span><span class="sxs-lookup"><span data-stu-id="42787-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="42787-116">Objetos que derivam de <xref:System.Windows.Threading.DispatcherObject> têm afinidade de thread.</span><span class="sxs-lookup"><span data-stu-id="42787-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="42787-117">Objetos que derivam de <xref:System.Windows.Freezable> são thread livre quando eles estão congelados.</span><span class="sxs-lookup"><span data-stu-id="42787-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="42787-118">Para obter mais informações, consulte a [Visão geral de objetos congeláveis](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span><span class="sxs-lookup"><span data-stu-id="42787-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-119">O exemplo a seguir mostra como colocar uma operação em um <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="42787-120">Para o código-fonte completo deste exemplo, consulte [aplicativo single-threaded com exemplo de cálculo de longa execução](http://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="42787-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="42787-121">Primeiro, é criado um delegado que não aceita argumentos.</span><span class="sxs-lookup"><span data-stu-id="42787-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="42787-122">Em seguida, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="42787-123">Essa chamada para <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> usa dois parâmetros: a prioridade, que é definida como <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>e o retorno de chamada, que é passado por meio de uma instância do delegado `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="42787-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160038">
      <span data-ttu-id="42787-124">Aplicativo Single-Threaded com exemplo de cálculo de execução longa</span>
      <span class="sxs-lookup">
        <span data-stu-id="42787-124">Single-Threaded Application with Long-Running Calculation Sample</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="42787-125">Executa o delegado de forma assíncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-126">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-127">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-128">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-129">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-131">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrono; Portanto, controle retorna imediatamente para o objeto de chamada depois que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="42787-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retorna um <xref:System.Windows.Threading.DispatcherOperation> objeto que pode ser usado para interagir com o delegado quando o representante é no evento de fila.</span><span class="sxs-lookup"><span data-stu-id="42787-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="42787-134">O <xref:System.Windows.Threading.DispatcherOperation> objeto retornado por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pode ser usado em várias maneiras de interagir com o delegado especificado, tais como:</span><span class="sxs-lookup"><span data-stu-id="42787-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="42787-135">Alterando o <xref:System.Windows.Threading.DispatcherPriority> do delegado pois ele está pendente execução na fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="42787-136">Removendo o delegado da fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="42787-137">Aguardando o delegado a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="42787-138">Obtendo o valor que o delegado retorna após ele é executado.</span><span class="sxs-lookup"><span data-stu-id="42787-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="42787-139">Se vários <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> chamadas são feitas ao mesmo <xref:System.Windows.Threading.DispatcherPriority>, eles serão executados na ordem em que as chamadas feitas.</span><span class="sxs-lookup"><span data-stu-id="42787-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="42787-140">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="42787-141">O delegado para um método que usa os parâmetros especificados em <c>args</c>, que é enviado por push fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-141">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-142">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-142">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="42787-143">Pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-143">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-144">Executa o delegado especificado de maneira assíncrona com os argumentos especificados no thread em que o <see cref="T:System.Windows.Threading.Dispatcher" /> foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-145">Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-146">O <xref:System.Windows.Threading.DispatcherOperation> objeto retornado por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pode ser usado em várias maneiras de interagir com o delegado especificado, tais como:</span><span class="sxs-lookup"><span data-stu-id="42787-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="42787-147">Alterando o <xref:System.Windows.Threading.DispatcherPriority> do delegado pois ele está pendente execução na fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="42787-148">Removendo o delegado da fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="42787-149">Aguardando o delegado a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="42787-150">Obtendo o valor que o delegado retorna após ele é executado.</span><span class="sxs-lookup"><span data-stu-id="42787-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="42787-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrono; Portanto, controle retorna imediatamente para o objeto de chamada depois que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="42787-152">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="42787-153">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="42787-154">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="42787-155">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="42787-157">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-158">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-159">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-160">O delegado para um método que não usa argumentos, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-161">Executa o delegado especificado de forma assíncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-162">Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-163">Se vários <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> chamadas são feitas ao mesmo <xref:System.Windows.Threading.DispatcherPriority>, eles serão executados na ordem em que as chamadas feitas.</span><span class="sxs-lookup"><span data-stu-id="42787-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="42787-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retorna um <xref:System.Windows.Threading.DispatcherOperation> objeto que pode ser usado para interagir com o delegado quando o representante é no evento de fila.</span><span class="sxs-lookup"><span data-stu-id="42787-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="42787-165">O <xref:System.Windows.Threading.DispatcherOperation> objeto retornado por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pode ser usado em várias maneiras de interagir com o delegado especificado, tais como:</span><span class="sxs-lookup"><span data-stu-id="42787-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="42787-166">Alterando o <xref:System.Windows.Threading.DispatcherPriority> do delegado pois ele está pendente execução na fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="42787-167">Removendo o delegado da fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="42787-168">Aguardando o delegado a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="42787-169">Obtendo o valor que o delegado retorna após ele é executado.</span><span class="sxs-lookup"><span data-stu-id="42787-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="42787-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrono; Portanto, controle retorna imediatamente para o objeto de chamada depois que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="42787-171">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-172">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-173">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-174">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-176">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-177">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-178">O exemplo a seguir mostra como colocar uma operação em um <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="42787-179">Para o código-fonte completo deste exemplo, consulte [aplicativo single-threaded com exemplo de cálculo de longa execução](http://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="42787-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="42787-180">Primeiro, é criado um delegado que não aceita argumentos.</span><span class="sxs-lookup"><span data-stu-id="42787-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="42787-181">Em seguida, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="42787-182">Porque cada <xref:System.Windows.Threading.DispatcherObject> tem uma propriedade que retorna o <xref:System.Windows.Threading.Dispatcher> ele está associado com o desejado <xref:System.Windows.Threading.Dispatcher> são obtidos consultando o <xref:System.Windows.Threading.DispatcherObject>, nesse caso uma <xref:System.Windows.Controls.Button> chamado `startStopButton`.</span><span class="sxs-lookup"><span data-stu-id="42787-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="42787-183">A chamada para <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> usa dois parâmetros: a prioridade, que é definida como <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>e o retorno de chamada, que é passado por meio de uma instância do delegado `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="42787-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-184">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-184">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-185">
            <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-185">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160038">
          <span data-ttu-id="42787-186">Aplicativo Single-Threaded com exemplo de cálculo de execução longa</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-186">Single-Threaded Application with Long-Running Calculation Sample</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="42787-187">O delegado para um método que usa os parâmetros especificados em <c>args</c>, que é enviado por push fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-187">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-188">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-189">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-189">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="42787-190">Pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-190">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-191">Executa o delegado especificado assincronamente com os argumentos especificados, na prioridade especificada, no thread no qual o <see cref="T:System.Windows.Threading.Dispatcher" /> foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-192">Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-193">O <xref:System.Windows.Threading.DispatcherOperation> objeto retornado por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pode ser usado em várias maneiras de interagir com o delegado especificado, tais como:</span><span class="sxs-lookup"><span data-stu-id="42787-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="42787-194">Alterando o <xref:System.Windows.Threading.DispatcherPriority> do delegado pois ele está pendente execução na fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="42787-195">Removendo o delegado da fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="42787-196">Aguardando o delegado a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="42787-197">Obtendo o valor que o delegado retorna após ele é executado.</span><span class="sxs-lookup"><span data-stu-id="42787-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="42787-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrono; Portanto, controle retorna imediatamente para o objeto de chamada depois que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="42787-199">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="42787-200">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="42787-201">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="42787-202">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="42787-204">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-205">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-206">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-207">Um delegado para um método que usa um argumento, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="42787-208">O objeto a ser passado como um argumento para o método especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-208">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-209">Executa o delegado especificado de forma assíncrona na prioridade especificada e com o argumento especificado no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-210">Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-211">`Arg` pode ser `null` se nenhum argumento é necessário.</span><span class="sxs-lookup"><span data-stu-id="42787-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="42787-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retorna um <xref:System.Windows.Threading.DispatcherOperation> objeto que pode ser usado para interagir com o delegado quando o representante é no evento de fila.</span><span class="sxs-lookup"><span data-stu-id="42787-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="42787-213">O <xref:System.Windows.Threading.DispatcherOperation> objeto retornado por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pode ser usado em várias maneiras de interagir com o delegado especificado, tais como:</span><span class="sxs-lookup"><span data-stu-id="42787-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="42787-214">Alterando o <xref:System.Windows.Threading.DispatcherPriority> do delegado pois ele está pendente execução na fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="42787-215">Removendo o delegado da fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="42787-216">Aguardando o delegado a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="42787-217">Obtendo o valor que o delegado retorna após ele é executado.</span><span class="sxs-lookup"><span data-stu-id="42787-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="42787-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrono; Portanto, controle retorna imediatamente para o objeto de chamada depois que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="42787-219">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-220">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-221">Para que o thread em segundo plano acessar a propriedade content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-222">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-224">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-225">Se vários <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> chamadas são feitas ao mesmo <xref:System.Windows.Threading.DispatcherPriority>, eles serão executados na ordem em que as chamadas feitas.</span><span class="sxs-lookup"><span data-stu-id="42787-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="42787-226">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-227">O exemplo a seguir mostra como colocar uma operação em um <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="42787-228">Primeiro, é criado um delegado que aceita um argumento, neste caso, uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="42787-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="42787-229">Em seguida, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="42787-230">Porque cada <xref:System.Windows.Threading.DispatcherObject> tem uma propriedade que retorna o <xref:System.Windows.Threading.Dispatcher> ele está associado com o desejado <xref:System.Windows.Threading.Dispatcher> são obtidos consultando o <xref:System.Windows.Threading.DispatcherObject>, nesse caso uma <xref:System.Windows.Controls.Grid> chamado `tomorrowsWeather`.</span><span class="sxs-lookup"><span data-stu-id="42787-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="42787-231">A chamada para <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> usa três parâmetros: a prioridade, que é definida como <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; o retorno de chamada, que é passado por meio de uma instância do delegado `OneArgDelegate`; e uma cadeia de caracteres denominada `weather`, que é o argumento para o retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="42787-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-232">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-232">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-233">
            <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-233">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160038">
          <span data-ttu-id="42787-234">Aplicativo Single-Threaded com exemplo de cálculo de execução longa</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-234">Single-Threaded Application with Long-Running Calculation Sample</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-235">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-236">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="42787-237">O objeto a ser passado como um argumento para o método especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-237">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-238">Uma matriz de objetos a serem passados como argumentos para o método especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-238">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-239">Executa o delegado especificado de forma assíncrona na prioridade especificada e com a matriz de argumentos definida no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-240">Um objeto, é retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda execução pendente na fila <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-241">O `arg` parâmetro pode ser `null` se nenhum argumento é necessário.</span><span class="sxs-lookup"><span data-stu-id="42787-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="42787-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retorna um <xref:System.Windows.Threading.DispatcherOperation> objeto que pode ser usado para interagir com o delegado quando o representante é no evento de fila.</span><span class="sxs-lookup"><span data-stu-id="42787-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="42787-243">O <xref:System.Windows.Threading.DispatcherOperation> objeto retornado por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pode ser usado em várias maneiras de interagir com o delegado especificado, tais como:</span><span class="sxs-lookup"><span data-stu-id="42787-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="42787-244">Alterando o <xref:System.Windows.Threading.DispatcherPriority> do delegado pois ele está pendente execução na fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="42787-245">Removendo o delegado da fila de eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="42787-246">Aguardando o delegado a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="42787-247">Obtendo o valor que o delegado retorna após ele é executado.</span><span class="sxs-lookup"><span data-stu-id="42787-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="42787-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrono; Portanto, controle retorna imediatamente para o objeto de chamada depois que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="42787-249">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-250">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-251">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-252">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-254">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-255">Se vários <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> chamadas são feitas ao mesmo <xref:System.Windows.Threading.DispatcherPriority>, eles serão executados na ordem em que as chamadas feitas.</span><span class="sxs-lookup"><span data-stu-id="42787-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="42787-256">Se <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é chamado em um <xref:System.Windows.Threading.Dispatcher> que foi desligado, a propriedade status da retornado <xref:System.Windows.Threading.DispatcherOperation> é definido como <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="42787-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-257">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-257">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-258">
            <see cref="T:System.Windows.Threading.DispatcherPriority" /> não é uma prioridade válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-258">
              <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span>
          </span>
        </exception>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160038">
          <span data-ttu-id="42787-259">Aplicativo Single-Threaded com exemplo de cálculo de execução longa</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-259">Single-Threaded Application with Long-Running Calculation Sample</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-260">A prioridade no qual começar a desligar o dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-260">The priority at which to begin shutting down the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-261">Inicia o desligamento do <see cref="T:System.Windows.Threading.Dispatcher" /> de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demandas irrestrito permissões de interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="42787-263">Quando o <xref:System.Windows.Threading.Dispatcher> começa a ser desligada, o <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> é gerado e <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-264">O <xref:System.Windows.Threading.Dispatcher> não desligar completamente até que a fila de eventos é desenrolado.</span><span class="sxs-lookup"><span data-stu-id="42787-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="42787-265">Quando o Dispatcher conclui o desligamento, o <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> é gerado e o <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> estiver definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-266">Quando começa o processo de desligamento, trabalho pendente itens na fila são anuladas.</span><span class="sxs-lookup"><span data-stu-id="42787-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="42787-267">para desligar o dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-267">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="42787-268">Enumerações associadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-269">Determina se o thread de chamada é o thread associado a esse <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-270">
            <see langword="true" /> se o thread de chamada é o thread associado a esse <see cref="T:System.Windows.Threading.Dispatcher" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-270">
              <see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-271">Somente o <xref:System.Windows.Threading.Dispatcher> que um <xref:System.Windows.Threading.DispatcherObject> é criado na pode acessar o objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="42787-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> para acessar o objeto de um thread diferente.</span><span class="sxs-lookup"><span data-stu-id="42787-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="42787-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> pode ser chamado de qualquer thread.</span><span class="sxs-lookup"><span data-stu-id="42787-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="42787-274">A diferença entre <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> e <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> é <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> retorna um valor booliano que indica se o thread de chamada tem acesso para o <xref:System.Windows.Threading.Dispatcher> e <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="42787-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-275">O exemplo a seguir usa <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> para determinar se um thread tem acesso a um <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="42787-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="42787-276">O <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> método na <xref:System.Windows.Threading.Dispatcher> associado com o <xref:System.Windows.Controls.Button> é chamado para verificar o acesso para o thread.</span><span class="sxs-lookup"><span data-stu-id="42787-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="42787-277">Se o thread de chamada tem acesso ao <xref:System.Windows.Threading.Dispatcher>, o <xref:System.Windows.Controls.Button> é atualizado, acessando os membros da <xref:System.Windows.Controls.Button>; caso contrário, um delegado, que aceita um <xref:System.Windows.Controls.Button> como um argumento, é colocada no <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="42787-278">O <xref:System.Windows.Threading.Dispatcher> delega o trabalho de atualização de <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="42787-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-279">Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> para o thread em execução no momento e cria um novo <see cref="T:System.Windows.Threading.Dispatcher" /> se um não estiver associado ao thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="42787-280">O dispatcher associado ao thread atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-280">The dispatcher associated with the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-281">Se um <xref:System.Windows.Threading.Dispatcher> não está associada ao thread atual, um novo <xref:System.Windows.Threading.Dispatcher> será criado.</span><span class="sxs-lookup"><span data-stu-id="42787-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="42787-282">Não é esse o caso do método <xref:System.Windows.Threading.Dispatcher.FromThread%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="42787-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> retornará `null` se não houver um dispatcher associado ao segmento especificado.</span><span class="sxs-lookup"><span data-stu-id="42787-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-284">Desabilita o processamento da fila de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-285">Uma estrutura usada para habilitar novamente o processamento do dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-285">A structure used to re-enable dispatcher processing.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-286">Desabilitando processamento do dispatcher é um método avançado que é destinado para eliminar a chance de reentrância não relacionada.</span><span class="sxs-lookup"><span data-stu-id="42787-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="42787-287">Os efeitos de desabilitar o processamento são da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="42787-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="42787-288">Bloqueios CLR serão não bomba de mensagens internamente.</span><span class="sxs-lookup"><span data-stu-id="42787-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="42787-289"><xref:System.Windows.Threading.DispatcherFrame> objetos não têm permissão para ser enviada por push.</span><span class="sxs-lookup"><span data-stu-id="42787-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="42787-290">Processamento de mensagens não é permitido.</span><span class="sxs-lookup"><span data-stu-id="42787-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="42787-291">O <xref:System.Windows.Threading.DispatcherProcessingDisabled> estrutura que <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> retorna quando ele é chamado pode ser usada para habilitar o processamento do dispatcher novamente.</span><span class="sxs-lookup"><span data-stu-id="42787-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="42787-292">Chamando <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> sobre o <xref:System.Windows.Threading.DispatcherProcessingDisabled> estrutura habilita novamente o processamento.</span><span class="sxs-lookup"><span data-stu-id="42787-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="42787-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> só pode ser chamado no thread de <xref:System.Windows.Threading.Dispatcher> está associado.</span><span class="sxs-lookup"><span data-stu-id="42787-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-294">O exemplo a seguir mostra como desabilitar o processamento do dispatcher e habilite novamente o processamento do dispatcher.</span><span class="sxs-lookup"><span data-stu-id="42787-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="42787-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> é chamado em uma **usando** instrução.</span><span class="sxs-lookup"><span data-stu-id="42787-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="42787-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> Retorna um <xref:System.Windows.Threading.DispatcherProcessingDisabled> estrutura que é usada como o objeto ser descartado quando o **usando** bloquear é concluída.</span><span class="sxs-lookup"><span data-stu-id="42787-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="42787-297">Quando <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> é chamado no <xref:System.Windows.Threading.DispatcherProcessingDisabled> estrutura, o processamento do dispatcher é reativado.</span><span class="sxs-lookup"><span data-stu-id="42787-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-298">Solicita que todos os quadros saiam, incluindo quadros aninhados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-298">Requests that all frames exit, including nested frames.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="42787-299">para chamar esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-299">for calling this method.</span>
          </span>
          <span data-ttu-id="42787-300">Enumerações associadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">
          <span data-ttu-id="42787-301">O thread do qual obter o <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-302">Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> para o thread especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-303">O dispatcher do <paramref name="thread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-303">The dispatcher for <paramref name="thread" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-304">Se um distribuidor não está disponível para o thread especificado, `null` será retornado.</span><span class="sxs-lookup"><span data-stu-id="42787-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="42787-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> não cria um <xref:System.Windows.Threading.Dispatcher> em um thread que não tem um <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="42787-306">Uma nova <xref:System.Windows.Threading.Dispatcher> é criado em um thread que ainda não tem um <xref:System.Windows.Threading.Dispatcher> ao tentar obter o <xref:System.Windows.Threading.Dispatcher> usando o <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="42787-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-307">Determina se o <see cref="T:System.Windows.Threading.Dispatcher" /> terminou de desligar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="42787-308">
            <see langword="true" /> Se o dispatcher terminou de desligar; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-308">
              <see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-309">Quando o <xref:System.Windows.Threading.Dispatcher> começa a ser desligada, o <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> é gerado e <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-310">O <xref:System.Windows.Threading.Dispatcher> não encerra completamente até que a fila de eventos é desenrolado.</span><span class="sxs-lookup"><span data-stu-id="42787-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="42787-311">Quando o Dispatcher conclui o desligamento, o <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> é gerado e o <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> estiver definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-312">Quando começa o processo de desligamento, trabalho pendente itens na fila são anuladas.</span><span class="sxs-lookup"><span data-stu-id="42787-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-313">Determina se o <see cref="T:System.Windows.Threading.Dispatcher" /> está desligando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="42787-314">
            <see langword="true" /> Se o <see cref="T:System.Windows.Threading.Dispatcher" /> começou sendo desligado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-314">
              <see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-315">Quando o <xref:System.Windows.Threading.Dispatcher> começa a ser desligada, o <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> é gerado e <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-316">O <xref:System.Windows.Threading.Dispatcher> não desligar completamente até que a fila de eventos é desenrolado.</span><span class="sxs-lookup"><span data-stu-id="42787-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="42787-317">Quando o Dispatcher conclui o desligamento, o <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> é gerado e o <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> estiver definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-318">Quando começa o processo de desligamento, trabalho pendente itens na fila são anuladas.</span><span class="sxs-lookup"><span data-stu-id="42787-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-319">Obtém a coleção de ganchos que fornecem informações adicionais do evento sobre o <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="42787-320">Os ganchos associados a esse <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-321">O <xref:System.Windows.Threading.DispatcherHooks> classe fornece informações de evento adicionais sobre o <xref:System.Windows.Threading.Dispatcher>, por exemplo, quando o <xref:System.Windows.Threading.Dispatcher> está inativo ou quando uma operação foi concluída.</span><span class="sxs-lookup"><span data-stu-id="42787-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="42787-322">Para obter essa propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-322">for getting this property.</span>
          </span>
          <span data-ttu-id="42787-323">Enumerações associadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="42787-324">Executa o delegado especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-325">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-326">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-327">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-328">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-330">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-332">O exemplo a seguir coloca um delegado para um <xref:System.Windows.Threading.Dispatcher> na <xref:System.Windows.Threading.DispatcherPriority.Normal> usando <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-333">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-333">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-334">Executa o <see cref="T:System.Action" /> especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-335">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-335">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-336">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-337">Executa a <see cref="T:System.Action" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="42787-338">O delegado para um método que usa os parâmetros especificados em <c>args</c>, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-338">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-339">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-339">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="42787-340">Pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-340">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-341">Executa o delegado especificado com os argumentos de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-342">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-343">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="42787-344">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="42787-345">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="42787-346">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="42787-348">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-350">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-351">Um delegado para um método que não usa argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-352">Executa o delegado especificado de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-353">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-354">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-355">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-356">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-357">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-359">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-361">O exemplo a seguir coloca um delegado para um <xref:System.Windows.Threading.Dispatcher> na <xref:System.Windows.Threading.DispatcherPriority.Normal> usando <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="42787-362">
            <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-362">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-363">
            <paramref name="priority" /> não é uma prioridade válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-363">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-364">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-364">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-365">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-365">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-366">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="42787-367">Um objeto que indica se a ação deve ser cancelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-367">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-368">Executa a <see cref="T:System.Action" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="42787-369">O delegado para um método que usa os parâmetros especificados em <c>args</c>, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-369">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-370">O tempo máximo de espera para a operação ser concluída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-370">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-371">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-371">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="42787-372">Pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-372">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-373">Executa o delegado especificado no período designado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-374">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-375">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="42787-376">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="42787-377">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="42787-378">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="42787-380">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="42787-382">O delegado para um método que usa os parâmetros especificados em <c>args</c>, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-382">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-383">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-384">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-384">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="42787-385">Pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-385">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-386">Executa o delegado especificado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-387">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-388">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="42787-389">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="42787-390">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="42787-391">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="42787-393">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-395">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-396">Um delegado para um método que usa um argumento, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="42787-397">Um objeto a ser passado como um argumento para o método fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-397">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-398">Executa o delegado especificado na prioridade especificada com o argumentos especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-399">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-400">`Arg` pode ser `null` se um argumento não for necessária.</span><span class="sxs-lookup"><span data-stu-id="42787-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="42787-401">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-402">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-403">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-404">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-406">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="42787-408">
            <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-408">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-409">
            <paramref name="priority" /> não é uma prioridade válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-409">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-410">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-410">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-411">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-412">O tempo máximo para esperar a conclusão da operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-412">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-413">O delegado para um método que não usa argumentos, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-414">Executa o delegado especificado, de forma síncrona, com a prioridade especificada e com o valor de tempo limite especificado no thread em que <see cref="T:System.Windows.Threading.Dispatcher" /> foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-415">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-416">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-417">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-418">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-419">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-421">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-423">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-423">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-424">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="42787-425">Um objeto que indica se a ação deve ser cancelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-425">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-426">A quantidade mínima de tempo de espera para a operação ser iniciada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-426">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-427">Executa a <see cref="T:System.Action" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="42787-428">O delegado para um método que usa os parâmetros especificados em <c>args</c>, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-428">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-429">O tempo máximo de espera para a operação ser concluída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-429">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-430">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-431">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-431">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="42787-432">Pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-432">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-433">Executa o delegado especificado no período designado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-434">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-435">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="42787-436">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="42787-437">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="42787-438">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="42787-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="42787-440">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-442">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-443">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="42787-444">Um objeto a ser passado como um argumento para o método fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-444">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-445">Uma matriz de objetos a serem passados como argumentos para o método em questão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-445">An array of objects to pass as arguments to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-446">Executa o delegado especificado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-447">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-448">`Arg` pode ser `null` se um argumento não for necessária.</span><span class="sxs-lookup"><span data-stu-id="42787-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="42787-449">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-450">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-451">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-452">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-454">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="42787-456">
            <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-456">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-457">
            <paramref name="priority" /> não é uma prioridade válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-457">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-458">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-458">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-459">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-460">O tempo máximo para esperar a conclusão da operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-460">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-461">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="42787-462">Um objeto a ser passado como um argumento para o método fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-462">An object to pass as an argument to the given method.</span>
          </span>
          <span data-ttu-id="42787-463">Pode ser <see langword="null" />, caso nenhum argumento seja necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-463">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-464">Executa o delegado especificado na prioridade especificada com o argumentos especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-465">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-466">`Arg` pode ser `null` se um argumento não for necessária.</span><span class="sxs-lookup"><span data-stu-id="42787-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="42787-467">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-468">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-469">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-470">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-472">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="42787-474">
            <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-474">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-475">
            <paramref name="priority" /> não é uma prioridade válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-475">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-476">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-476">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-477">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-478">O tempo máximo para esperar a conclusão da operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-478">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="42787-479">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="42787-480">Um objeto a ser passado como um argumento para o método especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-480">An object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="42787-481">Uma matriz de objetos a serem passados como argumentos para o método especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-481">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-482">Executa o delegado especificado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-483">O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-484">`Arg` pode ser `null` se um argumento não for necessária.</span><span class="sxs-lookup"><span data-stu-id="42787-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="42787-485">Na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], somente o thread que criou um <xref:System.Windows.Threading.DispatcherObject> pode acessar esse objeto.</span><span class="sxs-lookup"><span data-stu-id="42787-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="42787-486">Por exemplo, um thread em segundo plano que é transferido com do thread da interface do usuário principal não é possível atualizar o conteúdo de um <xref:System.Windows.Controls.Button> que foi criado no thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="42787-487">Para que o thread em segundo plano acessar a propriedade Content do <xref:System.Windows.Controls.Button>, o thread em segundo plano deve delegar o trabalho para o <xref:System.Windows.Threading.Dispatcher> associado ao thread da interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="42787-488">Isso é feito usando o <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="42787-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é síncrono e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é assíncrona.</span><span class="sxs-lookup"><span data-stu-id="42787-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="42787-490">A operação é adicionada à fila de eventos do <xref:System.Windows.Threading.Dispatcher> no local especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="42787-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="42787-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> é uma operação síncrona; Portanto, controle não retornará para o objeto de chamada até após o retorno de chamada retorna.</span><span class="sxs-lookup"><span data-stu-id="42787-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="42787-492">
            <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-492">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-493">
            <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-493">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-494">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-494">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-495">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-495">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-496">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-496">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-497">Executa o <see cref="T:System.Func`1" /> especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-498">O valor retornado por `callback`.</span><span class="sxs-lookup"><span data-stu-id="42787-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-499">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-499">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-500">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-500">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-501">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-502">Executa a <see cref="T:System.Func`1" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-503">O valor retornado por `callback`.</span><span class="sxs-lookup"><span data-stu-id="42787-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-504">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-504">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-505">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-505">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-506">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="42787-507">Um objeto que indica se a operação deve ser cancelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-507">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-508">Executa a <see cref="T:System.Func`1" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-509">O valor retornado por `callback`.</span><span class="sxs-lookup"><span data-stu-id="42787-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-510">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-510">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-511">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-511">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-512">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="42787-513">Um objeto que indica se a operação deve ser cancelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-513">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="42787-514">A quantidade mínima de tempo de espera para a operação ser iniciada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-514">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-515">Executa a <see cref="T:System.Func`1" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-516">O valor retornado por `callback`.</span><span class="sxs-lookup"><span data-stu-id="42787-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="42787-517">Executa o delegado especificado de forma assíncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-518">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-518">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-519">Executa o <see cref="T:System.Action" /> especificado de forma assíncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-520">Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-521">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-521">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-522">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-523">Executa o <see cref="T:System.Action" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-524">Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="42787-525">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-525">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-526">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="42787-527">Um objeto que indica se a ação deve ser cancelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-527">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-528">Executa o <see cref="T:System.Action" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-529">Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-530">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-530">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-531">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-531">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-532">Executa o <see cref="T:System.Func`1" /> especificado de forma assíncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-533">Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-534">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-534">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-535">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-535">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-536">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-537">Executa o <see cref="T:System.Func`1" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-538">Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="42787-539">O tipo de valor retornado do delegado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-539">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="42787-540">Um delegado a ser invocado pelo dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-540">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="42787-541">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="42787-542">Um objeto que indica se a operação deve ser cancelada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-542">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-543">Executa o <see cref="T:System.Func`1" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-544">Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-545">Inicia o processo de desligamento do <see cref="T:System.Windows.Threading.Dispatcher" /> sincronicamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demandas irrestrito permissões de interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="42787-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="42787-547">Quando o <xref:System.Windows.Threading.Dispatcher> começa a ser desligada, o <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> é gerado e <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-548">O <xref:System.Windows.Threading.Dispatcher> não desligar completamente até que a fila de eventos é desenrolado.</span><span class="sxs-lookup"><span data-stu-id="42787-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="42787-549">Quando o Dispatcher conclui o desligamento, o <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> é gerado e o <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> estiver definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-550">Quando começa o processo de desligamento, trabalho pendente itens na fila são anuladas.</span><span class="sxs-lookup"><span data-stu-id="42787-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="42787-551">para desligar o dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-551">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="42787-552">Enumerações associadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">
          <span data-ttu-id="42787-553">O quadro para o dispatcher processar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-553">The frame for the dispatcher to process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-554">Insere um loop de execução.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-554">Enters an execute loop.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-555">Um <xref:System.Windows.Threading.DispatcherFrame> representa um loop que processa os itens de trabalho pendente.</span><span class="sxs-lookup"><span data-stu-id="42787-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="42787-556">O Dispatcher processa a fila de itens de trabalho em um loop.</span><span class="sxs-lookup"><span data-stu-id="42787-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="42787-557">O loop é conhecido como um quadro.</span><span class="sxs-lookup"><span data-stu-id="42787-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="42787-558">O loop inicial normalmente é iniciado pelo aplicativo chamando <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="42787-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> Insere um loop representado pelo parâmetro `frame`.</span><span class="sxs-lookup"><span data-stu-id="42787-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="42787-560">Em cada iteração do loop, o <xref:System.Windows.Threading.Dispatcher> verificará as <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> propriedade no <xref:System.Windows.Threading.DispatcherFrame> classe para determinar se o loop deve continuar ou se deve parar.</span><span class="sxs-lookup"><span data-stu-id="42787-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="42787-561"><xref:System.Windows.Threading.DispatcherFrame> permite que o <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> propriedade seja definida explicitamente e ele respeita o <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> propriedade no <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="42787-562">Isso significa que, quando o <xref:System.Windows.Threading.Dispatcher> começa a ser desligado, os quadros que usam o padrão <xref:System.Windows.Threading.DispatcherFrame> implementação será encerrado, o que permite que os quadros tudo aninhados sair.</span><span class="sxs-lookup"><span data-stu-id="42787-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-563">O exemplo a seguir mostra como usar um <xref:System.Windows.Threading.DispatcherFrame> para alcançar resultados semelhantes, como o [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> método.</span><span class="sxs-lookup"><span data-stu-id="42787-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="42787-564">
            <paramref name="frame" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-564">
              <paramref name="frame" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="42787-565">
            <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> é <see langword="true" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-565">
              <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span>
          </span>
          <span data-ttu-id="42787-566">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-566">-or-</span>
          </span>
          <span data-ttu-id="42787-567">
            <paramref name="frame" /> está em execução em um <see cref="T:System.Windows.Threading.Dispatcher" /> diferente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-567">
              <paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
          <span data-ttu-id="42787-568">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-568">-or-</span>
          </span>
          <span data-ttu-id="42787-569">Processamento do Dispatcher foi desabilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-569">Dispatcher processing has been disabled.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="42787-570">para enviar por push um quadro de execução.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-570">for pushing an execution frame.</span>
          </span>
          <span data-ttu-id="42787-571">Enumerações associadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-572">Envia o quadro principal de execução na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-573">O <xref:System.Windows.Threading.Dispatcher> processa a fila de eventos em um loop.</span><span class="sxs-lookup"><span data-stu-id="42787-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="42787-574">O loop é conhecido como um quadro.</span><span class="sxs-lookup"><span data-stu-id="42787-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="42787-575">O loop inicial normalmente é iniciado pelo aplicativo chamando <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="42787-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="42787-576">O quadro principal de execução continuará até o <xref:System.Windows.Threading.Dispatcher> é desligado.</span><span class="sxs-lookup"><span data-stu-id="42787-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-577">Ocorre quando o <see cref="T:System.Windows.Threading.Dispatcher" /> conclui o desligamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-578">Quando o processo de desligamento de um <xref:System.Windows.Threading.Dispatcher> é iniciado, o <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> é gerado e <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-579">O <xref:System.Windows.Threading.Dispatcher> não encerra completamente até que a fila de eventos é desenrolado.</span><span class="sxs-lookup"><span data-stu-id="42787-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="42787-580">Quando o Dispatcher conclui o desligamento, o <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> é gerado e o <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> estiver definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-581">Quando começa o processo de desligamento, trabalho pendente itens na fila são anuladas.</span><span class="sxs-lookup"><span data-stu-id="42787-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-582">Ocorre quando o <see cref="T:System.Windows.Threading.Dispatcher" /> inicia o desligamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-583">Quando o processo de desligamento de um <xref:System.Windows.Threading.Dispatcher> é iniciado, o <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> é gerado e <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> é definido como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-584">O <xref:System.Windows.Threading.Dispatcher> não encerra completamente até que a fila de eventos é desenrolado.</span><span class="sxs-lookup"><span data-stu-id="42787-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="42787-585">Quando o Dispatcher conclui o desligamento, o <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> é gerado e o <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> estiver definida como `true`.</span><span class="sxs-lookup"><span data-stu-id="42787-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="42787-586">Quando começa o processo de desligamento, trabalho pendente itens na fila são anuladas.</span><span class="sxs-lookup"><span data-stu-id="42787-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-587">Obtém o thread ao qual este <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="42787-588">O thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-588">The thread.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-589">Ocorre quando uma exceção de thread é lançada e não capturada durante a execução de um delegado por meio de <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> ou <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-590">Esse evento é gerado quando uma exceção foi gerada durante a execução de um delegado por meio de <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> é não identificadas.</span><span class="sxs-lookup"><span data-stu-id="42787-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="42787-591">Um manipulador pode marcar a exceção como manipulado, que impedirá que o manipulador de exceção interna que está sendo chamado.</span><span class="sxs-lookup"><span data-stu-id="42787-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="42787-592">Manipuladores de eventos para esse evento devem ser escritos com cuidado para evitar a criação de exceções secundárias e identificar qualquer que ocorrem.</span><span class="sxs-lookup"><span data-stu-id="42787-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="42787-593">É recomendável para evitar a alocação de memória ou fazer qualquer recurso operações intensivas no manipulador.</span><span class="sxs-lookup"><span data-stu-id="42787-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="42787-594">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento fornece um meio para não acionar o <xref:System.Windows.Threading.Dispatcher.UnhandledException> eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="42787-595">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> é gerado pela primeira vez e se <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> na <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> é definido como `false`, o <xref:System.Windows.Threading.Dispatcher.UnhandledException> evento não será gerado.</span><span class="sxs-lookup"><span data-stu-id="42787-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="42787-596">Ocorre quando uma exceção de thread é lançada e não capturada durante a execução de um delegado por meio de <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> ou <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> quando no estágio de filtragem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-597">Esse evento é gerado durante o estágio de filtro para uma exceção gerada durante a execução de um delegado por meio de <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> e é não identificadas.</span><span class="sxs-lookup"><span data-stu-id="42787-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="42787-598">A pilha de chamadas não é desenrolada neste ponto (exceção de primeira chance).</span><span class="sxs-lookup"><span data-stu-id="42787-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="42787-599">Manipuladores de eventos para esse evento devem ser escritos com cuidado para evitar a criação de exceções secundárias e identificar qualquer que ocorrem.</span><span class="sxs-lookup"><span data-stu-id="42787-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="42787-600">É recomendável para evitar a alocação de memória ou fazer qualquer recurso operações intensivas no manipulador.</span><span class="sxs-lookup"><span data-stu-id="42787-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="42787-601">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento fornece um meio para não acionar o <xref:System.Windows.Threading.Dispatcher.UnhandledException> eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="42787-602">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> é gerado pela primeira vez e se <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> na <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> é definido como `false`, o <xref:System.Windows.Threading.Dispatcher.UnhandledException> evento não será gerado.</span><span class="sxs-lookup"><span data-stu-id="42787-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="42787-603">Para adicionar ou remover um manipulador para este evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-603">for adding or removing a handler for this event.</span>
          </span>
          <span data-ttu-id="42787-604">Enumerações associadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-605">A prioridade a ser verificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-605">The priority to check.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="42787-606">Uma cadeia de caracteres que será retornada pela exceção que ocorre se a prioridade é inválida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-606">A string that will be returned by the exception that occurs if the priority is invalid.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-607">Determina se o <see cref="T:System.Windows.Threading.DispatcherPriority" /> especificado é uma prioridade válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="42787-608">
            <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-608">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-609">Determina se o thread de chamada tem acesso a este <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-610">Somente o thread a <xref:System.Windows.Threading.Dispatcher> é criado na podem acessar o <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="42787-611">Esse método é público; Portanto, qualquer thread pode verificar se ele tem acesso para o <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="42787-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="42787-612">A diferença entre <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> e <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> é <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> retorna um valor booliano, se o thread de chamada não tem acesso para o <xref:System.Windows.Threading.Dispatcher> e <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="42787-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="42787-613">O exemplo a seguir usa <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> para determinar se um thread tem acesso para o thread que um <xref:System.Windows.Controls.Button> foi criado.</span><span class="sxs-lookup"><span data-stu-id="42787-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="42787-614">O método aceita um objeto como um argumento, que é convertido em um <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="42787-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="42787-615">O <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> método em de <xref:System.Windows.Threading.Dispatcher> da <xref:System.Windows.Controls.Button> é chamado para verificar o acesso para o thread.</span><span class="sxs-lookup"><span data-stu-id="42787-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="42787-616">Se o thread de chamada tem acesso ao <xref:System.Windows.Threading.Dispatcher>, o <xref:System.Windows.Controls.Button> é atualizado, apenas acessando os membros do <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="42787-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="42787-617">Se o thread de chamada não tem acesso, um <xref:System.InvalidOperationException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="42787-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="42787-618">Este exemplo captura a exceção e envia por push a um delegado, que aceita uma <xref:System.Windows.Controls.Button> como um argumento para o <xref:System.Windows.Threading.Dispatcher> da <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="42787-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="42787-619">Isso <xref:System.Windows.Threading.Dispatcher> fará o trabalho de atualização de <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="42787-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="42787-620">O thread de chamada não tem acesso a este <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="42787-621">Cria um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="42787-622">Cria um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-623">Um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-624">Esse método fornece uma maneira para que você possa liberar temporariamente o controle de execução para o dispatcher atual para que ele possa fazer outro trabalho, tais como processar outros eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="42787-625">Use o `await`, ou `Await` no Visual Basic, o operador no valor de retorno para retornar o controle para o dispatcher atual.</span><span class="sxs-lookup"><span data-stu-id="42787-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="42787-626">Use este método se quiser dar uma chance de processar eventos enquanto o aplicativo está fazendo muito trabalho no thread da interface do usuário ao seu aplicativo.</span><span class="sxs-lookup"><span data-stu-id="42787-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="42787-627">Por exemplo, você pode usar esse método em um loop de execução longa que atualiza um controle.</span><span class="sxs-lookup"><span data-stu-id="42787-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="42787-628">Esse método é equivalente a chamar o <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> método e passar <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="42787-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="42787-629">A prioridade na qual agendar a continuação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-629">The priority at which to schedule the continuation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="42787-630">Cria um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
          <span data-ttu-id="42787-631">O trabalho que ocorre quando o controle retorna para o código aguardando o resultado deste método é agendado com a prioridade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="42787-632">Um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="42787-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="42787-633">Esse método fornece uma maneira para que você possa liberar temporariamente o controle de execução para o dispatcher atual para que ele possa fazer outro trabalho, tais como processar outros eventos.</span><span class="sxs-lookup"><span data-stu-id="42787-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="42787-634">Use o `await`, ou `Await` no Visual Basic, o operador no valor de retorno para retornar o controle para o dispatcher atual.</span><span class="sxs-lookup"><span data-stu-id="42787-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="42787-635">Use este método se quiser dar uma chance de processar eventos enquanto o aplicativo está fazendo muito trabalho no thread da interface do usuário ao seu aplicativo.</span><span class="sxs-lookup"><span data-stu-id="42787-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="42787-636">Por exemplo, você pode usar esse método em um loop de execução longa que atualiza um controle.</span><span class="sxs-lookup"><span data-stu-id="42787-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>