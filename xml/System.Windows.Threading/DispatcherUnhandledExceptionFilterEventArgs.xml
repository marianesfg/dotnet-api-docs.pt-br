<Type Name="DispatcherUnhandledExceptionFilterEventArgs" FullName="System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc98cc447efd814f227dead3a628df7beb5cbeb4" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39898031" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DispatcherUnhandledExceptionFilterEventArgs : System.Windows.Threading.DispatcherEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DispatcherUnhandledExceptionFilterEventArgs extends System.Windows.Threading.DispatcherEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DispatcherUnhandledExceptionFilterEventArgs&#xA;Inherits DispatcherEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherUnhandledExceptionFilterEventArgs sealed : System::Windows::Threading::DispatcherEventArgs" />
  <TypeSignature Language="F#" Value="type DispatcherUnhandledExceptionFilterEventArgs = class&#xA;    inherit DispatcherEventArgs" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="290b5-101">Fornece dados para o evento de <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="290b5-101">Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="290b5-102">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento ocorre quando o código em execução por meio do <xref:System.Windows.Threading.Dispatcher> gera uma exceção que não é tratada.</span><span class="sxs-lookup"><span data-stu-id="290b5-102">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled.</span></span>  
  
 <span data-ttu-id="290b5-103">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento fornece um meio para não acionar o <xref:System.Windows.Threading.Dispatcher.UnhandledException> eventos.</span><span class="sxs-lookup"><span data-stu-id="290b5-103">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="290b5-104">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> é gerado pela primeira vez e se <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> na <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> é definido como `false`, o <xref:System.Windows.Threading.Dispatcher.UnhandledException> evento não será gerado.</span><span class="sxs-lookup"><span data-stu-id="290b5-104">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
    <altmember cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
    <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
    <altmember cref="T:System.Windows.Threading.Dispatcher" />
  </Docs>
  <Members>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="290b5-105">Obtém a exceção foi gerada ao executar o código por meio de dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="290b5-105">Gets the exception that was raised when executing code by way of the dispatcher.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="290b5-106">A exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="290b5-106">The exception.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="RequestCatch">
      <MemberSignature Language="C#" Value="public bool RequestCatch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequestCatch" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestCatch As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequestCatch { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RequestCatch : bool with get, set" Usage="System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="290b5-107">Obtém ou define se a exceção deve ser capturada e os manipuladores de eventos chamados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="290b5-107">Gets or sets whether the exception should be caught and the event handlers called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="290b5-108">
            <see langword="true" /> Se o <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> deve ser acionado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="290b5-108">
              <see langword="true" /> if the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> should be raised; otherwise; <see langword="false" />.</span>
          </span>
          <span data-ttu-id="290b5-109">O valor padrão é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="290b5-109">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="290b5-110">O <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento fornece um meio para não acionar o <xref:System.Windows.Threading.Dispatcher.UnhandledException> eventos.</span><span class="sxs-lookup"><span data-stu-id="290b5-110">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="290b5-111">O <xref:System.Windows.Threading.Dispatcher.UnhandledException> é acionado primeiro e se <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> na <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> é definido como `false`, o <xref:System.Windows.Threading.Dispatcher.UnhandledException> evento não será gerado.</span><span class="sxs-lookup"><span data-stu-id="290b5-111">The <xref:System.Windows.Threading.Dispatcher.UnhandledException> is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 <span data-ttu-id="290b5-112">Um manipulador anterior no evento multicast talvez já definiu essa propriedade como `false`, indicando que a exceção não será detectada.</span><span class="sxs-lookup"><span data-stu-id="290b5-112">A previous handler in the event multicast might have already set this property to `false`, indicating that the exception will not be caught.</span></span>  <span data-ttu-id="290b5-113">O comportamento de "não catch" substituirá todos os outros porque provavelmente significa que um cenário de depuração.</span><span class="sxs-lookup"><span data-stu-id="290b5-113">The "don't catch" behavior will override all others because it most likely means a debugging scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      </Docs>
    </Member>
  </Members>
</Type>