<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="338473ae149afc3abbbba5fe33991b0f472b9e6d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39855092" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3edb2-101">Define os métodos que permitem a inspeção ou modificação personalizada de mensagens do aplicativo de entrada e saída em aplicativos de serviço.</span><span class="sxs-lookup"><span data-stu-id="3edb2-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-102">Implemente <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> para inspecionar ou modificar qualquer um antes de expedir uma mensagem de solicitação para uma operação ou antes de retornar uma resposta de mensagem para um chamador de mensagens do aplicativo de entrada ou saída.</span><span class="sxs-lookup"><span data-stu-id="3edb2-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="3edb2-103">Há um grande número de cenários que exigem a interceptação de mensagens antes de invocar a operação para o qual ele é destinado.</span><span class="sxs-lookup"><span data-stu-id="3edb2-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="3edb2-104">Por exemplo, você pode registrar em log mensagens recebidas do aplicativo ou executar algum recurso com base em um cabeçalho de mensagem.</span><span class="sxs-lookup"><span data-stu-id="3edb2-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="3edb2-105">Normalmente, os inspetores de mensagem são inseridas por um comportamento de serviço (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), um comportamento de ponto de extremidade (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), ou um comportamento de contrato (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="3edb2-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="3edb2-106">O comportamento, em seguida, adiciona o Inspetor de mensagem para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> coleção.</span><span class="sxs-lookup"><span data-stu-id="3edb2-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="3edb2-107">Para obter mais informações sobre como estender o tempo de execução usando comportamentos, consulte [estendendo ServiceHost e a camada de modelo de serviço](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="3edb2-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="3edb2-108">O <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> método habilita um comportamento personalizado depois de receber a mensagem, mas antes da expedição dele para a operação pretendida.</span><span class="sxs-lookup"><span data-stu-id="3edb2-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="3edb2-109">O <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> método habilita um comportamento personalizado depois que a operação retorna, mas antes que a resposta é enviada.</span><span class="sxs-lookup"><span data-stu-id="3edb2-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objetos sempre são chamados no mesmo ponto durante a expedição de mensagem, independentemente de se uma operação é unidirecional ou solicitação-resposta.</span><span class="sxs-lookup"><span data-stu-id="3edb2-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-111">O exemplo de código a seguir mostra um basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> que grava uma cadeia de caracteres no console quando ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="3edb2-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="3edb2-112">O exemplo de código a seguir mostra a implementação de um <xref:System.ServiceModel.Description.IServiceBehavior> que adiciona o `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> coleção.</span><span class="sxs-lookup"><span data-stu-id="3edb2-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="3edb2-113">O exemplo de código a seguir mostra o uso de um arquivo de configuração de aplicativo para carregar o comportamento de serviço que insere o `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="3edb2-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="3edb2-114">A mensagem de solicitação.</span><span class="sxs-lookup"><span data-stu-id="3edb2-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="3edb2-115">O canal de entrada.</span><span class="sxs-lookup"><span data-stu-id="3edb2-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="3edb2-116">A instância de serviço atual.</span><span class="sxs-lookup"><span data-stu-id="3edb2-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="3edb2-117">Chamado depois que uma mensagem de entrada tiver sido recebida, mas antes ela foi enviada para a operação pretendida.</span><span class="sxs-lookup"><span data-stu-id="3edb2-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="3edb2-118">O objeto usado para correlacionar o estado.</span><span class="sxs-lookup"><span data-stu-id="3edb2-118">The object used to correlate state.</span></span> <span data-ttu-id="3edb2-119">Este objeto foi passado de volta no método <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="3edb2-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-120">Use o <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> método para inspecionar ou modificar a mensagem de entrada, o canal do cliente fornecido e a instância de serviço atual.</span><span class="sxs-lookup"><span data-stu-id="3edb2-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="3edb2-121">O valor de retorno pode ser qualquer objeto que você deseja usar para fins de correlação; ele é retornado como o `correlationState` parâmetro no <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3edb2-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3edb2-122">Você não pode usar o corpo da mensagem, a menos que a mensagem inteira do buffer e faça uma cópia.</span><span class="sxs-lookup"><span data-stu-id="3edb2-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="3edb2-123">Se você fizer isso, você deve fazer duas cópias da mensagem: uma para inspecionar e outro para substituir o `request` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="3edb2-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-124">O exemplo de código a seguir mostra um basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> que grava uma cadeia de caracteres no console quando ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="3edb2-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="3edb2-125">O exemplo de código a seguir mostra a implementação de um <xref:System.ServiceModel.Description.IServiceBehavior> que adiciona o `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> coleção.</span><span class="sxs-lookup"><span data-stu-id="3edb2-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="3edb2-126">O exemplo de código a seguir mostra o uso de um arquivo de configuração de aplicativo para carregar o comportamento de serviço que insere o `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="3edb2-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="3edb2-127">A mensagem de resposta.</span><span class="sxs-lookup"><span data-stu-id="3edb2-127">The reply message.</span></span> <span data-ttu-id="3edb2-128">Esse valor será nulo se a operação for unidirecional.</span><span class="sxs-lookup"><span data-stu-id="3edb2-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="3edb2-129">O objeto de correlação retornado do método <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</span><span class="sxs-lookup"><span data-stu-id="3edb2-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="3edb2-130">Chamado depois que a operação foi retornada, mas antes que a mensagem de resposta seja enviada.</span><span class="sxs-lookup"><span data-stu-id="3edb2-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-131">Use o <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> método para executar o comportamento personalizado antes de enviar a mensagem de retorno.</span><span class="sxs-lookup"><span data-stu-id="3edb2-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="3edb2-132">O `correlationState` é o objeto retornado do <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> método que você pode usar para executar a correlação entre as chamadas de entrada e saídas para dar suporte ao seu comportamento.</span><span class="sxs-lookup"><span data-stu-id="3edb2-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-133">O exemplo de código a seguir mostra um basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> que grava uma cadeia de caracteres no console quando ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="3edb2-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="3edb2-134">O exemplo de código a seguir mostra a implementação de um <xref:System.ServiceModel.Description.IServiceBehavior> que adiciona o `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> coleção.</span><span class="sxs-lookup"><span data-stu-id="3edb2-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="3edb2-135">O exemplo de código a seguir mostra o uso de um arquivo de configuração de aplicativo para carregar o comportamento de serviço que insere o `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="3edb2-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>