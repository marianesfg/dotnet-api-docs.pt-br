<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IClientMessageInspector.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72d1feefd5799d09bf0c4a9e11586ef9f36a7d225d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1feefd5799d09bf0c4a9e11586ef9f36a7d225d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Defines a message inspector object that can be added to the <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> collection to view or modify messages.</source>
          <target state="translated">Define um objeto do inspetor de mensagem que pode ser adicionado à coleção <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> para exibir ou modificar as mensagens.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> collection to inspect or modify messages as they pass through a WCF client object.</source>
          <target state="translated">Implementar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> de interface e adicioná-lo para o <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> coleção para inspecionar ou modificar mensagens que passam por meio de um objeto de cliente do WCF.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>.</source>
          <target state="translated">Para obter detalhes, consulte <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">O exemplo de código a seguir mostra uma implementação que grava cadeias de caracteres para o console quando a implementação é chamada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar um <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> para inserir o Inspetor de mensagem do cliente no ponto de extremidade do cliente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">Por fim, o exemplo de código a seguir mostra como modificar o cliente do arquivo de configuração para usar o comportamento de ponto de extremidade com um ponto de extremidade específico.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The message to be transformed into types and handed back to the client application.</source>
          <target state="translated">A mensagem a ser transformada em tipos e devolvida para o aplicativo cliente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Correlation state data.</source>
          <target state="translated">Correlação de dados de estado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</source>
          <target state="translated">Permite a inspeção ou modificação de uma mensagem depois que uma mensagem de resposta é recebida, mas antes de passá-la de volta para o aplicativo cliente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.</source>
          <target state="translated">Implementar <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> inspecionar ou modificar uma mensagem de resposta depois que ela foi recebida pelo objeto de cliente do WCF, mas antes de ele é desserializado em objetos que são retornados ao aplicativo cliente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned by the user when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> is called for this message.</source>
          <target state="translated">O <ph id="ph1">`correlationState`</ph> é o objeto retornado pelo usuário quando <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> é chamado para esta mensagem.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The best practice is to make this a <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph> to ensure that no two <ph id="ph2">`correlationState`</ph> objects are the same.</source>
          <target state="translated">A prática recomendada é tornar isso em um <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph> para garantir que não haja dois objetos <ph id="ph2">`correlationState`</ph> iguais.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">O exemplo de código a seguir mostra uma implementação que grava cadeias de caracteres para o console quando a implementação é chamada.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar um <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> para inserir o Inspetor de mensagem do cliente no ponto de extremidade do cliente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">Por fim, o exemplo de código a seguir mostra como modificar o cliente do arquivo de configuração para usar o comportamento de ponto de extremidade com um ponto de extremidade específico.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The message to be sent to the service.</source>
          <target state="translated">A mensagem a ser enviada ao serviço.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The WCF client object channel.</source>
          <target state="translated">O canal do objeto cliente do WCF.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Enables inspection or modification of a message before a request message is sent to a service.</source>
          <target state="translated">Permite a inspeção ou modificação de uma mensagem antes de uma mensagem de solicitação ser enviada a um serviço.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The object that is returned as the <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> argument of the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">O objeto retornado como o argumento <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> do método <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>This is <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no correlation state is used.</source>
          <target state="translated">Isso será <ph id="ph1">&lt;see langword="null" /&gt;</ph> se nenhum estado de correlação for usado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The best practice is to make this a <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to ensure that no two <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> objects are the same.</source>
          <target state="translated">A prática recomendada é tornar isso em um <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> para garantir que não haja dois objetos <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> iguais.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> to inspect or modify a request message before it is sent.</source>
          <target state="translated">Implementar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> inspecionar ou modificar uma mensagem de solicitação antes de ser enviada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">O exemplo de código a seguir mostra uma implementação que grava cadeias de caracteres para o console quando a implementação é chamada.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar um <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> para inserir o Inspetor de mensagem do cliente no ponto de extremidade do cliente.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">Por fim, o exemplo de código a seguir mostra como modificar o cliente do arquivo de configuração para usar o comportamento de ponto de extremidade com um ponto de extremidade específico.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>