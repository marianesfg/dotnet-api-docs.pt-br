<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd88e9a1d628bc7e35a5072c892481aa5677507b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37455216" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <TypeSignature Language="F#" Value="type IClientMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define um objeto do inspetor de mensagem que pode ser adicionado à coleção <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> para exibir ou modificar as mensagens.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente a <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> da interface e adicioná-lo para o <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> coleção para inspecionar ou modificar as mensagens à medida que eles passam por meio de um objeto de cliente do WCF. Para obter detalhes, consulte <xref:System.ServiceModel.Dispatcher.ClientRuntime>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação que grava cadeias de caracteres no console quando a implementação é chamada.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 O exemplo de código a seguir mostra como usar um <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> para inserir o Inspetor de mensagens do cliente no ponto de extremidade do cliente.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Por fim, o exemplo de código a seguir mostra como modificar o cliente do arquivo de configuração para usar o comportamento de ponto de extremidade com um ponto de extremidade específico.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveReply :  * obj -&gt; unit" Usage="iClientMessageInspector.AfterReceiveReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">A mensagem a ser transformada em tipos e devolvida para o aplicativo cliente.</param>
        <param name="correlationState">Correlação de dados de estado.</param>
        <summary>Permite a inspeção ou modificação de uma mensagem depois que uma mensagem de resposta é recebida, mas antes de passá-la de volta para o aplicativo cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> para inspecionar ou modificar uma mensagem de resposta depois que ela foi recebida pelo objeto de cliente do WCF, mas antes que ele é desserializado em objetos que são retornados ao aplicativo cliente.  
  
 O `correlationState` é o objeto retornado pelo usuário quando <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> é chamado para essa mensagem. A prática recomendada é tornar isso em um <xref:System.Guid?displayProperty=nameWithType> para garantir que não haja dois objetos `correlationState` iguais.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação que grava cadeias de caracteres no console quando a implementação é chamada.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 O exemplo de código a seguir mostra como usar um <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> para inserir o Inspetor de mensagens do cliente no ponto de extremidade do cliente.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Por fim, o exemplo de código a seguir mostra como modificar o cliente do arquivo de configuração para usar o comportamento de ponto de extremidade com um ponto de extremidade específico.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendRequest :  * System.ServiceModel.IClientChannel -&gt; obj" Usage="iClientMessageInspector.BeforeSendRequest (request, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request">A mensagem a ser enviada ao serviço.</param>
        <param name="channel">O canal do objeto cliente do WCF.</param>
        <summary>Permite a inspeção ou modificação de uma mensagem antes de uma mensagem de solicitação ser enviada a um serviço.</summary>
        <returns>O objeto retornado como o argumento <paramref name="correlationState" /> do método <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />. Isso será <see langword="null" /> se nenhum estado de correlação for usado.  A prática recomendada é tornar isso em um <see cref="T:System.Guid" /> para garantir que não haja dois objetos <paramref name="correlationState" /> iguais.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> para inspecionar ou modificar uma mensagem de solicitação antes de serem enviado.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação que grava cadeias de caracteres no console quando a implementação é chamada.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 O exemplo de código a seguir mostra como usar um <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> para inserir o Inspetor de mensagens do cliente no ponto de extremidade do cliente.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Por fim, o exemplo de código a seguir mostra como modificar o cliente do arquivo de configuração para usar o comportamento de ponto de extremidade com um ponto de extremidade específico.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>