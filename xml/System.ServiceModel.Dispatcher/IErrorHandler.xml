<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IErrorHandler.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-567ae5a" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c5b04be-ac4f-4958-bcde-0afae05845521598e70fe551845ecee45c28edf60e852cf1f45b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1598e70fe551845ecee45c28edf60e852cf1f45b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3507e865a3613c00760f25ad1045aaa11bae4dd8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/23/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</source>
          <target state="translated">Permite a um implementador controlar a mensagem de falha retornada ao chamador e, opcionalmente, executar processamento de erro personalizado como registro em log.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>To explicitly control the behavior of the application when an exception is thrown, implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>’s <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Para controlar explicitamente o comportamento do aplicativo quando uma exceção é lançada, implementar a <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> de interface e adicioná-lo para o <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>do <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> permite controlar a falha SOAP gerada explicitamente, decida se deseja enviá-lo para o cliente e executar tarefas associadas, como o registro em log.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Error handlers are called in the order in which they were added to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Manipuladores de erro são chamados na ordem na qual eles foram adicionados para o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to control the fault message that is returned to the client.</source>
          <target state="translated">Implementar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> método para controlar a mensagem de falha é retornada ao cliente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</source>
          <target state="translated">Implementar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método para assegurar os comportamentos de erro relacionado, incluindo erros de registro em log, para garantir que uma falha rápida, desligar o aplicativo e assim por diante.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método pode ser chamado de vários locais diferentes não há nenhuma garantia feita sobre qual thread o método é chamado em.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">Não dependem de <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método ser chamado no thread da operação.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called first, prior to sending a response message.</source>
          <target state="translated">Todos os <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementações são chamadas pela primeira vez, antes de enviar uma mensagem de resposta.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called and return, and if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>, it is sent back to the client according to the operation contract.</source>
          <target state="translated">Quando todos os <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementações ter sido chamadas e retornar e se <ph id="ph2">`fault`</ph> é não -<ph id="ph3">`null`</ph>, ela é enviada para o cliente de acordo com o contrato da operação.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>If <ph id="ph1">`fault`</ph> is <ph id="ph2">`null`</ph> after all implementations have been called, the response message is controlled by the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> property value.</source>
          <target state="translated">Se <ph id="ph1">`fault`</ph> é <ph id="ph2">`null`</ph> depois que todas as implementações tem sido chamadas, a mensagem de resposta é controlada pelo <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> o valor da propriedade.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Exceptions can occur after all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called and a response message is handed to the channel.</source>
          <target state="translated">Exceções podem ocorrer depois que todos os <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> são chamadas de implementações e uma mensagem de resposta é entregue ao canal.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>If a channel exception occurs (for example, difficulty serializing the message) <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> objects are notified.</source>
          <target state="translated">Se ocorrer uma exceção de canal (por exemplo, dificuldade para serializar a mensagem) <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> objetos devem ser notificados.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</source>
          <target state="translated">Nesse caso, você ainda assegure-se de que seu ambiente de desenvolvimento captura e exibe essas exceções para você ou faz uso de rastreamento para descobrir o problema.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more information about tracing, see <bpt id="p1">[</bpt>Using Tracing to Troubleshoot Your Application<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre rastreamento, consulte <bpt id="p1">[</bpt>usando o rastreamento para solucionar problemas de seu aplicativo<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>After the response message has been sent, all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> implementations are called in the same order.</source>
          <target state="translated">Depois que a mensagem de resposta tiver sido enviada, todos os <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> implementações são chamadas na mesma ordem.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Typically, an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation is added to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property on the service (and the client in the case of duplex communication).</source>
          <target state="translated">Normalmente, um <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementação é adicionada para o <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> propriedade sobre o serviço (e o cliente no caso de comunicação duplex).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>You can add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> to the runtime by implementing a behavior (either an <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>.</source>
          <target state="translated">Você pode adicionar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> no tempo de execução com a implementação de um comportamento (ou um <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>, ou <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph> objeto) e usar o comportamento programaticamente, um arquivo de configuração ou com um atributo personalizado para anexar o <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more information about using behaviors to modify the runtime, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar comportamentos para modificar o tempo de execução, consulte <bpt id="p1">[</bpt>Configurando e estendendo o tempo de execução com comportamentos<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">O exemplo de código a seguir demonstra um serviço que implementa <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> que retorna apenas <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> do tipo <ph id="ph3">`GreetingFault`</ph> quando um método de serviço gera uma exceção gerenciada.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar um comportamento de serviço para adicionar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementação para o <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">O exemplo de código a seguir mostra como configurar o serviço para carregar o comportamento de serviço usando um arquivo de configuração do aplicativo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">Para obter mais detalhes sobre como expor um comportamento de serviço em um arquivo de configuração, consulte <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</source>
          <target state="translated">Habilita o processamento de erro e retorna um valor que indica se o dispatcher anula a sessão e o contexto da instância em determinados casos.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> should not abort the session (if there is one) and instance context if the instance context is not <ph id="ph3">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> não deve anular a sessão (se houver) e o contexto de instância se o contexto de instância não for <ph id="ph3">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método para implementar comportamentos relacionados a erros como erro de log de notificações do sistema, desligar o aplicativo e assim por diante e retornar um valor que especifica se a exceção foi tratada adequadamente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método pode ser chamado de vários locais diferentes não há nenhuma garantia feita sobre qual thread o método é chamado em.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">Não dependem de <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método ser chamado no thread da operação.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementations are called.</source>
          <target state="translated">Todos os <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> são chamadas de implementações.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>By default (when the return value is <ph id="ph1">`false`</ph>), if there is an exception, the dispatcher aborts any session and aborts the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> if the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> is anything other than <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>.</source>
          <target state="translated">Por padrão (quando o valor de retorno é <ph id="ph1">`false`</ph>), se houver uma exceção, o dispatcher anula qualquer sessão e anula a <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> se o <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> for algo diferente de <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The exception is then considered unhandled and any state is considered corrupt.</source>
          <target state="translated">A exceção é considerada sem tratamento e qualquer estado será considerado corrompido.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Return <ph id="ph1">`true`</ph> from <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> to prevent this default behavior.</source>
          <target state="translated">Retornar <ph id="ph1">`true`</ph> de <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> para evitar esse comportamento padrão.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>If any error handler returns <ph id="ph1">`true`</ph> it instructs <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> that it is safe to continue using state associated with the failed request.</source>
          <target state="translated">Se qualquer manipulador de erro retorna <ph id="ph1">`true`</ph> ele instrui o <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> que é seguro continuar usando o estado associado à solicitação com falha.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>If no error handler returns <ph id="ph1">`true`</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> and channel when communicating on a session channel or the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property is not set to <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se nenhum manipulador de erro retorna <ph id="ph1">`true`</ph> do <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> método a exceção será considerada sem tratamento e se aplica a resposta padrão, possivelmente resultando em um anuladas <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> e o canal ao comunicar-se em um canal de sessão ou o <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> propriedade não está definida como <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The <ph id="ph1">`error`</ph> parameter is never <ph id="ph2">`null`</ph> and contains the exception object that was thrown.</source>
          <target state="translated">O <ph id="ph1">`error`</ph> parâmetro nunca é <ph id="ph2">`null`</ph> e contém o objeto de exceção foi lançado.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">O exemplo de código a seguir demonstra um serviço que implementa <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> que retorna apenas <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> do tipo <ph id="ph3">`GreetingFault`</ph> quando um método de serviço gera uma exceção gerenciada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar um comportamento de serviço para adicionar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementação para o <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">O exemplo de código a seguir mostra como configurar o serviço para carregar o comportamento de serviço usando um arquivo de configuração do aplicativo.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">Para obter mais detalhes sobre como expor um comportamento de serviço em um arquivo de configuração, consulte <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The SOAP version of the message.</source>
          <target state="translated">A versão SOAP da mensagem.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> object that is returned to the client, or service, in the duplex case.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> que é retornado ao cliente ou serviço, no caso de duplex.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Enables the creation of a custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultException`1" /&gt;</ph> that is returned from an exception in the course of a service method.</source>
          <target state="translated">Permite a criação de um <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultException`1" /&gt;</ph> personalizado que é retornado de uma exceção no curso de um método de serviço.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to create a custom fault message that is returned to the client.</source>
          <target state="translated">Implementar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> método para criar uma mensagem de falha personalizado que é retornada ao cliente.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> método sempre será chamado para exceções que deixam de operações, exceto quando o tempo de execução WCF reconhece a exceção como especialmente fatal e lança novamente a exceção em si.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called, the fault message is sent back to the client (if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>).</source>
          <target state="translated">Quando todos os <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementações tiveram sido chamadas, a mensagem de falha é enviada de volta ao cliente (se <ph id="ph2">`fault`</ph> é não -<ph id="ph3">`null`</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>If the <ph id="ph1">`fault`</ph> parameter is <ph id="ph2">`null`</ph> the default fault is sent to the client.</source>
          <target state="translated">Se o <ph id="ph1">`fault`</ph> parâmetro é <ph id="ph2">`null`</ph> a falha de padrão é enviada ao cliente.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The inbound message that caused the processing error is available during this method from the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">A mensagem de entrada que causou o erro de processamento está disponível durante esse método a partir de <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> método pode ser chamado de vários locais diferentes não há nenhuma garantia feita sobre qual thread o método é chamado em.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">Não dependem de <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> método ser chamado no thread da operação.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">O exemplo de código a seguir demonstra um serviço que implementa <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> que retorna apenas <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> do tipo <ph id="ph3">`GreetingFault`</ph> quando um método de serviço gera uma exceção gerenciada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">O exemplo de código a seguir mostra como usar um comportamento de serviço para adicionar o <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementação para o <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">O exemplo de código a seguir mostra como configurar o serviço para carregar o comportamento de serviço usando um arquivo de configuração do aplicativo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">Para obter mais detalhes sobre como expor um comportamento de serviço em um arquivo de configuração, consulte <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>