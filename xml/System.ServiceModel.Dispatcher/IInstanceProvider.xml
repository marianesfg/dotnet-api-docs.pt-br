<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3a7cf-101">Declara os métodos que fornecem um objeto de serviço ou reciclam um objeto de serviço para um serviço da WCF (Windows Communication Foundation).</span><span class="sxs-lookup"><span data-stu-id="3a7cf-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7cf-102">Implementar o <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface para controlar a criação e a reciclagem de objetos de serviço quando uma for solicitada ou disposta por uma <xref:System.ServiceModel.InstanceContext> objeto.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="3a7cf-103">Uma vez o <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface é implementada, você deve atribuir o objeto de provedor de instância personalizada para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> propriedade usando um comportamento de ponto de extremidade (um <xref:System.ServiceModel.Description.IEndpointBehavior> objeto) ou um comportamento de contrato (um <xref:System.ServiceModel.Description.IContractBehavior> objeto).</span><span class="sxs-lookup"><span data-stu-id="3a7cf-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="3a7cf-104">Se o mecanismo de inserção é um comportamento de ponto de extremidade você também pode implementar um <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> objeto que pode inserir o comportamento personalizado usando um arquivo de configuração.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="3a7cf-105">Se o mecanismo de inserção é um comportamento de contrato, você pode inserir o comportamento programaticamente antes da abertura do host do serviço ou você pode implementar um atributo personalizado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="3a7cf-106">(Para obter um exemplo da abordagem de comportamento de contrato, consulte a seção de exemplo).</span><span class="sxs-lookup"><span data-stu-id="3a7cf-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="3a7cf-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> possui dois métodos, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> e <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="3a7cf-108">Normalmente, esses métodos são implementados para criar objetos de serviço usando um construtor não-padrão ou para inicializar ou descartar algum estado relacionado ao tempo de vida do objeto.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-108">These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="3a7cf-109">O pool de objetos de serviço é um exemplo de personalizado <xref:System.ServiceModel.Dispatcher.IInstanceProvider> funcionalidade.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="3a7cf-110">Normalmente, o <xref:System.ServiceModel.InstanceContext> invoca o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> quando o <xref:System.ServiceModel.InstanceContext> é criado pela primeira vez e chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> método quando o <xref:System.ServiceModel.InstanceContext> está fechado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="3a7cf-111">Há duas maneiras de fazer com que um <xref:System.ServiceModel.InstanceContext> objeto para um objeto de serviço antes de liberar o <xref:System.ServiceModel.InstanceContext> está fechado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="3a7cf-112">O primeiro método é definir o <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> para <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> ou <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="3a7cf-113">O segundo método é chamar o <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="3a7cf-114">Se isso for feito, o <xref:System.ServiceModel.InstanceContext> chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> método no provedor de instância do dispatcher.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="3a7cf-115">Se uma nova mensagem chega depois que a instância foi liberada, o WCF cria uma nova instância usando o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a7cf-116">Se o <xref:System.ServiceModel.InstanceContextMode> do serviço é <xref:System.ServiceModel.InstanceContextMode.Single>, o sistema não chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> ou <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> métodos, mesmo quando o usuário não forneceu um serviço conhecido do objeto, a menos que o usuário chama diretamente <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> e, em seguida, chama <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a7cf-117">O exemplo de código a seguir mostra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider> que fornece o comportamento de "simples"; ele sempre retorna a mesma instância de serviço e não reciclar.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="3a7cf-118">O exemplo de código a seguir mostra como implementar um atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para inserir o provedor de instância de serviço personalizado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="3a7cf-119">Ele também implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, seu uso que se associa a um contrato específico.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a7cf-120">Retorna um objeto de serviço.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-120">Returns a service object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="3a7cf-121">O objeto <see cref="T:System.ServiceModel.InstanceContext" /> atual.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <summary><span data-ttu-id="3a7cf-122">Retorna um objeto de serviço dado o objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="3a7cf-123">Um objeto de serviço definido pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-123">A user-defined service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7cf-124">Use o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> método para controlar o objeto de serviço exata que um serviço WCF recebe quando ele tenta criar um novo.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a7cf-125">O exemplo de código a seguir mostra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider> que fornece o comportamento de "simples"; ele sempre retorna a mesma instância de serviço e não reciclar.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="3a7cf-126">O exemplo de código a seguir mostra como implementar um atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para inserir o provedor de instância de serviço personalizado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="3a7cf-127">Ele também implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, seu uso que se associa a um contrato específico.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="3a7cf-128">O objeto <see cref="T:System.ServiceModel.InstanceContext" /> atual.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="3a7cf-129">A mensagem que disparou a criação de um objeto de serviço.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-129">The message that triggered the creation of a service object.</span></span></param>
        <summary><span data-ttu-id="3a7cf-130">Retorna um objeto de serviço dado o objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="3a7cf-131">O objeto de serviço.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-131">The service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7cf-132">Use o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> método para controlar o objeto de serviço exata que um serviço WCF recebe quando ele tenta criar um novo.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a7cf-133">O exemplo de código a seguir mostra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider> que fornece o comportamento de "simples"; ele sempre retorna a mesma instância de serviço e não reciclar.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="3a7cf-134">O exemplo de código a seguir mostra como implementar um atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para inserir o provedor de instância de serviço personalizado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="3a7cf-135">Ele também implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, seu uso que se associa a um contrato específico.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="3a7cf-136">O contexto da instância do serviço.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-136">The service's instance context.</span></span></param>
        <param name="instance"><span data-ttu-id="3a7cf-137">O objeto de serviço a ser reciclado.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-137">The service object to be recycled.</span></span></param>
        <summary><span data-ttu-id="3a7cf-138">Chamado quando um objeto <see cref="T:System.ServiceModel.InstanceContext" /> recicla um objeto de serviço.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7cf-139">Use o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> método para executar algumas descarte de recursos personalizadas ou outra personalização de reciclagem quando um serviço se reciclar um objeto de serviço.</span><span class="sxs-lookup"><span data-stu-id="3a7cf-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>