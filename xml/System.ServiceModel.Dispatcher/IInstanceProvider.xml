<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d99445906f7000f567c08da21e17ff96cb11451f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37615911" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Declara os métodos que fornecem um objeto de serviço ou reciclam um objeto de serviço para um serviço da WCF (Windows Communication Foundation).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente a <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface para controlar a criação e a reciclagem de objetos de serviço quando um é solicitado ou descartado por um <xref:System.ServiceModel.InstanceContext> objeto.  
  
 Uma vez a <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface é implementada, você deve atribuir seu objeto de provedor personalizado de instância para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> propriedade usando um comportamento de ponto de extremidade (um <xref:System.ServiceModel.Description.IEndpointBehavior> objeto) ou um comportamento de contrato (um <xref:System.ServiceModel.Description.IContractBehavior> objeto).  
  
 Se o mecanismo de inserção é um comportamento de ponto de extremidade você também pode implementar um <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> objeto que pode inserir o comportamento personalizado usando um arquivo de configuração. Se o mecanismo de inserção é um comportamento de contrato, você pode inserir o comportamento por meio de programação antes da abertura do host do serviço ou você pode implementar um atributo personalizado. (Para obter um exemplo da abordagem de comportamento de contrato, consulte a seção exemplo).  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> possui dois métodos, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> e <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Normalmente, esses métodos são implementados para criar objetos de serviço usando um construtor não padrão ou para inicializar ou encerrar alguns estados relacionados ao tempo de vida do objeto. O pool de objetos de serviço é um exemplo de custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> funcionalidade.  
  
 Normalmente, o <xref:System.ServiceModel.InstanceContext> invoca o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> quando o <xref:System.ServiceModel.InstanceContext> é criado pela primeira vez e invoca o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> método quando o <xref:System.ServiceModel.InstanceContext> está fechado.  
  
 Há duas maneiras para fazer com que um <xref:System.ServiceModel.InstanceContext> objeto para um objeto de serviço antes de liberar o <xref:System.ServiceModel.InstanceContext> está fechado. O primeiro método é definir a <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> à <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> ou <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. O segundo método é chamar o <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> método. Se isso for feito, o <xref:System.ServiceModel.InstanceContext> chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> método no provedor de instância do dispatcher. Se uma nova mensagem chega depois que a instância foi lançada, o WCF cria uma nova instância usando o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> método.  
  
> [!NOTE]
>  Se o <xref:System.ServiceModel.InstanceContextMode> do serviço é <xref:System.ServiceModel.InstanceContextMode.Single>, o sistema não chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> ou <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> métodos, mesmo quando o usuário não forneceu um serviço conhecido do objeto, a menos que o usuário chama diretamente <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> e, em seguida, chama <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider> que fornece o comportamento de "singleton"; ele sempre retorna a mesma instância de serviço e não reciclada.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 O exemplo de código a seguir mostra como implementar um atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para inserir o provedor de instância de serviço personalizado. Ele também implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que associa o seu uso para um contrato específico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um objeto de serviço.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">O objeto <see cref="T:System.ServiceModel.InstanceContext" /> atual.</param>
        <summary>Retorna um objeto de serviço dado o objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</summary>
        <returns>Um objeto de serviço definido pelo usuário.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> método para controlar o objeto de serviço exata que um serviço WCF recebe quando tenta criar um novo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider> que fornece o comportamento de "singleton"; ele sempre retorna a mesma instância de serviço e não reciclada.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 O exemplo de código a seguir mostra como implementar um atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para inserir o provedor de instância de serviço personalizado. Ele também implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que associa o seu uso para um contrato específico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">O objeto <see cref="T:System.ServiceModel.InstanceContext" /> atual.</param>
        <param name="message">A mensagem que disparou a criação de um objeto de serviço.</param>
        <summary>Retorna um objeto de serviço dado o objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</summary>
        <returns>O objeto de serviço.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> método para controlar o objeto de serviço exata que um serviço WCF recebe quando tenta criar um novo.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider> que fornece o comportamento de "singleton"; ele sempre retorna a mesma instância de serviço e não reciclada.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 O exemplo de código a seguir mostra como implementar um atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para inserir o provedor de instância de serviço personalizado. Ele também implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que associa o seu uso para um contrato específico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">O contexto da instância do serviço.</param>
        <param name="instance">O objeto de serviço a ser reciclado.</param>
        <summary>Chamado quando um objeto <see cref="T:System.ServiceModel.InstanceContext" /> recicla um objeto de serviço.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> método para executar alguns descarte de recursos personalizadas ou outras personalizações de reciclagem, quando um serviço se reciclar um objeto de serviço.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>