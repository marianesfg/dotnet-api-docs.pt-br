<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="81bb0-101">Implementar participar da criação ou escolha de um objeto <see cref="T:System.ServiceModel.InstanceContext" />, especialmente para habilitar sessões compartilhadas.</span><span class="sxs-lookup"><span data-stu-id="81bb0-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81bb0-102">Implementar o <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface para fornecer apropriada <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> objeto para o sistema.</span><span class="sxs-lookup"><span data-stu-id="81bb0-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="81bb0-103">Normalmente, essa interface é implementada para dar suporte a sessões compartilhadas, ativar pool de instância de serviço, controlar o tempo de vida de instâncias de serviço ou para contextos de grupo entre clientes.</span><span class="sxs-lookup"><span data-stu-id="81bb0-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="81bb0-104">Por exemplo, para implementar o compartilhamento, insira um personalizado <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> para decidir qual sessão ou uma chamada de um cliente é associada com a qual <xref:System.ServiceModel.InstanceContext> objeto.</span><span class="sxs-lookup"><span data-stu-id="81bb0-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="81bb0-105">Para obter um exemplo que demonstra o compartilhamento de contextos de instância, consulte [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="81bb0-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81bb0-106">Quando um <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> é inserido em [!INCLUDE[indigo1](~/includes/indigo1-md.md)], a propriedade normal que controla a criação de <xref:System.ServiceModel.InstanceContext> objetos (o <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> propriedade) não está marcada e não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="81bb0-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into [!INCLUDE[indigo1](~/includes/indigo1-md.md)], the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="81bb0-107">Um mecanismo mais genérico pelo qual você pode inicializar <xref:System.ServiceModel.InstanceContext> objetos quando criado (por exemplo, para anexar extensões personalizadas para cada <xref:System.ServiceModel.InstanceContext>) é o <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="81bb0-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="81bb0-108">A mensagem de entrada.</span><span class="sxs-lookup"><span data-stu-id="81bb0-108">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="81bb0-109">O canal que recebeu a mensagem.</span><span class="sxs-lookup"><span data-stu-id="81bb0-109">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="81bb0-110">Chamado quando uma nova mensagem é recebida.</span><span class="sxs-lookup"><span data-stu-id="81bb0-110">Called when a new message is received.</span></span></summary>
        <returns><span data-ttu-id="81bb0-111">O objeto <see cref="T:System.ServiceModel.InstanceContext" /> que é usado para processar a mensagem; retorna <see langword="null" /> para instruir o WCF a criar um novo objeto <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="81bb0-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81bb0-112">O <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> método é chamado quando uma mensagem é recebida.</span><span class="sxs-lookup"><span data-stu-id="81bb0-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="81bb0-113">Retornar o <xref:System.ServiceModel.InstanceContext> do objeto que você deseja processar a mensagem, ou `null`.</span><span class="sxs-lookup"><span data-stu-id="81bb0-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="81bb0-114">No caso de `null`, o WCF cria um novo <xref:System.ServiceModel.InstanceContext> objeto para a mensagem e, em seguida, chama o <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> método.</span><span class="sxs-lookup"><span data-stu-id="81bb0-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="81bb0-115">Se você retornar `null`, o novo <xref:System.ServiceModel.InstanceContext> objeto passa pelo sistema de limitação e incrementa a contagem de <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="81bb0-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="81bb0-116">O novo objeto <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="81bb0-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="81bb0-117">A mensagem de entrada.</span><span class="sxs-lookup"><span data-stu-id="81bb0-117">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="81bb0-118">O canal que recebeu a mensagem.</span><span class="sxs-lookup"><span data-stu-id="81bb0-118">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="81bb0-119">Chamado quando <see langword="null" /> é retornado do método <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />.</span><span class="sxs-lookup"><span data-stu-id="81bb0-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81bb0-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> chamado quando <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> retorna `null` e um novo <xref:System.ServiceModel.InstanceContext> objeto é criado.</span><span class="sxs-lookup"><span data-stu-id="81bb0-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="81bb0-121">Este método é chamado para notificar que uma nova <xref:System.ServiceModel.InstanceContext> foi criado.</span><span class="sxs-lookup"><span data-stu-id="81bb0-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="81bb0-122">O objeto <see cref="T:System.ServiceModel.InstanceContext" /> que é considerado ocioso.</span><span class="sxs-lookup"><span data-stu-id="81bb0-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span></span></param>
        <summary><span data-ttu-id="81bb0-123">Chamado quando todas as atividades <see cref="T:System.ServiceModel.InstanceContext" /> foram concluídas para permitir que os implementadores impeçam a reciclagem do <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="81bb0-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span></span></summary>
        <returns>
          <span data-ttu-id="81bb0-124"><see langword="true" /> se [!INCLUDE[indigo1](~/includes/indigo1-md.md)] for para fechar e reciclar o objeto <see cref="T:System.ServiceModel.InstanceContext" /> e ajustar o valor de <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="81bb0-124"><see langword="true" /> if [!INCLUDE[indigo1](~/includes/indigo1-md.md)] is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81bb0-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> é chamado quando o WCF está prestes a fechar e reciclar ficar ocioso <xref:System.ServiceModel.InstanceContext> para que você pode informar se deseja continuar fazendo isso o tempo de execução do objeto.</span><span class="sxs-lookup"><span data-stu-id="81bb0-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="81bb0-126">Para obter um exemplo que demonstra o compartilhamento de contextos de instância, consulte [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="81bb0-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="81bb0-127">O objeto <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> notifica o WCF quando o objeto <see cref="T:System.ServiceModel.InstanceContext" /> deve ser fechado e reciclado.</span><span class="sxs-lookup"><span data-stu-id="81bb0-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="81bb0-128">O <see cref="T:System.ServiceModel.InstanceContext" /> atual.</span><span class="sxs-lookup"><span data-stu-id="81bb0-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span></span></param>
        <summary><span data-ttu-id="81bb0-129">Chamado quando o <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> método retorna <see langword="false" /> para permitir que os implementadores forneçam um retorno de chamada para notificar o WCF quando o objeto <see cref="T:System.ServiceModel.InstanceContext" /> é concluído.</span><span class="sxs-lookup"><span data-stu-id="81bb0-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81bb0-130">O <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> método é chamado quando o <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> método retorna `false` para que você possa fornecer WCF com um <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> que você usa para informar o tempo de execução do objeto que o <xref:System.ServiceModel.InstanceContext> concluiu seu trabalho.</span><span class="sxs-lookup"><span data-stu-id="81bb0-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="81bb0-131">Quando o <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> objeto notifica o tempo de execução que o <xref:System.ServiceModel.InstanceContext> concluiu seu trabalho, chamadas WCF <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> novamente.</span><span class="sxs-lookup"><span data-stu-id="81bb0-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="81bb0-132">Esse ciclo continua até <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> retorna `true` e o contexto é fechado e reciclado.</span><span class="sxs-lookup"><span data-stu-id="81bb0-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>