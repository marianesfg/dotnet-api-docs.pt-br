<Type Name="IInteractiveChannelInitializer" FullName="System.ServiceModel.Dispatcher.IInteractiveChannelInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a28ea60b8469e9308d63b77db761ba0f74156d33" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37455125" /></Metadata><TypeSignature Language="C#" Value="public interface IInteractiveChannelInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInteractiveChannelInitializer" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInteractiveChannelInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInteractiveChannelInitializer" />
  <TypeSignature Language="F#" Value="type IInteractiveChannelInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define os métodos que permitem que um aplicativo cliente exiba uma interface do usuário para coletar informações de identidade antes de criar o canal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> interface para habilitar um aplicativo cliente para exibir uma interface do usuário que permite ao usuário do aplicativo criar ou selecionar as credenciais antes de abrir um canal.  
  
 Para implementar <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, execute as seguintes etapas no <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=nameWithType>:  
  
1.  Avisar o usuário e obter um apropriado <xref:System.Net.NetworkCredential?displayProperty=nameWithType>.  
  
2.  Adicionar um objeto de parâmetro de canal personalizado à coleção retornada pela <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=nameWithType> método em de <xref:System.ServiceModel.IClientChannel> objeto com um parâmetro de tipo de <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=nameWithType>. Esse objeto de parâmetro de canal é usado pelo personalizado <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=nameWithType> para estabelecer os tokens de segurança para o canal.  
  
3.  Retorne.  
  
 Para inserir <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>:  
  
1.  Substituir a <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=nameWithType> método no <xref:System.ServiceModel.Description.ClientCredentials?displayProperty=nameWithType> classe.  
  
2.  Nesse método, determinar se o ponto de extremidade requer uma <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> e, nesse caso, adicione o <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> para o <xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=nameWithType> coleção.  
  
 Há duas maneiras dos desenvolvedores de aplicativos podem fazer usam de um inserido <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>. O aplicativo cliente pode chamar o <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=nameWithType> (ou uma versão assíncrona) antes de abrir o canal (o *explícita* abordagem) ou simplesmente chamar a primeira operação (o *implícita* abordagem).  
  
 Se usar a abordagem implícita, o aplicativo deve chamar a primeira operação em um <xref:System.ServiceModel.ClientBase%601> ou <xref:System.ServiceModel.IClientChannel> extensão. Se ele chamar qualquer coisa que não seja a primeira operação, uma exceção é lançada.  
  
 Se usar a abordagem explícita, o aplicativo deve executar as seguintes etapas na ordem:  
  
1.  Chame o <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=nameWithType> (ou uma versão assíncrona).  
  
2.  Quando os inicializadores de tem retornado, chame o o <xref:System.ServiceModel.ICommunicationObject.Open%2A> método na <xref:System.ServiceModel.IClientChannel> objeto ou na <xref:System.ServiceModel.IClientChannel> objeto retornado do <xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=nameWithType> propriedade.  
  
3.  Chamar as operações.  
  
 É recomendável desse controle de aplicativos de qualidade de produção do processo de interface do usuário, adotando a abordagem explícita.  
  
 Aplicativos que usam a abordagem implícita invocar os inicializadores de interface do usuário, mas se o usuário do aplicativo não responder dentro do período de tempo limite de envio da associação, uma exceção é lançada quando a interface do usuário é retornado.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisplayInitializationUI (System.ServiceModel.IClientChannel channel, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDisplayInitializationUI(class System.ServiceModel.IClientChannel channel, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisplayInitializationUI (channel As IClientChannel, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisplayInitializationUI(System::ServiceModel::IClientChannel ^ channel, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginDisplayInitializationUI : System.ServiceModel.IClientChannel * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInteractiveChannelInitializer.BeginDisplayInitializationUI (channel, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="channel">O canal do cliente.</param>
        <param name="callback">O objeto de retorno de chamada.</param>
        <param name="state">Quaisquer dados de estado.</param>
        <summary>Uma chamada assíncrona para começar a usar uma interface do usuário para obter informações de credenciais.</summary>
        <returns>O <see cref="T:System.IAsyncResult" /> a usar para retorno de chamada após a conclusão do processamento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para implementar <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, execute as seguintes etapas no <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=nameWithType>:  
  
1.  Solicitar ao usuário o que forma você considerar adequado e obter um apropriado <xref:System.Net.NetworkCredential?displayProperty=nameWithType>.  
  
2.  Adicionar um objeto de parâmetro de canal personalizado à coleção retornada pela <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=nameWithType> método em de <xref:System.ServiceModel.IClientChannel> objeto com um parâmetro de tipo de <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=nameWithType>. Esse objeto de parâmetro de canal é usado pelo personalizado <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=nameWithType> para estabelecer os tokens de segurança para o canal.  
  
3.  Retorne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public void EndDisplayInitializationUI (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDisplayInitializationUI(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisplayInitializationUI (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisplayInitializationUI(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndDisplayInitializationUI : IAsyncResult -&gt; unit" Usage="iInteractiveChannelInitializer.EndDisplayInitializationUI result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">O <see cref="T:System.IAsyncResult" />.</param>
        <summary>Chamado quando o <see cref="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" /> é concluído.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>