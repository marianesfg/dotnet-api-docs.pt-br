<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72588091c87250a2b84de5c8bfcbde5c02928849" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37615898" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define o contrato implementado pelo inspetores de parâmetro personalizado que permite inspecionar ou modificar as informações antes e após as chamadas no cliente ou no serviço.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Dispatcher.IParameterInspector> interface para criar um Inspetor de parâmetro personalizado que pode exibir e modificar o conteúdo de uma chamada antes da chamada e depois da chamada em aplicativos cliente ou serviço.  
  
 Em chamadas de saída de um cliente, o Inspetor é invocado antes do conteúdo de solicitação é serializado e enviado para o serviço. O Inspetor de também é chamado depois que a resposta tiver sido desserializada, mas antes de serem expedidos os valores de retorno para o método de proxy.  
  
 Em chamadas de entrada para um serviço, o Inspetor é invocado depois parâmetros são desserializados, mas antes que elas sejam expedidas para a operação de serviço.  
  
 Use o <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> ou o <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> propriedades para adicionar um <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementação para a coleção de inspetores de uma determinada operação.  
  
 **Observação** desenvolvedores e administradores devem garantir que a interação com os outros <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementações é compreendido.  
  
   
  
## Examples  
 O seguinte exemplo de código mostra um <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementação que:  
  
-   Grava o nome da operação e o valor de retorno para o console depois que uma resposta foi desserializada pelo serviço ou uma solicitação foi serializada por um cliente.  
  
-   Grava o nome da operação no console após a desserialização de uma resposta no cliente ou depois que uma resposta foi serializada no serviço.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 O exemplo de código a seguir mostra como usar o <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> inserir <xref:System.ServiceModel.Dispatcher.IParameterInspector> objetos.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">O nome da operação invocada.</param>
        <param name="outputs">Quaisquer objetos de saída.</param>
        <param name="returnValue">O valor retornado da operação.</param>
        <param name="correlationState">Qualquer estado de correlação retornado do método <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> ou <see langword="null" />.</param>
        <summary>Chamado depois que as chamadas do cliente são retornadas e antes que as respostas do serviço são enviadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em chamadas de saída de um cliente, o Inspetor é invocado antes do conteúdo de solicitação é serializado e enviado para o serviço. O Inspetor de também é chamado depois que a resposta tiver sido desserializada, mas antes de serem expedidos os valores de retorno para o método de proxy.  
  
 Em chamadas de entrada para um serviço, o Inspetor é invocado depois parâmetros são desserializados, mas antes que elas sejam expedidas para a operação de serviço.  
  
   
  
## Examples  
 O seguinte exemplo de código mostra um <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementação que:  
  
-   Grava o nome da operação e o valor de retorno para o console depois que uma resposta foi desserializada pelo serviço ou uma solicitação foi serializada por um cliente.  
  
-   Grava o nome da operação no console após a desserialização de uma resposta no cliente ou depois que uma resposta foi serializada no serviço.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 O exemplo de código a seguir mostra como usar o <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> inserir <xref:System.ServiceModel.Dispatcher.IParameterInspector> objetos.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">O nome da operação.</param>
        <param name="inputs">Os objetos passados para o método pelo cliente.</param>
        <summary>Chamado antes de chamadas do cliente serem enviadas e depois de respostas de serviço serem retornadas.</summary>
        <returns>O estado de correlação que é retornado como o parâmetro <paramref name="correlationState" /> em <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Retorne <see langword="null" /> se você não pretende usar o estado de correlação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em chamadas de saída de um cliente, o Inspetor é invocado antes do conteúdo de solicitação é serializado e enviado para o serviço. O Inspetor de também é chamado depois que a resposta tiver sido desserializada, mas antes de serem expedidos os valores de retorno para o método de proxy.  
  
 Em chamadas de entrada para um serviço, o Inspetor é invocado depois que o conteúdo de solicitação é desserializado e enviado para a operação de serviço e antes do conteúdo de resposta é serializado e enviado ao cliente.  
  
   
  
## Examples  
 O seguinte exemplo de código mostra um <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementação que:  
  
-   Grava o nome da operação e o valor de retorno para o console depois que uma resposta foi desserializada pelo serviço ou uma solicitação foi serializada por um cliente.  
  
-   Grava o nome da operação no console após a desserialização de uma resposta no cliente ou depois que uma resposta é serializada no serviço.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 O exemplo de código a seguir mostra como usar o <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> inserir <xref:System.ServiceModel.Dispatcher.IParameterInspector> objetos.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>