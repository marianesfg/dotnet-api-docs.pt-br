<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71aac6188e9d86d42129e5847fd1f20037bf1552" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415603" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f80e7-101">Estenda a classe <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> para criar um manipulador de exceção para exceções sem tratamento que ocorrem dentro do tempo de execução do WCF (Windows Communication Foundation).</span>
      <span class="sxs-lookup">
        <span data-stu-id="f80e7-101">Extend the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f80e7-102">Estender o <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe e substituir o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> método para determinar se uma exceção deve encerrar o aplicativo.</span><span class="sxs-lookup"><span data-stu-id="f80e7-102">Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application.</span></span> <span data-ttu-id="f80e7-103">Em seguida, crie uma nova instância da personalizados <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe e atribuí-lo a estático <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> ou <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propriedade antes de criar clientes do WCF ou serviços.</span><span class="sxs-lookup"><span data-stu-id="f80e7-103">Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating WCF clients or services.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f80e7-104">O exemplo de código a seguir mostra uma implementação do <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe abstrata que substitui o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f80e7-104">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 <span data-ttu-id="f80e7-105">O exemplo de código a seguir mostra como habilitar personalizado `MyExceptionHandler` para exceções não tratadas que ocorrem dentro do tempo de execução do WCF.</span><span class="sxs-lookup"><span data-stu-id="f80e7-105">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f80e7-106">Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f80e7-107">Obtém uma instância de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> que trata todas as exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-107">Gets an instance of <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> that handles all exceptions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f80e7-108">Um <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto retorna <see langword="true" /> para todas as exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-108">An <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that returns <see langword="true" /> for all exceptions.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f80e7-109">Obtém ou define a implementação <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> atual para o domínio do aplicativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-109">Gets or sets the current <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f80e7-110">Atribuir um personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto que recebe sem tratamento de exceções que ocorrem em threads assíncrona do Windows Communication Foundation (WCF).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-110">Assign a custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur on asynchronous Windows Communication Foundation (WCF) threads.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f80e7-111">Por padrão, o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> é de propriedade `null`, e as exceções sem tratamento em threads WCF assíncronas encerrar o aplicativo.</span><span class="sxs-lookup"><span data-stu-id="f80e7-111">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous WCF threads terminate the application.</span></span>  <span data-ttu-id="f80e7-112">Defina essa propriedade como um <xref:System.ServiceModel.Dispatcher.ExceptionHandler> objeto para receber e reagir a essas exceções.</span><span class="sxs-lookup"><span data-stu-id="f80e7-112">Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="f80e7-113">Se uma exceção não tratada ocorre em um thread assíncrono do WCF e chega a esse manipulador, o estado do domínio do aplicativo pode ser comprometido.</span><span class="sxs-lookup"><span data-stu-id="f80e7-113">If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</span></span>  <span data-ttu-id="f80e7-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> não deve retornar `true` para essas exceções.</span><span class="sxs-lookup"><span data-stu-id="f80e7-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="f80e7-115">A exceção ocorrida dentro do tempo de execução do WCF (Windows Communication Foundation) e que pode encerrar o aplicativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-115">The exception the occurred within the Windows Communication Foundation (WCF) runtime and which may terminate the application.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f80e7-116">Quando substituído em uma classe derivada, retorna <see langword="true" /> se a exceção tiver sido tratada ou <see langword="false" /> se a exceção precisar ser gerada novamente e o aplicativo encerrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-116">When overridden in a derived class, returns <see langword="true" /> if the exception has been handled, or <see langword="false" /> if the exception should be rethrown and the application terminated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f80e7-117">
            <see langword="true" /> se a exceção tiver sido tratada; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-117">
              <see langword="true" /> if the exception has been handled; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f80e7-118">O <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> propriedade retorna `true` se a exceção foi tratada.</span><span class="sxs-lookup"><span data-stu-id="f80e7-118">The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled.</span></span> <span data-ttu-id="f80e7-119">Se ele retorna `false` ou lança uma exceção diferente, a exceção original é lançada novamente.</span><span class="sxs-lookup"><span data-stu-id="f80e7-119">If it returns `false` or throws a different exception, the original exception is rethrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f80e7-120">O exemplo de código a seguir mostra uma implementação do <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe abstrata que substitui o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f80e7-120">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
  
  
 <span data-ttu-id="f80e7-121">O exemplo de código a seguir mostra como habilitar personalizado `MyExceptionHandler` para exceções não tratadas que ocorrem dentro do tempo de execução do WCF.</span><span class="sxs-lookup"><span data-stu-id="f80e7-121">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f80e7-122">Obtém ou define a implementação <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> de transporte atual para o domínio do aplicativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-122">Gets or sets the current transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f80e7-123">Um personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto que recebe sem tratamento de exceções que ocorrem dentro de transportes global do Windows Communication Foundation (WCF).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f80e7-123">A custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur within the global Windows Communication Foundation (WCF) transports.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f80e7-124">Por padrão, o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propriedade é definida como o valor de <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causando exceções sem tratamento de transportes WCF para ser ignorada.</span><span class="sxs-lookup"><span data-stu-id="f80e7-124">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within WCF transports to be ignored.</span></span>  <span data-ttu-id="f80e7-125">Defina essa propriedade como uma instância de <xref:System.ServiceModel.Dispatcher.ExceptionHandler> para receber e reagir a essas exceções.</span><span class="sxs-lookup"><span data-stu-id="f80e7-125">Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="f80e7-126">Se uma exceção não tratada ocorre dentro de um transporte WCF global e chega a esse manipulador, há uma possibilidade de que o estado do domínio do aplicativo seja comprometido.</span><span class="sxs-lookup"><span data-stu-id="f80e7-126">If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</span></span> <span data-ttu-id="f80e7-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> pode retornar `false` para essas exceções fazer com que o aplicativo a ser encerrada.</span><span class="sxs-lookup"><span data-stu-id="f80e7-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>