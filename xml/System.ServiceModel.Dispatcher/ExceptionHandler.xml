<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="296f8c496c252c20e3432c79da30eab9b4c0925e" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316990" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Estenda a classe <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> para criar um manipulador de exceção para exceções sem tratamento que ocorrem dentro do tempo de execução do WCF (Windows Communication Foundation).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estender o <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe e substituir o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> método para determinar se uma exceção deve encerrar o aplicativo. Em seguida, crie uma nova instância da personalizados <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe e atribuí-lo a estático <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> ou <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propriedade antes de criar clientes do WCF ou serviços.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação do <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe abstrata que substitui o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> método.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 O exemplo de código a seguir mostra como habilitar personalizado `MyExceptionHandler` para exceções não tratadas que ocorrem dentro do tempo de execução do WCF.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma instância de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> que trata todas as exceções.</summary>
        <value>Um <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto retorna <see langword="true" /> para todas as exceções.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a implementação <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> atual para o domínio do aplicativo.</summary>
        <value>Atribuir um personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto que recebe sem tratamento de exceções que ocorrem em threads assíncrona do Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> é de propriedade `null`, e as exceções sem tratamento em threads WCF assíncronas encerrar o aplicativo.  Defina essa propriedade como um <xref:System.ServiceModel.Dispatcher.ExceptionHandler> objeto para receber e reagir a essas exceções.  
  
 Se uma exceção não tratada ocorre em um thread assíncrono do WCF e chega a esse manipulador, o estado do domínio do aplicativo pode ser comprometido.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> não deve retornar `true` para essas exceções.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">A exceção ocorrida dentro do tempo de execução do WCF (Windows Communication Foundation) e que pode encerrar o aplicativo.</param>
        <summary>Quando substituído em uma classe derivada, retorna <see langword="true" /> se a exceção tiver sido tratada ou <see langword="false" /> se a exceção precisar ser gerada novamente e o aplicativo encerrado.</summary>
        <returns>
          <see langword="true" /> se a exceção tiver sido tratada; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> propriedade retorna `true` se a exceção foi tratada. Se ele retorna `false` ou lança uma exceção diferente, a exceção original é lançada novamente.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação do <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classe abstrata que substitui o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> método.  
  
  
  
 O exemplo de código a seguir mostra como habilitar personalizado `MyExceptionHandler` para exceções não tratadas que ocorrem dentro do tempo de execução do WCF.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a implementação <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> de transporte atual para o domínio do aplicativo.</summary>
        <value>Um personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto que recebe sem tratamento de exceções que ocorrem dentro de transportes global do Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propriedade é definida como o valor de <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causando exceções sem tratamento de transportes WCF para ser ignorada.  Defina essa propriedade como uma instância de <xref:System.ServiceModel.Dispatcher.ExceptionHandler> para receber e reagir a essas exceções.  
  
 Se uma exceção não tratada ocorre dentro de um transporte WCF global e chega a esse manipulador, há uma possibilidade de que o estado do domínio do aplicativo seja comprometido. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> pode retornar `false` para essas exceções fazer com que o aplicativo a ser encerrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>