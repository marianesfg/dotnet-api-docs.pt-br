<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6f3d187b0cc507ef2ad15025f3f7fe94d0979b30" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36662206" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <TypeSignature Language="F#" Value="type WindowsFormsApplicationBase = class&#xA;    inherit ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece propriedades, métodos e eventos relacionados ao aplicativo atual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As propriedades expostas pelo `My.Application` retornar dados que está associados a apenas o aplicativo atual ou a DLL do objeto. Nenhuma informação em nível de sistema pode ser alterada com `My.Application`.  
  
 O objeto `My.Application` consiste nas seguintes classes:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> fornece membros disponíveis em todos os projetos.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> fornece membros que estão disponíveis em aplicativos de formulários do Windows.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> fornece membros que estão disponíveis em aplicativos de console.  
  
   
  
## Examples  
 Este exemplo usa um loop para iterar por meio de formulários abertos do aplicativo, seleciona os formulários que podem ser acessados diretamente pelo thread atual e exibe seus títulos em um <xref:System.Windows.Forms.ListBox> controle. Para obter informações sobre como acessar os formulários abertos, consulte <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Este exemplo requer que seu aplicativo do Windows Forms tenha um formulário denominado `Form1` que contém uma caixa de listagem chamada `ListBox1`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.AuthenticationMode -&gt; Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" Usage="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase authenticationMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />. Especifica o modo de autenticação do aplicativo.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> com o modo de autenticação especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `authenticationMode` parâmetro é o <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> o valor de enumeração, então, este construtor tenta definir o thread atual <xref:System.Threading.Thread.CurrentPrincipal%2A> propriedade para o <xref:System.Security.Principal.WindowsPrincipal> para o usuário atual.  
  
 Se o `authenticationMode` parâmetro é o <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> o valor de enumeração, então, este construtor deixa o thread atual <xref:System.Threading.Thread.CurrentPrincipal%2A> propriedade inalterada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : System.Windows.Forms.ApplicationContext" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Windows.Forms.ApplicationContext" /> para o thread atual de um aplicativo Windows Forms.</summary>
        <value>Essa propriedade retorna o <see cref="T:System.Windows.Forms.ApplicationContext" /> objeto para o thread atual. Esse objeto contém informações contextuais sobre o thread.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este é um membro avançado; ele não aparece no IntelliSense, a menos que você clique no **todas as** guia.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberSignature Language="F#" Value="member this.DoEvents : unit -&gt; unit" Usage="windowsFormsApplicationBase.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Processa todas as mensagens do Windows atualmente na fila de mensagens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.DoEvents` método permite que seu aplicativo manipule outros eventos que podem ser gerados enquanto seu código é executado. O `My.Application.DoEvents` método tem o mesmo comportamento que o <xref:System.Windows.Forms.Application.DoEvents%2A> método.  
  
 Quando você executa um aplicativo Windows Forms, ele cria um novo formulário, que então aguarda eventos a serem manipulados. Cada vez que o formulário manipula um evento, como clicar em um botão, ele processa todo o código associado com esse evento. Todos os outros eventos aguardam na fila. Enquanto seu código manipula o evento, seu aplicativo não responde. Por exemplo, a janela não redesenhar se outra janela é arrastada na parte superior.  
  
 Se você chamar `My.Application.DoEvents` em seu código, seu aplicativo pode manipular os outros eventos. Por exemplo, se seu código adiciona dados a um <xref:System.Windows.Forms.ListBox> em um loop e depois de cada etapa do loop ele chama `My.Application.DoEvents`, seu formulário redesenha quando outra janela é arrastada sobre ele. Se você remover `My.Application.DoEvents` do seu código, seu formulário não será redesenhado até que o manipulador de eventos de clique do botão é terminado em execução.  
  
 Normalmente, você deve usar esse método em um loop para processar mensagens.  
  
> [!NOTE]
>  O `My.Application.DoEvents` método não processa os eventos exatamente da mesma maneira como faz o formulário. Use multithreading para tornar o formulário diretamente manipular os eventos. Para obter mais informações, consulte [aplicativos multithread](http://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  Se um método que manipula um evento de interface do usuário chama o `My.Application.DoEvents` método, o método pode ser inserido novamente antes de terminar. Isso pode acontecer porque o `My.Application.DoEvents` método processa mensagens do Windows, e mensagens do Windows podem gerar eventos.  
  
 A tabela a seguir lista um exemplo de tarefa envolvendo o `My.Application.DoEvents` método.  
  
|Para|Consulte|  
|-|-|  
|Permitir que um formulário responder a interface do usuário de entrada enquanto ocupado|[Instruções passo a passo: tratando eventos](~/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.DoEvents` método para permitir que a interface do usuário para `TextBox1` para atualizar.  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 Esse código deve estar em um formulário que tenha um `TextBox1` componente com um `Text` propriedade.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controla as permissões relacionadas às interfaces de usuário e a área de transferência. Enumeração associada: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualStyles : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se este aplicativo usará os estilos do Windows XP para janelas, controles e assim por diante.</summary>
        <value>Um <see cref="T:System.Boolean" /> valor que indica se este aplicativo usará os estilos do Windows XP para windows, controles e assim por diante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> método usa essa propriedade para determinar se a chamada <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.HideSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.HideSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oculta a tela inicial do aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> classe cria a tela inicial em um thread separado. Esse método realiza marshaling de chamada do thread correto.  
  
 Este método é chamado quando o formulário principal é feito carregar.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleInstance : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se este é um aplicativo de instância única.</summary>
        <value>Um valor <see cref="T:System.Boolean" /> que indica se este é um aplicativo de instância única.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> método usa essa propriedade para determinar se este é um aplicativo de instância única.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainForm : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o formulário principal para esse aplicativo.</summary>
        <value>Obtém ou define o formulário principal para esse aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `MainForm` propriedade para obter ou definir o <xref:System.Windows.Forms.Form> objeto que usa o modelo de inicialização/desligamento do aplicativo do Visual Basic como formulário principal do aplicativo.  
  
 Essa propriedade oferece suporte ao modelo de inicialização/desligamento do aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 As alterações a esta propriedade não são mantidas quando o aplicativo for fechado. Para alterar o formulário principal permanentemente, você deve alterar a configuração no **Project Designer**.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSplashScreenDisplayTime : int with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina a duração mínima de tempo, em milissegundos, para o qual a tela inicial é exibida.</summary>
        <value>
          <see langword="Integer" />. A duração mínima de tempo, em milissegundos, para o qual a tela inicial é exibida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.MinimumSplashScreenDisplayTime` propriedade permite que você especifique o comprimento mínimo de tempo desejado na tela do aplicativo inicial a ser exibida. Se o formulário principal terminar a inicialização em menos tempo do que o que é especificado por essa propriedade, a tela inicial permanecerá até que a quantidade solicitada de passar do tempo, em que o formulário principal é exibido. Se seu aplicativo levar mais tempo para iniciar, a tela inicial é fechada depois que o formulário principal se torna ativo.  
  
 Quando você adiciona uma tela inicial para seu aplicativo usando o Designer de projeto, ele define o `My.Application.MinimumSplashScreenDisplayTime` propriedade como 2000, dando um tempo mínimo de exibição de dois segundos.  
  
 Essa propriedade oferece suporte ao modelo de aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Você deve definir o `My.Application.MinimumSplashScreenDisplayTime` propriedade em um método que substitui o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> ou <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> método. Código que substitui os métodos de <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> classe deve ser inserida no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para substituir os membros|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.<br /><br />Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo demonstra como definir a `My.Application.MinimumSplashScreenDisplayTime` propriedade substituindo o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> propriedade.  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 Este exemplo requer que o projeto tenha uma tela inicial.  
  
 Você deve inserir esse código na janela do Editor de códigos para eventos de aplicativo. Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a disponibilidade de rede é alterada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um aplicativo gera o `NetworkAvailabilityChanged` eventos toda vez que a disponibilidade da rede é alterada. Você pode usar o <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> propriedade o `e` para obter o novo estado de conexão de rede. Para obter o estado atual da conexão de rede, use o <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> propriedade.  
  
 Esse evento é gerado no thread de principal do aplicativo com os outros eventos de interface do usuário. Isso permite que o manipulador de eventos acessar diretamente a interface do usuário do aplicativo. No entanto, se o aplicativo estiver ocupado tratando outro evento da interface do usuário quando esse evento é gerado, esse evento não pode ser processado até que o manipulador de eventos termine ou chame o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> método.  
  
 O <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> evento fornece a mesma funcionalidade que este evento mas está disponível para todos os tipos de aplicativo.  
  
 O código para o `NetworkAvailabilityChanged` manipulador de eventos é armazenado no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para eventos de aplicativo|  
|1.  Tenha um projeto selecionado no **Gerenciador de soluções.** Clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.<br /><br />Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
> [!NOTE]
>  Muitos hubs de rede fornecem uma conexão de rede, mesmo se o hub for desconectado de uma rede maior. Consequentemente, para conexões com fio, esse evento indica alteração na conexão entre o computador e um hub.  
  
> [!NOTE]
>  O `NetworkAvailabilityChanged` evento não é gerado por aplicativos quando eles são executados no Windows 95 e Windows 98, ou quando eles são executados por um não administrador no Windows 2000. Se seu aplicativo pode ser executado nos sistemas operacionais, use o <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> property para verificar a disponibilidade da rede.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo chama o `SetConnectionStatus` método do padrão `Form1` classe quando altera a disponibilidade da rede.  
  
 Você deve inserir o código na janela do Editor de códigos para eventos de aplicativo. Para acessar essa janela, siga as instruções da seção de comentários deste tópico.  
  
 O projeto deve ter um formulário denominado `Form1`. Ele deve ter um método chamado `SetConnectionStatus` que leva um `Boolean` parâmetro.  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateMainForm : unit -&gt; unit&#xA;override this.OnCreateMainForm : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateMainForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, permite que um designer emite um código que configura a tela inicial e o formulário principal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, esse método não fará nada. No entanto, quando você seleciona um formulário principal para o seu aplicativo no Visual Basic **Project Designer**, o designer substitui esse método com um método que define o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> propriedade para uma nova instância do formulário principal.  
  
 Este método é chamado pelo <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateSplashScreen : unit -&gt; unit&#xA;override this.OnCreateSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, permite que um designer emita o código que inicializa a tela inicial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, esse método não fará nada. Se você selecionar uma tela inicial para seu aplicativo no Visual Basic **Project Designer**, o designer substitui o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> método com um método que define o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> propriedade para uma nova instância do formulário da tela inicial .  
  
 Este método é chamado pelo <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool&#xA;override this.OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool" Usage="windowsFormsApplicationBase.OnInitialize commandLineArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">Um <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de <see langword="String" /> que contém os argumentos de linha de comando como cadeias de caracteres para o aplicativo atual.</param>
        <summary>Define os estilos visuais, estilos de exibição de texto e a entidade de segurança atual para o thread do aplicativo principal (se o aplicativo usa autenticação do Windows) e inicializa a tela inicial, se definida.</summary>
        <returns>Um <see cref="T:System.Boolean" /> indicando se a inicialização do aplicativo deve continuar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, esse método define os estilos visuais, estilos de exibição de texto e a entidade de segurança atual para o segmento de aplicativo principal (se o aplicativo usa a autenticação do Windows) e chama `ShowSplashScreen` se nem `/nosplash` nem `-nosplash` é usado como um argumento de linha de comando.  
  
 Este método chama os métodos a seguir:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberSignature Language="F#" Value="abstract member OnRun : unit -&gt; unit&#xA;override this.OnRun : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnRun " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornece o ponto de partida para quando o aplicativo principal está pronto para começar a ser executado, após a inicialização ser feita.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, antes de entrar no loop de mensagem do Windows Forms, este método chama o `OnCreateMainForm` (para criar o formulário principal do aplicativo) e `HideSplashScreen` (para fechar a tela inicial) métodos:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>. Fornece uma maneira para um designer emitir código que inicializa o formulário principal.  
  
     Por padrão, esse método não fará nada. No entanto, quando você seleciona um formulário principal para o seu aplicativo no Visual Basic **Project Designer**, o designer substitui o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> método com um método que define o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> propriedade para uma nova instância do formulário principal.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A>. Se o aplicativo tem uma tela inicial definida e estiver aberto, este método fecha a tela inicial.  
  
     Por padrão, esse método fecha a tela inicial.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, permite que o código seja executado quando o aplicativo é encerrado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não é executado se ocorrer uma exceção sem tratamento no aplicativo principal.  
  
 Por padrão, esse método dispara o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool&#xA;override this.OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnStartup eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />. Contém os argumentos de linha de comando do aplicativo e indica se a inicialização do aplicativo deve ser cancelada.</param>
        <summary>Quando substituído em uma classe derivada, permite que o código seja executado quando o aplicativo é iniciado.</summary>
        <returns>Um <see cref="T:System.Boolean" /> que indica se o aplicativo deve continuar sendo inicializado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, esse método dispara o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> evento. O manipulador de eventos pode definir o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriedade do argumento do evento. Se <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> é `True`, esse método retorna `False` para cancelar a inicialização do aplicativo. Do contrário, esse método retorna `True`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit&#xA;override this.OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit" Usage="windowsFormsApplicationBase.OnStartupNextInstance eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />. Contém os argumentos de linha de comando da instância do aplicativo subsequente e indica se a primeira instância do aplicativo deve ser colocada em primeiro plano ao sair do manipulador de exceção.</param>
        <summary>Quando substituído em uma classe derivada, permite que o código seja executado quando uma instância subsequente de um aplicativo de instância única é iniciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, esse método dispara o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> evento. O manipulador de eventos pode definir o <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> propriedade do argumento do evento. Se <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> é `True`, o método ativa o formulário principal. Caso contrário, o formulário principal será deixado no estado atual.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool&#xA;override this.OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnUnhandledException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />.</param>
        <summary>Quando substituído em uma classe derivada, permite que o código seja executado quando uma exceção sem tratamento ocorre no aplicativo.</summary>
        <returns>Um <see cref="T:System.Boolean" /> que indica se o evento <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" /> foi gerado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, esse método dispara o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> evento desde que um depurador não está anexado e o usuário está tratando o `UnhandledException` evento. O manipulador de eventos pode definir o <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> propriedade. Se <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> é `False`, ou se o evento não é tratado, o aplicativo será fechado após retornar do manipulador de exceção. Caso contrário, o controle do aplicativo é retornado para o loop de mensagem do Windows Forms.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de todos os formulários abertos do aplicativo.</summary>
        <value>Um objeto <see cref="T:System.Windows.Forms.FormCollection" /> que contém todos os formulários abertos do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.OpenForms` propriedade obtém uma coleção de todos os formulários do aplicativo aberto. O comportamento é idêntico de <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType> propriedade.  
  
> [!NOTE]
>  O `My.Application.OpenForms` propriedade retorna todos os formulários abertos, independentemente de qual thread abriu. Você deve verificar o <xref:System.Windows.Forms.Control.InvokeRequired%2A> propriedade de cada formulário antes de acessá-lo; caso contrário, ela pode acionar um <xref:System.InvalidOperationException> exceção.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo faz um loop sobre formulários abertos do aplicativo, seleciona aqueles diretamente acessíveis pelo thread atual e exibe seus títulos em um <xref:System.Windows.Forms.ListBox> controle. Este exemplo requer que seu aplicativo do Windows Forms tenha um formulário denominado `Form1` que contém uma caixa de listagem chamada `ListBox1`.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Este exemplo faz um loop sobre formulários abertos do aplicativo e exibe seus títulos em um <xref:System.Windows.Forms.ListBox> controle.  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Controla as permissões que estão relacionadas às interfaces de usuário e a área de transferência. Enumeração associada: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="member this.Run : string[] -&gt; unit" Usage="windowsFormsApplicationBase.Run commandLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">Matriz do tipo <see langword="String" />. A linha de comando do <see langword="Sub Main" />.</param>
        <summary>Configura e inicia o modelo de Aplicativo do Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.Run` método oferece suporte para o modelo de aplicativo do Visual Basic. Esse método deve ser chamado apenas a partir do aplicativo `Sub Main`. Por padrão, o `Sub Main` de formulários do Windows o aplicativo chama esse método. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controla a capacidade de acessar todas as variáveis de ambiente. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla a capacidade de acessar arquivos e pastas. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controla a capacidade de acessar variáveis de Registro. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controla as permissões relacionadas às interfaces de usuário e a área de transferência. Enumeração associada: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Controla os direitos de acesso a recursos de Internet HTTP. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Controla os direitos para estabelecer ou aceitar conexões em um endereço de transporte. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Controla o acesso a um componente do contador de desempenho do Windows NT. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveMySettingsOnExit : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se o aplicativo salva as configurações de usuário na saída.</summary>
        <value>
          <see langword="Boolean" />. <see langword="True" /> indica que o aplicativo salva as configurações de usuário na saída. Caso contrário, as configurações não são salvas implicitamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `SaveMySettingsOnExit` propriedade permite que o usuário altere como o aplicativo salva as configurações, em tempo de execução. Você pode salvar explicitamente as alterações de configuração usando o <xref:System.Configuration.ApplicationSettingsBase.Save%2A> método o `My.Settings` objeto. Para obter mais informações sobre como alterar e salvar as configurações, consulte [propriedades do aplicativo](http://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254).  
  
 As alterações a esta propriedade não são mantidas quando o aplicativo for fechado. Para alterar o `SaveMySettingsOnExit` propriedade permanentemente, você deve alterar a configuração no **Project Designer**:  
  
| |  
|-|  
|Para alterar a configuração no Designer de projeto|  
|1.  Selecione um projeto no **Gerenciador de Soluções**. Clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Selecione **Salvar My. Settings no desligamento**.|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo tem duas partes.  
  
-   O `InitializeSaveMySettingsOnExit` sub-rotina, que inicializa o estado selecionado de um <xref:System.Windows.Forms.CheckBox> controle para o valor atual do `SaveMySettingsOnExit` propriedade.  
  
-   O `SaveMySettingsOnExit_CheckedChanged` sub-rotina, que lida com alterações em um <xref:System.Windows.Forms.CheckBox> controle para atualizar o `My.Application.SaveMySettingsOnExit` propriedade.  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 Para esse exemplo funcione, seu aplicativo deve ter uma <xref:System.Windows.Forms.CheckBox> controle chamado `SaveMySettingsOnExit`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.ShowSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.ShowSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se o aplicativo tem uma tela inicial definida e, em caso afirmativo, exibe-a.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, este método chama `OnCreateSplashScreen` em uma forma thread-safe.  
  
 O <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> método contém o código que exibe a tela de tela para pelo menos o número de milissegundos especificado pelo <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> propriedade. Para usar essa funcionalidade, você deve definir o `My.Application.MinimumSplashScreenDisplayTime` propriedade em um método que substitui o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> ou <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> método, ou adicionar a tela inicial para seu aplicativo usando o **Project Designer**. Para obter mais informações, consulte <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>.  
  
 Este método é chamado pelo <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberSignature Language="F#" Value="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " Usage="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o aplicativo é desligado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um aplicativo gera o `Shutdown` evento antes de sair. Isso permite que você controle como o aplicativo fecha seus recursos. Este evento é parte do modelo de aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 O código para o `Shutdown` manipulador de eventos é armazenado no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para eventos de aplicativo|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.<br /><br />Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo registra mensagens quando o aplicativo é desligado.  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 Você deve inserir o código na janela do Editor de códigos para eventos de aplicativo. Para acessar essa janela, siga as instruções da seção de comentários deste tópico. Para obter mais informações, consulte [como: Log de mensagens quando o aplicativo for iniciado ou encerrado para baixo](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownStyle : Microsoft.VisualBasic.ApplicationServices.ShutdownMode with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina o que acontece quando o formulário principal do aplicativo é fechado.</summary>
        <value>Um <see cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" /> valor de enumeração que indica o que o aplicativo deve fazer quando fecha o formulário principal.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> método verifica o valor dessa propriedade para determinar se o aplicativo deve fechar quando o formulário principal é fechado, ou se abrir outro formulário deve ser promovido como o novo formulário principal.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a tela inicial deste aplicativo.</summary>
        <value>Um objeto <see cref="T:System.Windows.Forms.Form" /> que o aplicativo utiliza como a tela inicial.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.SplashScreen` propriedade permite que você obtenha ou defina o <xref:System.Windows.Forms.Form> objeto que o aplicativo usa como a tela inicial, o primeiro formulário gráfico que é exibido enquanto um aplicativo está sendo iniciado.  
  
 Essa propriedade oferece suporte ao modelo de aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 As alterações a esta propriedade não são mantidas quando o aplicativo for fechado. Para alterar a propriedade permanentemente, você deve alterar a configuração no **Project Designer**.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.SplashScreen` propriedade e o `My.Application.Startup` evento para atualizar a tela inicial com informações de status que o aplicativo for iniciado.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Este exemplo requer que o projeto tenha uma tela inicial chamado `SplashScreen1`. A tela inicial precisa ter uma propriedade chamada `Status` que atualiza sua interface de usuário.  
  
 Você deve inserir esse código na janela do Editor de códigos para eventos de aplicativo. Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O mesmo valor é atribuído a essa propriedade e à propriedade <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " Usage="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o aplicativo é iniciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um aplicativo normal (não-única instância) gera o `Startup` evento sempre que for iniciado. Um aplicativo de instância única gera o `Startup` eventos quando ele é iniciado somente se o aplicativo não ainda estiver ativa; caso contrário, ele gera o `StartupNextInstance` evento. Para obter mais informações, consulte <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>.  
  
 Este evento é parte do modelo de aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Você pode usar o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriedade o `e` parâmetro para controlar o carregamento de formulário de inicialização do aplicativo. Quando o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> está definida como `True`, o formulário de inicialização não é iniciado. Nesse caso, o código deve chamar um caminho de código de inicialização alternativa.  
  
 Você pode usar o <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> propriedade o `e` parâmetro ou <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> propriedade para acessar argumentos de linha de comando do aplicativo.  
  
 O código para o `Startup` manipulador de eventos é armazenado no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para eventos de aplicativo|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.<br /><br /> Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.SplashScreen` propriedade e o `My.Application.Startup` evento para atualizar a tela inicial com informações de status que o aplicativo for iniciado.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Este exemplo requer que o projeto tenha uma tela inicial chamado `SplashScreen1`. A tela inicial precisa ter propriedade chamada `Status` que atualiza sua interface de usuário.  
  
 Você deve inserir o código na janela do Editor de códigos para eventos de aplicativo. Para acessar essa janela, siga as instruções da seção de comentários deste tópico. Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controla a capacidade de adicionar um manipulador de eventos para esse evento. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberSignature Language="F#" Value="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " Usage="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre durante a inicialização de um aplicativo de instância simples quando o aplicativo já está ativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um aplicativo de instância única gera o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> eventos quando você tenta reiniciar o aplicativo quando ele já está ativo. Quando um aplicativo de instância única é iniciado pela primeira vez, ele gera o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> evento. Para obter mais informações, consulte <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>.  
  
 Este evento é parte do modelo de aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Esse evento é gerado no thread de principal do aplicativo com os outros eventos de interface do usuário. Isso permite que o manipulador de eventos acessar diretamente a interface do usuário do aplicativo. No entanto, se o aplicativo estiver ocupado tratando outro evento da interface do usuário quando esse evento é gerado, esse evento não pode ser processado até que o manipulador de eventos termine ou chame o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> método.  
  
> [!NOTE]
>  O `StartupNextInstance` é gerado apenas em aplicativos de única instância. Para habilitar o comportamento de instância única para o seu aplicativo, você deve verificar o **tornar o aplicativo de instância única** caixa de seleção no Designer de projeto.  
  
| |  
|-|  
|Para tornar uma instância única do aplicativo|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Selecione o **tornar o aplicativo de instância única** caixa de seleção.|  
  
 Você deve usar o <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> propriedade o `e` parâmetro para acessar os argumentos para tentativas subsequentes para iniciar um aplicativo de instância única. O <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> propriedade fornece os argumentos usados para iniciar a primeira instância de um aplicativo de instância única.  
  
 O código para o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> manipulador de eventos é armazenado no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para eventos de aplicativo|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.<br /><br />Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
 A tabela a seguir lista exemplos de tarefas que envolvem o `My.Application.StartupNextInstance` evento.  
  
|Para|Consulte|  
|-|-|  
|Verifique os argumentos de linha de comando da primeira instância do aplicativo|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|Sim|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `e` parâmetro o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> manipulador de eventos para examinar os argumentos de linha de comando do aplicativo. Se for encontrado um argumento que começa com `/input=`, o resto desse argumento é exibido.  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 Você deve inserir o código na janela do Editor de códigos para eventos de aplicativo. Para acessar essa janela, siga as instruções da seção de comentários deste tópico. Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " Usage="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o aplicativo apresenta uma exceção sem tratamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um aplicativo gera o `UnhandledException` eventos quando ele encontra uma exceção sem tratamento. Este evento é parte do modelo de aplicativo do Visual Basic. Para obter mais informações, consulte [visão geral do modelo de aplicativo do Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Você pode usar o <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> propriedade o `e` parâmetro para acessar a exceção sem tratamento que causou este evento.  
  
 Você pode usar o <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> propriedade o `e` parâmetro para controlar se o aplicativo será encerrado. Por padrão, <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> é `True`. Portanto, o aplicativo é encerrado depois de concluir o `UnhandledException` manipulador de eventos. Você pode definir o valor `False` no `UnhandledException` manipulador de eventos para manter o aplicativo em execução e retornar a um estado de espera.  
  
 O código para o `UnhandledException` manipulador de eventos é armazenado no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para eventos de aplicativo|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.|  
  
 Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
> [!NOTE]
>  O compilador do Visual Basic impede que os aplicativos que são criados para depuração de gerar este evento, para permitir que um depurador manipular as exceções não tratadas. Isso significa que, se você estiver testando seu aplicativo executando-o sob o depurador do Visual Studio Integrated Development Environment, seu `UnhandledException` manipulador de eventos não será chamado. Para obter mais informações sobre a criação de aplicativos para depuração, consulte [/debug (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/debug.md).  
  
## <a name="tasks"></a>Tarefas  
 A tabela a seguir lista exemplos de tarefas que envolvem o `My.Application.UnhandledException` evento.  
  
|Para|Consulte|  
|-|-|  
|Registrar exceções não tratadas|[Como registrar em log as exceções](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|Não|  
|Aplicativo do Console|Não|  
|Biblioteca de Controle Windows Forms|Não|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|Não|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.UnhandledException` exceções sem tratamento de evento para efetuar qualquer.  
  
 Você deve inserir o código na janela do Editor de códigos para eventos de aplicativo. Para acessar essa janela, siga o procedimento encontrado na seção de comentários deste tópico. Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 Porque o `UnhandledException` evento não é gerado quando um depurador é anexado ao aplicativo, você precisa executar esse exemplo fora do Visual Studio ambiente de desenvolvimento integrado.  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controla a capacidade de adicionar um manipulador de eventos para esse evento. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando substituída em uma classe derivada, essa propriedade permite que um designer especifique o mecanismo de renderização de texto padrão para os formulários do aplicativo.</summary>
        <value>
          <see langword="Boolean" />. Um valor de <see langword="False" /> indica que o aplicativo deve usar o mecanismo de renderização de texto padrão para [! INCLUDE[vbprvblong](~/Includes/vbprvblong-MD.MD)]. Um valor de <see langword="True" /> indica que o aplicativo deve usar o mecanismo de renderização de texto para o Visual Basic .NET 2002 e Visual Basic .NET 2003.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, essa propriedade retorna `False` para indicar que o texto GDI renderização mecanismo para [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] ser usadas para formulários do aplicativo. No entanto, você pode substituir essa propriedade para retornar `True` e especifique que os formulários do aplicativo usam o GDI+ texto mecanismo de renderização, que é usado no Visual Basic .NET 2002 e Visual Basic .NET 2003.  
  
 Essa propriedade é chamada pelo <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> construtor.  
  
 Código que substitui os métodos de <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> classe deve ser inserida no arquivo Project, que está oculto por padrão.  
  
| |  
|-|  
|Para acessar a janela do Editor de códigos para substituir os membros|  
|1.  Com um projeto selecionado no **Solution Explorer**, clique em **propriedades** no **projeto** menu.<br />2.  Clique na guia **Aplicativo**.<br />3.  Clique no botão **Exibir Eventos de Aplicativo** para abrir o Editor de Códigos.<br /><br />Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
   
  
## Examples  
 Este exemplo demonstra como configurar o mecanismo de renderização de texto GDI+ como mecanismo de renderização padrão do aplicativo, substituindo o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> propriedade.  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 Você deve inserir esse código na janela do Editor de códigos para eventos de aplicativo. Para obter mais informações, consulte [Página de aplicativo, Designer de Projeto (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>