<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6dc2069fd331c8859f34ac140c34608e2f713b1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39832615" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece propriedades, métodos e eventos relacionados ao aplicativo atual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As propriedades expostas pelo `My.Application` retornar dados que está associados apenas com o aplicativo atual ou a DLL do objeto. Nenhuma informação em nível de sistema pode ser alterada com `My.Application`.  
  
 O objeto `My.Application` consiste nas seguintes classes:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> fornece membros disponíveis em todos os projetos.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> fornece membros que estão disponíveis em aplicativos de formulários do Windows.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> fornece membros que estão disponíveis em aplicativos de console.  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.GetEnvironmentVariable` método para obter e exibir o valor da variável de ambiente PATH, se esse valor está disponível. Caso contrário, ele exibe uma mensagem que indica que a variável de ambiente PATH não existe.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />. Nome da cultura como uma cadeia de caracteres. Para obter uma lista de nomes possíveis, consulte <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Altera a cultura usada pelo thread atual para manipulação e formatação da cadeia de caracteres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.ChangeCulture` método altera o thread atual <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. <xref:System.Threading.Thread.CurrentCulture%2A> determina os formatos padrão para datas, horas, moeda, números, ordenação de texto, comparações de cadeia de caracteres e uso de maiusculas e minúsculas para todos os cálculos nesse thread.  
  
 Para recuperar a cultura atual, você pode usar o <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A> propriedade ou o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade.  
  
 O <xref:System.Threading.Thread.CurrentCulture%2A> configuração é diferente de uma configuração de idioma. Ele contém apenas dados relacionados às configurações padrão para uma região geográfica. Portanto, o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade só pode ser definida para uma cultura específica ou a <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
 Use o `My.Application.ChangeUICulture` método para alterar a cultura que o thread atual usa para recuperar recursos específicos de cultura.  
  
> [!IMPORTANT]
>  O `My.Application.ChangeCulture` método exige um <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> definido. Manipular threads é perigoso devido ao estado de segurança associado a threads. Portanto, essa permissão deve ser dada somente conforme o necessário para código confiável. Você não pode alterar a cultura do thread no código de confiança parcial.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de Controle Windows Forms|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo demonstra como mudar a cultura altera a representação de cadeia de caracteres de datas.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> é <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> não é um nome de cultura válido.</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />. Nome da cultura como uma cadeia de caracteres. Para obter uma lista de nomes possíveis, consulte <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Altera a cultura que o thread atual usa para recuperar recursos específicos de cultura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.ChangeUICulture` método altera o thread atual <xref:System.Threading.Thread.CurrentUICulture%2A> propriedade. O <xref:System.Threading.Thread.CurrentUICulture%2A> propriedade determina a cultura usada pelo Gerenciador de recursos e o `My.Resources` do objeto; ele usa essas informações para pesquisar recursos específicos de cultura em tempo de execução.  
  
 Para recuperar a cultura de interface do usuário atual, você pode usar o <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A> propriedade ou o <xref:System.Threading.Thread.CurrentUICulture%2A> propriedade.  
  
 Use o `My.Application.ChangeCulture` método para alterar a cultura que o thread atual usa para manipulação de cadeia de caracteres e formatação de cadeia de caracteres.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de Controle Windows Forms|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.ChangeUICulture` método para definir a cultura que o `My.Resources` objeto usa para recuperar recursos.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Para esse exemplo funcione, seu aplicativo deve ter uma cadeia de caracteres denominada `Message` no recurso do aplicativo, o arquivo e o aplicativo devem ter a versão de cultura francesa desse arquivo de recurso, `Resources.fr-FR.resx`. Para obter mais informações, consulte [como: Adicionar ou remover recursos](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Se o aplicativo não tiver a versão de cultura francesa desse arquivo de recurso, o `My.Resources` objeto recupera o recurso do arquivo de recurso de cultura padrão.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> é <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> não é um nome de cultura válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a cultura que usa o thread atual usa para manipulação e formatação da cadeia de caracteres.</summary>
        <value>Um <see cref="T:System.Globalization.CultureInfo" /> usa o objeto que representa a cultura do thread atual para manipulação de cadeia de caracteres e formatação de cadeia de caracteres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.CurrentCulture` propriedade obtém o <xref:System.Globalization.CultureInfo> objeto que o thread atual usa para manipulação de cadeia de caracteres e formatação de cadeia de caracteres. Este objeto é idêntico àquele retornado pelo <xref:System.Threading.Thread.CurrentCulture%2A> propriedade, que controla muitos dos cálculos relacionados à cadeia de caracteres nesse thread. O <xref:System.Threading.Thread.CurrentCulture%2A> propriedade determina os formatos padrão para datas, horas, moeda e números. Ele também determina como classificar, comparar e colocar em maiuscula cadeias de caracteres.  
  
 Para alterar a cultura, você pode usar o <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A> método ou atribuir outro <xref:System.Globalization.CultureInfo> do objeto para o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade.  
  
 O <xref:System.Threading.Thread.CurrentCulture%2A> configuração é diferente de uma configuração de idioma. Ele contém apenas dados relacionados às configurações padrão para uma região geográfica.  
  
 Use o `My.Application.CurrentUICulture` propriedade para obter a cultura que o thread atual usa para recuperar recursos específicos de cultura.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de Controle Windows Forms|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo demonstra como a cultura afeta a representação de cadeia de caracteres de datas.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Um <see langword="String" /> que contém o nome da variável de ambiente.</param>
        <summary>Retorna o valor da variável de ambiente especificada.</summary>
        <returns>Um <see langword="String" /> que contém o valor da variável de ambiente com o nome <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.GetEnvironmentVariable` método retorna a variável de ambiente com o nome `name`. Esse método é semelhante à <xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>, exceto que este método gera uma exceção se a variável de ambiente especificado pelo `name` não existe.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de Controle Windows Forms|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.GetEnvironmentVariable` método para obter e exibir o valor da variável de ambiente PATH, se disponível. Caso contrário, ele exibe uma mensagem indicando que a variável de ambiente PATH não existe.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">A variável de ambiente especificada por <paramref name="name" /> não existe.</exception>
        <exception cref="T:System.Security.SecurityException">O código de chamada não tem <see cref="T:System.Security.Permissions.EnvironmentPermission" /> com o acesso <see langword="Read" />.</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto que fornece propriedades para obter informações sobre o assembly do aplicativo, como o número de versão, a descrição e assim por diante.</summary>
        <value>O objeto <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" /> para o aplicativo atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este exemplo usa o `My.Application.Info.Version` propriedade para exibir a versão do aplicativo.  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto que fornece propriedades e métodos para gravar informações de evento e de exceção para os ouvintes de log do aplicativo.</summary>
        <value>O objeto <see cref="T:Microsoft.VisualBasic.Logging.Log" /> para o aplicativo atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este exemplo mostra como usar o método `My.Application.Log.WriteEntry` para registrar em log informações de rastreamento. Para obter mais informações, consulte [como: gravar mensagens de Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a cultura que o thread atual usa para recuperar recursos específicos de cultura.</summary>
        <value>Um <see cref="T:System.Globalization.CultureInfo" /> objeto que representa a cultura que o thread atual usa para recuperar recursos específicos de cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `My.Application.CurrentUICulture` propriedade obtém o <xref:System.Globalization.CultureInfo> que o thread atual usa para recuperar recursos específicos de cultura do objeto. Este objeto é idêntico àquele retornado pelo <xref:System.Threading.Thread.CurrentUICulture%2A> propriedade. O <xref:System.Threading.Thread.CurrentUICulture%2A> propriedade determina a cultura usada pelo Gerenciador de recursos e o `My.Resources` objeto, as informações necessárias para procurar recursos específicos de cultura em tempo de execução.  
  
 Para alterar a cultura, você pode usar o <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> método ou atribuir outro <xref:System.Globalization.CultureInfo> do objeto para o <xref:System.Threading.Thread.CurrentUICulture%2A> propriedade.  
  
 O <xref:System.Threading.Thread.CurrentCulture%2A> configuração é diferente de uma configuração de idioma. Ele contém apenas dados relacionados às configurações padrão para uma região geográfica.  
  
 Use o `My.Application.CurrentCulture` propriedade para obter a cultura que o thread atual usa para manipulação de cadeia de caracteres e formatação de cadeia de caracteres.  
  
## <a name="availability-by-project-type"></a>Disponibilidade por tipo de projeto  
  
|Tipo de projeto|Disponível|  
|-|-|  
|Aplicativo do Windows Forms|**Sim**|  
|Biblioteca de Classes|**Sim**|  
|Aplicativo do Console|**Sim**|  
|Biblioteca de Controle Windows Forms|**Sim**|  
|Biblioteca de controle da Web|Não|  
|Serviço do Windows|**Sim**|  
|Site da Web|Não|  
  
   
  
## Examples  
 Este exemplo usa o `My.Application.CurrentCulture` propriedade para armazenar em cache a cultura atual antes de alterá-la usando <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>. O `My.Application.ChangeUICulture` método define a cultura que o `My.Resources` objeto usa para recuperar recursos.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Para esse exemplo funcione, seu aplicativo deve ter uma cadeia de caracteres denominada `Message` no recurso do aplicativo, o arquivo e o aplicativo devem ter a versão de cultura francesa desse arquivo de recurso, `Resources.fr-FR.resx`. Para obter mais informações, consulte [como: Adicionar ou remover recursos](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Se o aplicativo não tiver a versão de cultura francesa desse arquivo de recurso, o `My.Resources` objeto recupera o recurso do arquivo de recurso de cultura padrão.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
      </Docs>
    </Member>
  </Members>
</Type>