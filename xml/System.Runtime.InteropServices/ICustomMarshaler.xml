<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b7f092c326960741597c424fa1d78d6a1e6ffcd" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48754962" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece wrappers personalizados para manipular chamadas de método.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um marshaler fornece uma ponte entre a funcionalidade do antigo e novas interfaces. Marshaling personalizado oferece os seguintes benefícios:  
  
-   Ele permite que aplicativos cliente que foram projetados para trabalhar com uma interface antiga também trabalhar com servidores que implementam uma nova interface.  
  
-   Ele permite que aplicativos cliente criados para funcionar com uma nova interface trabalhar com servidores que implementam uma interface antiga.  
  
 Se você tiver uma interface que apresenta o comportamento de marshaling diferente ou que é exposto para o modelo COM (Component Object) de maneira diferente, você pode projetar um marshaler personalizado em vez de usar o marshaler de interoperabilidade. Usando um marshaler personalizado, você pode minimizar a distinção entre novos componentes do .NET Framework e componentes COM existentes.  
  
 Por exemplo, suponha que você está desenvolvendo uma interface gerenciada chamada `INew`. Quando essa interface é exposta a COM por meio de um padrão COM callable wrapper CCW (), ele tem os mesmos métodos como a interface gerenciada e usa as regras de marshaling integradas do marshaler de interoperabilidade. Agora, suponha que uma interface COM bem conhecida chamado `IOld` já fornece a mesma funcionalidade que o `INew` interface. Projetando um marshaler personalizado, você pode fornecer uma implementação não gerenciada `IOld` que simplesmente delega as chamadas para a implementação gerenciada do `INew` interface. Portanto, o marshaler personalizado atua como uma ponte entre as interfaces não gerenciadas e não gerenciados.  
  
> [!NOTE]
>  Empacotadores personalizados não são invocados ao chamar do código gerenciado para código não gerenciado em uma interface somente de expedição.  
  
## <a name="defining-the-marshaling-type"></a>Definindo o tipo Marshaling  
 Antes de compilar um marshaler personalizado, você deve definir as interfaces gerenciadas e que terá o marshaling realizadas. Essas interfaces geralmente realizam a mesma função, mas expostas de forma diferente para objetos gerenciados e não gerenciados.  
  
 Um compilador gerenciado gera uma interface gerenciada dos metadados e a interface resultante se parece com qualquer outra interface gerenciada. O exemplo a seguir mostra uma interface comum.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Defina o tipo não gerenciado na linguagem IDL (Interface Definition) e compilá-lo com o compilador de linguagem de definição de Interface da Microsoft (MIDL). Definir a interface dentro de uma instrução de biblioteca e atribuir uma ID de interface com o atributo de identificador universal exclusivo (UUID), como demonstra o exemplo a seguir.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 O compilador MIDL produz vários arquivos de saída. Se a interface é definida em Old.idl, o arquivo de saída Old_i.c define um `const` variável com o identificador de interface (IID) da interface, como demonstra o exemplo a seguir.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 O arquivo de Old.h também é gerado pelo MIDL. Ele contém uma definição de C++ da interface que pode ser incluída no seu código-fonte C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementando a interface ICustomMarshaler  
 O marshaler personalizado deve implementar o <xref:System.Runtime.InteropServices.ICustomMarshaler> interface para fornecer os wrappers apropriados para o tempo de execução.  
  
 O código c# a seguir exibe a interface base que deve ser implementada por todos os empacotadores personalizados.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 O <xref:System.Runtime.InteropServices.ICustomMarshaler> interface inclui métodos que oferecem suporte à conversão, suporte de limpeza e informações sobre os dados a ser empacotado.  
  
|Tipo de operação|Método ICustomMarshaler|Descrição|  
|-----------------------|-----------------------------|-----------------|  
|Conversão (de código nativo para gerenciado)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Realiza marshaling de um ponteiro para dados nativos em um objeto gerenciado. Esse método retorna um wrapper que pode ser chamado de tempo de execução personalizado (RCW) que possa empacotar a interface não gerenciada que é passada como um argumento. O marshaler deve retornar uma instância de RCW personalizado para esse tipo.|  
|Conversão (a partir do código gerenciado para nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Realiza marshaling de um objeto gerenciado em um ponteiro para dados nativos. Esse método retorna um personalizado COM callable wrapper (CCW) que possa empacotar a interface gerenciada que é passada como um argumento. O marshaler deve retornar uma instância do CCW personalizado para esse tipo.|  
|Limpeza (de código nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Permite que o marshaler limpar os dados nativos (CCW) que são retornados pelo <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> método.|  
|Limpeza (de código gerenciado)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Permite que o marshaler limpar os dados gerenciados (RCW) que são retornados pelo <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> método.|  
|Informações (sobre código nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Retorna o tamanho dos dados não gerenciados a ser empacotado.|  
  
### <a name="conversion"></a>Conversão  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Realiza marshaling de um ponteiro para dados nativos em um objeto gerenciado. Esse método retorna um wrapper que pode ser chamado de tempo de execução personalizado (RCW) que possa empacotar a interface não gerenciada que é passada como um argumento. O marshaler deve retornar uma instância de RCW personalizado para esse tipo.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Realiza marshaling de um objeto gerenciado em um ponteiro para dados nativos. Esse método retorna um personalizado COM callable wrapper (CCW) que possa empacotar a interface gerenciada que é passada como um argumento. O marshaler deve retornar uma instância do CCW personalizado para esse tipo.  
  
### <a name="cleanup"></a>Limpeza  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Permite que o marshaler limpar os dados nativos (CCW) que são retornados pelo <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> método.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Permite que o marshaler limpar os dados gerenciados (RCW) que são retornados pelo <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> método.  
  
### <a name="size-information"></a>Informações de tamanho  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Retorna o tamanho dos dados não gerenciados a ser empacotado.  
  
## <a name="implementing-the-getinstance-method"></a>Implementando o método GetInstance  
 Além de implementar o <xref:System.Runtime.InteropServices.ICustomMarshaler> interface, empacotadores personalizados devem implementar uma `static` método chamado `GetInstance` que aceita um <xref:System.String> como um parâmetro e tem um tipo de retorno <xref:System.Runtime.InteropServices.ICustomMarshaler>. Isso `static` método é chamado pela camada de interoperabilidade de COM do common language runtime para criar uma instância do empacotador personalizado. A cadeia de caracteres que é passada para `GetInstance` é um cookie que o método pode usar para personalizar o marshaler personalizado retornado.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Aplicando MarshalAsAttribute  
 Para usar um marshaler personalizado, você deve aplicar o <xref:System.Runtime.InteropServices.MarshalAsAttribute> de atributo para o parâmetro ou campo que está sendo empacotado.  
  
 Você também deve transmitir o <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valor de enumeração para o <xref:System.Runtime.InteropServices.MarshalAsAttribute> construtor. Além disso, você deve especificar o <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo com um dos seguintes parâmetros nomeados:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (obrigatório): O nome qualificado pelo assembly do empacotador personalizado. O nome deve incluir o namespace e classe do empacotador personalizado. Se o marshaler personalizado não está definido no assembly que é usado em, você deve especificar o nome do assembly no qual ele está definido.  
  
    > [!NOTE]
    >  Você pode usar o <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> campo, em vez do <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> usa um tipo que é mais fácil especificar.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (opcional): um cookie que é passado para o empacotador personalizado. Você pode usar o cookie para fornecer informações adicionais para o marshaler. Por exemplo, se o marshaler mesmo é usado para fornecer um número de wrappers, o cookie identifica um wrapper específico. O cookie é passado para o `GetInstance` método do empacotador.  
  
 O <xref:System.Runtime.InteropServices.MarshalAsAttribute> atributo identifica o marshaler personalizado para que ele pode ativar o wrapper apropriado. Serviço de interoperabilidade do common language runtime, em seguida, examina o atributo e cria a hora do empacotador personalizado primeiro o argumento (parâmetro ou campo) precisa ser empacotado.  
  
 O tempo de execução, em seguida, chama o <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> e <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> métodos em empacotador personalizado para ativar o wrapper correto para lidar com a chamada.  
  
## <a name="using-a-custom-marshaler"></a>Usando um Marshaler personalizado  
 Quando o marshaler personalizado for concluído, você pode usá-lo como um wrapper personalizado para um tipo específico. O exemplo a seguir mostra a definição do `IUserData` interface gerenciada:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 No exemplo a seguir, o `IUserData` interface usa o `NewOldMarshaler` empacotador personalizado para permitir que aplicativos cliente não gerenciado passar um `IOld` interface para o `DoSomeStuff` método. A descrição do gerenciado do `DoSomeStuff` leva um `INew` interface, conforme mostrado no exemplo anterior, ao passo que a versão não gerenciada de `DoSomeStuff` leva um `IOld` ponteiro de interface, conforme mostrado no exemplo a seguir.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 A biblioteca de tipos que é gerada por meio da exportação a definição gerenciada da `IUserData` produz a definição não gerenciada, mostrada neste exemplo, em vez da definição padrão. O <xref:System.Runtime.InteropServices.MarshalAsAttribute> atributo aplicado ao `INew` argumento na definição gerenciada do `DoSomeStuff` método indica que o argumento usa um marshaler personalizado, como mostra o exemplo a seguir.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 Nos exemplos anteriores, o primeiro parâmetro é fornecido para o <xref:System.Runtime.InteropServices.MarshalAsAttribute> atributo é o <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valor de enumeração `UnmanagedType.CustomMarshaler`.  
  
 O segundo parâmetro é o <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo, que fornece o nome qualificado pelo assembly do empacotador personalizado. Esse nome consiste o namespace e classe do empacotador personalizado (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">O objeto gerenciado a ser destruído.</param>
        <summary>Executa a limpeza necessária dos dados gerenciados quando eles não forem mais necessários.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Um ponteiro para os dados não gerenciados a serem destruídos.</param>
        <summary>Executa a limpeza necessária dos dados não gerenciados quando eles não forem mais necessários.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o tamanho dos dados nativos cujo marshaling deve ser realizado.</summary>
        <returns>O tamanho, em bytes, dos dados nativos.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">O objeto gerenciado a ser convertido.</param>
        <summary>Converte os dados gerenciados em dados não gerenciados.</summary>
        <returns>Um ponteiro para a exibição COM do objeto gerenciado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Um ponteiro para os dados não gerenciados a serem encapsulados.</param>
        <summary>Converte os dados não gerenciados em dados gerenciados.</summary>
        <returns>Um objeto que representa a exibição gerenciada dos dados COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>