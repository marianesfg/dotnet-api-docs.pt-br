<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5398ddb4b38cb3fd818bd722227bd74e02336ea3" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53332934" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="610f9-101">Oferece métodos para interoperar com <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />e <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-102">O tipo de itens na extensão de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-102">The type of items in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="610f9-103">A fatia de origem a ser convertida.</span><span class="sxs-lookup"><span data-stu-id="610f9-103">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="610f9-104">Converte um <see cref="T:System.ReadOnlySpan`1" /> de um tipo primitivo, <paramref name="T" />, em um <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="610f9-105">Uma extensão de somente leitura do tipo <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-105">A read-only span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-106">`T` não pode conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="610f9-107">`T` é verificado em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-108"><paramref name="T" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-108"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="610f9-109">A propriedade <see cref="P:System.ReadOnlySpan`1.Length" /> da nova <see cref="T:System.ReadOnlySpan`1" /> excederia o <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="610f9-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-110">O tipo dos itens no período.</span><span class="sxs-lookup"><span data-stu-id="610f9-110">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="610f9-111">A fatia de origem a ser convertida.</span><span class="sxs-lookup"><span data-stu-id="610f9-111">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="610f9-112">Converte um <see cref="T:System.Span`1" /> de um tipo primitivo, <paramref name="T" />, em um <see langword="Span&lt;Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="610f9-113">Uma extensão do tipo <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-113">A span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-114">`T` não pode conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="610f9-115">`T` é verificado em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-116"><paramref name="T" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-116"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="610f9-117">A propriedade <see cref="P:System.Span`1.Length" /> da nova <see cref="T:System.Span`1" /> excederia o <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="610f9-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-118">O tipo dos itens no buffer de memória somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-118">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="610f9-119">O buffer de memória de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-119">The read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="610f9-120">Cria uma instância <see cref="T:System.Memory`1" /> de uma <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span></span></summary>
        <returns><span data-ttu-id="610f9-121">Um bloco de memória que representa a mesma memória que o <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-122">Esse método deve ser usado com muito cuidado.</span><span class="sxs-lookup"><span data-stu-id="610f9-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="610f9-123"><xref:System.ReadOnlyMemory%601> é usado para representar dados imutáveis e outra memória que não é destinada a serem gravados.</span><span class="sxs-lookup"><span data-stu-id="610f9-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="610f9-124"><xref:System.Memory%601> as instâncias criadas por esse método não devem ser escritas para.</span><span class="sxs-lookup"><span data-stu-id="610f9-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="610f9-125">A finalidade desse método é permitir que as variáveis digitadas como <xref:System.Memory%601> mas usado somente para leitura para armazenar um <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="610f9-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="610f9-126">O tipo de alcance de origem.</span><span class="sxs-lookup"><span data-stu-id="610f9-126">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="610f9-127">O tipo da extensão de destino.</span><span class="sxs-lookup"><span data-stu-id="610f9-127">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="610f9-128">A fatia de origem a ser convertida.</span><span class="sxs-lookup"><span data-stu-id="610f9-128">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="610f9-129">Converte uma extensão de somente leitura de um tipo primitivo em uma extensão de outro tipo primitivo.</span><span class="sxs-lookup"><span data-stu-id="610f9-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="610f9-130">A extensão de somente leitura convertida.</span><span class="sxs-lookup"><span data-stu-id="610f9-130">The converted read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-131">Nem `TFrom` nem `TTo` podem conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="610f9-132">`TFrom` e `TTo` são verificados em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="610f9-133">Esse método tem suporte apenas em plataformas que dão suporte ao acesso à memória desalinhado ou que a memória do bloco é alinhado por outros meios.</span><span class="sxs-lookup"><span data-stu-id="610f9-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-134"><paramref name="TFrom" /> ou <paramref name="TTo" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-134"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="610f9-135">O tipo de alcance de origem.</span><span class="sxs-lookup"><span data-stu-id="610f9-135">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="610f9-136">O tipo da extensão de destino.</span><span class="sxs-lookup"><span data-stu-id="610f9-136">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="610f9-137">A fatia de origem a ser convertida.</span><span class="sxs-lookup"><span data-stu-id="610f9-137">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="610f9-138">Converte um período de um tipo primitivo em um período de outro tipo primitivo.</span><span class="sxs-lookup"><span data-stu-id="610f9-138">Casts a span of one primitive type to a span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="610f9-139">A extensão convertida.</span><span class="sxs-lookup"><span data-stu-id="610f9-139">The converted span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-140">Nem `TFrom` nem `TTo` podem conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="610f9-141">`TFrom` e `TTo` são verificados em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="610f9-142">A conversão ocorre em um contexto desmarcado.</span><span class="sxs-lookup"><span data-stu-id="610f9-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="610f9-143">Se o intervalo de `TTo` é menor que o intervalo de `TFrom`, pode ocorrer perda de dados.</span><span class="sxs-lookup"><span data-stu-id="610f9-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="610f9-144">Por exemplo, se `TFrom` é <xref:System.Int64>, um dos `ReadOnlySpan<Int32>` valores é 0x100001111110F0F, e `TTo` é <xref:System.Int32>, o valor resultante é 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="610f9-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="610f9-145">Esse método tem suporte apenas em plataformas que dão suporte ao acesso à memória desalinhado ou que a memória do bloco é alinhado por outros meios.</span><span class="sxs-lookup"><span data-stu-id="610f9-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-146"><paramref name="TFrom" /> ou <paramref name="TTo" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-146"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-147">O tipo da matriz.</span><span class="sxs-lookup"><span data-stu-id="610f9-147">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="610f9-148">A matriz de origem pré-fixada.</span><span class="sxs-lookup"><span data-stu-id="610f9-148">The pre-pinned source array.</span></span></param>
        <param name="start"><span data-ttu-id="610f9-149">O índice de <paramref name="array" /> no qual o bloco de memória será iniciado.</span><span class="sxs-lookup"><span data-stu-id="610f9-149">The index of <paramref name="array" /> at which to begin the memory block.</span></span></param>
        <param name="length"><span data-ttu-id="610f9-150">O número de itens a serem incluídos no bloco de memória.</span><span class="sxs-lookup"><span data-stu-id="610f9-150">The number of items to include in the memory block.</span></span></param>
        <summary><span data-ttu-id="610f9-151">Cria um novo buffer de memória sobre a parte da matriz de destino pré-fixada começando pelo índice <paramref name="start" /> e formado por itens <paramref name="length" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span></span></summary>
        <returns><span data-ttu-id="610f9-152">Um bloco de memória nos elementos especificados de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-152">A block of memory over the specified elements of <paramref name="array" />.</span></span> <span data-ttu-id="610f9-153">Se <paramref name="array" /> for <see langword="null" />, ou se <paramref name="start" /> e <paramref name="length" /> forem 0, o método retornará uma instância <see cref="T:System.Memory`1" /> de <see cref="System.Memory`1.Length" /> com valor zero.</span><span class="sxs-lookup"><span data-stu-id="610f9-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-154">A matriz deve ser fixada já antes desse método é chamado, e essa matriz não deve ser desafixada enquanto o <xref:System.Memory%601> buffer que ele retorna ainda está em uso.</span><span class="sxs-lookup"><span data-stu-id="610f9-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="610f9-155">Chamar este método em uma matriz não fixada pode resultar em corrupção de memória.</span><span class="sxs-lookup"><span data-stu-id="610f9-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="610f9-156"><paramref name="array" /> é covariante e o tipo de <paramref name="array" /> não é exatamente <paramref name="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-156"><paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="610f9-157">O <paramref name="start" /> ou o índice final não está no intervalo de 0 a <see cref="P:System.Array.Length" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-158">O tipo dos itens de dados.</span><span class="sxs-lookup"><span data-stu-id="610f9-158">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="610f9-159">Uma referência aos dados.</span><span class="sxs-lookup"><span data-stu-id="610f9-159">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="610f9-160">O número de elementos <paramref name="T" /> que <paramref name="reference" /> contém.</span><span class="sxs-lookup"><span data-stu-id="610f9-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="610f9-161">Cria uma nova extensão de somente leitura sobre uma parte de um objeto gerenciado regular.</span><span class="sxs-lookup"><span data-stu-id="610f9-161">Creates a new read-only span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="610f9-162">Uma extensão de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-162">A read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-163">Esse método pode ser útil se a parte de um objeto gerenciado representa uma matriz fixa.</span><span class="sxs-lookup"><span data-stu-id="610f9-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="610f9-164">Esse método deve ser usado com cuidado.</span><span class="sxs-lookup"><span data-stu-id="610f9-164">This method should be used with caution.</span></span> <span data-ttu-id="610f9-165">É perigoso, pois o `length` argumento não é verificado.</span><span class="sxs-lookup"><span data-stu-id="610f9-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="610f9-166">Além disso, o tempo de vida da marca span retornado não é validado para a segurança por linguagens com suporte a span.</span><span class="sxs-lookup"><span data-stu-id="610f9-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-167">O tipo dos itens de dados.</span><span class="sxs-lookup"><span data-stu-id="610f9-167">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="610f9-168">Uma referência aos dados.</span><span class="sxs-lookup"><span data-stu-id="610f9-168">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="610f9-169">O número de elementos <paramref name="T" /> que <paramref name="reference" /> contém.</span><span class="sxs-lookup"><span data-stu-id="610f9-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="610f9-170">Cria uma nova extensão sobre uma parte de um objeto gerenciado regular.</span><span class="sxs-lookup"><span data-stu-id="610f9-170">Creates a new span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="610f9-171">Uma extensão.</span><span class="sxs-lookup"><span data-stu-id="610f9-171">A span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-172">Esse método pode ser útil se a parte de um objeto gerenciado representa uma matriz fixa.</span><span class="sxs-lookup"><span data-stu-id="610f9-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="610f9-173">Esse método deve ser usado com cuidado.</span><span class="sxs-lookup"><span data-stu-id="610f9-173">This method should be used with caution.</span></span> <span data-ttu-id="610f9-174">É perigoso, pois o `length` argumento não é verificado.</span><span class="sxs-lookup"><span data-stu-id="610f9-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="610f9-175">Além disso, o tempo de vida da marca span retornado não é validado para a segurança por linguagens com suporte a span.</span><span class="sxs-lookup"><span data-stu-id="610f9-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-176">O tipo dos itens no período.</span><span class="sxs-lookup"><span data-stu-id="610f9-176">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="610f9-177">A extensão de somente leitura da qual a referência é recuperada.</span><span class="sxs-lookup"><span data-stu-id="610f9-177">The read-only span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="610f9-178">Retorna uma referência ao elemento da extensão de somente leitura no índice 0.</span><span class="sxs-lookup"><span data-stu-id="610f9-178">Returns a reference to the element of the read-only span at index 0.</span></span></summary>
        <returns><span data-ttu-id="610f9-179">Uma referência ao elemento no índice 0.</span><span class="sxs-lookup"><span data-stu-id="610f9-179">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-180">Se o alcance de somente leitura estiver vazio, esse método retorna uma referência para o local em que o elemento no índice 0 teria sido armazenado.</span><span class="sxs-lookup"><span data-stu-id="610f9-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="610f9-181">Essa referência pode ou não ser `null`.</span><span class="sxs-lookup"><span data-stu-id="610f9-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="610f9-182">A referência retornada pode ser usada para fixar, mas nunca deve ser desreferenciado.</span><span class="sxs-lookup"><span data-stu-id="610f9-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-183">O tipo dos itens no período.</span><span class="sxs-lookup"><span data-stu-id="610f9-183">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="610f9-184">A extensão da qual a referência é recuperada.</span><span class="sxs-lookup"><span data-stu-id="610f9-184">The span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="610f9-185">Retorna uma referência ao elemento da extensão no índice 0.</span><span class="sxs-lookup"><span data-stu-id="610f9-185">Returns a reference to the element of the span at index 0.</span></span></summary>
        <returns><span data-ttu-id="610f9-186">Uma referência ao elemento no índice 0.</span><span class="sxs-lookup"><span data-stu-id="610f9-186">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-187">Se o intervalo estiver vazio, esse método retorna uma referência para o local em que o elemento no índice 0 teria sido armazenado.</span><span class="sxs-lookup"><span data-stu-id="610f9-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="610f9-188">Essa referência pode ou não ser `null`.</span><span class="sxs-lookup"><span data-stu-id="610f9-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="610f9-189">A referência retornada pode ser usada para fixar, mas nunca deve ser desreferenciado.</span><span class="sxs-lookup"><span data-stu-id="610f9-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-190">O tipo de item a ser recuperado do alcance de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-190">The type of the item to retrieve from the read-only span.</span></span></typeparam>
        <param name="source"><span data-ttu-id="610f9-191">Uma extensão de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-191">A read-only span.</span></span></param>
        <summary><span data-ttu-id="610f9-192">Lê uma estrutura de tipo</span><span class="sxs-lookup"><span data-stu-id="610f9-192">Reads a structure of type</span></span> <param name="T" /> <span data-ttu-id="610f9-193">de uma extensão de somente leitura de bytes.</span><span class="sxs-lookup"><span data-stu-id="610f9-193">out of a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="610f9-194">A estrutura recuperada da extensão de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-194">The structure retrieved from the read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-195">`T` não pode conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="610f9-196">' É verificado em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-197"><paramref name="T" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-197"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="610f9-198"><paramref name="source" /> é menor que <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-198"><paramref name="source" /> is smaller than <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-199">O tipo dos itens no buffer de memória somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-199">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="610f9-200">Um buffer de memória de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-200">A read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="610f9-201">Cria uma exibição <see cref="T:System.Collections.Generic.IEnumerable`1" /> de determinado buffer de memória de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="610f9-202">Uma exibição enumerável de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-202">An enumerable view of <paramref name="memory" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-203">Esse método permite que um buffer de memória somente leitura a ser usado em APIs existentes que exigem um parâmetro de tipo <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="610f9-203">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-204">O tipo dos itens no buffer de memória somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-204">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="610f9-205">Um buffer de memória de somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-205">A read-only memory buffer.</span></span></param>
        <param name="segment"><span data-ttu-id="610f9-206">Ao retornar, esse método contém o segmento da matriz recuperado do buffer de memória de somente leitura subjacente.</span><span class="sxs-lookup"><span data-stu-id="610f9-206">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span></span> <span data-ttu-id="610f9-207">Se o método falhar, ele retornará um segmento de matriz padrão.</span><span class="sxs-lookup"><span data-stu-id="610f9-207">If the method fails, the method returns a default array segment.</span></span></param>
        <summary><span data-ttu-id="610f9-208">Tenta obter um segmento de matriz do buffer de memória subjacente.</span><span class="sxs-lookup"><span data-stu-id="610f9-208">Tries to get an array segment from the underlying memory buffer.</span></span> <span data-ttu-id="610f9-209">O valor retornado indica o sucesso da operação.</span><span class="sxs-lookup"><span data-stu-id="610f9-209">The return value indicates the success of the operation.</span></span></summary>
        <returns><span data-ttu-id="610f9-210"><see langword="true" /> se a chamada de método for bem-sucedida. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-210"><see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-211">O tipo dos itens no buffer de memória somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-211">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="610f9-212">O tipo do <see cref="T:System.Buffers.MemoryManager`1" /> para recuperar.</span><span class="sxs-lookup"><span data-stu-id="610f9-212">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="610f9-213">O buffer de memória de somente leitura para o qual obter o gerenciador de memória.</span><span class="sxs-lookup"><span data-stu-id="610f9-213">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="610f9-214">Quando o método retorna, o gerenciador de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-214">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <summary><span data-ttu-id="610f9-215">Tenta recuperar um <see cref="T:System.Buffers.MemoryManager`1" /> do buffer de memória de somente leitura subjacente.</span><span class="sxs-lookup"><span data-stu-id="610f9-215">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="610f9-216"><see langword="true" /> se o método tiver recuperado o gerenciador de memória. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-216"><see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-217">O tipo dos itens no buffer de memória somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-217">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="610f9-218">O tipo do <see cref="T:System.Buffers.MemoryManager`1" /> para recuperar.</span><span class="sxs-lookup"><span data-stu-id="610f9-218">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="610f9-219">O buffer de memória de somente leitura para o qual obter o gerenciador de memória.</span><span class="sxs-lookup"><span data-stu-id="610f9-219">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="610f9-220">Quando o método retorna, o gerenciador de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-220">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <param name="start"><span data-ttu-id="610f9-221">Quando o método retorna, o deslocamento do início do <paramref name="manager" /> que o <paramref name="memory" /> representa.</span><span class="sxs-lookup"><span data-stu-id="610f9-221">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <param name="length"><span data-ttu-id="610f9-222">Quando o método retorna, o comprimento do <paramref name="manager" /> que o <paramref name="memory" /> representa.</span><span class="sxs-lookup"><span data-stu-id="610f9-222">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <summary><span data-ttu-id="610f9-223">Tenta recuperar um <see cref="T:System.Buffers.MemoryManager`1" />, índice de início e comprimento do buffer de memória de somente leitura subjacente.</span><span class="sxs-lookup"><span data-stu-id="610f9-223">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="610f9-224"><see langword="true" />, se o método for bem-sucedido. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-224"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="610f9-225">Memória somente leitura que contém um bloco de caracteres.</span><span class="sxs-lookup"><span data-stu-id="610f9-225">Read-only memory containing a block of characters.</span></span></param>
        <param name="text"><span data-ttu-id="610f9-226">Quando o método retorna, a cadeia de caracteres contida no buffer de memória.</span><span class="sxs-lookup"><span data-stu-id="610f9-226">When the method returns, the string contained in the memory buffer.</span></span></param>
        <param name="start"><span data-ttu-id="610f9-227">A localização inicial em <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-227">The starting location in <paramref name="text" />.</span></span></param>
        <param name="length"><span data-ttu-id="610f9-228">O número de caracteres em <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-228">The number of characters in <paramref name="text" />.</span></span></param>
        <summary><span data-ttu-id="610f9-229">Tenta obter a cadeia de caracteres subjacente de um <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-229">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="610f9-230"><see langword="true" /> se o método recuperar a cadeia de caracteres subjacente com eficiência. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-230"><see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-231">O tipo de estrutura para recuperar.</span><span class="sxs-lookup"><span data-stu-id="610f9-231">The type of the structure to retrieve.</span></span></typeparam>
        <param name="source"><span data-ttu-id="610f9-232">Uma extensão de somente leitura de bytes.</span><span class="sxs-lookup"><span data-stu-id="610f9-232">A read-only span of bytes.</span></span></param>
        <param name="value"><span data-ttu-id="610f9-233">Quando o método retorna, uma instância do <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-233">When the method returns, an instance of <paramref name="T" />.</span></span></param>
        <summary><span data-ttu-id="610f9-234">Tenta ler uma estrutura do tipo <paramref name="T" /> de um intervalo de bytes somente leitura.</span><span class="sxs-lookup"><span data-stu-id="610f9-234">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="610f9-235"><see langword="true" /> se o método tiver êxito na recuperação de uma instância da estrutura. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-235"><see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-236">`T` não pode conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-236">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="610f9-237">' É verificado em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-237">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-238"><paramref name="T" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-238"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-239">O tipo da estrutura.</span><span class="sxs-lookup"><span data-stu-id="610f9-239">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="610f9-240">O extensão de bytes para conter a estrutura.</span><span class="sxs-lookup"><span data-stu-id="610f9-240">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="610f9-241">A estrutura a ser gravada na extensão.</span><span class="sxs-lookup"><span data-stu-id="610f9-241">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="610f9-242">Tenta gravar uma estrutura do tipo <paramref name="T" /> em um intervalo de bytes.</span><span class="sxs-lookup"><span data-stu-id="610f9-242">Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="610f9-243"><see langword="true" /> se a operação de gravação for bem-sucedida. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-243"><see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="610f9-244">O método retornará <see langword="false" /> se o intervalo for muito pequeno para conter <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-244">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-245">`T` não pode conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-245">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="610f9-246">' É verificado em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-246">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-247"><paramref name="TFrom" /> ou <paramref name="TTo" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-247"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="610f9-248">O tipo da estrutura.</span><span class="sxs-lookup"><span data-stu-id="610f9-248">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="610f9-249">O extensão de bytes para conter a estrutura.</span><span class="sxs-lookup"><span data-stu-id="610f9-249">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="610f9-250">A estrutura a ser gravada na extensão.</span><span class="sxs-lookup"><span data-stu-id="610f9-250">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="610f9-251">Grava uma estrutura do tipo <paramref name="T" /> em um intervalo de bytes.</span><span class="sxs-lookup"><span data-stu-id="610f9-251">Writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="610f9-252">`T` não pode conter ponteiros ou referências.</span><span class="sxs-lookup"><span data-stu-id="610f9-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="610f9-253">' É verificado em tempo de execução para preservar a segurança de tipos.</span><span class="sxs-lookup"><span data-stu-id="610f9-253">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="610f9-254"><paramref name="T" /> contém referências ou ponteiros.</span><span class="sxs-lookup"><span data-stu-id="610f9-254"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="610f9-255"><paramref name="destination" /> é muito pequena para conter <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="610f9-255"><paramref name="destination" /> is too small to contain <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>