<Type Name="_Type" FullName="System.Runtime.InteropServices._Type">
  <Metadata><Meta Name="ms.openlocfilehash" Value="414660b22519c001a0e13b1301ccaa1f53186909" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53299291" /></Metadata><TypeSignature Language="C#" Value="public interface _Type" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Type" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._Type" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Type" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Type" />
  <TypeSignature Language="F#" Value="type _Type = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ad79d-101">Expõe os membros públicos da classe <see cref="T:System.Type" /> ao código não gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-101">Exposes the public members of the <see cref="T:System.Type" /> class to the unmanaged code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-102">Essa interface é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamado a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-102">This interface is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-103">Essa interface preserva a ordem de vtable do <xref:System.Type?displayProperty=nameWithType> membros que podem ser acessados por objetos COM não gerenciados de classe.</span><span class="sxs-lookup"><span data-stu-id="ad79d-103">This interface preserves the vtable order of the <xref:System.Type?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Runtime.InteropServices._Type.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-104">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-104">Provides COM objects with version-independent access to the <see cref="P:System.Type.Assembly" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-105">Uma instância de <see cref="T:System.Reflection.Assembly" /> que descreve o assembly que contém o tipo atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-105">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-106">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-106">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-107">O <xref:System.Type.Assembly%2A?displayProperty=nameWithType> propriedade obtém o <xref:System.Reflection.Assembly> no qual o tipo é declarado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-107">The <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property gets the <xref:System.Reflection.Assembly> in which the type is declared.</span></span> <span data-ttu-id="ad79d-108">Para tipos genéricos, essa propriedade obtém o <xref:System.Reflection.Assembly> no qual o tipo genérico é definido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-108">For generic types, this property gets the <xref:System.Reflection.Assembly> in which the generic type is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-109">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.AssemblyQualifiedName" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-109">Provides COM objects with version-independent access to the <see cref="P:System.Type.AssemblyQualifiedName" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-110">O nome qualificado pelo assembly do <see cref="T:System.Type" />, incluindo o nome do assembly do qual o <see cref="T:System.Type" /> foi carregado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-110">The assembly-qualified name of the <see cref="T:System.Type" />, including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-111">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-111">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-112">O <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> propriedade obtém o nome qualificado pelo assembly do <xref:System.Type>, incluindo o nome do assembly do qual o <xref:System.Type> foi carregado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-112">The <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property gets the assembly-qualified name of the <xref:System.Type>, including the name of the assembly from which the <xref:System.Type> was loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Runtime.InteropServices._Type.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-113">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.Attributes" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-113">Provides COM objects with version-independent access to the <see cref="P:System.Type.Attributes" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-114">Um objeto <see cref="T:System.Reflection.TypeAttributes" /> que representa o conjunto de atributos do <see cref="T:System.Type" />, a menos que <see cref="T:System.Type" /> represente um parâmetro de tipo genérico; nesse caso, o valor não é especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-114">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-115">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-115">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-116">O <xref:System.Type.Attributes%2A?displayProperty=nameWithType> propriedade obtém os atributos associados a <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-116">The <xref:System.Type.Attributes%2A?displayProperty=nameWithType> property gets the attributes associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Runtime.InteropServices._Type.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-117">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.BaseType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-117">Provides COM objects with version-independent access to the <see cref="P:System.Type.BaseType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-118">O <see cref="T:System.Type" /> do qual atual <see cref="T:System.Type" /> herda diretamente, ou <see langword="null" /> se atual <see langword="Type" /> representa o <see cref="T:System.Object" /> classe.</span><span class="sxs-lookup"><span data-stu-id="ad79d-118">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-119">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-119">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-120">O <xref:System.Type.BaseType%2A?displayProperty=nameWithType> propriedade obtém o tipo do qual atual <xref:System.Type> herda diretamente.</span><span class="sxs-lookup"><span data-stu-id="ad79d-120">The <xref:System.Type.BaseType%2A?displayProperty=nameWithType> property gets the type from which the current <xref:System.Type> directly inherits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-121">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.DeclaringType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-121">Provides COM objects with version-independent access to the <see cref="P:System.Type.DeclaringType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-122">O objeto <see cref="T:System.Type" /> para a classe que declara esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-122">The <see cref="T:System.Type" /> object for the class that declares this member.</span></span> <span data-ttu-id="ad79d-123">Se o tipo for um tipo aninhado, essa propriedade retorna o tipo delimitador.</span><span class="sxs-lookup"><span data-stu-id="ad79d-123">If the type is a nested type, this property returns the enclosing type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-124">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-124">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-125">O <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> propriedade obtém a classe que declara esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-125">The <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-126">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.Equals" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-126">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.Equals" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-127">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-127">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-128">O <xref:System.Type.Equals%2A?displayProperty=nameWithType> método determina se o tipo de sistema subjacente do atual <xref:System.Type> é o mesmo que o tipo de sistema subjacente de especificado <xref:System.Object> ou <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-128">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object> or <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="ad79d-129">.</span><span class="sxs-lookup"><span data-stu-id="ad79d-129">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_Type.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="ad79d-130">O <see cref="T:System.Object" /> cujo tipo de sistema subjacente deve ser comparado com o tipo de sistema subjacente do <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-130">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-131">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.Equals(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-131">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-132"><see langword="true" /> se o tipo de sistema subjacente do <paramref name="o" /> for o mesmo que o tipo de sistema subjacente do <see cref="T:System.Type" /> atual; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-132"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-133">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-133">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-134">O <xref:System.Type.Equals%2A?displayProperty=nameWithType> método determina se o tipo de sistema subjacente do atual <xref:System.Type> é o mesmo que o tipo de sistema subjacente do <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-134">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="abstract member Equals : Type -&gt; bool" Usage="_Type.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="ad79d-135">O <see cref="T:System.Type" /> cujo tipo de sistema subjacente deve ser comparado com o tipo de sistema subjacente do <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-135">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-136">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.Equals(System.Type)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-136">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-137"><see langword="true" /> se o tipo de sistema subjacente do <paramref name="o" /> for o mesmo que o tipo de sistema subjacente do <see cref="T:System.Type" /> atual; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-137"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-138">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-138">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-139">O <xref:System.Type.Equals%2A?displayProperty=nameWithType> método determina se o tipo de sistema subjacente do atual <xref:System.Type> é o mesmo que o tipo de sistema subjacente do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-139">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="_Type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="ad79d-140">O delegado <see cref="T:System.Reflection.TypeFilter" /> que compara as interfaces com <paramref name="filterCriteria" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-140">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <paramref name="filterCriteria" />.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="ad79d-141">Os critérios de pesquisa que determinam se uma interface deve ser incluída na matriz retornada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-141">The search criteria that determines whether an interface should be included in the returned array.</span></span></param>
        <summary><span data-ttu-id="ad79d-142">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-142">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-143">Uma matriz de objetos <see cref="T:System.Type" /> que representa uma lista filtrada das interfaces implementadas ou herdadas pelo <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-143">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-144">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-144">-or-</span></span> 
<span data-ttu-id="ad79d-145">Uma matriz vazia do tipo <see cref="T:System.Type" />, se nenhuma interface que corresponde ao filtro está implementada ou herdada pelo <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-145">An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-146">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-146">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-147">O <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> método retorna uma matriz de <xref:System.Type> objetos que representa uma lista filtrada das interfaces implementadas ou herdadas pelo atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-147">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects representing a filtered list of interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="_Type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType"><span data-ttu-id="ad79d-148">Um objeto <see langword="MemberTypes" /> indicando o tipo de membro a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-148">A <see langword="MemberTypes" /> object indicating the type of member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-149">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-149">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-150">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-150">-or-</span></span> 
<span data-ttu-id="ad79d-151">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-151">Zero, to return <see langword="null" />.</span></span></param>
        <param name="filter"><span data-ttu-id="ad79d-152">O delegado que faz as comparações, retornando <see langword="true" /> se o membro inspecionado no momento corresponder ao <paramref name="filterCriteria" />. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-152">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</span></span> <span data-ttu-id="ad79d-153">Use os delegados <see langword="FilterAttribute" />, <see langword="FilterName" /> e <see langword="FilterNameIgnoreCase" /> fornecidos por essa classe.</span><span class="sxs-lookup"><span data-stu-id="ad79d-153">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span></span> <span data-ttu-id="ad79d-154">O primeiro usa os campos <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> como critérios de pesquisa e os outros dois delegados usam objetos <see langword="String" /> como critérios de pesquisa.</span><span class="sxs-lookup"><span data-stu-id="ad79d-154">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="ad79d-155">Os critérios de pesquisa que determinam se um membro é retornado na matriz de objetos <see langword="MemberInfo" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-155">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span></span>  
  
<span data-ttu-id="ad79d-156">Os campos de <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> podem ser usados em conjunto com o delegado <see langword="FilterAttribute" /> fornecido por essa classe.</span><span class="sxs-lookup"><span data-stu-id="ad79d-156">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span></span></param>
        <summary><span data-ttu-id="ad79d-157">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-157">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-158">Uma matriz filtrada de objetos <see cref="T:System.Reflection.MemberInfo" /> do tipo de membro especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-158">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span>  
  
<span data-ttu-id="ad79d-159">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-159">-or-</span></span> 
<span data-ttu-id="ad79d-160">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se o <see cref="T:System.Type" /> atual não tiver membros do tipo <paramref name="memberType" /> que correspondem aos critérios de filtro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-160">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-161">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-161">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-162">O <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> método retorna uma matriz filtrada de <xref:System.Reflection.MemberInfo> objetos do tipo de membro especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-162">The <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> method returns a filtered array of <xref:System.Reflection.MemberInfo> objects of the specified member type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Runtime.InteropServices._Type.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-163">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.FullName" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-163">Provides COM objects with version-independent access to the <see cref="P:System.Type.FullName" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-164">Uma cadeia de caracteres que contém o nome totalmente qualificado a <see cref="T:System.Type" />, incluindo o namespace do <see cref="T:System.Type" /> , mas não o assembly.</span><span class="sxs-lookup"><span data-stu-id="ad79d-164">A string containing the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-165">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-165">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-166">O <xref:System.Type.FullName%2A?displayProperty=nameWithType> propriedade obtém o nome totalmente qualificado do <xref:System.Type>, incluindo o namespace do <xref:System.Type> , mas não o assembly.</span><span class="sxs-lookup"><span data-stu-id="ad79d-166">The <xref:System.Type.FullName%2A?displayProperty=nameWithType> property gets the fully qualified name of the <xref:System.Type>, including the namespace of the <xref:System.Type> but not the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int" Usage="_Type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-167">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetArrayRank" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-167">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetArrayRank" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-168">Um <see cref="T:System.Int32" /> que contém o número de dimensões no <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-168">An <see cref="T:System.Int32" /> containing the number of dimensions in the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-169">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-169">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-170">O <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> método obtém o número de dimensões em um <xref:System.Array>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-170">The <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> method gets the number of dimensions in an <xref:System.Array>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-171">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetConstructor" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-171">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructor" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-172">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-172">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-173">O <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> método obtém um construtor específico do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-173">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method gets a specific constructor of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="ad79d-174">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor desejado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-174">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span></span>  
  
<span data-ttu-id="ad79d-175">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-175">-or-</span></span> 
<span data-ttu-id="ad79d-176">Uma matriz vazia de objetos <see cref="T:System.Type" />, para obter um construtor que não aceita parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-176">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span></span> <span data-ttu-id="ad79d-177">Tal matriz vazia é fornecida pelo campo <see langword="static" /> de <see cref="F:System.Type.EmptyTypes" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-177">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-178">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetConstructor(System.Type[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-178">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-179">Um objeto <see cref="T:System.Reflection.ConstructorInfo" /> que representa o construtor de instância pública cujos parâmetros correspondem aos tipos na matriz de tipos de parâmetro, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-179">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-180">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-180">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-181">O <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> método procura um construtor de instância pública cujos parâmetros correspondem aos tipos na matriz especificada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-181">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a public instance constructor whose parameters match the types in the specified array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-182">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-182">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-183">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-183">-or-</span></span> 
<span data-ttu-id="ad79d-184">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-184">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-185">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-185">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-186">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-186">-or-</span></span> 
 <span data-ttu-id="ad79d-187"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-187"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-188">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor obter.</span><span class="sxs-lookup"><span data-stu-id="ad79d-188">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="ad79d-189">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-189">-or-</span></span> 
<span data-ttu-id="ad79d-190">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um construtor sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-190">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span>  
  
<span data-ttu-id="ad79d-191">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-191">-or-</span></span> 
 <span data-ttu-id="ad79d-192"><see cref="F:System.Type.EmptyTypes" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-192"><see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-193">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz de tipo de parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-193">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span></span> <span data-ttu-id="ad79d-194">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-194">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-195">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-195">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-196">Um objeto <see cref="T:System.Reflection.ConstructorInfo" /> que representa o construtor que corresponde aos requisitos especificados, se encontrados, caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-196">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-197">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-197">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-198">O <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> método procura um construtor cujos parâmetros correspondem aos tipos de argumento especificados e modificadores, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-198">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-199">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-199">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-200">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-200">-or-</span></span> 
<span data-ttu-id="ad79d-201">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-201">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-202">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-202">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-203">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-203">-or-</span></span> 
 <span data-ttu-id="ad79d-204"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-204"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="ad79d-205">O objeto <see cref="T:System.Reflection.CallingConventions" /> que especifica o conjunto de regras a ser usado em relação à ordem e ao layout dos argumentos, a como o valor retornado é passado, quais registros são usados para argumentos e como a pilha é limpa.</span><span class="sxs-lookup"><span data-stu-id="ad79d-205">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-206">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor obter.</span><span class="sxs-lookup"><span data-stu-id="ad79d-206">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="ad79d-207">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-207">-or-</span></span> 
<span data-ttu-id="ad79d-208">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um construtor sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-208">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-209">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-209">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="ad79d-210">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-210">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-211">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-211">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-212">Um objeto <see cref="T:System.Reflection.ConstructorInfo" /> que representa o construtor que corresponde aos requisitos especificados, se encontrados, caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-212">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-213">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-213">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-214">O <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> método pesquisa um construtor cujos parâmetros correspondem aos tipos de argumento especificados e modificadores, usando as restrições de associação especificadas e a convenção de chamada especificada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-214">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-215">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetConstructors" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-215">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructors" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-216">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-216">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-217">O <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> método obtém os construtores do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-217">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method gets the constructors of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-218">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetConstructors" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-218">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-219">Uma matriz de objetos <see cref="T:System.Reflection.ConstructorInfo" /> que representa todos os construtores de instância pública definidos para o <see cref="T:System.Type" /> atual, mas não incluindo o inicializador de tipo (construtor estático).</span><span class="sxs-lookup"><span data-stu-id="ad79d-219">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span></span> <span data-ttu-id="ad79d-220">Se nenhum construtor de instância pública for definido para o <see cref="T:System.Type" /> atual ou se o <see cref="T:System.Type" /> atual representar um parâmetro de tipo de um tipo genérico ou uma definição de método, uma matriz vazia do tipo <see cref="T:System.Reflection.ConstructorInfo" /> será retornada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-220">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-221">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-221">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-222">O <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> método retorna todos os construtores públicos definidos para a atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-222">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method returns all the public constructors defined for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-223">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-223">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-224">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-224">-or-</span></span> 
<span data-ttu-id="ad79d-225">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-225">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-226">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-226">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-227">Uma matriz de objetos <see cref="T:System.Reflection.ConstructorInfo" /> representando todos os construtores definidos para o <see cref="T:System.Type" /> atual que corresponde às restrições de associação especificadas, incluindo o inicializador de tipo, se ele estiver definido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-227">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span></span> <span data-ttu-id="ad79d-228">Retorna uma matriz vazia do tipo <see cref="T:System.Reflection.ConstructorInfo" /> se nenhum construtor estiver definido para o <see cref="T:System.Type" /> atual, se nenhum dos construtores definidos corresponderem às restrições de associação ou se o <see cref="T:System.Type" /> atual representar um parâmetro de tipo de um tipo genérico ou definição de método.</span><span class="sxs-lookup"><span data-stu-id="ad79d-228">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-229">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-229">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-230">O <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> método pesquisa os construtores definidos para a atual <xref:System.Type>, usando o <xref:System.Reflection.BindingFlags>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-230">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method searches for the constructors defined for the current <xref:System.Type>, using the specified <xref:System.Reflection.BindingFlags>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-231">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-231">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-232">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-232">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-233">O <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> método retorna todos os atributos aplicados a esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-233">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_Type.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="ad79d-234">Especifica se deve-se pesquisar ou não a cadeia de herança desse membro para localizar os atributos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-234">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="ad79d-235">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-235">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-236">Uma matriz de atributos personalizados aplicados a este membro ou uma matriz com zero (0) elementos se nenhum atributo tiver sido aplicado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-236">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-237">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-237">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-238">O <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> método retorna todos os atributos aplicados a esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-238">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_Type.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="ad79d-239">O tipo de atributo a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-239">The type of attribute to search for.</span></span> <span data-ttu-id="ad79d-240">Somente os atributos que podem ser atribuídos a esse tipo são retornados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-240">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="ad79d-241">Especifica se deve-se pesquisar ou não a cadeia de herança desse membro para localizar os atributos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-241">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="ad79d-242">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-242">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-243">Uma matriz de atributos personalizados aplicados a este membro ou uma matriz com zero (0) elementos se nenhum atributo tiver sido aplicado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-243">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-244">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-244">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-245">O <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> método retorna todos os atributos aplicados a esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-245">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-246">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetDefaultMembers" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-246">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetDefaultMembers" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-247">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa todos os membros padrão do <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-247">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-248">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-248">-or-</span></span> 
<span data-ttu-id="ad79d-249">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se o <see cref="T:System.Type" /> atual não tiver membros padrão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-249">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-250">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-250">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-251">O <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> método procura membros definidos para a atual <xref:System.Type> cuja <xref:System.Reflection.DefaultMemberAttribute> está definido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-251">The <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type> whose <xref:System.Reflection.DefaultMemberAttribute> is set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="_Type.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-252">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetElementType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-252">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetElementType" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-253">O <see cref="T:System.Type" /> do objeto englobado ou referenciado pelo tipo de matriz, ponteiro ou tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="ad79d-253">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
<span data-ttu-id="ad79d-254">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-254">-or-</span></span> 
 <span data-ttu-id="ad79d-255"><see langword="null" /> se o <see cref="T:System.Type" /> atual não for uma matriz ou um ponteiro, se não for passado por referência ou, se representa um tipo genérico ou um parâmetro de tipo de um tipo genérico ou uma definição de tipo.</span><span class="sxs-lookup"><span data-stu-id="ad79d-255"><see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-256">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-256">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-257">O <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> método retorna o <xref:System.Type> do objeto englobado ou referenciado pelo tipo de matriz, ponteiro ou referência atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-257">The <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> method returns the <xref:System.Type> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-258">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetEvent" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-258">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvent" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-259">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-260">O <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> método obtém um evento específico declarado ou herdado pelo atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-260">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method gets a specific event declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-261">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-261">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-262">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-262">-or-</span></span> 
<span data-ttu-id="ad79d-263">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-263">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-264">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetEvent(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-264">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-265">Uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual, que corresponde às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-265">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-266">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-266">-or-</span></span> 
<span data-ttu-id="ad79d-267">Uma matriz vazia do tipo <see cref="T:System.Reflection.EventInfo" />, se o <see cref="T:System.Type" /> atual não tiver eventos ou se nenhum dos eventos corresponderem às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-267">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-268">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-268">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-269">O <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> pesquisas de método para eventos que são declarados ou herdados pelo atual <xref:System.Type>, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-269">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-270">A <see cref="T:System.String" /> que contém o nome de um evento que é declarado ou herdado pelo <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-270">The <see cref="T:System.String" /> containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-271">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-271">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-272">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-272">-or-</span></span> 
<span data-ttu-id="ad79d-273">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-273">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-274">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-274">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-275">O objeto <see cref="T:System.Reflection.EventInfo" /> que representa o evento especificado, o qual é declarado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-275">The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-276">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-276">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-277">O <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> método retorna o <xref:System.Reflection.EventInfo> objeto que representa o evento especificado, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-277">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method returns the <xref:System.Reflection.EventInfo> object representing the specified event, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-278">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetEvents" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-278">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvents" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-279">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-279">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-280">O <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> método obtém os eventos que são declarados ou herdados pelo atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-280">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method gets the events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-281">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetEvents" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-281">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-282">Uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos públicos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-282">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-283">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-283">-or-</span></span> 
<span data-ttu-id="ad79d-284">Uma matriz vazia do tipo <see cref="T:System.Reflection.EventInfo" />, se o <see cref="T:System.Type" /> atual não tiver eventos públicos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-284">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-285">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-285">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-286">O <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> método retorna todos os eventos públicos que são declarados ou herdados pelo atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-286">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method returns all the public events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-287">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-287">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-288">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-288">-or-</span></span> 
<span data-ttu-id="ad79d-289">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-289">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-290">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-290">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-291">Uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual, que corresponde às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-291">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-292">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-292">-or-</span></span> 
<span data-ttu-id="ad79d-293">Uma matriz vazia do tipo <see cref="T:System.Reflection.EventInfo" />, se o <see cref="T:System.Type" /> atual não tiver eventos ou se nenhum dos eventos corresponderem às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-293">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-294">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-295">O <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> pesquisas de método para eventos que são declarados ou herdados pelo atual <xref:System.Type>, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-295">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-296">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetField" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-296">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetField" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-297">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-298">O <xref:System.Type.GetField%2A?displayProperty=nameWithType> método obtém um campo específico do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-298">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-299">A <see cref="T:System.String" /> que contém o nome do campo de dados a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-299">The <see cref="T:System.String" /> containing the name of the data field to get.</span></span></param>
        <summary><span data-ttu-id="ad79d-300">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetField(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-300">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-301">Um objeto <see cref="T:System.Reflection.FieldInfo" /> que representa o campo público com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-301">A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-302">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-303">O <xref:System.Type.GetField%2A?displayProperty=nameWithType> método pesquisa o campo público com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-303">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the public field with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-304">A <see cref="T:System.String" /> que contém o nome do campo de dados a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-304">The <see cref="T:System.String" /> containing the name of the data field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-305">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-305">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-306">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-306">-or-</span></span> 
<span data-ttu-id="ad79d-307">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-307">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-308">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-308">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-309">Um objeto <see cref="T:System.Reflection.FieldInfo" /> que representa o campo que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-309">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-310">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-311">O <xref:System.Type.GetField%2A?displayProperty=nameWithType> método pesquisa o campo especificado, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-311">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the specified field, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-312">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetFields" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-312">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetFields" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-313">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-313">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-314">O <xref:System.Type.GetFields%2A?displayProperty=nameWithType> método obtém um campo específico do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-314">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-315">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetFields" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-315">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-316">Uma matriz de objetos <see cref="T:System.Reflection.FieldInfo" /> que representa todos os campos públicos definidos para o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-316">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-317">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-317">-or-</span></span> 
<span data-ttu-id="ad79d-318">Uma matriz vazia do tipo <see cref="T:System.Reflection.FieldInfo" /> se nenhum campo público for definido para o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-318">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-319">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-319">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-320">O <xref:System.Type.GetFields%2A?displayProperty=nameWithType> método retorna todos os campos públicos do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-320">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method returns all the public fields of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-321">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-321">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-322">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-322">-or-</span></span> 
<span data-ttu-id="ad79d-323">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-323">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-324">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-324">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-325">Uma matriz de objetos <see cref="T:System.Reflection.FieldInfo" /> que representa todos os campos definidos para o <see cref="T:System.Type" /> atual que corresponde às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-325">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-326">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-326">-or-</span></span> 
<span data-ttu-id="ad79d-327">Uma matriz vazia do tipo <see cref="T:System.Reflection.FieldInfo" /> se nenhum campo estiver definido para o <see cref="T:System.Type" /> atual ou se nenhum dos campos definidos corresponderem às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-327">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-328">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-328">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-329">O <xref:System.Type.GetFields%2A?displayProperty=nameWithType> pesquisas de método para os campos definidos para a atual <xref:System.Type>, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-329">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method searches for the fields defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_Type.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-330">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-330">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetHashCode" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-331">Um <see cref="T:System.Int32" /> contendo o código hash para essa instância.</span><span class="sxs-lookup"><span data-stu-id="ad79d-331">An <see cref="T:System.Int32" /> containing the hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-332">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-332">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-333">O método <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-333">The <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames :  * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="ad79d-334">Reservado para uso futuro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-334">Reserved for future use.</span></span> <span data-ttu-id="ad79d-335">Deve ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="ad79d-335">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="ad79d-336">Matriz passada de nomes a serem mapeados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-336">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="ad79d-337">Contagem dos nomes a serem mapeados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-337">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="ad79d-338">O contexto de localidade no qual interpretar os nomes.</span><span class="sxs-lookup"><span data-stu-id="ad79d-338">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="ad79d-339">Matriz alocada pelo chamador que recebe os IDs correspondentes aos nomes.</span><span class="sxs-lookup"><span data-stu-id="ad79d-339">Caller-allocated array that receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="ad79d-340">Mapeia um conjunto de nomes para um conjunto correspondente de identificadores de expedição.</span><span class="sxs-lookup"><span data-stu-id="ad79d-340">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-341">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-341">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad79d-342">Para obter mais informações sobre `IDispatch::GetIDsOfNames`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="ad79d-342">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-343">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetInterface" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-343">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetInterface" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-344">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-344">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-345">O <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> método obtém uma interface específica implementada ou herdada pelo atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-345">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method gets a specific interface implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type" Usage="_Type.GetInterface name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-346">A <see cref="T:System.String" /> que contém o nome da interface a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-346">The <see cref="T:System.String" /> containing the name of the interface to get.</span></span> <span data-ttu-id="ad79d-347">Para interfaces genéricas, este é o nome danificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-347">For generic interfaces, this is the mangled name.</span></span></param>
        <summary><span data-ttu-id="ad79d-348">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetInterface(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-348">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-349">Um objeto <see cref="T:System.Type" /> que representa a interface com o nome especificado, implementado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-349">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-350">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-350">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-351">O <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> pesquisas de método para a interface com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-351">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the interface with the specified name.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="_Type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-352">A <see cref="T:System.String" /> que contém o nome da interface a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-352">The <see cref="T:System.String" /> containing the name of the interface to get.</span></span> <span data-ttu-id="ad79d-353">Para interfaces genéricas, este é o nome danificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-353">For generic interfaces, this is the mangled name.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="ad79d-354"><see langword="true" /> para realizar uma pesquisa de <paramref name="name" /> que não diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-354"><see langword="true" /> to perform a case-insensitive search for <paramref name="name" />.</span></span>  
  
<span data-ttu-id="ad79d-355">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-355">-or-</span></span> 
 <span data-ttu-id="ad79d-356"><see langword="false" /> para realizar uma pesquisa de <paramref name="name" /> que diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-356"><see langword="false" /> to perform a case-sensitive search for <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-357">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-357">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-358">Um objeto <see cref="T:System.Type" /> que representa a interface com o nome especificado, implementado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-358">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-359">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-359">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-360">O <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> método procura a interface especificada, especificando se é necessário fazer uma pesquisa diferencia maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-360">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the specified interface, specifying whether to do a case-sensitive search.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="_Type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="ad79d-361">O <see cref="T:System.Type" /> da interface da qual recuperar um mapeamento.</span><span class="sxs-lookup"><span data-stu-id="ad79d-361">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</span></span></param>
        <summary><span data-ttu-id="ad79d-362">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetInterfaceMap(System.Type)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-362">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-363">Um objeto <see cref="T:System.Reflection.InterfaceMapping" /> que representa o mapeamento de interface para <paramref name="interfaceType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-363">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-364">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-364">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-365">O <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> método retorna um mapeamento de interface para o tipo de interface especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-365">The <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> method returns an interface mapping for the specified interface type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="_Type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-366">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetInterfaces" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-366">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaces" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-367">Uma matriz de objetos <see cref="T:System.Type" /> que representa todas as interfaces implementadas ou herdadas pela <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-367">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-368">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-368">-or-</span></span> 
<span data-ttu-id="ad79d-369">Uma matriz vazia do tipo <see cref="T:System.Type" />, se nenhuma interface está implementada ou herdada pela <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-369">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-370">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-370">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-371">O <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> método obtém todas as interfaces implementadas ou herdadas pelo atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-371">The <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> method gets all the interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-372">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetMember" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-372">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMember" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-373">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-373">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-374">O <xref:System.Type.GetMember%2A?displayProperty=nameWithType> método obtém os membros especificados do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-374">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method gets the specified members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-375">A <see cref="T:System.String" /> que contém o nome dos membros públicos a serem obtidos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-375">The <see cref="T:System.String" /> containing the name of the public members to get.</span></span></param>
        <summary><span data-ttu-id="ad79d-376">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMember(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-376">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-377">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa os membros públicos com o nome especificado, se encontrado; caso contrário, uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="ad79d-377">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-378">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-378">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-379">O <xref:System.Type.GetMember%2A?displayProperty=nameWithType> método pesquisa os membros públicos com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-379">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the public members with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-380">A <see cref="T:System.String" /> que contém o nome dos membros a serem obtidos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-380">The <see cref="T:System.String" /> containing the name of the members to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-381">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-381">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-382">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-382">-or-</span></span> 
<span data-ttu-id="ad79d-383">Zero, para retornar uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="ad79d-383">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="ad79d-384">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-384">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-385">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa os membros públicos com o nome especificado, se encontrado; caso contrário, uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="ad79d-385">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-386">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-386">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-387">O <xref:System.Type.GetMember%2A?displayProperty=nameWithType> método pesquisa os membros especificados, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-387">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-388">A <see cref="T:System.String" /> que contém o nome dos membros a serem obtidos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-388">The <see cref="T:System.String" /> containing the name of the members to get.</span></span></param>
        <param name="type"><span data-ttu-id="ad79d-389">O valor <see cref="T:System.Reflection.MemberTypes" /> a ser pesquisado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-389">The <see cref="T:System.Reflection.MemberTypes" /> value to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-390">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-390">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-391">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-391">-or-</span></span> 
<span data-ttu-id="ad79d-392">Zero, para retornar uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="ad79d-392">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="ad79d-393">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-393">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-394">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa os membros públicos com o nome especificado, se encontrado; caso contrário, uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="ad79d-394">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-395">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-395">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-396">O <xref:System.Type.GetMember%2A?displayProperty=nameWithType> método pesquisa os membros especificados do tipo de membro especificado, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-396">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members of the specified member type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-397">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetMembers" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-397">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMembers" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-398">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-398">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-399">O <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> método obtém os membros (propriedades, métodos, campos, eventos e assim por diante) do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-399">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method gets the members (properties, methods, fields, events, and so on) of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-400">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMembers" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-400">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-401">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa todos os membros públicos do <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-401">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-402">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-402">-or-</span></span> 
<span data-ttu-id="ad79d-403">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se o <see cref="T:System.Type" /> atual não tiver membros públicos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-403">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-404">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-404">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-405">O <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> método retorna todos os membros públicos do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-405">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method returns all the public members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-406">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-406">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-407">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-407">-or-</span></span> 
<span data-ttu-id="ad79d-408">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-408">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-409">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-409">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-410">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> representando todos os membros definidos para o <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-410">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-411">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-411">-or-</span></span> 
<span data-ttu-id="ad79d-412">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se nenhum membro estiver definido para o atual <see cref="T:System.Type" /> ou se nenhum dos membros definidos corresponder às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-412">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-413">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-413">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-414">O <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> método procura membros definidos para a atual <xref:System.Type>, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-414">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-415">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetMethod" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-415">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethod" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-416">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-416">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-417">O método <xref:System.Type.GetMethod%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-417">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-418">A <see cref="T:System.String" /> que contém o nome do método público a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-418">The <see cref="T:System.String" /> containing the name of the public method to get.</span></span></param>
        <summary><span data-ttu-id="ad79d-419">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethod(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-419">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-420">Um objeto <see cref="T:System.Reflection.MethodInfo" /> que representa o método público com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-420">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-421">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-421">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-422">O <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método pesquisa o método público com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-422">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the public method with the specified name.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-423">A <see cref="T:System.String" /> que contém o nome do método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-423">The <see cref="T:System.String" /> containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-424">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-424">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-425">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-425">-or-</span></span> 
<span data-ttu-id="ad79d-426">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-426">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-427">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-427">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-428">Um objeto <see cref="T:System.Reflection.MethodInfo" /> que representa o método que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-428">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-429">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-429">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-430">O <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método pesquisa o método especificado, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-430">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-431">A <see cref="T:System.String" /> que contém o nome do método público a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-431">The <see cref="T:System.String" /> containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-432">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-432">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="ad79d-433">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-433">-or-</span></span> 
<span data-ttu-id="ad79d-434">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um método que não aceita parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-434">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="ad79d-435">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethod(System.String,System.Type[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-435">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-436">Um objeto <see cref="T:System.Reflection.MethodInfo" /> que representa o método público cujos parâmetros correspondem aos tipos de argumento especificados, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-436">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-437">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-437">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-438">O <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método pesquisa o método público especificado cujos parâmetros correspondem aos tipos de argumento especificados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-438">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-439">A <see cref="T:System.String" /> que contém o nome do método público a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-439">The <see cref="T:System.String" /> containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-440">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-440">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="ad79d-441">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-441">-or-</span></span> 
<span data-ttu-id="ad79d-442">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um método que não aceita parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-442">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-443">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-443">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="ad79d-444">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-444">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-445">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-445">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-446">Um objeto <see cref="T:System.Reflection.MethodInfo" /> que representa o método público que corresponde aos requisitos especificados, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-446">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-447">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-447">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-448">O <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método pesquisa o método público especificado cujos parâmetros correspondem aos tipos de argumento especificados e modificadores.</span><span class="sxs-lookup"><span data-stu-id="ad79d-448">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-449">A <see cref="T:System.String" /> que contém o nome do método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-449">The <see cref="T:System.String" /> containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-450">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-450">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-451">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-451">-or-</span></span> 
<span data-ttu-id="ad79d-452">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-452">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-453">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-453">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-454">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-454">-or-</span></span> 
 <span data-ttu-id="ad79d-455"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-455"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-456">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-456">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="ad79d-457">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-457">-or-</span></span> 
<span data-ttu-id="ad79d-458">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um método que não aceita parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-458">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-459">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-459">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="ad79d-460">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-460">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-461">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-461">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-462">Um objeto <see cref="T:System.Reflection.MethodInfo" /> que representa o método que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-462">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-463">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-463">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-464">O <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> pesquisas de método para o método especificado cujos parâmetros correspondem aos tipos de argumento especificados e modificadores, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-464">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-465">A <see cref="T:System.String" /> que contém o nome do método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-465">The <see cref="T:System.String" /> containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-466">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-466">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-467">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-467">-or-</span></span> 
<span data-ttu-id="ad79d-468">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-468">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-469">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-469">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-470">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-470">-or-</span></span> 
 <span data-ttu-id="ad79d-471"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-471"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="ad79d-472">O objeto <see cref="T:System.Reflection.CallingConventions" /> que especifica o conjunto de regras a ser usado em relação à ordem e ao layout dos argumentos, a como o valor retornado é passado, quais registros são usados para argumentos e como a pilha é limpa.</span><span class="sxs-lookup"><span data-stu-id="ad79d-472">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-473">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-473">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="ad79d-474">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-474">-or-</span></span> 
<span data-ttu-id="ad79d-475">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um método que não aceita parâmetros.</span><span class="sxs-lookup"><span data-stu-id="ad79d-475">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-476">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-476">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="ad79d-477">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-477">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-478">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-478">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-479">Um objeto <see cref="T:System.Reflection.MethodInfo" /> que representa o método que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-479">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-480">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-480">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-481">O <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método pesquisa o método especificado cujos parâmetros correspondem aos tipos de argumento especificados e modificadores, usando as restrições de associação especificadas e a convenção de chamada especificada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-481">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-482">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetMethods" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-482">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethods" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-483">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-483">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-484">O <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> método obtém os métodos do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-484">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method gets the methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-485">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethods" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-485">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-486">Uma matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> que representam todos os métodos públicos definidos para o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-486">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-487">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-487">-or-</span></span> 
<span data-ttu-id="ad79d-488">Uma matriz vazia do tipo <see cref="T:System.Reflection.MethodInfo" />, se nenhum método público for definido para o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-488">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-489">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-489">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-490">O <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> método retorna todos os métodos públicos do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-490">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method returns all the public methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-491">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-491">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-492">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-492">-or-</span></span> 
<span data-ttu-id="ad79d-493">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-493">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-494">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-494">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-495">Uma matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> representando todos os métodos definidos para o <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-495">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-496">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-496">-or-</span></span> 
<span data-ttu-id="ad79d-497">Uma matriz vazia do tipo <see cref="T:System.Reflection.MethodInfo" />, se nenhum método estiver definido para o atual <see cref="T:System.Type" />, ou se nenhum dos métodos definidos corresponder às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-497">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-498">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-498">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-499">O <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> pesquisas de método para os métodos definidos para a atual <xref:System.Type>, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-499">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method searches for the methods defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-500">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetNestedType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-500">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedType" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-501">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-501">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-502">O <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> método obtém um tipo específico aninhado no atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-502">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method gets a specific type nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type" Usage="_Type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-503">A cadeia de caracteres que contém o nome do tipo aninhado a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-503">The string containing the name of the nested type to get.</span></span></param>
        <summary><span data-ttu-id="ad79d-504">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetNestedType(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-504">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-505">Um objeto <see cref="T:System.Type" /> que representa o tipo aninhado público com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-505">A <see cref="T:System.Type" /> object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-506">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-506">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-507">O <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> pesquisas de método para o tipo aninhado público com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-507">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the public nested type with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="_Type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-508">A cadeia de caracteres que contém o nome do tipo aninhado a ser obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-508">The string containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-509">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-509">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-510">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-510">-or-</span></span> 
<span data-ttu-id="ad79d-511">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-511">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-512">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-512">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-513">Um objeto <see cref="T:System.Type" /> que representa o tipo aninhado que corresponde aos requisitos especificados, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-513">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-514">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-514">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-515">O <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> método pesquisa o tipo aninhado especificado, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-515">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the specified nested type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-516">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetNestedTypes" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-516">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedTypes" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-517">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-517">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-518">O <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> método obtém os tipos aninhados no atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-518">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method gets the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]" Usage="_Type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-519">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetNestedTypes" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-519">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-520">Uma matriz de objetos <see cref="T:System.Type" /> que representa todos os tipos aninhados no <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-520">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-521">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-521">-or-</span></span> 
<span data-ttu-id="ad79d-522">Uma matriz vazia do tipo <see cref="T:System.Type" />, se nenhum tipo estiver aninhado na <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-522">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-523">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-523">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-524">O <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> método retorna todos os tipos aninhados no atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-524">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method returns all the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="_Type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-525">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-525">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-526">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-526">-or-</span></span> 
<span data-ttu-id="ad79d-527">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-527">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-528">Fornece objetos COM de acesso independente de versão para o método <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> e pesquisa os tipos aninhados no <see cref="T:System.Type" /> atual, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-528">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> method, and searches for the types nested within the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="ad79d-529">Uma matriz de objetos <see cref="T:System.Type" /> que representa todos os tipos aninhados no <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-529">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-530">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-530">-or-</span></span> 
<span data-ttu-id="ad79d-531">Uma matriz vazia do tipo <see cref="T:System.Type" /> se nenhum tipo estiver aninhado no <see cref="T:System.Type" /> atual ou se nenhum dos tipos aninhados corresponderem às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-531">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-532">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-532">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-533">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetProperties" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-533">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperties" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-534">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-534">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-535">O <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> método obtém as propriedades do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-535">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method gets the properties of the current <xref:System.Type>.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-536">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperties" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-536">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-537">Uma matriz de objetos <see cref="T:System.Reflection.PropertyInfo" /> que representa todas as propriedades públicas do <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-537">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="ad79d-538">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-538">-or-</span></span> 
<span data-ttu-id="ad79d-539">Uma matriz vazia do tipo <see cref="T:System.Reflection.PropertyInfo" />, se o <see cref="T:System.Type" /> atual não tiver propriedades públicas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-539">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-540">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-540">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-541">O <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> método retorna todas as propriedades públicas do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-541">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method returns all the public properties of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="ad79d-542">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-542">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-543">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-543">-or-</span></span> 
<span data-ttu-id="ad79d-544">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-544">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-545">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-545">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-546">Uma matriz de objetos <see cref="T:System.Reflection.PropertyInfo" /> que representa todas as propriedades do <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-546">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="ad79d-547">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-547">-or-</span></span> 
<span data-ttu-id="ad79d-548">Uma matriz vazia do tipo <see cref="T:System.Reflection.PropertyInfo" />, se o <see cref="T:System.Type" /> atual não tiver propriedades, ou se nenhuma das propriedades corresponderem às restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="ad79d-548">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-549">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-549">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-550">O <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> método procura as propriedades do atual <xref:System.Type>, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-550">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method searches for the properties of the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-551">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.GetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-551">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperty" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-552">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-552">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-553">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método obtém uma propriedade específica do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-553">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method gets a specific property of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-554">O <see cref="T:System.String" /> que contém o nome da propriedade pública a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-554">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <summary><span data-ttu-id="ad79d-555">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-555">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-556">Um objeto <see langword="null" /> que representa a propriedade pública com o nome especificado, se encontrado; caso contrário, <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-556">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-557">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-557">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-558">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método procura a propriedade pública com o nome especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-558">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-559">Um <see cref="T:System.String" /> que contém o nome da propriedade a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-559">The <see cref="T:System.String" /> containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-560">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-560">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-561">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-561">-or-</span></span> 
<span data-ttu-id="ad79d-562">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-562">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-563">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-563">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-564">Um objeto <see cref="T:System.Reflection.PropertyInfo" /> que representa a propriedade que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-564">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-565">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-565">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-566">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método pesquisa a propriedade especificada, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-566">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-567">O <see cref="T:System.String" /> que contém o nome da propriedade pública a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-567">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="ad79d-568">O tipo de retorno da propriedade.</span><span class="sxs-lookup"><span data-stu-id="ad79d-568">The return type of the property.</span></span></param>
        <summary><span data-ttu-id="ad79d-569">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String,System.Type)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-569">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-570">Um objeto <see langword="null" /> que representa a propriedade pública com o nome especificado, se encontrado; caso contrário, <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-570">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-571">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-571">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-572">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método pesquisa a propriedade pública com o nome especificado e o tipo de retorno.</span><span class="sxs-lookup"><span data-stu-id="ad79d-572">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name and return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-573">O <see cref="T:System.String" /> que contém o nome da propriedade pública a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-573">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-574">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="ad79d-575">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-575">-or-</span></span> 
<span data-ttu-id="ad79d-576">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="ad79d-577">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String,System.Type[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-577">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-578">Um objeto <see cref="T:System.Reflection.PropertyInfo" /> que representa a propriedade pública cujos parâmetros correspondem aos tipos de argumento especificados, se encontrada, caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-578">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-579">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-579">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-580">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método procura a propriedade pública especificada cujos parâmetros correspondem aos tipos de argumento especificados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-580">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-581">O <see cref="T:System.String" /> que contém o nome da propriedade pública a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-581">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="ad79d-582">O tipo de retorno da propriedade.</span><span class="sxs-lookup"><span data-stu-id="ad79d-582">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-583">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-583">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="ad79d-584">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-584">-or-</span></span> 
<span data-ttu-id="ad79d-585">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-585">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="ad79d-586">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-586">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-587">Um objeto <see cref="T:System.Reflection.PropertyInfo" /> que representa a propriedade pública cujos parâmetros correspondem aos tipos de argumento especificados, se encontrada, caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-587">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-588">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-588">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-589">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método procura a propriedade pública especificada cujos parâmetros correspondem aos tipos de argumento especificados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-589">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-590">O <see cref="T:System.String" /> que contém o nome da propriedade pública a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-590">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="ad79d-591">O tipo de retorno da propriedade.</span><span class="sxs-lookup"><span data-stu-id="ad79d-591">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-592">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-592">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="ad79d-593">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-593">-or-</span></span> 
<span data-ttu-id="ad79d-594">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-594">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-595">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-595">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="ad79d-596">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-596">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-597">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-597">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-598">Um objeto <see cref="T:System.Reflection.PropertyInfo" /> que representa a propriedade pública que corresponde aos requisitos especificados, se encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-598">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-599">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-599">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-600">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método procura a propriedade pública especificada cujos parâmetros correspondem aos tipos de argumento especificados e modificadores.</span><span class="sxs-lookup"><span data-stu-id="ad79d-600">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-601">Um <see cref="T:System.String" /> que contém o nome da propriedade a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-601">The <see cref="T:System.String" /> containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="ad79d-602">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-602">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="ad79d-603">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-603">-or-</span></span> 
<span data-ttu-id="ad79d-604">Zero, para retornar <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-604">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-605">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-605">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-606">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-606">-or-</span></span> 
 <span data-ttu-id="ad79d-607"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-607"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="ad79d-608">O tipo de retorno da propriedade.</span><span class="sxs-lookup"><span data-stu-id="ad79d-608">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="ad79d-609">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span><span class="sxs-lookup"><span data-stu-id="ad79d-609">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="ad79d-610">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-610">-or-</span></span> 
<span data-ttu-id="ad79d-611">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-611">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-612">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-612">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="ad79d-613">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-613">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="ad79d-614">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-614">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-615">Um objeto <see cref="T:System.Reflection.PropertyInfo" /> que representa a propriedade que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-615">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-616">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-616">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-617">O <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> pesquisas de método para a propriedade especificada cujos parâmetros correspondem aos tipos de argumento especificados e modificadores, usando as restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-617">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_Type.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-618">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.GetType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-618">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-619">O <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-619">The current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-620">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-620">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-621">O <xref:System.Type.GetType%2A?displayProperty=nameWithType> método obtém a atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-621">The <xref:System.Type.GetType%2A?displayProperty=nameWithType> method gets the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="ad79d-622">As informações de tipo a serem retornadas.</span><span class="sxs-lookup"><span data-stu-id="ad79d-622">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="ad79d-623">O identificador de localidade das informações do tipo.</span><span class="sxs-lookup"><span data-stu-id="ad79d-623">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="ad79d-624">Recebe um ponteiro para o objeto de informações de tipo solicitado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-624">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="ad79d-625">Recupera as informações do tipo de um objeto, que podem ser usadas para obter informações de tipo para uma interface.</span><span class="sxs-lookup"><span data-stu-id="ad79d-625">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-626">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-626">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad79d-627">Para obter mais informações sobre `IDispatch::GetTypeInfo`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="ad79d-627">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount :  -&gt; unit" Usage="_Type.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="ad79d-628">Aponta para um local que recebe o número de interfaces de informações de tipo fornecido pelo objeto.</span><span class="sxs-lookup"><span data-stu-id="ad79d-628">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="ad79d-629">Retorna o número de interfaces de informações do tipo que um objeto fornece (0 ou 1).</span><span class="sxs-lookup"><span data-stu-id="ad79d-629">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-630">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-630">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad79d-631">Para obter mais informações sobre `IDispatch::GetTypeInfoCount`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="ad79d-631">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Runtime.InteropServices._Type.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-632">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.GUID" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-632">Provides COM objects with version-independent access to the <see cref="P:System.Type.GUID" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-633">O GUID associado ao <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-633">The GUID associated with the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-634">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-634">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-635">O <xref:System.Type.GUID%2A?displayProperty=nameWithType> propriedade obtém o GUID associado a <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-635">The <xref:System.Type.GUID%2A?displayProperty=nameWithType> property gets the GUID associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Runtime.InteropServices._Type.HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-636">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.HasElementType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-636">Provides COM objects with version-independent access to the <see cref="P:System.Type.HasElementType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-637"><see langword="true" /> se o <see cref="T:System.Type" /> for uma matriz ou um ponteiro ou se for passado por referência; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-637"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-638">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-638">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-639">A propriedade <xref:System.Type.HasElementType%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ad79d-639">The <xref:System.Type.HasElementType%2A?displayProperty=nameWithType> property</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 *  * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_Type.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="ad79d-640">Identifica o membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-640">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="ad79d-641">Reservado para uso futuro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-641">Reserved for future use.</span></span> <span data-ttu-id="ad79d-642">Deve ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="ad79d-642">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="ad79d-643">O contexto de localidade no qual interpretar argumentos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-643">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="ad79d-644">Sinalizadores que descrevem o contexto da chamada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-644">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="ad79d-645">Ponteiro para uma estrutura contendo uma matriz de argumentos, uma matriz de DISPIDs de argumento para argumentos nomeados e contagens para o número de elementos nas matrizes.</span><span class="sxs-lookup"><span data-stu-id="ad79d-645">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="ad79d-646">Ponteiro para o local onde o resultado deve ser armazenado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-646">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="ad79d-647">Ponteiro para uma estrutura que contém informações de exceção.</span><span class="sxs-lookup"><span data-stu-id="ad79d-647">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="ad79d-648">O índice do primeiro argumento que tem um erro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-648">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="ad79d-649">Fornece acesso a propriedades e métodos expostos por um objeto.</span><span class="sxs-lookup"><span data-stu-id="ad79d-649">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-650">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-650">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ad79d-651">Para obter mais informações sobre `IDispatch::Invoke`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="ad79d-651">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad79d-652">Fornece objetos COM com acesso independente de versão para o método <see cref="Overload:System.Type.InvokeMember" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-652">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.InvokeMember" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-653">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-653">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-654">O <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> método invoca um membro específico da atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-654">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes a specific member of the current <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="ad79d-655">.</span><span class="sxs-lookup"><span data-stu-id="ad79d-655">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-656">A <see cref="T:System.String" /> que contém o nome do construtor, do método, da propriedade ou do membro de campo a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-656">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="ad79d-657">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-657">-or-</span></span> 
<span data-ttu-id="ad79d-658">Uma cadeia de caracteres vazia ("") para invocar o membro padrão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-658">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="ad79d-659">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-659">-or-</span></span> 
<span data-ttu-id="ad79d-660">Para membros IDispatch, uma cadeia de caracteres que representa a DispID, por exemplo "[DispID=3]".</span><span class="sxs-lookup"><span data-stu-id="ad79d-660">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="ad79d-661">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-661">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="ad79d-662">O acesso pode ser um dos <see langword="BindingFlags" />, como <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="ad79d-662">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="ad79d-663">O tipo de pesquisa não precisa ser especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-663">The type of lookup need not be specified.</span></span> <span data-ttu-id="ad79d-664">Se o tipo de pesquisa for omitido, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> será aplicado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-664">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-665">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-665">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-666">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-666">-or-</span></span> 
 <span data-ttu-id="ad79d-667"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-667"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="target"><span data-ttu-id="ad79d-668">O <see cref="T:System.Object" /> no qual invocar o membro especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-668">The <see cref="T:System.Object" /> on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="ad79d-669">Uma matriz que contém os argumentos que serão passados para o membro a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-669">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <summary><span data-ttu-id="ad79d-670">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-670">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-671">Um <see cref="T:System.Object" /> que representa o valor retornado do membro invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-671">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-672">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-672">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-673">O <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> método invoca o membro especificado, usando as restrições de associação e especificados correspondentes à lista de argumentos especificada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-673">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-674">A <see cref="T:System.String" /> que contém o nome do construtor, do método, da propriedade ou do membro de campo a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-674">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="ad79d-675">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-675">-or-</span></span> 
<span data-ttu-id="ad79d-676">Uma cadeia de caracteres vazia ("") para invocar o membro padrão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-676">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="ad79d-677">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-677">-or-</span></span> 
<span data-ttu-id="ad79d-678">Para membros IDispatch, uma cadeia de caracteres que representa a DispID, por exemplo "[DispID=3]".</span><span class="sxs-lookup"><span data-stu-id="ad79d-678">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="ad79d-679">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-679">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="ad79d-680">O acesso pode ser um dos <see langword="BindingFlags" />, como <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="ad79d-680">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="ad79d-681">O tipo de pesquisa não precisa ser especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-681">The type of lookup need not be specified.</span></span> <span data-ttu-id="ad79d-682">Se o tipo de pesquisa for omitido, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> será aplicado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-682">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-683">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-683">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-684">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-684">-or-</span></span> 
 <span data-ttu-id="ad79d-685"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-685"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="target"><span data-ttu-id="ad79d-686">O <see cref="T:System.Object" /> no qual invocar o membro especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-686">The <see cref="T:System.Object" /> on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="ad79d-687">Uma matriz que contém os argumentos que serão passados para o membro a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-687">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="culture"><span data-ttu-id="ad79d-688">O objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a localidade de globalização a ser usada, que pode ser necessária para realizar conversões específicas de localidade, como converter uma String numérica em uma Double.</span><span class="sxs-lookup"><span data-stu-id="ad79d-688">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="ad79d-689">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-689">-or-</span></span> 
 <span data-ttu-id="ad79d-690"><see langword="null" /> para usar o <see cref="T:System.Globalization.CultureInfo" /> atual do thread.</span><span class="sxs-lookup"><span data-stu-id="ad79d-690"><see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-691">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-691">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-692">Um <see cref="T:System.Object" /> que representa o valor retornado do membro invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-692">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-693">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-693">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-694">O <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> método invoca o membro especificado, usando o especificado restrições de associação e a lista de argumentos especificada e a cultura de correspondência.</span><span class="sxs-lookup"><span data-stu-id="ad79d-694">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad79d-695">A <see cref="T:System.String" /> que contém o nome do construtor, do método, da propriedade ou do membro de campo a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-695">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="ad79d-696">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-696">-or-</span></span> 
<span data-ttu-id="ad79d-697">Uma cadeia de caracteres vazia ("") para invocar o membro padrão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-697">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="ad79d-698">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-698">-or-</span></span> 
<span data-ttu-id="ad79d-699">Para membros IDispatch, uma cadeia de caracteres que representa a DispID, por exemplo "[DispID=3]".</span><span class="sxs-lookup"><span data-stu-id="ad79d-699">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="ad79d-700">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-700">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="ad79d-701">O acesso pode ser um dos <see langword="BindingFlags" />, como <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="ad79d-701">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="ad79d-702">O tipo de pesquisa não precisa ser especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-702">The type of lookup need not be specified.</span></span> <span data-ttu-id="ad79d-703">Se o tipo de pesquisa for omitido, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> será aplicado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-703">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span></span></param>
        <param name="binder"><span data-ttu-id="ad79d-704">Um objeto <see cref="T:System.Reflection.Binder" /> que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio de reflexão.</span><span class="sxs-lookup"><span data-stu-id="ad79d-704">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="ad79d-705">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-705">-or-</span></span> 
 <span data-ttu-id="ad79d-706"><see langword="null" />, para usar o <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-706"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="target"><span data-ttu-id="ad79d-707">O <see cref="T:System.Object" /> no qual invocar o membro especificado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-707">The <see cref="T:System.Object" /> on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="ad79d-708">Uma matriz que contém os argumentos que serão passados para o membro a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-708">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="modifiers"><span data-ttu-id="ad79d-709">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-709">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array.</span></span> <span data-ttu-id="ad79d-710">Os atributos associados ao parâmetro são armazenados na assinatura do membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-710">A parameter's associated attributes are stored in the member's signature.</span></span> <span data-ttu-id="ad79d-711">O associador padrão não processa este parâmetro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-711">The default binder does not process this parameter.</span></span></param>
        <param name="culture"><span data-ttu-id="ad79d-712">O objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a localidade de globalização a ser usada, que pode ser necessária para realizar conversões específicas de localidade, como converter uma String numérica em uma Double.</span><span class="sxs-lookup"><span data-stu-id="ad79d-712">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="ad79d-713">- ou -</span><span class="sxs-lookup"><span data-stu-id="ad79d-713">-or-</span></span> 
 <span data-ttu-id="ad79d-714"><see langword="null" /> para usar o <see cref="T:System.Globalization.CultureInfo" /> atual do thread.</span><span class="sxs-lookup"><span data-stu-id="ad79d-714"><see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="ad79d-715">Uma matriz que contém os nomes dos parâmetros para os quais os valores na matriz <paramref name="args" /> são passados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-715">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</span></span></param>
        <summary><span data-ttu-id="ad79d-716">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-716">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-717">Um <see cref="T:System.Object" /> que representa o valor retornado do membro invocado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-717">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-718">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-718">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-719">O <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> método invoca o membro especificado, usando o especificado restrições de associação e a lista de argumentos especificada, modificadores e cultura de correspondência.</span><span class="sxs-lookup"><span data-stu-id="ad79d-719">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers, and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-720">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsAbstract" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-720">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAbstract" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-721"><see langword="true" /> se o <see cref="T:System.Type" /> for abstrato; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-721"><see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-722">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-722">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-723">O <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é abstrato e deve ser substituído.</span><span class="sxs-lookup"><span data-stu-id="ad79d-723">The <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is abstract and must be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-724">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsAnsiClass" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-724">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAnsiClass" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-725"><see langword="true" /> se o atributo de formato da cadeia de caracteres <see langword="AnsiClass" /> estiver selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-725"><see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-726">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-726">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-727">O <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se a cadeia de caracteres de formato de atributo `AnsiClass` está selecionado para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-727">The <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Runtime.InteropServices._Type.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-728">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsArray" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-728">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsArray" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-729"><see langword="true" /> se <see cref="T:System.Type" /> for uma matriz. Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-729"><see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-730">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-730">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-731">O <xref:System.Type.IsArray%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é uma matriz.</span><span class="sxs-lookup"><span data-stu-id="ad79d-731">The <xref:System.Type.IsArray%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool" Usage="_Type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="ad79d-732">O <see cref="T:System.Type" /> a ser comparado com o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-732">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-733">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.IsAssignableFrom(System.Type)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-733">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-734"><see langword="true" /> se <paramref name="c" /> e o <see cref="T:System.Type" /> atual representarem o mesmo tipo ou, se o <see cref="T:System.Type" /> atual estiver na hierarquia de herança de <paramref name="c" /> ou, se o <see cref="T:System.Type" /> atual for uma interface que o <paramref name="c" /> implementa ou, se <paramref name="c" /> for um parâmetro de tipo genérico e o <see cref="T:System.Type" /> atual representar uma das restrições de <paramref name="c" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-734"><see langword="true" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same type, or if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current <see cref="T:System.Type" /> represents one of the constraints of <paramref name="c" />.</span></span> <span data-ttu-id="ad79d-735"><see langword="false" /> se nenhuma dessas condições for o caso ou, se <paramref name="c" /> for <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-735"><see langword="false" /> if none of these conditions are the case, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-736">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-736">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-737">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsAutoClass" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-737">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoClass" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-738"><see langword="true" /> se o atributo de formato da cadeia de caracteres <see langword="AutoClass" /> estiver selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-738"><see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-739">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-739">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-740">O <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se a cadeia de caracteres de formato de atributo `AutoClass` está selecionado para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-740">The <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-741">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsAutoLayout" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-741">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoLayout" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-742"><see langword="true" /> Se o atributo de classe do layout <see langword="AutoLayout" /> está selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-742"><see langword="true" /> if the class layout attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-743">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-743">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-744">O <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o atributo de classe do layout `AutoLayout` está selecionado para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-744">The <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `AutoLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Runtime.InteropServices._Type.IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-745">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsByRef" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-745">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsByRef" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-746"><see langword="true" /> se o <see cref="T:System.Type" /> for aprovado por referência; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-746"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-747">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-747">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-748">O <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é passado por referência.</span><span class="sxs-lookup"><span data-stu-id="ad79d-748">The <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is passed by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Runtime.InteropServices._Type.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-749">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsClass" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-749">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsClass" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-750"><see langword="true" /> se o <see cref="T:System.Type" /> for uma classe; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-750"><see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-751">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-751">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-752">O <xref:System.Type.IsClass%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é uma classe; ou seja, não um tipo de valor ou interface.</span><span class="sxs-lookup"><span data-stu-id="ad79d-752">The <xref:System.Type.IsClass%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a class; that is, not a value type or interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-753">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsCOMObject" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-753">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsCOMObject" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-754"><see langword="true" /> se o <see cref="T:System.Type" /> for um objeto COM; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-754"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-755">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-755">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-756">O <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é um objeto COM.</span><span class="sxs-lookup"><span data-stu-id="ad79d-756">The <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a COM object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Runtime.InteropServices._Type.IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-757">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsContextful" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-757">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsContextful" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-758"><see langword="true" /> se o <see cref="T:System.Type" /> puder ser hospedado em um contexto; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-758"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-759">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-759">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-760">O <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> pode ser hospedado em um contexto.</span><span class="sxs-lookup"><span data-stu-id="ad79d-760">The <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> can be hosted in a context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_Type.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="ad79d-761">O objeto <see langword="Type" /> ao qual os atributos personalizados são aplicados.</span><span class="sxs-lookup"><span data-stu-id="ad79d-761">The <see langword="Type" /> object to which the custom attributes are applied.</span></span></param>
        <param name="inherit"><span data-ttu-id="ad79d-762">Especifica se deve-se pesquisar ou não a cadeia de herança desse membro para localizar os atributos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-762">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="ad79d-763">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-763">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-764"><see langword="true" /> se uma ou mais instâncias de <paramref name="attributeType" /> forem aplicadas a esse membro; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-764"><see langword="true" /> if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-765">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-765">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-766">O <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> método indica se um ou mais instâncias de `attributeType` é aplicado a esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-766">The <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> method indicates whether one or more instance of `attributeType` is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Runtime.InteropServices._Type.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-767">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsEnum" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-767">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsEnum" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-768"><see langword="true" /> se o <see cref="T:System.Type" /> atual representar uma enumeração; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-768"><see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-769">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-769">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-770">O <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o atual <xref:System.Type> representa uma enumeração.</span><span class="sxs-lookup"><span data-stu-id="ad79d-770">The <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> property gets a value indicating whether the current <xref:System.Type> represents an enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-771">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsExplicitLayout" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-771">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsExplicitLayout" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-772"><see langword="true" /> Se o atributo de classe do layout <see langword="ExplicitLayout" /> está selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-772"><see langword="true" /> if the class layout attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-773">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-773">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-774">O <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o atributo de classe do layout `ExplicitLayout` está selecionado para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-774">The <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `ExplicitLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Runtime.InteropServices._Type.IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-775">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsImport" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-775">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsImport" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-776"><see langword="true" /> Se o <see cref="T:System.Type" /> tem <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-776"><see langword="true" /> if the <see cref="T:System.Type" /> has <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-777">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-777">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-778">O <xref:System.Type.IsImport%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> tem <xref:System.Runtime.InteropServices.ComImportAttribute>, indicando que ela foi importada de uma biblioteca de tipos COM.</span><span class="sxs-lookup"><span data-stu-id="ad79d-778">The <xref:System.Type.IsImport%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has <xref:System.Runtime.InteropServices.ComImportAttribute>, indicating that it was imported from a COM type library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool" Usage="_Type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="ad79d-779">O objeto a ser comparado com o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-779">The object to compare with the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-780">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.IsInstanceOfType(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-780">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-781"><see langword="true" /> se o <see cref="T:System.Type" /> atual estiver na hierarquia de herança do objeto representado pelo <paramref name="o" /> ou se o <see cref="T:System.Type" /> atual for uma interface com suporte no <paramref name="o" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-781"><see langword="true" /> if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="o" /> supports.</span></span> <span data-ttu-id="ad79d-782"><see langword="false" /> se nenhuma dessas condições for verdadeira, se <paramref name="o" /> for <see langword="null" /> ou se o <see cref="T:System.Type" /> atual for um tipo genérico aberto (ou seja, <see cref="P:System.Type.ContainsGenericParameters" /> retorna <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="ad79d-782"><see langword="false" /> if neither of these conditions is the case, or if <paramref name="o" /> is <see langword="null" />, or if the current <see cref="T:System.Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-783">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-783">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-784">O <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> método determina se o objeto especificado é uma instância do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-784">The <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> method determines whether the specified object is an instance of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Runtime.InteropServices._Type.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-785">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsInterface" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-785">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsInterface" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-786"><see langword="true" /> se o <see cref="T:System.Type" /> é uma interface; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-786"><see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-787">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-787">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-788">O <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é uma interface, ou seja, não uma classe ou um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="ad79d-788">The <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an interface; that is, not a class or a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-789">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsLayoutSequential" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-789">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsLayoutSequential" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-790"><see langword="true" /> Se o atributo de classe do layout <see langword="SequentialLayout" /> está selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-790"><see langword="true" /> if the class layout attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-791">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-791">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-792">O <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o atributo de classe do layout `SequentialLayout` está selecionado para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-792">The <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `SequentialLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-793">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsMarshalByRef" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-793">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsMarshalByRef" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-794"><see langword="true" /> se for realizado marshal no <see cref="T:System.Type" /> por referência; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-794"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-795">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-795">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-796">O <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o tipo é empacotado por referência.</span><span class="sxs-lookup"><span data-stu-id="ad79d-796">The <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the Type is marshaled by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-797">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNestedAssembly" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-797">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedAssembly" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-798"><see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visível somente dentro de seu próprio assembly; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-798"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-799">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-799">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-800">O <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é aninhado e visível somente dentro de seu próprio assembly.</span><span class="sxs-lookup"><span data-stu-id="ad79d-800">The <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-801">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNestedFamANDAssem" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-801">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamANDAssem" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-802"><see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visíveis somente para classes que pertencem à sua própria família e seu próprio assembly; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-802"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-803">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-803">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-804">O <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é aninhadas e visíveis somente para classes que pertencem à sua própria família e seu próprio assembly.</span><span class="sxs-lookup"><span data-stu-id="ad79d-804">The <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-805">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNestedFamily" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-805">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamily" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-806"><see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visível somente dentro de sua própria família; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-806"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-807">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-807">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-808">O <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é aninhado e visível somente dentro de sua própria família.</span><span class="sxs-lookup"><span data-stu-id="ad79d-808">The <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own family.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-809">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNestedFamORAssem" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-809">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamORAssem" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-810"><see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visíveis somente para classes que pertencem à sua própria família ou ao seu próprio assembly; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-810"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-811">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-811">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-812">O <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é aninhado e visíveis somente para classes que pertençam à sua própria família ou seu próprio assembly.</span><span class="sxs-lookup"><span data-stu-id="ad79d-812">The <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-813">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNestedPrivate" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-813">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPrivate" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-814"><see langword="true" /> Se o <see cref="T:System.Type" /> é aninhado e declarado privado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-814"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-815">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-815">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-816">O <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é aninhado e declarado privado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-816">The <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and declared private.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-817">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNestedPublic" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-817">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPublic" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-818"><see langword="true" /> Se a classe aninhada e declarada pública; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-818"><see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-819">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-819">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-820">O <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se uma classe está aninhada e declarada pública.</span><span class="sxs-lookup"><span data-stu-id="ad79d-820">The <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> property gets a value indicating whether a class is nested and declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-821">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsNotPublic" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-821">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNotPublic" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-822"><see langword="true" /> Se o nível superior <see cref="T:System.Type" /> não está declarado como público; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-822"><see langword="true" /> if the top-level <see cref="T:System.Type" /> is not declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-823">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-823">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-824">O <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o nível superior <xref:System.Type> não está declarado como público.</span><span class="sxs-lookup"><span data-stu-id="ad79d-824">The <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is not declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Runtime.InteropServices._Type.IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-825">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsPointer" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-825">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPointer" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-826"><see langword="true" /> se o <see cref="T:System.Type" /> for um ponteiro; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-826"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-827">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-827">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-828">O <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é um ponteiro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-828">The <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a pointer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-829">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsPrimitive" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-829">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPrimitive" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-830"><see langword="true" /> se o <see cref="T:System.Type" /> for um dos tipos primitivos; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-830"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-831">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-831">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-832">O <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é um dos tipos primitivos.</span><span class="sxs-lookup"><span data-stu-id="ad79d-832">The <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is one of the primitive types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Runtime.InteropServices._Type.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-833">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsPublic" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-833">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPublic" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-834"><see langword="true" /> Se o nível superior <see cref="T:System.Type" /> é declarado público; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-834"><see langword="true" /> if the top-level <see cref="T:System.Type" /> is declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-835">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-835">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-836">O <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o nível superior <xref:System.Type> está declarado como público.</span><span class="sxs-lookup"><span data-stu-id="ad79d-836">The <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Runtime.InteropServices._Type.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-837">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsSealed" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-837">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSealed" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-838"><see langword="true" /> Se o <see cref="T:System.Type" /> é declarado selado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-838"><see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-839">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-839">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-840">O <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> for declarada como lacrada.</span><span class="sxs-lookup"><span data-stu-id="ad79d-840">The <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is declared sealed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-841">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsSerializable" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-841">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSerializable" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-842"><see langword="true" /> se o <see cref="T:System.Type" /> for serializável; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-842"><see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-843">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-843">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-844">O <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é serializável.</span><span class="sxs-lookup"><span data-stu-id="ad79d-844">The <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is serializable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-845">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsSpecialName" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-845">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSpecialName" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-846"><see langword="true" /> Se o <see cref="T:System.Type" /> tem um nome que exige tratamento especial; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-846"><see langword="true" /> if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-847">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-847">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-848">O <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> tem um nome que exige tratamento especial.</span><span class="sxs-lookup"><span data-stu-id="ad79d-848">The <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has a name that requires special handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool" Usage="_Type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="ad79d-849">O <see cref="T:System.Type" /> a ser comparado com o <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-849">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="ad79d-850">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.IsSubclassOf(System.Type)" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-850">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsSubclassOf(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-851"><see langword="true" /> se o <see cref="T:System.Type" /> representado pelo parâmetro <paramref name="c" /> e o <see cref="T:System.Type" /> atual representarem classes e a classe representada pelo <see cref="T:System.Type" /> atual derivar da classe representada por <paramref name="c" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-851"><see langword="true" /> if the <see cref="T:System.Type" /> represented by the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent classes, and the class represented by the current <see cref="T:System.Type" /> derives from the class represented by <paramref name="c" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad79d-852">Esse método também retornará <see langword="false" /> se <paramref name="c" /> e o <see cref="T:System.Type" /> atual representarem a mesma classe.</span><span class="sxs-lookup"><span data-stu-id="ad79d-852">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-853">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-853">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-854">O <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> método determina se a classe representado pelo atual <xref:System.Type> deriva da classe representada pelo <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-854">The <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> method determines whether the class represented by the current <xref:System.Type> derives from the class represented by the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-855">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsUnicodeClass" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-855">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsUnicodeClass" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-856"><see langword="true" /> se o atributo de formato da cadeia de caracteres <see langword="UnicodeClass" /> estiver selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-856"><see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-857">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-857">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-858">O <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se a cadeia de caracteres de formato de atributo `UnicodeClass` está selecionado para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-858">The <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Runtime.InteropServices._Type.IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-859">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.IsValueType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-859">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsValueType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-860"><see langword="true" /> se o <see cref="T:System.Type" /> for um tipo de valor; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-860"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-861">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-861">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-862">O <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> propriedade obtém um valor que indica se o <xref:System.Type> é um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="ad79d-862">The <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._Type.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-863">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.MemberType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-863">Provides COM objects with version-independent access to the <see cref="P:System.Type.MemberType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-864">Um valor <see cref="T:System.Reflection.MemberTypes" /> que indica que esse membro é um tipo ou um tipo aninhado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-864">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-865">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-865">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-866">O <xref:System.Type.MemberType%2A?displayProperty=nameWithType> propriedade obtém um <xref:System.Reflection.MemberTypes> valor que indica que esse membro é um tipo ou um tipo aninhado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-866">The <xref:System.Type.MemberType%2A?displayProperty=nameWithType> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a type or a nested type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Runtime.InteropServices._Type.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-867">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.Module" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-867">Provides COM objects with version-independent access to the <see cref="P:System.Type.Module" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-868">O nome do módulo no qual atual <see cref="T:System.Type" /> está definido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-868">The name of the module in which the current <see cref="T:System.Type" /> is defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-869">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-869">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-870">O <xref:System.Type.Module%2A?displayProperty=nameWithType> propriedade obtém o módulo (DLL) no qual atual <xref:System.Type> está definido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-870">The <xref:System.Type.Module%2A?displayProperty=nameWithType> property gets the module (the DLL) in which the current <xref:System.Type> is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-871">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Reflection.MemberInfo.Name" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-871">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-872">O nome do <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-872">The name of the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-873">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-873">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-874">O <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> propriedade obtém o nome da <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-874">The <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> property gets the name of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Runtime.InteropServices._Type.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-875">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.Namespace" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-875">Provides COM objects with version-independent access to the <see cref="P:System.Type.Namespace" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-876">O namespace do <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-876">The namespace of the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-877">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-877">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-878">O <xref:System.Type.Namespace%2A?displayProperty=nameWithType> propriedade obtém o namespace do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-878">The <xref:System.Type.Namespace%2A?displayProperty=nameWithType> property gets the namespace of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-879">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.ReflectedType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-879">Provides COM objects with version-independent access to the <see cref="P:System.Type.ReflectedType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-880">O objeto <see cref="T:System.Type" /> por meio do qual este objeto <see cref="T:System.Reflection.MemberInfo" /> foi obtido.</span><span class="sxs-lookup"><span data-stu-id="ad79d-880">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-881">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-881">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-882">O <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> propriedade obtém o objeto de classe que foi usado para obter esse membro.</span><span class="sxs-lookup"><span data-stu-id="ad79d-882">The <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> property gets the class object that was used to obtain this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_Type.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad79d-883">Fornece objetos COM com acesso independente de versão para o método <see cref="M:System.Type.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-883">Provides COM objects with version-independent access to the <see cref="M:System.Type.ToString" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad79d-884">Uma <see cref="T:System.String" /> que representa o nome da <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-884">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-885">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-885">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-886">O <xref:System.Type.ToString%2A?displayProperty=nameWithType> método retorna o nome do atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-886">The <xref:System.Type.ToString%2A?displayProperty=nameWithType> method returns the name of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-887">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.TypeHandle" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-887">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeHandle" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-888">O identificador do <see cref="T:System.Type" /> atual.</span><span class="sxs-lookup"><span data-stu-id="ad79d-888">The handle for the current <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-889">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-889">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-890">O <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> propriedade obtém o identificador atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-890">The <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property gets the handle for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-891">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.TypeInitializer" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-891">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeInitializer" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-892">Um <see cref="T:System.Reflection.ConstructorInfo" /> que contém o nome do construtor de classe para o <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-892">A <see cref="T:System.Reflection.ConstructorInfo" /> containing the name of the class constructor for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-893">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-893">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-894">O <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> propriedade obtém o inicializador para o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="ad79d-894">The <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> property gets the initializer for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad79d-895">Fornece acesso independente da versão para objetos COM à propriedade <see cref="P:System.Type.UnderlyingSystemType" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-895">Provides COM objects with version-independent access to the <see cref="P:System.Type.UnderlyingSystemType" /> property.</span></span></summary>
        <value><span data-ttu-id="ad79d-896">O tipo de sistema subjacente para o <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="ad79d-896">The underlying system type for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad79d-897">Essa propriedade é para acesso a classes gerenciadas do código não gerenciado e não deve ser chamada a partir do código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="ad79d-897">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="ad79d-898">O <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> propriedade indica o tipo fornecido pelo common language runtime que representa esse tipo.</span><span class="sxs-lookup"><span data-stu-id="ad79d-898">The <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> property indicates the type provided by the common language runtime that represents this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
