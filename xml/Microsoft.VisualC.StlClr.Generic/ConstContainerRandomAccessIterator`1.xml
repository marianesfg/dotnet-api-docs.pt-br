<Type Name="ConstContainerRandomAccessIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3224a212af5cc94603064ce343baaf9b985dfec4" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52740500" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConstContainerRandomAccessIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConstContainerRandomAccessIterator`1&lt;TValue&gt; extends System.Object implements class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ConstContainerRandomAccessIterator(Of TValue)&#xA;Implements IRandomAccessIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public ref class ConstContainerRandomAccessIterator : Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type ConstContainerRandomAccessIterator&lt;'Value&gt; = class&#xA;    interface IRandomAccessIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBaseIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IOutputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</typeparam>
    <summary>
      <span data-ttu-id="dafd6-101">Fornece um iterador compatível com as seguintes operações: mover uma posição para frente chamando <c>operador++</c>, mover uma posição para trás chamando <c>operador--</c>, acessar um elemento usando <c>operador[]</c> e acessar um elemento usando a aritmética de ponteiro.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dafd6-101">Provides an iterator that supports the following operations: moving forward one position by calling <c>operator++</c>, moving backward one position by calling <c>operator--</c>, accessing an element by using <c>operator[]</c>, and accessing an element by using pointer arithmetic.</span>
      </span>
      <span data-ttu-id="dafd6-102">O elemento apontado pelo iterador não pode ser modificado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dafd6-102">The element pointed to by the iterator cannot be modified.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-103">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-103">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstContainerRandomAccessIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstContainerRandomAccessIterator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-104">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-104">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ConstContainerRandomAccessIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstContainerRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; _Right" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-105">Um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> existente a ser copiado para o contêiner atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-105">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-106">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> de um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-106">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ContainerRandomAccessIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstContainerRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; _Right" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-107">Um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> existente a ser copiado para o contêiner atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-107">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-108">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> de um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-108">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt; _Cont, int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1&lt;!TValue&gt; _Cont, int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Cont As IRandomAccessContainer(Of TValue), _Offset As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstContainerRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::IRandomAccessContainer&lt;TValue&gt; ^ _Cont, int _Offset);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;'Value&gt; * int -&gt; Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; (_Cont, _Offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Cont" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt;" />
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Cont">
          <span data-ttu-id="dafd6-109">Um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> existente a ser copiado para o contêiner atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-109">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <param name="_Offset">
          <span data-ttu-id="dafd6-110">O deslocamento do elemento ao qual o iterador apontará após a criação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-110">The offset of the element that the iterator will point to after creation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-111">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> de um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-111">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="constContainerRandomAccessIterator.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-112">Cria uma cópia do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-112">Creates a copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-113">Uma cópia do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-113">A copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="container">
      <MemberSignature Language="C#" Value="public virtual object container ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object container() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function container () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ container();" />
      <MemberSignature Language="F#" Value="abstract member container : unit -&gt; obj&#xA;override this.container : unit -&gt; obj" Usage="constContainerRandomAccessIterator.container " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-114">Obtém o contêiner que o iterador está atravessando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-114">Gets the container that the iterator is traversing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-115">O contêiner que o iterador está atravessando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-115">The container that the iterator is traversing.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="distance">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-116">Determina a distância entre o elemento que aponta para o qual o iterador atual está apontando e o elemento para o qual o iterador determinado está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-116">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public int distance (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 distance(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function distance (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int distance(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.distance : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="constContainerRandomAccessIterator.distance _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-117">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-117">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-118">Determina a distância entre o elemento que aponta para o qual o iterador atual está apontando e o elemento para o qual o iterador determinado está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-118">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-119">A distância, em número de elementos, entre o elemento para o qual o iterador atual está apontando e o elemento para o qual o <paramref name="_Right" /> está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-119">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span>
          </span>
          <span data-ttu-id="dafd6-120">Esse número será negativo se <paramref name="_Right" /> apontar para um elemento que está antes do elemento para o qual o iterador atual aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-120">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public virtual int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 distance(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function distance (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int distance(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int&#xA;override this.distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="constContainerRandomAccessIterator.distance _Right" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-121">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-121">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-122">Determina a distância entre o elemento que aponta para o qual o iterador atual está apontando e o elemento para o qual o iterador determinado está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-122">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-123">A distância, em número de elementos, entre o elemento para o qual o iterador atual está apontando e o elemento para o qual o <paramref name="_Right" /> está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-123">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span>
          </span>
          <span data-ttu-id="dafd6-124">Esse número será negativo se <paramref name="_Right" /> apontar para um elemento que está antes do elemento para o qual o iterador atual aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-124">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="equal_to">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-125">Determina se dois iteradores são o mesmo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-125">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public bool equal_to (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_to (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool equal_to(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.equal_to : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="constContainerRandomAccessIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-126">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-126">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-127">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> determinado é o mesmo que o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-127">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-128">
            <see langword="true" /> se os dois objetos <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-128">
              <see langword="true" /> if the two <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> objects are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function equal_to (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool equal_to(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool&#xA;override this.equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="constContainerRandomAccessIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-129">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-129">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-130">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> determinado é o mesmo que o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-130">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-131">
            <see langword="true" /> se os dois iteradores forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-131">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_bias">
      <MemberSignature Language="C#" Value="public virtual int get_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 get_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int get_bias();" />
      <MemberSignature Language="F#" Value="abstract member get_bias : unit -&gt; int&#xA;override this.get_bias : unit -&gt; int" Usage="constContainerRandomAccessIterator.get_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-132">Obtém o desvio do iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-132">Gets the bias of the iterator.</span>
          </span>
          <span data-ttu-id="dafd6-133">O desvio é o deslocamento do iterador do elemento zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-133">The bias is the offset of the iterator from element zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-134">O desvio do iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-134">The bias of the iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_cref">
      <MemberSignature Language="C#" Value="public virtual TValue get_cref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_cref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_cref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_cref();" />
      <MemberSignature Language="F#" Value="abstract member get_cref : unit -&gt; &#xA;override this.get_cref : unit -&gt; " Usage="constContainerRandomAccessIterator.get_cref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-135">Retorna uma referência constante ao elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-135">Returns a constant reference to the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-136">Uma referência constante ao elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-136">A constant reference to the element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_node">
      <MemberSignature Language="C#" Value="public virtual object get_node ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_node() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_node () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ get_node();" />
      <MemberSignature Language="F#" Value="abstract member get_node : unit -&gt; obj&#xA;override this.get_node : unit -&gt; obj" Usage="constContainerRandomAccessIterator.get_node " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-137">Obtém o nó, ou elemento, para o qual o iterador está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-137">Gets the node, or element, that the iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-138">O nó para o qual o iterador está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-138">The node that the iterator is pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_ref">
      <MemberSignature Language="C#" Value="public virtual TValue get_ref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_ref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_ref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_ref();" />
      <MemberSignature Language="F#" Value="abstract member get_ref : unit -&gt; &#xA;override this.get_ref : unit -&gt; " Usage="constContainerRandomAccessIterator.get_ref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-139">Retorna uma referência ao elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-139">Returns a reference to the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-140">Uma referência ao elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-140">A reference to the element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[int _Pos] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue % default[int] { TValue % get(int _Pos); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : " Usage="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">
          <span data-ttu-id="dafd6-141">A posição do elemento a ser acessado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-141">The position of the element to access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-142">Acessa o elemento na posição determinada no contêiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-142">Accesses the element at the given position in the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dafd6-143">O elemento na posição determinada no contêiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-143">The element at the given position in the container.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="less_than">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-144">Determina se o iterador atual está apontando para um elemento no contêiner que está antes do elemento para o qual um iterador determinado aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-144">Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public bool less_than (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool less_than(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function less_than (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool less_than(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.less_than : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="constContainerRandomAccessIterator.less_than _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-145">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-145">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-146">Determina se o iterador atual está apontando para um elemento no contêiner que está antes do elemento para o qual o iterador determinado aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-146">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-147">
            <see langword="true" /> se o iterador atual estiver apontando para um elemento que vem antes do elemento para o qual <paramref name="_Right" /> está apontando; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-147">
              <see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public virtual bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool less_than(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function less_than (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool less_than(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool&#xA;override this.less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="constContainerRandomAccessIterator.less_than _Right" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-148">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-148">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-149">Determina se o iterador atual está apontando para um elemento no contêiner que está antes do elemento para o qual o iterador determinado aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-149">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-150">
            <see langword="true" /> se o iterador atual estiver apontando para um elemento que vem antes do elemento para o qual <paramref name="_Right" /> está apontando; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-150">
              <see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="move">
      <MemberSignature Language="C#" Value="public virtual int move (int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 move(int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function move (_Offset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int move(int _Offset);" />
      <MemberSignature Language="F#" Value="abstract member move : int -&gt; int&#xA;override this.move : int -&gt; int" Usage="constContainerRandomAccessIterator.move _Offset" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Offset">
          <span data-ttu-id="dafd6-151">O número de elementos a serem atravessados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-151">The number of elements to traverse.</span>
          </span>
          <span data-ttu-id="dafd6-152">Para mover o iterador para frente, especifique um número positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-152">To move the iterator forward, specify a positive number.</span>
          </span>
          <span data-ttu-id="dafd6-153">Para mover o iterador para trás, especifique um número negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-153">To move the iterator backward, use a negative number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-154">Move o iterador pelo número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-154">Moves the iterator by the given number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-155">O número real de elementos atravessados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-155">The actual number of elements traversed.</span>
          </span>
          <span data-ttu-id="dafd6-156">Este número será diferente de <paramref name="_Offset" /> se o início ou o fim do contêiner for atingido antes da iteração do número de elementos desejado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-156">This number will differ from <paramref name="_Offset" /> if the beginning or end of the container is reached before iterating the desired number of elements.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="next">
      <MemberSignature Language="C#" Value="public virtual void next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub next ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void next();" />
      <MemberSignature Language="F#" Value="abstract member next : unit -&gt; unit&#xA;override this.next : unit -&gt; unit" Usage="constContainerRandomAccessIterator.next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-157">Incrementa o iterador para a próxima posição no contêiner subjacente ou para a primeira posição além do fim do contêiner se o contêiner foi atravessado completamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-157">Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-158">Incrementa o iterador no número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-158">Increments the iterator by the given number of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public void operator + (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Addition(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator + (ByRef  As ConstContainerRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator +(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberSignature Language="F#" Value="member this.( + ) :  * int -&gt; unit" Usage=" + _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-159">Uma referência ao iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-159">A reference to the current iterator.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="dafd6-160">O número de elementos a ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-160">The number of elements to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-161">Incrementa o iterador no número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-161">Increments the iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="dafd6-162">O parâmetro numérico inteiro é especificado no lado direito do operador de adição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-162">The integer parameter is specified on the right side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-163">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-163">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static void operator + (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; , int _Left, Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.void op_Addition(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Left, class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ByRef  As ConstContainerRandomAccessIterator(Of TValue), _Left As Integer, _Right As ConstContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ^ operator +(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % , int _Left, Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="static member ( + ) :  * int * Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; unit" Usage=" + _Left _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Left" Type="System.Int32" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-164">Uma referência ao iterador sobre o qual o operador deve agir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-164">A reference to the iterator that the operator is to act on.</span>
          </span>
        </param>
        <param name="_Left">
          <span data-ttu-id="dafd6-165">O número de elementos a ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-165">The number of elements to increment.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="dafd6-166">O iterador a ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-166">The iterator to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-167">Incrementa o iterador no número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-167">Increments the iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="dafd6-168">O parâmetro numérico inteiro é especificado no lado esquerdo do operador de adição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-168">The integer parameter is specified on the left side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-169">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-169">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-170">Atribui um objeto determinado ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-170">Assigns a given object to the current object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; op_Assign (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; op_Assign(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ConstContainerRandomAccessIterator(Of TValue)) As ConstContainerRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Assign : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;" Usage="constContainerRandomAccessIterator.op_Assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-171">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> a ser atribuído ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-171">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-172">Atribui o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> determinado ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-172">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-173">O objeto atual (\*este).</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-173">The current object (\*this).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; op_Assign (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; op_Assign(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ContainerRandomAccessIterator(Of TValue)) As ConstContainerRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Assign : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;" Usage="constContainerRandomAccessIterator.op_Assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-174">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> a ser atribuído ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-174">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-175">Atribui o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> determinado ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-175">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-176">O objeto atual (\*este).</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-176">The current object (\*this).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Decrement">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-177">Diminui o iterador por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-177">Decrements the iterator by one element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ConstContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  -&gt; unit" Usage="constContainerRandomAccessIterator.op_Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-178">Uma referência ao iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-178">A reference to the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-179">Diminui o iterador por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-179">Decrements the iterator by one element.</span>
          </span>
          <span data-ttu-id="dafd6-180">Essa é a versão de prefixo do operador de decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-180">This is the prefix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-181">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-181">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; , int );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ConstContainerRandomAccessIterator(Of TValue),  As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % , int );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  * int -&gt; unit" Usage="constContainerRandomAccessIterator.op_Decrement (, )" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="System.Int32" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-182">Uma referência ao iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-182">A reference to the current iterator.</span>
          </span>
        </param>
        <param name="A_0">
          <span data-ttu-id="dafd6-183">Um parâmetro não utilizado que indica que essa é a versão pós-correção do operador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-183">An unused parameter that indicates this is the postfix version of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-184">Diminui o iterador por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-184">Decrements the iterator by one element.</span>
          </span>
          <span data-ttu-id="dafd6-185">Essa é a versão pós-correção do operador de decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-185">This is the postfix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-186">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-186">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-187">Determina se dois iteradores são o mesmo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-187">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-188">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-188">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-189">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> determinado é o mesmo que o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-189">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-190">
            <see langword="true" /> se os dois iteradores forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-190">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-191">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-191">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-192">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> determinado é o mesmo que o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-192">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-193">
            <see langword="true" /> se os dois iteradores forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-193">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-194">Determina se a posição de um iterador é maior que a posição de outro iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-194">Determines whether the position of an iterator is greater than the position of another iterator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public bool operator &gt; (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThan(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt; (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &gt; ) : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&gt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-195">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-195">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-196">Determina se a posição do iterador no lado esquerdo é maior que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-196">Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-197">
            <see langword="true" /> se o iterador no lado esquerdo for maior que o iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-197">
              <see langword="true" /> if the left-side iterator is greater than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Left, Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Left, class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (_Left As IRandomAccessIterator(Of TValue), _Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Left, Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="_Left &gt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="dafd6-198">O iterador a ser comparado com o iterador no lado direito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-198">The iterator to compare with the right-side iterator.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="dafd6-199">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-199">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-200">Determina se a posição do iterador no lado esquerdo determinado é maior que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-200">Determines whether the position of the given left-side iterator is greater than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-201">
            <see langword="true" /> se o iterador no lado esquerdo determinado for maior que o iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-201">
              <see langword="true" /> if the given left-side iterator is greater than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-202">Determina se a posição de um iterador é maior ou igual à posição de outro iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-202">Determines whether the position of an iterator is greater than or equal to the position of another iterator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &gt;= (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt;= (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;=(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &gt;= ) : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&gt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-203">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-203">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-204">Determina se a posição do iterador no lado esquerdo é maior ou igual à posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-204">Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-205">
            <see langword="true" /> se o iterador no lado esquerdo for maior ou igual ao iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-205">
              <see langword="true" /> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &gt;= (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThanOrEqual(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt;= (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;=(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &gt;= ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&gt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-206">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-206">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-207">Determina se a posição do iterador no lado esquerdo é maior ou igual à posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-207">Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-208">
            <see langword="true" /> se o iterador no lado esquerdo for maior ou igual ao iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-208">
              <see langword="true" /> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public implicit operator Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; op_Implicit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Widening Operator CType () As IRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; operator Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^();" />
      <MemberSignature Language="F#" Value="member this.op_Implicit : unit -&gt; Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt;" Usage="constContainerRandomAccessIterator.op_Implicit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-209">Converte um <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> em um <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-209">Converts a <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> to an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-210">O iterador atual como um <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-210">The current iterator as an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Increment">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-211">Incrementa o iterador por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-211">Increments the iterator by one element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ConstContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  -&gt; unit" Usage="constContainerRandomAccessIterator.op_Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-212">Uma referência ao iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-212">A reference to the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-213">Incrementa o iterador por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-213">Increments the iterator by one element.</span>
          </span>
          <span data-ttu-id="dafd6-214">Esta é a versão de prefixo do operador de incremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-214">This is the prefix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-215">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-215">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; , int );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ConstContainerRandomAccessIterator(Of TValue),  As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % , int );" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  * int -&gt; unit" Usage="constContainerRandomAccessIterator.op_Increment (, )" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="System.Int32" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-216">Uma referência ao iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-216">A reference to the current iterator.</span>
          </span>
        </param>
        <param name="A_0">
          <span data-ttu-id="dafd6-217">Um parâmetro não utilizado que indica que essa é a versão pós-correção do operador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-217">An unused parameter that indicates this is the postfix version of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-218">Incrementa o iterador por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-218">Increments the iterator by one element.</span>
          </span>
          <span data-ttu-id="dafd6-219">Essa é a versão pós-correção do operador de incremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-219">This is the postfix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-220">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-220">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-221">Determina se dois iteradores não são o mesmo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-221">Determines whether two iterators are not the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="constContainerRandomAccessIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-222">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-222">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-223">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> determinado é diferente do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-223">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-224">
            <see langword="true" /> se os dois iteradores forem objetos diferentes; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-224">
              <see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="constContainerRandomAccessIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-225">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-225">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-226">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> determinado é diferente do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-226">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-227">
            <see langword="true" /> se os dois iteradores forem objetos diferentes; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-227">
              <see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-228">Determina se a posição de um iterador é menor que a posição de outro iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-228">Determines whether the position of an iterator is less than the position of another iterator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public bool operator &lt; (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThan(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt; (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &lt; ) : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&lt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-229">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-229">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-230">Determina se a posição do iterador no lado esquerdo é menor que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-230">Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-231">
            <see langword="true" /> se o iterador no lado esquerdo for menor que o iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-231">
              <see langword="true" /> if the left-side iterator is less than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public bool operator &lt; (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThan(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt; (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &lt; ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&lt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-232">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-232">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-233">Determina se a posição do iterador no lado esquerdo é menor que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-233">Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-234">
            <see langword="true" /> se o iterador no lado esquerdo for menor que o iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-234">
              <see langword="true" /> if the left-side iterator is less than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-235">Determina se a posição de um iterador é menor ou igual à posição de outro iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-235">Determines whether the position of an iterator is less than or equal to the position of another iterator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &lt;= (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt;= (_Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;=(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &lt;= ) : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&lt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-236">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-236">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-237">Determina se a posição do iterador no lado esquerdo é menor ou igual à posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-237">Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-238">
            <see langword="true" /> se o iterador no lado esquerdo for menor ou igual ao iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-238">
              <see langword="true" /> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Left, Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Left, class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (_Left As IRandomAccessIterator(Of TValue), _Right As ConstContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Left, Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="_Left &lt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="dafd6-239">O iterador a ser comparado com o iterador no lado direito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-239">The iterator to compare with the right-side iterator.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="dafd6-240">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-240">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-241">Determina se a posição do iterador no lado esquerdo determinado é menor que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-241">Determines whether the position of the given left-side iterator is less than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-242">
            <see langword="true" /> se o iterador no lado esquerdo determinado for menor ou igual ao iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-242">
              <see langword="true" /> if the given left-side iterator is less than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_MemberSelection">
      <MemberSignature Language="C#" Value="public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_MemberSelection(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_MemberSelection (_Left As ConstContainerRandomAccessIterator(Of TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_MemberSelection(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Left);" />
      <MemberSignature Language="F#" Value="static member op_MemberSelection : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; " Usage="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;.op_MemberSelection _Left" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="dafd6-243">O iterador ao qual o operador é aplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-243">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-244">Retorna o elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-244">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-245">O elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-245">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_PointerDereference">
      <MemberSignature Language="C#" Value="public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_PointerDereference(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt; _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_PointerDereference (_Left As ConstContainerRandomAccessIterator(Of TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_PointerDereference(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ _Left);" />
      <MemberSignature Language="F#" Value="static member op_PointerDereference : Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt; -&gt; " Usage="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;'Value&gt;.op_PointerDereference _Left" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="dafd6-246">O iterador ao qual o operador é aplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-246">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-247">Retorna o elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-247">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-248">O elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-248">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-249">Decrementa o iterador pelo número determinado de elementos ou determina a diferença entre dois iteradores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-249">Decrements the iterator by the given number of elements, or determines the difference between two iterators.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public int operator - (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance int32 op_Subtraction(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int operator -(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( - ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="- _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="dafd6-250">O <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> a ser subtraído do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-250">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> to be subtracted from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-251">Determina a diferença entre dois iteradores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-251">Determines the difference between two iterators.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-252">A diferença, em número de elementos, entre os dois iteradores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-252">The difference, in number of elements, between the two iterators.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public void operator - (ref Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Subtraction(class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (ByRef  As ConstContainerRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator -(Microsoft::VisualC::StlClr::Generic::ConstContainerRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberSignature Language="F#" Value="member this.( - ) :  * int -&gt; unit" Usage=" - _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="dafd6-253">Uma referência ao iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-253">A reference to the current iterator.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="dafd6-254">O número de elementos a serem decrementados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-254">The number of elements to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dafd6-255">Decrementa o iterador pelo número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-255">Decrements the iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="dafd6-256">O parâmetro numérico inteiro é especificado no lado direito do operador de adição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-256">The integer parameter is specified on the right side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-257">Um iterador decrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-257">A decremented iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public virtual void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit&#xA;override this.prev : unit -&gt; unit" Usage="constContainerRandomAccessIterator.prev " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-258">Posiciona o iterador para o elemento imediatamente antes do elemento atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-258">Positions the iterator to the element immediately before the current element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="valid">
      <MemberSignature Language="C#" Value="public virtual bool valid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool valid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function valid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool valid();" />
      <MemberSignature Language="F#" Value="abstract member valid : unit -&gt; bool&#xA;override this.valid : unit -&gt; bool" Usage="constContainerRandomAccessIterator.valid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dafd6-259">Determina se o iterador é válido e pode ser usado com segurança para atravessar o contêiner subjacente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-259">Determines whether the iterator is valid and can be safely used to traverse the underlying container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dafd6-260">
            <see langword="true" /> se o iterador for válido e seguro para ser usado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dafd6-260">
              <see langword="true" /> if the iterator is valid and safe to use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>