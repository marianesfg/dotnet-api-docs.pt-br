<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContainerBidirectionalIterator`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5acb72380a221e24d560ac7af1fadc89f7723d68d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acb72380a221e24d560ac7af1fadc89f7723d68d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Defines an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator.</source>
          <target state="translated">Define um iterador que pode acessar elementos em um contêiner da direção para frente usando o operador de incremento e na direção para trás usando o operador de decremento.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>The element that the iterator points to can be both written to and read from any number of times.</source>
          <target state="translated">O elemento para o qual o iterador aponta pode ser gravado e lidos qualquer número de vezes.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Bidirectional iterators can be used anywhere that an input or output iterator is required.</source>
          <target state="translated">Iteradores bidirecionais podem ser usados em qualquer lugar em que um iterador de entrada ou de saída seja necessário.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Aloca e inicializa um novo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Aloca e inicializa um novo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object to copy.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> existente a ser copiado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Aloca e inicializa um novo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> de um objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> existente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
          <source>The node that the iterator will point to.</source>
          <target state="translated">O nó para o qual o iterador apontará.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object that points to the given node.</source>
          <target state="translated">Aloca e inicializa um novo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> que aponta para o nó determinado.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
          <source>Returns a copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Retorna uma cópia do objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Uma cópia do objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
          <source>Gets the container that the iterator is traversing.</source>
          <target state="translated">Obtém o contêiner que o iterador está atravessando.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
          <source>The container that the iterator is traversing.</source>
          <target state="translated">O contêiner que o iterador está atravessando.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Determines if two iterators are the same object.</source>
          <target state="translated">Determina se dois iteradores são o mesmo objeto.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> a ser comparado com o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> determinado é o mesmo que o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> objects are the same object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois objetos <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> forem o mesmo objeto; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> a ser comparado com o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines if the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> determinado é o mesmo que o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois iteradores forem o mesmo objeto; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next">
          <source>Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</source>
          <target state="translated">Incrementa o iterador para a próxima posição no contêiner subjacente ou para a primeira posição além do fim do contêiner se o contêiner foi atravessado completamente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> a ser atribuído ao objeto atual.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">Atribui o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> determinado ao objeto atual.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">O objeto atual (<bpt id="p1">&lt;c&gt;</bpt>*este<ept id="p1">&lt;/c&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">Diminui o iterador por um elemento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">Diminui o iterador por um elemento.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
          <source>This is the prefix version of the decrement operator.</source>
          <target state="translated">Essa é a versão de prefixo do operador de decremento.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Um iterador.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>An unused parameter that indicates this is the postfix version of the operator.</source>
          <target state="translated">Um parâmetro não utilizado que indica que essa é a versão pós-correção do operador.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">Diminui o iterador por um elemento.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the decrement operator.</source>
          <target state="translated">Essa é a versão pós-correção do operador de decremento.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Um iterador.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">Determina se dois iteradores são o mesmo objeto.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> a ser comparado com o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> determinado é o mesmo que o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois iteradores forem o mesmo objeto; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> a ser comparado com o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> determinado é o mesmo que o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois iteradores forem o mesmo objeto; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
          <source>Converts a <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /&gt;</ph>.</source>
          <target state="translated">Converte um <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
          <source>The current iterator as an <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /&gt;</ph>.</source>
          <target state="translated">O iterador atual como um <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Increments the iterator by one element.</source>
          <target state="translated">Incrementa o iterador por um elemento.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
          <source>Increments the iterator by one element.</source>
          <target state="translated">Incrementa o iterador por um elemento.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
          <source>This is the prefix version of the increment operator.</source>
          <target state="translated">Esta é a versão de prefixo do operador de incremento.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Um iterador.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>Increments the iterator by one element.</source>
          <target state="translated">Incrementa o iterador por um elemento.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the increment operator.</source>
          <target state="translated">Essa é a versão pós-correção do operador de incremento.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Um iterador.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
          <source>Determines whether two iterators are not the same object.</source>
          <target state="translated">Determina se dois iteradores não são o mesmo objeto.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> a ser comparado com o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> determinado é diferente do objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois iteradores forem objetos diferentes; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> a ser comparado com o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> determinado é diferente do objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois iteradores forem objetos diferentes; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">O iterador ao qual o operador é aplicado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">Retorna o elemento para o qual o iterador está apontando no momento.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">O elemento para o qual o iterador está apontando no momento.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">O iterador ao qual o operador é aplicado.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">Retorna o elemento para o qual o iterador está apontando no momento.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">O elemento para o qual o iterador está apontando no momento.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev">
          <source>Positions the iterator to the element immediately before the current element.</source>
          <target state="translated">Posiciona o iterador para o elemento imediatamente antes do elemento atual.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
          <target state="translated">Determina se o iterador é válido e pode ser usado com segurança para atravessar o contêiner subjacente.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o iterador for válido e seguro para ser usado; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>