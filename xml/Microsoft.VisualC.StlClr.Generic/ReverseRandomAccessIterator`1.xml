<Type Name="ReverseRandomAccessIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="175141f77d8f99c3affcf85184de7dd1d8d0394e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ReverseRandomAccessIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReverseRandomAccessIterator`1&lt;TValue&gt; extends System.Object implements class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ReverseRandomAccessIterator(Of TValue)&#xA;Implements IRandomAccessIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public ref class ReverseRandomAccessIterator : Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</typeparam>
    <summary>
      <span data-ttu-id="712cb-101">Fornece um iterador compatível com as seguintes operações: mover uma posição para frente chamando <c>operador--</c>, mover uma posição para trás chamando <c>operador++</c>, acessar um elemento usando <c>operador[]</c> e acessar um elemento usando a aritmética de ponteiro.</span>
      <span class="sxs-lookup">
        <span data-stu-id="712cb-101">Provides an iterator that supports the following operations: moving forward one position by calling <c>operator--</c>, moving backward one position by calling <c>operator++</c>, accessing an element by using <c>operator[]</c>, and accessing an element by using pointer arithmetic.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-102">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-102">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReverseRandomAccessIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReverseRandomAccessIterator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-103">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-103">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Iter As IRandomAccessIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReverseRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Iter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Iter" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Iter">
          <span data-ttu-id="712cb-104">Um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> existente a ser copiado para o contêiner atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-104">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-105">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> de um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-105">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ReverseRandomAccessIterator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReverseRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-106">Um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> existente a ser copiado para o contêiner atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-106">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-107">Aloca e inicializa um novo objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> de um objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-107">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="base">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; base ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; base() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base" />
      <MemberSignature Language="VB.NET" Value="Public Function base () As IRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ base();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-108">Obtém o iterador base subjacente para o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-108">Gets the underlying base iterator for the <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-109">O iterador base subjacente para o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-109">The underlying base iterator for the <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-110">Cria uma cópia do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-110">Creates a copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-111">Uma cópia do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-111">A copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="container">
      <MemberSignature Language="C#" Value="public virtual object container ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object container() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function container () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ container();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-112">Obtém o contêiner que o iterador está atravessando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-112">Gets the container that the iterator is traversing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-113">O contêiner que o iterador está atravessando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-113">The container that the iterator is traversing.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="distance">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-114">Determina a distância entre o elemento que aponta para o qual o iterador atual está apontando e o elemento para o qual o iterador determinado está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-114">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public virtual int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 distance(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function distance (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int distance(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-115">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-115">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-116">Determina a distância entre o elemento que aponta para o qual o iterador atual está apontando e o elemento para o qual o iterador determinado está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-116">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-117">A distância, em número de elementos, entre o elemento para o qual o iterador atual está apontando e o elemento para o qual o <paramref name="_Right" /> está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-117">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span>
          </span>
          <span data-ttu-id="712cb-118">Esse número será negativo se <paramref name="_Right" /> apontar para um elemento que está antes do elemento para o qual o iterador atual aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-118">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public int distance (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 distance(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function distance (_Right As ReverseRandomAccessIterator) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int distance(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-119">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-119">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-120">Determina a distância entre o elemento que aponta para o qual o iterador atual está apontando e o elemento para o qual o iterador determinado está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-120">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-121">A distância, em número de elementos, entre o elemento para o qual o iterador atual está apontando e o elemento para o qual o <paramref name="_Right" /> está apontando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-121">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span>
          </span>
          <span data-ttu-id="712cb-122">Esse número será negativo se <paramref name="_Right" /> apontar para um elemento que está antes do elemento para o qual o iterador atual aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-122">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="equal_to">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-123">Determina se dois iteradores são o mesmo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-123">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function equal_to (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool equal_to(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-124">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-124">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-125">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> determinado é o mesmo que o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-125">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-126">
            <see langword="true" /> se os dois iteradores forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-126">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public bool equal_to (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_to (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool equal_to(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-127">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-127">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-128">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> determinado é o mesmo que o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-128">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-129">
            <see langword="true" /> se os dois objetos <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-129">
              <see langword="true" /> if the two <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> objects are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[int _Pos] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[int] { TValue get(int _Pos); void set(int _Pos, TValue value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">
          <span data-ttu-id="712cb-130">A posição do elemento a ser acessado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-130">The position of the element to access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-131">Acessa o elemento na posição determinada no contêiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-131">Accesses the element at the given position in the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="712cb-132">O elemento na posição fornecida no contêiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-132">The element at the given position in the container.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="less_than">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-133">Determina se o iterador atual está apontando para um elemento no contêiner que está antes do elemento para o qual um iterador determinado aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-133">Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public virtual bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool less_than(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function less_than (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool less_than(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-134">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-134">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-135">Determina se o iterador atual está apontando para um elemento no contêiner que está antes do elemento para o qual o iterador determinado aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-135">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-136">
            <see langword="true" /> se o iterador atual estiver apontando para um elemento que vem antes do elemento para o qual <paramref name="_Right" /> está apontando; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-136">
              <see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public bool less_than (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool less_than(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function less_than (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool less_than(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-137">Um iterador válido que aponta para o mesmo contêiner que o iterador atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-137">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-138">Determina se o iterador atual está apontando para um elemento no contêiner que está antes do elemento para o qual o iterador determinado aponta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-138">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-139">
            <see langword="true" /> se o iterador atual estiver apontando para um elemento que vem antes do elemento para o qual <paramref name="_Right" /> está apontando; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-139">
              <see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="move">
      <MemberSignature Language="C#" Value="public virtual int move (int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 move(int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function move (_Offset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int move(int _Offset);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Offset">
          <span data-ttu-id="712cb-140">O número de elementos a serem atravessados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-140">The number of elements to traverse.</span>
          </span>
          <span data-ttu-id="712cb-141">Para mover o iterador para frente, especifique um número negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-141">To move the iterator forward, specify a negative number.</span>
          </span>
          <span data-ttu-id="712cb-142">Para mover o iterador para trás, especifique um número positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-142">To move the iterator backward, use a positive number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-143">Move o iterador pelo número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-143">Moves the iterator by the given number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-144">O número real de elementos atravessados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-144">The actual number of elements traversed.</span>
          </span>
          <span data-ttu-id="712cb-145">Este número será diferente de <paramref name="_Offset" /> se o início ou o fim do contêiner for atingido antes da iteração do número de elementos desejado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-145">This number will differ from <paramref name="_Offset" /> if the beginning or end of the container is reached before iterating the desired number of elements.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="next">
      <MemberSignature Language="C#" Value="public virtual void next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub next ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void next();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-146">Incrementará o iterador inverso para a próxima posição no contêiner subjacente ou para a primeira posição na frente do início do contêiner se o contêiner tiver sido atravessado completamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-146">Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-147">Incrementa o iterador inverso no número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-147">Increments the reverse iterator by the given number of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public void operator + (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator + (ByRef  As ReverseRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator +(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Right">
          <span data-ttu-id="712cb-148">O número de elementos a ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-148">The number of elements to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-149">Incrementa o iterador inverso no número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-149">Increments the reverse iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="712cb-150">O parâmetro numérico inteiro é especificado no lado direito do operador de adição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-150">The integer parameter is specified on the right side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-151">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-151">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static void operator + (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; , int _Left, Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Left, class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ByRef  As ReverseRandomAccessIterator(Of TValue), _Left As Integer, _Right As ReverseRandomAccessIterator) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ^ operator +(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % , int _Left, Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="_Left" Type="System.Int32" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Left">
          <span data-ttu-id="712cb-152">O número de elementos a ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-152">The number of elements to increment.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="712cb-153">O iterador a ser incrementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-153">The iterator to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-154">Incrementa o iterador inverso no número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-154">Increments the reverse iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="712cb-155">O parâmetro numérico inteiro é especificado no lado esquerdo do operador de adição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-155">The integer parameter is specified on the left side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-156">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-156">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ReverseRandomAccessIterator) As ReverseRandomAccessIterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-157">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> a ser atribuído ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-157">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-158">Atribui o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> determinado ao objeto atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-158">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-159">O objeto atual (<c>\*este</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-159">The current object (<c>\*this</c>).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Decrement">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-160">Decrementa o iterador inverso por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-160">Decrements the reverse iterator by one element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>
          <span data-ttu-id="712cb-161">Decrementa o iterador inverso por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-161">Decrements the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="712cb-162">Essa é a versão de prefixo do operador de decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-162">This is the prefix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-163">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-163">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; , int A_0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ReverseRandomAccessIterator(Of TValue), A_0 As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % , int A_0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="A_0">To be added.</param>
        <summary>
          <span data-ttu-id="712cb-164">Decrementa o iterador inverso por um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-164">Decrements the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="712cb-165">Essa é a versão pós-correção do operador de decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-165">This is the postfix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-166">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-166">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-167">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-167">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-168">Determina se dois iteradores são o mesmo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-168">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-169">
            <see langword="true" /> se os dois iteradores forem o mesmo objeto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-169">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="712cb-170">O método equivalente para esse operador é <xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="712cb-170">The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public bool operator &gt; (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThan(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt; (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-171">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-171">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-172">Determina se a posição do iterador no lado esquerdo é maior que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-172">Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-173">
            <see langword="true" /> se o iterador no lado esquerdo for maior que o iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-173">
              <see langword="true" /> if the left-side iterator is greater than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &gt;= (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt;= (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;=(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-174">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-174">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-175">Determina se a posição do iterador no lado esquerdo é maior ou igual à posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-175">Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-176">
            <see langword="true" /> se o iterador no lado esquerdo for maior ou igual ao iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-176">
              <see langword="true" /> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public implicit operator Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; op_Implicit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Widening Operator CType () As IRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; operator Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-177">Converte um <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> em um <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-177">Converts a <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> to an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-178">O iterador atual como um <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-178">The current iterator as an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Increment">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-179">Incrementa o iterador inverso em um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-179">Increments the reverse iterator by one element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>
          <span data-ttu-id="712cb-180">Incrementa o iterador inverso em um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-180">Increments the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="712cb-181">Esta é a versão de prefixo do operador de incremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-181">This is the prefix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-182">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-182">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; , int A_0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ReverseRandomAccessIterator(Of TValue), A_0 As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % , int A_0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="A_0">To be added.</param>
        <summary>
          <span data-ttu-id="712cb-183">Incrementa o iterador inverso em um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-183">Increments the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="712cb-184">Essa é a versão pós-correção do operador de incremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-184">This is the postfix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-185">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-185">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-186">O objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> a ser comparado com o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-186">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-187">Determina se o objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> determinado é diferente do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-187">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-188">
            <see langword="true" /> se os dois iteradores forem objetos diferentes; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-188">
              <see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public bool operator &lt; (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThan(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt; (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-189">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-189">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-190">Determina se a posição do iterador no lado esquerdo é menor que a posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-190">Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-191">
            <see langword="true" /> se o iterador no lado esquerdo for menor que o iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-191">
              <see langword="true" /> if the left-side iterator is less than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="712cb-192">O método equivalente para esse operador é <xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="712cb-192">The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &lt;= (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt;= (_Right As ReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;=(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-193">O iterador a ser comparado com o iterador no lado esquerdo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-193">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-194">Determina se a posição do iterador no lado esquerdo é menor ou igual à posição do iterador no lado direito determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-194">Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-195">
            <see langword="true" /> se o iterador no lado esquerdo for menor ou igual ao iterador no lado direito determinado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-195">
              <see langword="true" /> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_MemberSelection">
      <MemberSignature Language="C#" Value="public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_MemberSelection(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_MemberSelection (_Left As ReverseRandomAccessIterator) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_MemberSelection(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Left);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="712cb-196">O iterador ao qual o operador é aplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-196">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-197">Retorna o elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-197">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-198">O elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-198">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_PointerDereference">
      <MemberSignature Language="C#" Value="public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_PointerDereference(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_PointerDereference (_Left As ReverseRandomAccessIterator) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_PointerDereference(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Left);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="712cb-199">O iterador ao qual o operador é aplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-199">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-200">Retorna o elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-200">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-201">O elemento para o qual o iterador está apontando no momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-201">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="712cb-202">Decrementa o iterador pelo número determinado de elementos ou determina a diferença entre dois iteradores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-202">Decrements the iterator by the given number of elements, or determines the difference between two iterators.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public int operator - (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance int32 op_Subtraction(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int operator -(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="712cb-203">O <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> a ser subtraído do objeto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-203">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> to be subtracted from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-204">Determina a diferença entre dois iteradores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-204">Determines the difference between two iterators.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-205">A diferença, em número de elementos, entre os dois iteradores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-205">The difference, in number of elements, between the two iterators.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public void operator - (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (ByRef  As ReverseRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator -(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Right">
          <span data-ttu-id="712cb-206">O número de elementos a serem decrementados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-206">The number of elements to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="712cb-207">Decrementa o iterador pelo número determinado de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-207">Decrements the iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="712cb-208">O parâmetro numérico inteiro é especificado no lado direito do operador de subtração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-208">The integer parameter is specified on the right side of the subtraction operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-209">Um iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-209">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public virtual void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void prev();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-210">Posiciona o iterador para o elemento imediatamente após o elemento atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-210">Positions the iterator to the element immediately after the current element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="valid">
      <MemberSignature Language="C#" Value="public virtual bool valid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool valid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function valid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool valid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="712cb-211">Determina se o iterador é válido e pode ser usado com segurança para atravessar o contêiner subjacente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-211">Determines whether the iterator is valid and can be safely used to traverse the underlying container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="712cb-212">
            <see langword="true" /> se o iterador for válido e seguro para ser usado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="712cb-212">
              <see langword="true" /> if the iterator is valid and safe to use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>