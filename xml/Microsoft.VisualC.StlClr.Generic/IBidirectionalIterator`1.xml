<Type Name="IBidirectionalIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;">
  <TypeSignature Language="C#" Value="public interface IBidirectionalIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBidirectionalIterator`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IForwardIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBidirectionalIterator(Of TValue)&#xA;Implements IForwardIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IBidirectionalIterator : Microsoft::VisualC::StlClr::Generic::IForwardIterator&lt;TValue&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</typeparam>
    <summary><span data-ttu-id="8ece5-101">Interface para um iterador que pode acessar elementos em um contêiner da direção para frente usando o operador de incremento e na direção para trás usando o operador de decremento.</span><span class="sxs-lookup"><span data-stu-id="8ece5-101">Interface for an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator.</span></span> <span data-ttu-id="8ece5-102">O elemento para o qual o iterador aponta pode ser gravado e lido qualquer número de vezes.</span><span class="sxs-lookup"><span data-stu-id="8ece5-102">The element that the iterator points to can be both written to and read from any number of times.</span></span> <span data-ttu-id="8ece5-103">Iteradores bidirecionais podem ser usados em qualquer lugar em que um iterador de entrada ou de saída é necessário.</span><span class="sxs-lookup"><span data-stu-id="8ece5-103">Bidirectional iterators can be used anywhere an input or output iterator is required.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void prev();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ece5-104">Posiciona o iterador para o elemento imediatamente antes do elemento atual.</span><span class="sxs-lookup"><span data-stu-id="8ece5-104">Positions the iterator to the element immediately before the current element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>