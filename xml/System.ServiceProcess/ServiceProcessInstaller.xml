<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65aa4409d6c7e76442c09281bf79b66d17d4342f" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48741286" /></Metadata><TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instala um executável que contém classes que estendem <see cref="T:System.ServiceProcess.ServiceBase" />. Essa classe é chamada por utilitários de instalação, como InstallUtil.exe, ao instalar um aplicativo de serviço.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ServiceProcess.ServiceProcessInstaller> funciona comuns a todos os serviços em um executável. Ele é usado pelo utilitário de instalação para gravar valores do Registro associados aos serviços que você deseja instalar.  
  
 Para instalar um serviço, crie uma classe de instalador de projeto que herda de <xref:System.Configuration.Install.Installer>e defina o <xref:System.ComponentModel.RunInstallerAttribute> na classe para `true`. Dentro de seu projeto, criar uma instância de um <xref:System.ServiceProcess.ServiceProcessInstaller> instância por aplicativo de serviço e um <xref:System.ServiceProcess.ServiceInstaller> instância para cada serviço no aplicativo. Por fim, adicione a <xref:System.ServiceProcess.ServiceProcessInstaller> instância e o <xref:System.ServiceProcess.ServiceInstaller> instâncias à sua classe de instalador de projeto.  
  
 Quando InstallUtil.exe é executado, o utilitário procura por classes no assembly de serviço com o <xref:System.ComponentModel.RunInstallerAttribute> definido como `true`. Adicionar classes ao assembly do serviço, adicionando-o <xref:System.Configuration.Install.Installer.Installers%2A> coleção associada ao instalador do seu projeto. Se <xref:System.ComponentModel.RunInstallerAttribute> é `false`, o utilitário de instalação ignora o instalador de projeto.  
  
 Para uma instância do <xref:System.ServiceProcess.ServiceProcessInstaller>, você pode modificar as propriedades incluem especificando que um aplicativo de serviço executado sob uma conta que não seja o usuário conectado. Você pode especificar um determinado <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par sob a qual o serviço deve ser executado, ou você pode usar <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> para especificar que o serviço é executado na conta do sistema do computador, local ou conta de serviço de rede ou uma conta de usuário.  
  
> [!NOTE]
>  Conta sistema deste computador não é o mesmo que a conta de administrador.  
  
 Normalmente, você não chamar métodos em <xref:System.ServiceProcess.ServiceInstaller> dentro de seu código; eles geralmente são chamados apenas pelo utilitário de instalação. O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> e <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante o processo de instalação. Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) em todos os componentes instalados anteriormente.  
  
 Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Essas informações de estado são atualizadas continuamente, como o <xref:System.ServiceProcess.ServiceProcessInstaller> instância e cada <xref:System.ServiceProcess.ServiceInstaller> instância é instalada pelo utilitário. Não é geralmente necessário para seu código modificar essas informações de estado explicitamente.  
  
 Criando uma instância de um <xref:System.ServiceProcess.ServiceProcessInstaller> faz com que o construtor de classe base, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, para ser chamado.  
  
   
  
## Examples  
 O exemplo a seguir cria um instalador de projeto chamado MyProjectInstaller, que herda de <xref:System.Configuration.Install.Installer>. Supõe-se há um executável de serviço que contém dois serviços, "Olá, mundo serviço 1" e "Olá, mundo serviço 2". Construtor para MyProjectInstaller (que seria chamada pelo utilitário de instalação), <xref:System.ServiceProcess.ServiceInstaller> objetos são criados para cada serviço e um <xref:System.ServiceProcess.ServiceProcessInstaller> é criado para o executável. Para o utilitário de instalação reconhecer MyProjectInstaller como um instalador válido, o <xref:System.ComponentModel.RunInstallerAttribute> atributo é definido como `true`.  
  
 Propriedades opcionais são definidas no instalador do processo e os instaladores do serviço antes dos instaladores são adicionados à <xref:System.Configuration.Install.Installer.Installers%2A> coleção. Quando o utilitário de instalação acessa MyProjectInstaller, os objetos adicionados para o <xref:System.Configuration.Install.Installer.Installers%2A> coleção por meio de uma chamada para <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> serão instalados por sua vez. Durante o processo, o instalador mantém informações de estado que indica quais objetos foram instalados, portanto, cada objeto pode ser revertido por sua vez no caso de uma falha de instalação.  
  
 Normalmente, você não deve instanciar sua classe de instalador de projeto explicitamente. Você deve criá-lo e adicionar o <xref:System.ComponentModel.RunInstallerAttribute>, mas o utilitário de instalação realmente chama e, portanto, instancia a classe.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Cria uma nova instância da classe <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o tipo de conta na qual executar este aplicativo de serviço.</summary>
        <value>Um <see cref="T:System.ServiceProcess.ServiceAccount" /> que define o tipo de conta sob a qual o sistema executa esse serviço. O padrão é <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> é de propriedade `User`, o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriedades são usadas para definir uma conta na qual o aplicativo de serviço é executado.  
  
 O <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par permite que o serviço executado sob uma conta diferente da conta do sistema. Isso pode, por exemplo, que o serviço para iniciar automaticamente na reinicialização, quando nenhum usuário está conectado. Se você deixar à <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vazia e defina <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> para `User`, você será solicitado um nome de usuário válido e a senha na instalação.  
  
 Você também pode especificar que o serviço executado sob a conta sistema local, ou como um local ou serviço de rede. Consulte o <xref:System.ServiceProcess.ServiceAccount> enumeração para obter detalhes sobre os tipos de contas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">O <see cref="T:System.ComponentModel.IComponent" /> que representa o processo de serviço.</param>
        <summary>Implementa o método <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> da classe base sem nenhum comportamento específico a uma classe de <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não deve ser chamado dentro de seu código. O método de classe base na <xref:System.Configuration.Install.ComponentInstaller> é `abstract`, portanto, ele é implementado aqui na classe derivada. No entanto, não há nenhum <xref:System.ServiceProcess.ServiceProcessInstaller> específicos da classe na implementação do método de processamento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o texto de ajuda exibido para opções de instalação do serviço.</summary>
        <value>Texto que fornece uma descrição das etapas para definir o nome de usuário e senha para executar o serviço em uma conta específica da Ajuda.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este texto de Ajuda pode ser usado quando um serviço é iniciado manualmente. Ele indica ao usuário como inserir informações de nome e a senha do usuário.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Um <see cref="T:System.Collections.IDictionary" /> que contém as informações de contexto associadas à instalação.</param>
        <summary>Grava informações do aplicativo de serviço no Registro. Este método destina-se a ser usado por ferramentas de instalação, que chamam automaticamente os métodos apropriados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você não chamar métodos em <xref:System.ServiceProcess.ServiceProcessInstaller> dentro de seu código; eles geralmente são chamados apenas pelo utilitário de instalação. O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> método durante o processo de instalação. Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> em todos os componentes instalados anteriormente. Esse método passa a instalação para a classe base <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> método.  
  
 Normalmente, você não irá chamar os métodos em <xref:System.ServiceProcess.ServiceInstaller> dentro de seu código; eles geralmente são chamados apenas pelo utilitário de instalação. O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> e <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante o processo de instalação. Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) em todos os componentes instalados anteriormente  
  
 Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Essas informações de estado passado para <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> como o `stateSaver` parâmetro, é atualizado continuamente, como o <xref:System.ServiceProcess.ServiceProcessInstaller> instância e cada <xref:System.ServiceProcess.ServiceInstaller> instância é instalada pelo utilitário. Não é geralmente necessário para seu código modificar essas informações de estado explicitamente.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> passa para o método de chamada todas as exceções geradas por métodos de classe base ou <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> manipuladores de eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="stateSaver" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a senha associada à conta de usuário na qual aplicativo de serviço é executado.</summary>
        <value>A senha associada à conta sob a qual o serviço deve ser executado. O padrão é uma cadeia de caracteres vazia (""). A propriedade não é pública e nunca é serializada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> par permite que o serviço executado sob uma conta diferente da conta do sistema. Isso pode, por exemplo, que o serviço para iniciar automaticamente na reinicialização, quando nenhum usuário está conectado.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> são tratadas de maneira segura, em que nunca são serializados ou salvos para o estado de instalação (o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) ou em outro local com acesso público.  
  
 Definindo o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permite que uma conta a ser associado automaticamente com o serviço no momento da instalação. Se você deixar à <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vazia e defina <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> para `User`, você será solicitado um nome de usuário válido e a senha na instalação.  
  
 Outra opção para a execução de um serviço com uma conta separada é usar a conta sistema deste computador. Essa conta, que é diferente da conta de administrador, não requer que nenhuma senha. Privilégios da conta do sistema podem exceder aquelas do usuário conectado no momento. Requer que o serviço em execução na conta do sistema, em vez de uma conta de usuário evita problemas resultantes do usuário que não tem uma permissão  
  
 Se <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> for qualquer valor diferente de `User`, a conta especificada (local ou serviço de rede ou sistema local) é usada, mesmo se o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriedades são preenchidas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Um <see cref="T:System.Collections.IDictionary" /> que contém as informações de contexto associadas à instalação.</param>
        <summary>Reverte informações de aplicativo de serviço gravadas no Registro pelo procedimento de instalação. Este método destina-se a ser usado pelas ferramentas de instalação, que processam os métodos apropriados automaticamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você não chamar métodos em <xref:System.ServiceProcess.ServiceProcessInstaller> dentro de seu código; eles geralmente são chamados apenas pelo utilitário de instalação. O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> método durante o processo de instalação. Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> no objeto que gerou a exceção.  
  
 Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Essas informações de estado passado para <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> como o `savedState` parâmetro, é atualizado continuamente, como o <xref:System.ServiceProcess.ServiceProcessInstaller> instância e cada <xref:System.ServiceProcess.ServiceInstaller> instância é instalada pelo utilitário. Não é geralmente necessário para seu código modificar essas informações de estado explicitamente.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> passa para o método de chamada todas as exceções geradas por métodos de classe base ou <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> manipuladores de eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="savedState" /> é <see langword="null" />.  
  
- ou - 
O <paramref name="savedState" /> está corrompido ou não existe.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a conta do usuário na qual aplicativo de serviço será executado.</summary>
        <value>A conta na qual o serviço deverá ser executado. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par permite que o serviço executado sob uma conta diferente da conta do sistema. Isso pode, por exemplo, que o serviço para iniciar automaticamente na reinicialização, quando nenhum usuário está conectado.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> são tratadas de maneira segura, em que nunca são serializados ou salvos para o estado de instalação (o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) ou em outro local com acesso público.  
  
 Definindo o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permite que uma conta a ser associado automaticamente com o serviço no momento da instalação. Se você deixar à <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vazia e defina <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> para `User`, você será solicitado um nome de usuário válido e a senha na instalação.  
  
 Outra opção para a execução de um serviço com uma conta separada é usar a conta sistema deste computador. Essa conta, que é diferente da conta de administrador, não requer que nenhuma senha. Privilégios da conta do sistema podem exceder aquelas do usuário conectado no momento. Requer que o serviço em execução na conta do sistema, em vez de uma conta de usuário evita problemas resultantes do usuário que não tem uma permissão  
  
 Se <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> for qualquer valor diferente de `User`, a conta especificada (local ou serviço de rede ou sistema local) é usada, mesmo se o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriedades são preenchidas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>