<Type Name="IntranetZoneCredentialPolicy" FullName="Microsoft.Win32.IntranetZoneCredentialPolicy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db4b7040c94104a63cce58ea487bb70b45eaaf0c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36657383" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class IntranetZoneCredentialPolicy : System.Net.ICredentialPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntranetZoneCredentialPolicy extends System.Object implements class System.Net.ICredentialPolicy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Win32.IntranetZoneCredentialPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Class IntranetZoneCredentialPolicy&#xA;Implements ICredentialPolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class IntranetZoneCredentialPolicy : System::Net::ICredentialPolicy" />
  <TypeSignature Language="F#" Value="type IntranetZoneCredentialPolicy = class&#xA;    interface ICredentialPolicy" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Net.ICredentialPolicy</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define uma política de credencial a ser usada para solicitações de recursos que são feitas usando <see cref="T:System.Net.WebRequest" /> e suas classes derivadas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa política permite que credenciais sejam enviados somente se o recurso solicitado está no mesmo domínio que o cliente que está fazendo a solicitação. Para muitos aplicativos, isso é a política ideal porque evita que as credenciais de rede que está sendo enviado com solicitações para recursos que não estão na intranet.  
  
> [!NOTE]
>  <xref:System.Net.ICredentialPolicy> as políticas são invocadas somente se o <xref:System.Net.WebRequest> ou <xref:System.Net.WebProxy> que está associado com a solicitação com credenciais que não são `null`. Configurar essa política não tem nenhum efeito nas solicitações que não especifique credenciais.  
  
 Use o <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=nameWithType> propriedade para definir o <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> política. O <xref:System.Net.IAuthenticationModule> que gerencia a autenticação para a solicitação invocará o <xref:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential%2A> método antes de executar a autenticação. Se o recurso solicitado está em um domínio diferente do cliente, o <xref:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential%2A> método retorna `false`, e a autenticação não será executada.  
  
 Esta diretiva afeta todas as instâncias de <xref:System.Net.WebRequest> com credenciais de não-nulo no domínio do aplicativo atual. A política não pode ser substituída em solicitações individuais.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma instância de <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> e usá-lo para definir a política de credencial para o domínio de aplicativo.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntranetZoneCredentialPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.IntranetZoneCredentialPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntranetZoneCredentialPolicy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.Win32.IntranetZoneCredentialPolicy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplicativos usam este construtor para criar objetos que podem ser usados para definir o <xref:System.Net.AuthenticationManager.CredentialPolicy%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma instância dessa classe.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSendCredential">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSendCredential (Uri challengeUri, System.Net.WebRequest request, System.Net.NetworkCredential credential, System.Net.IAuthenticationModule authModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSendCredential(class System.Uri challengeUri, class System.Net.WebRequest request, class System.Net.NetworkCredential credential, class System.Net.IAuthenticationModule authModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSendCredential (challengeUri As Uri, request As WebRequest, credential As NetworkCredential, authModule As IAuthenticationModule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ShouldSendCredential(Uri ^ challengeUri, System::Net::WebRequest ^ request, System::Net::NetworkCredential ^ credential, System::Net::IAuthenticationModule ^ authModule);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool&#xA;override this.ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool" Usage="intranetZoneCredentialPolicy.ShouldSendCredential (challengeUri, request, credential, authModule)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challengeUri" Type="System.Uri" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="authModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="challengeUri">O <see cref="T:System.Uri" /> que receberá a solicitação.</param>
        <param name="request">O <see cref="T:System.Net.WebRequest" /> que representa o recurso sendo solicitado.</param>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que será enviado com a solicitação se esse método retornar <see langword="true" />.</param>
        <param name="authModule">O <see cref="T:System.Net.IAuthenticationModule" /> que fará a autenticação, se a autenticação for necessária.</param>
        <summary>Retorna um <see cref="T:System.Boolean" /> que indica se as credenciais do cliente são enviadas com uma solicitação de recurso que foi feita usando <see cref="T:System.Net.WebRequest" />.</summary>
        <returns>
          <see langword="true" /> se o recurso solicitado está no mesmo domínio que o cliente que faz a solicitação; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplicativos não chamam este método diretamente. ele é chamado pelo <xref:System.Net.IAuthenticationModule> que é responsável por executar a autenticação com o servidor. Se esse método retornar `false`, o <xref:System.Net.IAuthenticationModule> não fará a autenticação do cliente para o servidor.  
  
 Este método é chamado somente para solicitações que especifique credenciais ou usam um <xref:System.Net.WebProxy> objeto que especifica as credenciais.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a derivação de <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> para permitir que as credenciais a ser enviada para solicitações que usam o HTTPS Secure Hypertext Transfer Protocol () com a autenticação básica. Uso do HTTPS e autenticação básica, a senha do usuário é criptografada antes de serem enviados pela rede.  
  
 [!code-cpp[NclCredPolicy#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#4)]
 [!code-csharp[NclCredPolicy#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>