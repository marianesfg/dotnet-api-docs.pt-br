<Type Name="ISourceBlock&lt;TOutput&gt;" FullName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e91a3aa89b60138e6c9903f097fdd6bc8ac2754e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39998644" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISourceBlock&lt;out TOutput&gt; : System.Threading.Tasks.Dataflow.IDataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISourceBlock`1&lt;+ TOutput&gt; implements class System.Threading.Tasks.Dataflow.IDataflowBlock" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISourceBlock(Of Out TOutput)&#xA;Implements IDataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TOutput&gt;&#xA;public interface class ISourceBlock : System::Threading::Tasks::Dataflow::IDataflowBlock" />
  <TypeSignature Language="F#" Value="type ISourceBlock&lt;'Output&gt; = interface&#xA;    interface IDataflowBlock" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IDataflowBlock</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TOutput">Especifica o tipo de dados fornecidos pelo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</typeparam>
    <summary>Representa um bloco de fluxo de dados que é uma origem de dados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ConsumeMessage">
      <MemberSignature Language="C#" Value="public TOutput ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;out TOutput&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TOutput ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConsumeMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of Out TOutput), ByRef messageConsumed As Boolean) As TOutput" />
      <MemberSignature Language="F#" Value="abstract member ConsumeMessage : System.Threading.Tasks.Dataflow.DataflowMessageHeader * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; *  -&gt; 'Output" Usage="iSourceBlock.ConsumeMessage (messageHeader, target, messageConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
        <param name="messageConsumed">
          <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
        <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um T:System.Threading.Tasks.Dataflow.DataflowMessageHeader anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
Se a mensagem solicitada não estiver disponível, o valor retornado será nulo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instâncias vinculadas a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instância pode usar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, e só deve ser usado para consumir <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instâncias anteriormente oferecido por essa fonte para o destino.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O messageHeader não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">O destino é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;out TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinkTo (target As ITargetBlock(Of Out TOutput), linkOptions As DataflowLinkOptions) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions);" />
      <MemberSignature Language="F#" Value="abstract member LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable" Usage="iSourceBlock.LinkTo (target, linkOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
        <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
        <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
        <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReservation">
      <MemberSignature Language="C#" Value="public void ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;out TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReservation (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of Out TOutput))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReservation(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseReservation : System.Threading.Tasks.Dataflow.DataflowMessageHeader * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; unit" Usage="iSourceBlock.ReleaseReservation (messageHeader, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
        <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instâncias vinculadas a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instância pode usar `ReleaseReservation`, e só deve ser usado para liberar <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instâncias anteriormente e com êxito são reservadas pelo destino.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveMessage">
      <MemberSignature Language="C#" Value="public bool ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;out TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReserveMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of Out TOutput)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReserveMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="abstract member ReserveMessage : System.Threading.Tasks.Dataflow.DataflowMessageHeader * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; bool" Usage="iSourceBlock.ReserveMessage (messageHeader, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
        <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <returns>
          <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instâncias vinculadas a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instância pode usar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>, e só deve ser usado para reservar <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instâncias anteriormente oferecido por essa fonte para o destino.  
  
 Se `true` for retornado, o <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> subsequentemente deve chamar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> ou <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> para esta mensagem. Falha ao fazer isso pode resultar na fonte de não ser capaz de propagar mensagens adicionais para este ou outros destinos.  
  
 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A> não deve ser chamado enquanto o destino está mantendo todos os bloqueios internos. Isso será violar a hierarquia de bloqueio necessária para evitar deadlocks em uma rede de fluxo de dados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>