<Type Name="PartConventionBuilder&lt;T&gt;" FullName="System.Composition.Convention.PartConventionBuilder&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8072b58b0f2c2bcf1e18d7a52b489f700f1b497b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30379390" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PartConventionBuilder&lt;T&gt; : System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PartConventionBuilder`1&lt;T&gt; extends System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.PartConventionBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PartConventionBuilder(Of T)&#xA;Inherits PartConventionBuilder" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class PartConventionBuilder : System::Composition::Convention::PartConventionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Composition.Convention.PartConventionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="b44fb-101">O tipo da parte.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b44fb-101">The type of the part.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="b44fb-102">Configura um tipo como uma parte do MEF (Managed Extensibility Framework), com valores de retorno fortemente tipados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b44fb-102">Configures a type as a Managed Extensibility Framework (MEF) part, with strongly typed return values.</span>
      </span>
    </summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName="ExportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-103">Uma função que seleciona a propriedade a ser exportada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-103">A function that selects the property to export.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-104">Exporta uma propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-104">Exports a specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-105">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-105">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty (propertySelector As Expression(Of Func(Of T, Object)), exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-106">Uma função que seleciona a propriedade a ser exportada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-106">A function that selects the property to export.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="b44fb-107">Uma ação que configura a propriedade exportada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-107">An action that configures the exported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-108">Exporta uma propriedade especificada com a configuração especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-108">Exports a specified property with the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-109">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-109">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="b44fb-110">A expressão <paramref name="propertySelector" /> deve ser uma <see cref="T:System.Linq.Expressions.MemberExpression" /> para acessar uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-110">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="b44fb-111">O tipo de contrato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-111">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-112">Uma função que seleciona a propriedade a ser exportada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-112">A function that selects the property to export.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-113">Exporta uma propriedade estabelecida como um tipo de contrato especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-113">Exports a specified property as a specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-114">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-114">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="b44fb-115">A expressão <paramref name="propertySelector" /> deve ser uma <see cref="T:System.Linq.Expressions.MemberExpression" /> para acessar uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-115">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object)), exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="b44fb-116">O tipo de contrato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-116">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-117">Uma função que seleciona a propriedade a ser exportada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-117">A function that selects the property to export.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="b44fb-118">Uma ação que configura a propriedade exportada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-118">An action that configures the exported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-119">Exporta uma propriedade especificada como um tipo de contrato especificado usando a configuração especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-119">Exports a specified property as a specified contract type by using the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-120">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-120">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-121">Uma função que seleciona a propriedade a ser importada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-121">A function that selects the property to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-122">Importa uma propriedade especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-122">Imports a specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-123">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-123">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty (propertySelector As Expression(Of Func(Of T, Object)), importConfiguration As Action(Of ImportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-124">Uma função que seleciona a propriedade a ser importada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-124">A function that selects the property to import.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="b44fb-125">Uma ação que configura a propriedade importada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-125">An action that configures the imported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-126">Exporta uma propriedade especificada usando uma configuração especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-126">Imports a specified property by using the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-127">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-127">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="b44fb-128">A expressão <paramref name="propertySelector" /> deve ser uma <see cref="T:System.Linq.Expressions.MemberExpression" /> para acessar uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-128">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="b44fb-129">O tipo de contrato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-129">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-130">Uma função que seleciona a propriedade a ser importada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-130">A function that selects the property to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-131">Importa uma propriedade especificada com o tipo de contrato especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-131">Imports a specified property with the specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-132">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-132">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object)), importConfiguration As Action(Of ImportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="b44fb-133">O tipo de contrato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-133">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="b44fb-134">Uma função que seleciona a propriedade a ser importada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-134">A function that selects the property to import.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="b44fb-135">Uma ação que configura a propriedade importada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-135">An action that configures the imported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-136">Importa uma propriedade especificada com a configuração e o tipo de contrato especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-136">Imports a specified property with the specified contract type and configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-137">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-137">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="b44fb-138">A expressão <paramref name="propertySelector" /> deve ser uma <see cref="T:System.Linq.Expressions.MemberExpression" /> para acessar uma propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-138">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NotifyImportsSatisfied">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; NotifyImportsSatisfied (System.Linq.Expressions.Expression&lt;Action&lt;T&gt;&gt; methodSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; NotifyImportsSatisfied(class System.Linq.Expressions.Expression`1&lt;class System.Action`1&lt;!T&gt;&gt; methodSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.NotifyImportsSatisfied(System.Linq.Expressions.Expression{System.Action{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function NotifyImportsSatisfied (methodSelector As Expression(Of Action(Of T))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ NotifyImportsSatisfied(System::Linq::Expressions::Expression&lt;Action&lt;T&gt; ^&gt; ^ methodSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodSelector" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="methodSelector">
          <span data-ttu-id="b44fb-139">Uma ação que seleciona o método de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-139">An action that selects the method to call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-140">Selecionará um método a ser chamado quando a composição for concluída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-140">Selects a method to be called when composition is complete.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-141">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-141">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="b44fb-142">A expressão <paramref name="methodSelector" /> deve ser um método <see langword="void" /> sem argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-142">The <paramref name="methodSelector" /> expression must be a <see langword="void" /> method with no arguments.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; SelectConstructor (System.Linq.Expressions.Expression&lt;Func&lt;System.Composition.Convention.ParameterImportConventionBuilder,T&gt;&gt; constructorSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; SelectConstructor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Composition.Convention.ParameterImportConventionBuilder, !T&gt;&gt; constructorSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.Composition.Convention.ParameterImportConventionBuilder,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Expression(Of Func(Of ParameterImportConventionBuilder, T))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ SelectConstructor(System::Linq::Expressions::Expression&lt;Func&lt;System::Composition::Convention::ParameterImportConventionBuilder ^, T&gt; ^&gt; ^ constructorSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Composition.Convention.ParameterImportConventionBuilder,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector">
          <span data-ttu-id="b44fb-143">Uma função que seleciona um construtor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-143">A function that selects a constructor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b44fb-144">Seleciona um construtor a ser usado na composição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-144">Selects a constructor to be used in composition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b44fb-145">Um objeto que pode ser usado para configurar ainda mais a parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-145">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="b44fb-146">A expressão <paramref name="constructorSelector" /> deve usar o operador <see langword="new" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b44fb-146">The <paramref name="constructorSelector" /> expression must use the <see langword="new" /> operator.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>