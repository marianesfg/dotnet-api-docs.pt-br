<Type Name="IOrderedEnumerable&lt;TElement&gt;" FullName="System.Linq.IOrderedEnumerable&lt;TElement&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd8baa8864f07893c5a3fbb483f57a59202291a9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IOrderedEnumerable&lt;TElement&gt; : System.Collections.Generic.IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOrderedEnumerable`1&lt;TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IOrderedEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOrderedEnumerable(Of TElement)&#xA;Implements IEnumerable(Of TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TElement&gt;&#xA;public interface class IOrderedEnumerable : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TElement">
      <span data-ttu-id="9656d-101">O tipo dos elementos da sequência.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9656d-101">The type of the elements of the sequence.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="9656d-102">Representa uma sequência classificada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9656d-102">Represents a sorted sequence.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9656d-103">Esse tipo é enumerável porque ele herda de <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9656d-103">This type is enumerable because it inherits from <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="9656d-104">Os métodos de extensão <xref:System.Linq.Enumerable.ThenBy%2A> e <xref:System.Linq.Enumerable.ThenByDescending%2A> operar em objetos do tipo <xref:System.Linq.IOrderedEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9656d-104">The extension methods <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> operate on objects of type <xref:System.Linq.IOrderedEnumerable%601>.</span></span> <span data-ttu-id="9656d-105">Um objeto do tipo <xref:System.Linq.IOrderedEnumerable%601> pode ser obtida chamando um dos métodos de classificação principal, <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A>, que retornam um <xref:System.Linq.IOrderedEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9656d-105">An object of type <xref:System.Linq.IOrderedEnumerable%601> can be obtained by calling one of the primary sort methods, <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A>, which return an <xref:System.Linq.IOrderedEnumerable%601>.</span></span> <span data-ttu-id="9656d-106"><xref:System.Linq.Enumerable.ThenBy%2A> e <xref:System.Linq.Enumerable.ThenByDescending%2A>, os métodos de classificação subordinada, por sua vez também retornam um objeto do tipo <xref:System.Linq.IOrderedEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9656d-106"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A>, the subordinate sort methods, in turn also return an object of type <xref:System.Linq.IOrderedEnumerable%601>.</span></span> <span data-ttu-id="9656d-107">Esse design permite qualquer número de chamadas consecutivas para <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>, onde cada chamada executa uma ordenação subordinada os dados classificados retornados da chamada anterior.</span><span class="sxs-lookup"><span data-stu-id="9656d-107">This design allows for any number of consecutive calls to <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>, where each call performs a subordinate ordering on the sorted data returned from the previous call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9656d-108">O exemplo a seguir demonstra como executar uma ordenação primários e secundários em uma matriz de cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="9656d-108">The following example demonstrates how to perform a primary and secondary ordering on an array of strings.</span></span> <span data-ttu-id="9656d-109">Ele também demonstra que resultante <xref:System.Linq.IOrderedEnumerable%601> é enumerável.</span><span class="sxs-lookup"><span data-stu-id="9656d-109">It also demonstrates that the resulting <xref:System.Linq.IOrderedEnumerable%601> is enumerable.</span></span>  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#1)]
 [!code-vb[System.Linq.IOrderedEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateOrderedEnumerable&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedEnumerable&lt;TElement&gt; CreateOrderedEnumerable&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer, bool descending);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedEnumerable`1&lt;!TElement&gt; CreateOrderedEnumerable&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, bool descending) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOrderedEnumerable(Of TKey) (keySelector As Func(Of TElement, TKey), comparer As IComparer(Of TKey), descending As Boolean) As IOrderedEnumerable(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA; System::Linq::IOrderedEnumerable&lt;TElement&gt; ^ CreateOrderedEnumerable(Func&lt;TElement, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer, bool descending);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="9656d-110">O tipo de chave produzido por <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9656d-110">The type of the key produced by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="keySelector">
          <span data-ttu-id="9656d-111">O <see cref="T:System.Func`2" /> usado para extrair a chave de cada elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9656d-111">The <see cref="T:System.Func`2" /> used to extract the key for each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="9656d-112">O <see cref="T:System.Collections.Generic.IComparer`1" /> usado para comparar chaves para posicionamento na sequência retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9656d-112">The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.</span>
          </span>
        </param>
        <param name="descending">
          <span data-ttu-id="9656d-113">
            <see langword="true" /> para classificar os elementos em ordem decrescente; <see langword="false" /> para classificar os elementos em ordem crescente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9656d-113">
              <see langword="true" /> to sort the elements in descending order; <see langword="false" /> to sort the elements in ascending order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9656d-114">Executa uma ordenação subsequente nos elementos de uma <see cref="T:System.Linq.IOrderedEnumerable`1" /> de acordo com uma chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9656d-114">Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9656d-115">Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados de acordo com uma chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9656d-115">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9656d-116">A funcionalidade fornecida por este método é como o fornecido pelo <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>, dependendo se `descending` é `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="9656d-116">The functionality provided by this method is like that provided by <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>, depending on whether `descending` is `true` or `false`.</span></span> <span data-ttu-id="9656d-117">Ambos executarem uma ordenação subordinada de uma sequência classificada já do tipo <xref:System.Linq.IOrderedEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9656d-117">They both perform a subordinate ordering of an already sorted sequence of type <xref:System.Linq.IOrderedEnumerable%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9656d-118">O exemplo de código a seguir demonstra como usar <xref:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable*> para executar uma ordenação secundária em um <xref:System.Linq.IOrderedEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9656d-118">The following code example demonstrates how to use <xref:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable*> to perform a secondary ordering on an <xref:System.Linq.IOrderedEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#2)]
 [!code-vb[System.Linq.IOrderedEnumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>