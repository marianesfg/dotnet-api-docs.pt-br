<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lookup`2.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86ca9e2980211c039a479e811548ed9a6c5b7ef05b5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9e2980211c039a479e811548ed9a6c5b7ef05b5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the keys in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">O tipo das chaves no <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the elements of each <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> value in the <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos de cada valor <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> no <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Lookup`2">
          <source>Represents a collection of keys each mapped to one or more values.</source>
          <target state="translated">Representa uma coleção de chaves, cada uma mapeada para um ou mais valores.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> resembles a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> é semelhante a um <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The difference is that a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> maps keys to single values, whereas a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> maps keys to collections of values.</source>
          <target state="translated">A diferença é que um <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> mapeia chaves para valores únicos, enquanto um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> mapeia chaves para coleções de valores.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>You can create an instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by calling <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph> on an object that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Você pode criar uma instância de um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> chamando <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph> em um objeto que implementa <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>There is no public constructor to create a new instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">Não há nenhum construtor público para criar uma nova instância de um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> objects are immutable, that is, you cannot add or remove elements or keys from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">Além disso, <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> objetos são imutáveis, ou seja, você não pode adicionar ou remover elementos ou chaves de um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> objeto após ele ter sido criado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> from a collection of objects.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> de uma coleção de objetos.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It then enumerates the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> and outputs each key and each value in the key's associated collection of values.</source>
          <target state="translated">Em seguida, enumera a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> e saídas de cada chave e cada valor em uma coleção associada dos valores da chave.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It also demonstrates how to use the properties <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> and the methods <ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>.</source>
          <target state="translated">Ele também demonstra como usar as propriedades <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> e os métodos <ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>The type of the result values produced by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos valores de resultado produzido por <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A function to project a result value from each key and its associated values.</source>
          <target state="translated">Uma função para projetar um valor de resultado de cada chave e seus valores associados.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>Applies a transform function to each key and its associated values and returns the results.</source>
          <target state="translated">Aplica uma função de transformação a cada chave e seus valores associados e retorna os resultados.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A collection that contains one value for each key/value collection pair in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Uma coleção que contém um valor para cada par da coleção chave-valor no <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The key to find in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">A chave a ser localizada no <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>Determines whether a specified key is in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Determina se uma chave especificada está no <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="key" /&gt;</ph> estiver no <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> to determine whether a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> contains a specified key.</source>
          <target state="translated">O exemplo a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> para determinar se um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> contém uma chave especificada.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Count">
          <source>Gets the number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de pares da coleção chave-valor no <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">O número de pares chave/valor da coleção no <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> property does not change because items cannot be added to or removed from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">O valor da <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> propriedade não alterado porque itens não podem ser adicionados ou removidos de um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> objeto após ele ter sido criado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> to determine the number of key/value collection pairs in a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> para determinar o número de pares chave/valor da coleção em um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>Returns a generic enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Retorna um enumerador genérico que itera por <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Um enumerador para o <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph> to iterate through the keys and values of a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph> para percorrer as chaves e valores de um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The key of the desired collection of values.</source>
          <target state="translated">A chave da coleção de valores desejada.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>Gets the collection of values indexed by the specified key.</source>
          <target state="translated">Obtém a coleção de valores indexados pela chave especificada.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The collection of values indexed by the specified key.</source>
          <target state="translated">A coleção de valores indexada pela chave especificada.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This indexed property provides the ability to index a specific collection of values in the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using the following syntax: <ph id="ph2">`myLookup[key]`</ph> in Visual C# or <ph id="ph3">`myLookup(key)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Esta propriedade indexada fornece a capacidade de um conjunto específico de valores de índice de <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> usando a seguinte sintaxe: <ph id="ph2">`myLookup[key]`</ph> no Visual c# ou <ph id="ph3">`myLookup(key)`</ph> em <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>If the <ph id="ph1">`key`</ph> is not found in the collection, an empty sequence is returned.</source>
          <target state="translated">Se o <ph id="ph1">`key`</ph> não foi encontrado na coleção, uma sequência vazia será retornada.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> to index directly into a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> para indexar diretamente em um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Retorna um enumerador que itera por meio de <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">Essa classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">Um enumerador para o <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>