<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enumerable.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9575d09f-9d72-4690-889e-b83c405ca45607dee8baf2c12c573f1f883f6122e5e0bdbbf641.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07dee8baf2c12c573f1f883f6122e5e0bdbbf641</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">254e16ae65e82f4aa59360cd8572b36b6b5b2f80</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/05/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Provides a set of <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) methods for querying objects that implement <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Fornece um conjunto de métodos <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) para consultar objetos que implementam <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Os métodos nesta classe fornecem uma implementação de operadores de consulta padrão para consultar dados de fontes que implementam <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
          <target state="translated">Os operadores de consulta padrão são métodos de finalidade geral que seguem o <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> padrão e permitem expressar operações de passagem, filtragem e projeção sobre os dados em qualquer um. Linguagem de programação baseado em rede.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The majority of the methods in this class are defined as extension methods that extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">A maioria dos métodos nesta classe são definidos como métodos de extensão que estendem <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Isso significa que pode ser chamados como um método de instância em qualquer objeto que implementa <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</source>
          <target state="translated">Métodos que são usados em uma consulta que retorna uma sequência de valores não consomem os dados de destino até que o objeto de consulta é enumerado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This is known as deferred execution.</source>
          <target state="translated">Isso é conhecido como execução adiada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</source>
          <target state="translated">Métodos que são usados em uma consulta que retorna um valor de singleton execute e consumam os dados de destino imediatamente.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> no qual será feita a agregação.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Uma função de acumulador a ser invocada em cada elemento.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Aplica uma função de acumulador a uma sequência.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The final accumulator value.</source>
          <target state="translated">O valor final do acumulador.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> método simplifica a executar um cálculo em uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph> except the first one.</source>
          <target state="translated">Esse método funciona chamando <ph id="ph1">`func`</ph> uma vez para cada elemento na <ph id="ph2">`source`</ph> exceto a primeira delas.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Cada vez que <ph id="ph1">`func`</ph> é chamado, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passa ambos o elemento da sequência e um valor agregado (como o primeiro argumento para <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The first element of <ph id="ph1">`source`</ph> is used as the initial aggregate value.</source>
          <target state="translated">O primeiro elemento da <ph id="ph1">`source`</ph> é usado como o valor inicial de agregação.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">O resultado de <ph id="ph1">`func`</ph> substitui o valor agregado anterior.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> Retorna o resultado final da <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method isn't suitable for all cases because it uses the first element of <ph id="ph2">`source`</ph> as the initial aggregate value.</source>
          <target state="translated">Esta sobrecarga do <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> método não é adequado para todos os casos porque ele usa o primeiro elemento da <ph id="ph2">`source`</ph> como o valor inicial de agregação.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>You should choose another overload if the return value should include only the elements of <ph id="ph1">`source`</ph> that meet a certain condition.</source>
          <target state="translated">Você deve escolher outra sobrecarga se o valor de retorno deve incluir somente os elementos de <ph id="ph1">`source`</ph> que atendem a uma determinada condição.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>For example, this overload isn't reliable if you want to calculate the sum of the even numbers in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Por exemplo, essa sobrecarga não é confiável para calcular a soma dos números par <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result will be incorrect if the first element is odd instead of even.</source>
          <target state="translated">O resultado será incorreto se o primeiro elemento é ímpar em vez do mesmo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Para simplificar as operações de agregação comuns, os operadores de consulta padrão também incluem um método de contagem de uso geral, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>e quatro métodos de agregação numéricas, ou seja, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The following code example demonstrates how to reverse the order of words in a string by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como inverter a ordem das palavras em uma cadeia de caracteres usando <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="func" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the accumulator value.</source>
          <target state="translated">O tipo do valor do acumulador.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> no qual será feita a agregação.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The initial accumulator value.</source>
          <target state="translated">O valor inicial do acumulador.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Uma função de acumulador a ser invocada em cada elemento.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Aplica uma função de acumulador a uma sequência.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The specified seed value is used as the initial accumulator value.</source>
          <target state="translated">O valor de semente especificado é usado como o valor inicial do acumulador.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The final accumulator value.</source>
          <target state="translated">O valor final do acumulador.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> método simplifica a executar um cálculo em uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Esse método funciona chamando <ph id="ph1">`func`</ph> uma vez para cada elemento na <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Cada vez que <ph id="ph1">`func`</ph> é chamado, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passa ambos o elemento da sequência e um valor agregado (como o primeiro argumento para <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">O valor de <ph id="ph1">`seed`</ph> parâmetro é usado como o valor inicial de agregação.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">O resultado de <ph id="ph1">`func`</ph> substitui o valor agregado anterior.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> Retorna o resultado final da <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Para simplificar as operações de agregação comuns, os operadores de consulta padrão também incluem um método de contagem de uso geral, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>e quatro métodos de agregação numéricas, ou seja, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and use a seed value.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> para aplicar uma função acumulador e usar um valor de semente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="func" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the accumulator value.</source>
          <target state="translated">O tipo do valor do acumulador.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the resulting value.</source>
          <target state="translated">O tipo do valor resultante.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> no qual será feita a agregação.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The initial accumulator value.</source>
          <target state="translated">O valor inicial do acumulador.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Uma função de acumulador a ser invocada em cada elemento.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>A function to transform the final accumulator value into the result value.</source>
          <target state="translated">Uma função para transformar o valor final do acumulador no valor de resultado.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Aplica uma função de acumulador a uma sequência.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
          <target state="translated">O valor de semente especificado é usado como o valor inicial do acumulador e a função especificada é usada para selecionar o valor do resultado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The transformed final accumulator value.</source>
          <target state="translated">O valor final do acumulador transformado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> método simplifica a executar um cálculo em uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Esse método funciona chamando <ph id="ph1">`func`</ph> uma vez para cada elemento na <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Cada vez que <ph id="ph1">`func`</ph> é chamado, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passa ambos o elemento da sequência e um valor agregado (como o primeiro argumento para <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">O valor de <ph id="ph1">`seed`</ph> parâmetro é usado como o valor inicial de agregação.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">O resultado de <ph id="ph1">`func`</ph> substitui o valor agregado anterior.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The final result of <ph id="ph1">`func`</ph> is passed to <ph id="ph2">`resultSelector`</ph> to obtain the final result of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">O resultado final da <ph id="ph1">`func`</ph> é passado para <ph id="ph2">`resultSelector`</ph> para obter o resultado final de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Para simplificar as operações de agregação comuns, os operadores de consulta padrão também incluem um método de contagem de uso geral, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>e quatro métodos de agregação numéricas, ou seja, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and a result selector.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> para aplicar uma função acumulador e um seletor de resultado.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="func" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to apply the predicate to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos aos quais o predicado será aplicado.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether all elements of a sequence satisfy a condition.</source>
          <target state="translated">Determina se todos os elementos de uma sequência atendem a uma condição.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se todos os elementos da sequência de origem passarem no teste no predicado especificado ou se a sequência for vazia; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return all the elements of a collection.</source>
          <target state="translated">Este método não retorna todos os elementos de uma coleção.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether all the elements of a collection satisfy a condition.</source>
          <target state="translated">Em vez disso, ele determina se todos os elementos de uma coleção satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">A enumeração de <ph id="ph1">`source`</ph> é interrompida assim que o resultado pode ser determinado.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into All()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into All()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> to determine whether all the elements in a sequence satisfy a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> para determinar se todos os elementos em uma sequência satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Variable <ph id="ph1">`allStartWithB`</ph> is true if all the pet names start with "B" or if the <ph id="ph2">`pets`</ph> array is empty.</source>
          <target state="translated">Variável <ph id="ph1">`allStartWithB`</ph> é true se todos os nomes de animal de estimação começam com "B" ou se o <ph id="ph2">`pets`</ph> matriz está vazia.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method.</source>
          <target state="translated">O valor booleano que o <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> método retorna normalmente é usada no predicado de um <ph id="ph2">`where`</ph> cláusula (<ph id="ph3">`Where`</ph> cláusula <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) ou uma chamada direta para o <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following example demonstrates this use of the <ph id="ph1">`All`</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra esse uso do <ph id="ph1">`All`</ph> método.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether any element of a sequence exists or satisfies a condition.</source>
          <target state="translated">Determina se qualquer elemento de uma sequência existe ou atende a uma condição.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to check for emptiness.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a ser verificado se está vazio.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether a sequence contains any elements.</source>
          <target state="translated">Determina se uma sequência contém elementos.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a sequência de origem contiver elementos; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">Este método não retorna qualquer um elemento de uma coleção.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead, it determines whether the collection contains any elements.</source>
          <target state="translated">Em vez disso, ele determina se a coleção contém elementos.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">A enumeração de <ph id="ph1">`source`</ph> é interrompida assim que o resultado pode ser determinado.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Any()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether a sequence contains any elements.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> para determinar se uma sequência contém elementos.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method.</source>
          <target state="translated">O valor booleano que o <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método retorna normalmente é usada no predicado de um <ph id="ph2">`where`</ph> cláusula (<ph id="ph3">`Where`</ph> cláusula <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) ou uma chamada direta para o <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of the <ph id="ph1">`Any`</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra esse uso do <ph id="ph1">`Any`</ph> método.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to apply the predicate to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a cujos elementos o predicado será aplicado.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
          <target state="translated">Determina se algum elemento de uma sequência atende a uma condição.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se algum elemento na sequência de origem for aprovado no teste do predicado especificado; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">Este método não retorna qualquer um elemento de uma coleção.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether any elements of a collection satisfy a condition.</source>
          <target state="translated">Em vez disso, ele determina se os elementos de uma coleção satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">A enumeração de <ph id="ph1">`source`</ph> é interrompida assim que o resultado pode ser determinado.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Any()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether any element in a sequence satisfies a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> para determinar se qualquer elemento em uma sequência satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos de <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">Uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to append to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">O valor a ser acrescentado a <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Appends a value to the end of the sequence.</source>
          <target state="translated">Acrescenta um valor ao final da sequência.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that ends with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">Uma nova sequência que termina com <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to type as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">A sequência a ser digitada como <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the input typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Retorna a entrada digitada como <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">A sequência de entrada digitada como <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method has no effect other than to change the compile-time type of <ph id="ph2">`source`</ph> from a type that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> itself.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método não tem nenhum efeito diferente para alterar o tipo de tempo de compilação de <ph id="ph2">`source`</ph> de um tipo que implementa <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> para <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> em si.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> can be used to choose between query implementations when a sequence implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> but also has a different set of public query methods available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pode ser usado para escolher entre as implementações de consulta quando uma sequência implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> , mas também tem um conjunto diferente de métodos de consulta pública disponíveis.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For example, given a generic class <ph id="ph1">`Table`</ph> that implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and has its own methods such as <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, and <ph id="ph5">`SelectMany`</ph>, a call to <ph id="ph6">`Where`</ph> would invoke the public <ph id="ph7">`Where`</ph> method of <ph id="ph8">`Table`</ph>.</source>
          <target state="translated">Por exemplo, dada uma classe genérica <ph id="ph1">`Table`</ph> que implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> e tem seus próprios métodos como <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, e <ph id="ph5">`SelectMany`</ph>, uma chamada para <ph id="ph6">`Where`</ph> invocaria público <ph id="ph7">`Where`</ph> método <ph id="ph8">`Table`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">`Table`</ph> type that represents a database table could have a <ph id="ph2">`Where`</ph> method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</source>
          <target state="translated">Um <ph id="ph1">`Table`</ph> tipo que representa uma tabela de banco de dados pode ter um <ph id="ph2">`Where`</ph> método que usa o argumento como uma árvore de expressão de predicado e converte a árvore para o SQL para execução remota.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If remote execution is not desired, for example because the predicate invokes a local method, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method can be used to hide the custom methods and instead make the standard query operators available.</source>
          <target state="translated">Se a execução remota não for desejada, por exemplo, porque o predicado invoca um método de local, o <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> método pode ser usado para ocultar os métodos personalizados e disponibilizar os operadores de consulta padrão em vez disso.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to hide a type's custom <ph id="ph2">`Where`</ph> method when the standard query operator implementation is desired.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para ocultar um tipo do personalizado <ph id="ph2">`Where`</ph> método quando a implementação do operador de consulta padrão é desejada.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the average of a sequence of numeric values.</source>
          <target state="translated">Computa a média de uma sequência de valores numéricos.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> para realizar o cálculo da média.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> para calcular a média de uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> para realizar o cálculo da média.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">Se a soma dos elementos é grande demais para representar como um <ph id="ph1">&lt;xref:System.Double&gt;</ph>, esse método retorna infinito positivo ou negativo.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> para realizar o cálculo da média.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> para realizar o cálculo da média.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> que permitem valores nulos para cálculo da média.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> que permitem valores nulos para cálculo da média.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">Se a soma dos elementos é grande demais para representar como um <ph id="ph1">&lt;xref:System.Double&gt;</ph>, esse método retorna infinito positivo ou negativo.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que permitem valores nulos para cálculo da média.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que permitem valores nulos para cálculo da média.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> que permitem valores nulos para cálculo da média.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> para realizar o cálculo da média.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Computa a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate an average.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma média.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of source.</source>
          <target state="translated">O tipo dos elementos da fonte.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma dos elementos na sequência é maior do que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A média da sequência de valores ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se a sequência de origem estiver vazia ou contiver somente valores que são <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Uma sequência de valores para cálculo da média.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a média de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">A média da sequência de valores.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Average()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para calcular uma média.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The type to cast the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">O tipo para converter os elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept> para.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> that contains the elements to be cast to type <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> que contém os elementos a serem convertidos no tipo <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Casts the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> to the specified type.</source>
          <target state="translated">Converte os elementos de um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> para o tipo especificado.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains each element of the source sequence cast to the specified type.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém cada elemento da sequência de origem convertido para o tipo especificado.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> método permite que os operadores de consulta padrão a ser invocado em coleções não genéricas, fornecendo as informações do tipo necessário.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>For example, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, but by calling <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> on the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> object, the standard query operators can then be used to query the sequence.</source>
          <target state="translated">Por exemplo, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> não implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, mas chamando <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> no <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> do objeto, os operadores de consulta padrão, em seguida, podem ser usados para a sequência de consulta.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>If an element cannot be converted to type <ph id="ph1">`TResult`</ph>, this method throws a <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Se um elemento não pode ser convertido no tipo <ph id="ph1">`TResult`</ph>, este método lança um <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The source sequence for this method is <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which means the elements have the compile-time static type of <ph id="ph2">`object`</ph>.</source>
          <target state="translated">A sequência de origem para este método é <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, que significa que os elementos têm o tipo estático do tempo de compilação de <ph id="ph2">`object`</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The only type conversions that are performed by this method are reference conversions and unboxing conversions.</source>
          <target state="translated">Apenas conversões de tipo que são executadas por este método são conversões de referência e conversões de conversão.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</source>
          <target state="translated">O tipo de tempo de execução dos elementos na coleção deve corresponder ao tipo de destino ou, no caso de tipos de valor, o tipo de tempo de execução dos elementos deve ser o resultado de uma conversão boxing do tipo de destino.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Other conversion types, such as those between different numeric types, are not allowed.</source>
          <target state="translated">Outros tipos de conversão, como aqueles entre diferentes tipos numéricos, não são permitidos.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>To obtain only those elements that can be converted to type <ph id="ph1">`TResult`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> method instead of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Para obter apenas os elementos que podem ser convertidos no tipo <ph id="ph1">`TResult`</ph>, use o <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> método em vez de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>In a query expression, an explicitly typed iteration variable translates to an invocation of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Em uma expressão de consulta, uma variável de iteração tipada explicitamente se traduz em uma chamada de <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This example shows the syntax for an explicitly typed range variable.</source>
          <target state="translated">Este exemplo mostra a sintaxe para uma variável de intervalo de tipo explícito.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Use the <ph id="ph1">`select`</ph> clause of a query to perform other conversion types, like the implicit numeric conversions.</source>
          <target state="translated">Use o <ph id="ph1">`select`</ph> cláusula de uma consulta para executar outros tipos de conversão, como as conversões numéricas implícitas.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following example uses both the <ph id="ph1">`Cast`</ph> method and a <ph id="ph2">`select`</ph> statement to convert a sequence of boxed integers to a sequence of doubles.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Cast`</ph> método e uma <ph id="ph2">`select`</ph> instrução para converter uma sequência de inteiros demarcados em uma sequência de duplicatas.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> to enable the use of the standard query operators on an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> para habilitar o uso de operadores de consulta padrão em um <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An element in the sequence cannot be cast to type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Um elemento na sequência não pode ser convertido para o tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The first sequence to concatenate.</source>
          <target state="translated">A primeira sequência a ser concatenada.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to concatenate to the first sequence.</source>
          <target state="translated">A sequência a ser concatenada com a primeira sequência.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates two sequences.</source>
          <target state="translated">Concatena duas sequências.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos concatenados das duas sequências de entrada.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns all the original elements in the input sequences.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método difere de <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> método porque o <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método retorna todos os elementos originais nas sequências de entrada.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method returns only unique elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> método retorna apenas os elementos exclusivos.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to concatenate two sequences.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para concatenar duas sequências.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method, passing it the identity selector function.</source>
          <target state="translated">É uma maneira alternativa de concatenar duas sequências construir uma coleção, por exemplo uma matriz de sequências e, em seguida, aplicar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> método, passando a função de seletor de identidade.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra esse uso do <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether a sequence contains a specified element.</source>
          <target state="translated">Determina se uma sequência contém um elemento especificado.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">Uma sequência na qual um valor será localizado.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to locate in the sequence.</source>
          <target state="translated">O valor a ser localizado na sequência.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
          <target state="translated">Determina se uma sequência contém um elemento especificado usando o comparador de igualdade padrão.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a sequência de origem contiver um elemento que tem o valor especificado; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, the <ph id="ph3">`Contains`</ph> method in that implementation is invoked to obtain the result.</source>
          <target state="translated">Se o tipo de <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, o <ph id="ph3">`Contains`</ph> método em que a implementação é chamado para obter o resultado.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Otherwise, this method determines whether <ph id="ph1">`source`</ph> contains the specified element.</source>
          <target state="translated">Caso contrário, este método determina se <ph id="ph1">`source`</ph> contém o elemento especificado.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">Enumeração é encerrada, assim como um elemento correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Elements are compared to the specified value by using the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Elementos são comparados ao valor especificado usando o comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to determine whether an array contains a specific element.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> para determinar se uma matriz contém um elemento específico.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">Uma sequência na qual um valor será localizado.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The value to locate in the sequence.</source>
          <target state="translated">O valor a ser localizado na sequência.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An equality comparer to compare values.</source>
          <target state="translated">Um comparador de igualdade para comparar valores.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Determina se uma sequência contém um elemento especificado usando um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a sequência de origem contiver um elemento que tem o valor especificado; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">Enumeração é encerrada, assim como um elemento correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements to the specified value.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os elementos para o valor especificado.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra como implementar um comparador de igualdade que pode ser usado no <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois de implementar essa comparação, você pode usar uma sequência de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Retorna o número de elementos em uma sequência.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains elements to be counted.</source>
          <target state="translated">Uma sequência que contém os elementos a serem contados.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Retorna o número de elementos em uma sequência.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the input sequence.</source>
          <target state="translated">O número de elementos na sequência de entrada.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">Se o tipo de <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, que a implementação é usada para obter a contagem de elementos.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">Caso contrário, este método determina a contagem.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> método quando você espera e deseja permitir que o resultado seja maior que <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Count()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para contar os elementos em uma matriz.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O número de elementos no <ph id="ph1">&lt;paramref name="source" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence that contains elements to be tested and counted.</source>
          <target state="translated">Uma sequência que contém os elementos a serem testados e contados.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns a number that represents how many elements in the specified sequence satisfy a condition.</source>
          <target state="translated">Retorna um número que representa quantos elementos na sequência especificada atendem a uma condição.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">Um número que representa quantos elementos na sequência atendem à condição na função de predicado.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">Se o tipo de <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, que a implementação é usada para obter a contagem de elementos.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">Caso contrário, este método determina a contagem.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>You should use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Você deve usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> método quando você espera e deseja permitir que o resultado seja maior que <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Count()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para contar os elementos em uma matriz que satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O número de elementos no <ph id="ph1">&lt;paramref name="source" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, or a default valued singleton collection if the sequence is empty.</source>
          <target state="translated">Retornará os elementos em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> ou uma coleção de singletons com valor padrão se a sequência estiver vazia.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to return a default value for if it is empty.</source>
          <target state="translated">A sequência para a qual será retornado um valor padrão se ela estiver vazia.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Retornará os elementos da sequência especificada ou o valor padrão do parâmetro de tipo em uma coleção de singletons se a sequência estiver vazia.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> object that contains the default value for the <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> type if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém o valor padrão do tipo <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> estiver vazio; caso contrário, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">Esse método pode ser usado para produzir uma junção externa esquerda quando ele é combinado com o <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) método.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to provide a default value in case the source sequence is empty.</source>
          <target state="translated">Os exemplos de código a seguir demonstram como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para fornecer um valor padrão caso a sequência de origem está vazia.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses a non-empty sequence.</source>
          <target state="translated">Este exemplo usa uma sequência não vazia.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses an empty sequence.</source>
          <target state="translated">Este exemplo usa uma sequência vazia.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The sequence to return the specified value for if it is empty.</source>
          <target state="translated">A sequência para a qual será retornado o valor especificado se ela estiver vazia.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to return if the sequence is empty.</source>
          <target state="translated">O valor a ser retornado se a sequência estiver vazia.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Retorna os elementos da sequência especificada ou o valor especificado em uma coleção de singletons se a sequência está vazia.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> está vazio; caso contrário, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">Esse método pode ser usado para produzir uma junção externa esquerda quando ele é combinado com o <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) método.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method and specify a default value.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método e especificar um valor padrão.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The first sequence is not empty and the second sequence is empty.</source>
          <target state="translated">A primeira sequência não está vazia e a segunda sequência está vazia.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns distinct elements from a sequence.</source>
          <target state="translated">Retorna elementos diferentes de uma sequência.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The result sequence is unordered.</source>
          <target state="translated">A sequência de resultado está fora de ordem.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">A sequência da qual os elementos duplicados serão removidos.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
          <target state="translated">Retorna os elementos distintos de uma sequência usando o comparador de igualdade padrão para comparar valores.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos distintos da sequência de origem.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método retorna uma sequência não ordenada que não contenha valores duplicados.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>It uses the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, to compare values.</source>
          <target state="translated">Ele usa o comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, para comparar valores.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Distinct`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Distinct`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os valores dos tipos que implementam o <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Para comparar um tipo de dados personalizado, você precisa implementar essa interface e fornecer sua própria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos para o tipo.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For an example that uses <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> to define a custom comparer, see <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo que usa <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> para definir um comparador personalizado, consulte <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return distinct elements from a sequence of integers.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para retornar elementos distintos de uma sequência de números inteiros.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> generic interface in the class.</source>
          <target state="translated">Se você quiser retornar elementos distintos de sequências de objetos de um tipo de dados personalizado, você precisa implementar o <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface genérica na classe.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">O exemplo de código a seguir mostra como implementar essa interface em um tipo de dados personalizadas e fornecer <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois que você implementar essa interface, você pode usar uma sequência de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">A sequência da qual os elementos duplicados serão removidos.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Retorna os elementos distintos de uma sequência usando um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado para comparar valores.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos distintos da sequência de origem.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> método retorna uma sequência não ordenada que não contenha valores duplicados.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar valores.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra como implementar um comparador de igualdade que pode ser usado no <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois de implementar essa comparação, você pode usar uma sequência de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual um elemento será retornado.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">O índice baseado em zero do elemento a ser recuperado.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence.</source>
          <target state="translated">Retorna o elemento de um índice especificado em uma sequência.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The element at the specified position in the source sequence.</source>
          <target state="translated">O elemento na posição especificada na sequência de origem.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">Se o tipo de <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, que a implementação é usada para obter o elemento no índice especificado.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">Caso contrário, esse método obtém o elemento especificado.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method throws an exception if <ph id="ph1">`index`</ph> is out of range.</source>
          <target state="translated">Este método lança uma exceção se <ph id="ph1">`index`</ph> está fora do intervalo.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>To instead return a default value when the specified index is out of range, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Para retornar em vez disso, um valor padrão quando o índice especificado está fora do intervalo, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> to return an element at a specific position.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> para retornar um elemento em uma posição específica.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than or equal to the number of elements in <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0 ou maior ou igual ao número de elementos em <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual um elemento será retornado.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">O índice baseado em zero do elemento a ser recuperado.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
          <target state="translated">Retorna o elemento em um índice especificado em uma sequência ou um valor padrão se o índice estiver fora do intervalo.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se o índice estiver fora dos limites da sequência de origem; caso contrário, o elemento na posição especificada na sequência de origem.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">Se o tipo de <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, que a implementação é usada para obter o elemento no índice especificado.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">Caso contrário, esse método obtém o elemento especificado.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This example uses an index that is outside the bounds of the array.</source>
          <target state="translated">Este exemplo usa um índice está fora dos limites da matriz.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The type to assign to the type parameter of the returned generic <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">O tipo a ser atribuído ao parâmetro de tipo genérico <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> retornado.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>Returns an empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has the specified type argument.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> vazio que tem o argumento do tipo especificado.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>An empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose type argument is <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> vazio cujo tipo de argumento é <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method caches an empty sequence of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> método armazena em cache uma sequência vazia do tipo <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>When the object it returns is enumerated, it yields no elements.</source>
          <target state="translated">Quando o objeto retorna é enumerado, ele gera elementos de nenhum.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Em alguns casos, esse método é útil para passar uma sequência vazia para um método definido pelo usuário que usa um <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>It can also be used to generate a neutral element for methods such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</source>
          <target state="translated">Ele também pode ser usado para gerar um elemento neutro para métodos como <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>See the Example section for an example of this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</source>
          <target state="translated">Consulte a seção de exemplo para obter um exemplo deste uso de <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> to generate an empty <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> para gerar um vazio <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates a possible application of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method.</source>
          <target state="translated">O exemplo de código a seguir demonstra um aplicativo de possíveis de <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method is applied to a collection of string arrays.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> método é aplicado a uma coleção de matrizes de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The elements of each array in the collection are added to the resulting <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> only if that array contains four or more elements.</source>
          <target state="translated">Os elementos de cada matriz na coleção são adicionados ao resultante <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> somente se essa matriz contém quatro ou mais elementos.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> is used to generate the seed value for <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> because if no array in the collection has four or more elements, only the empty sequence is returned.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> é usado para gerar o valor de semente para <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> porque se nenhuma matriz de na coleção tem quatro ou mais elementos, somente a sequência vazia será retornada.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set difference of two sequences.</source>
          <target state="translated">Produz a diferença de conjunto de duas sequências.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos que não estão presentes também em <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> serão retornados.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos que também ocorrem na primeira sequência farão com que esses elementos sejam removidos da sequência retornada.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Produz a diferença de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">Uma sequência que contém a diferença de conjunto dos elementos das duas sequências.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The set difference of two sets is defined as the members of the first set that do not appear in the second set.</source>
          <target state="translated">A diferença de conjunto de dois conjuntos é definida como os membros do primeiro conjunto que não aparecem no segundo conjunto.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method returns those elements in <ph id="ph1">`first`</ph> that do not appear in <ph id="ph2">`second`</ph>.</source>
          <target state="translated">Este método retorna os elementos no <ph id="ph1">`first`</ph> que não aparecem no <ph id="ph2">`second`</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It does not also return those elements in <ph id="ph1">`second`</ph> that do not appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Ele não retorna esses elementos também <ph id="ph1">`second`</ph> que não aparecem no <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os valores dos tipos que implementam o <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Para comparar um tipo de dados personalizado, você precisa implementar essa interface e fornecer sua própria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos para o tipo.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method to compare two sequences of numbers and return elements that appear only in the first sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método para comparar duas sequências de números e retorna elementos que aparecem somente na primeira sequência.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">Se você quiser comparar sequências de objetos de um tipo de dados personalizado, você precisa implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica em um helperclass.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">O exemplo de código a seguir mostra como implementar essa interface em um tipo de dados personalizadas e fornecer <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois que você implementar essa interface, você pode usar sequências de <ph id="ph1">`ProductA`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos que não estão presentes também em <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> serão retornados.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos que também ocorrem na primeira sequência farão com que esses elementos sejam removidos da sequência retornada.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Produz a diferença de conjunto de duas sequências usando o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado para comparar os valores.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">Uma sequência que contém a diferença de conjunto dos elementos das duas sequências.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar valores.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra como implementar um comparador de igualdade que pode ser usado no <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois de implementar essa comparação, você pode usar sequências de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Retorna o primeiro elemento de uma sequência.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual o primeiro elemento será retornado.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Retorna o primeiro elemento de uma sequência.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first element in the specified sequence.</source>
          <target state="translated">O primeiro elemento na sequência especificada.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método lançará uma exceção se <ph id="ph2">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Para retornar em vez disso, um valor padrão quando a sequência de origem estiver vazia, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the first element of an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para retornar o primeiro elemento de uma matriz.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">Uma sequência de origem está vazia.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual um elemento será retornado.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element in a sequence that satisfies a specified condition.</source>
          <target state="translated">Retorna o primeiro elemento em uma sequência que satisfaz uma condição especificada.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The first element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">O primeiro elemento na sequência que passa o teste na função de predicado especificada.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> método lançará uma exceção se nenhum elemento correspondente foi encontrado em <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Para retornar em vez disso, um valor padrão quando nenhum elemento correspondente foi encontrado, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the first element of an array that satisfies a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para retornar o primeiro elemento de uma matriz que satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Nenhum elemento satisfaz a condição na <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">Uma sequência de origem está vazia.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Retorna o primeiro elemento de uma sequência ou um valor padrão caso não seja encontrado nenhum elemento.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual o primeiro elemento será retornado.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Retorna o primeiro elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the first element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> estiver vazio; caso contrário, o primeiro elemento em <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> método não fornece uma maneira de especificar um valor padrão.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Se você quiser especificar um valor padrão diferente de <ph id="ph1">`default(TSource)`</ph>, use o <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método conforme descrito na seção de exemplo.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> em uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">Às vezes, o valor de <ph id="ph1">`default(TSource)`</ph> não é o valor padrão que você deseja usar se a coleção não contém elementos.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Em vez de verificar o resultado para o valor padrão indesejado e, em seguida, alterá-la, se necessário, você pode usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método para especificar o valor padrão que você deseja usar se a coleção está vazia.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the first element.</source>
          <target state="translated">Em seguida, chame <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para obter o primeiro elemento.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</source>
          <target state="translated">O exemplo de código a seguir usa a ambas as técnicas para obter um valor padrão de 1, se um conjunto de meses numéricos está vazio.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</source>
          <target state="translated">Porque o valor padrão para um número inteiro é 0, que não corresponde a qualquer mês, o valor padrão deve ser especificado em vez disso, como 1.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">A primeira variável de resultado é verificada para o valor padrão indesejado após a conclusão da consulta em execução.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">A segunda variável de resultado é obtida usando <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> para especificar um valor padrão de 1.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual um elemento será retornado.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Retorna o primeiro elemento da sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty or if no element passes the test specified by <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>; otherwise, the first element in <ph id="ph5">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> estiver vazio ou se nenhum elemento for aprovado no teste especificado por <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>; caso contrário, o primeiro elemento em <ph id="ph5">&lt;paramref name="source" /&gt;</ph> que for aprovado no teste especificado por <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> passando um predicado.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the array that satisfies the condition.</source>
          <target state="translated">A segunda chamada para o método, há nenhum elemento na matriz que atendem à condição.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Groups the elements of a sequence.</source>
          <target state="translated">Agrupa os elementos de uma sequência.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função de seletor de chave especificada.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a sequence of objects and a key.</source>
          <target state="translated">Um <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> em que cada objeto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contém uma sequência de objetos e uma chave.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Para obter exemplos de <ph id="ph1">`GroupBy`</ph>, consulte os tópicos a seguir.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> método retorna uma coleção de <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos, um para cada chave distinto que foi encontrado.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> é um <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> que também tem uma chave associada a seus elementos.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos são gerou em uma ordem com base na ordem de elementos no <ph id="ph2">`source`</ph> que produziu a primeira chave de cada <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elementos em um agrupamento são gerou na ordem em que aparecem no <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">O comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Para obter mais informações e exemplos de uso, consulte <bpt id="p1">[</bpt>cláusula group<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> e <bpt id="p2">[</bpt>grupo pela cláusula<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e compara as chaves usando um comparador especificado.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects and a key.</source>
          <target state="translated">Um <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> em que cada objeto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contém uma coleção de objetos e uma chave.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Para obter exemplos de <ph id="ph1">`GroupBy`</ph>, consulte os tópicos a seguir.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> método retorna uma coleção de <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos, um para cada chave distinto que foi encontrado.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> é um <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> que também tem uma chave associada a seus elementos.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos são gerou em uma ordem com base na ordem de elementos no <ph id="ph2">`source`</ph> que produziu a primeira chave de cada <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elementos em um agrupamento são gerou na ordem em que aparecem no <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">Se duas chaves são consideradas iguais conforme <ph id="ph1">`comparer`</ph>, a primeira chave é escolhida como a chave de agrupamento.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Para obter mais informações e exemplos de uso, consulte <bpt id="p1">[</bpt>cláusula group<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> e <bpt id="p2">[</bpt>grupo pela cláusula<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos no <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to map each source element to an element in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Uma função para mapear cada elemento de origem para um elemento no <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com a função de seletor de chave especificada e projeta os elementos de cada grupo usando uma função especificada.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Um <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> em que cada objeto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contém uma coleção de objetos de tipo <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> e uma chave.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> método retorna uma coleção de <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos, um para cada chave distinto que foi encontrado.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> é um <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> que também tem uma chave associada a seus elementos.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos são gerou em uma ordem com base na ordem de elementos no <ph id="ph2">`source`</ph> que produziu a primeira chave de cada <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elementos em um agrupamento são gerou na ordem em que os elementos que produziu aparecer em <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">O comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> para agrupar os elementos de uma sequência.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The translation of the query expression in the following example is equivalent to the query in the example above.</source>
          <target state="translated">A conversão da expressão de consulta no exemplo a seguir é equivalente à consulta no exemplo acima.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In a <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph2">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method.</source>
          <target state="translated">Em um <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> expressão de consulta, o elemento e expressões de seleção chave ocorrerem na ordem inversa de suas posições de argumento em uma chamada para o <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos no <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Uma função para mapear cada elemento de origem para um elemento em um <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a key selector function.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função de seletor de chave.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a comparer and each group's elements are projected by using a specified function.</source>
          <target state="translated">As chaves são comparadas usando um comparador e os elementos de cada grupo são projetados usando uma função especificada.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Um <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> em que cada objeto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contém uma coleção de objetos de tipo <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> e uma chave.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Para obter exemplos de <ph id="ph1">`GroupBy`</ph>, consulte os tópicos a seguir.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> método retorna uma coleção de <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos, um para cada chave distinto que foi encontrado.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> é um <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> que também tem uma chave associada a seus elementos.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objetos são gerou em uma ordem com base na ordem de elementos no <ph id="ph2">`source`</ph> que produziu a primeira chave de cada <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elementos em um agrupamento são gerou na ordem em que os elementos que produziu aparecer em <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">Se duas chaves são consideradas iguais conforme <ph id="ph1">`comparer`</ph>, a primeira chave é escolhida como a chave de agrupamento.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Para obter mais informações e exemplos de uso, consulte <bpt id="p1">[</bpt>cláusula group<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> e <bpt id="p2">[</bpt>grupo pela cláusula<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor de resultado retornado por <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Uma função para criar um valor de resultado de cada grupo.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Uma coleção de elementos do tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, em que cada elemento representa uma projeção em um grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> para agrupar os elementos de uma sequência e uma sequência de resultados do tipo de projeto <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor de resultado retornado por <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Uma função para criar um valor de resultado de cada grupo.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> com o qual as chaves serão comparadas.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a specified comparer.</source>
          <target state="translated">As chaves são comparadas usando um comparador especificado.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Uma coleção de elementos do tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, em que cada elemento representa uma projeção em um grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos em cada <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor de resultado retornado por <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Uma função para mapear cada elemento de origem para um elemento em um <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Uma função para criar um valor de resultado de cada grupo.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The elements of each group are projected by using a specified function.</source>
          <target state="translated">Os elementos de cada grupo são projetados usando uma função especificada.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Uma coleção de elementos do tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, em que cada elemento representa uma projeção em um grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> to group the projected elements of a sequence and then project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> para agrupar os elementos projetados de uma sequência e, em seguida, uma sequência de resultados do tipo de projeto <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos em cada <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor de resultado retornado por <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos serão agrupados.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Uma função para extrair a chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Uma função para mapear cada elemento de origem para um elemento em um <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Uma função para criar um valor de resultado de cada grupo.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> com o qual as chaves serão comparadas.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</source>
          <target state="translated">Os valores da chave são comparados usando um comparador especificado e os elementos de cada grupo são projetados usando uma função especificada.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Uma coleção de elementos do tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, em que cada elemento representa uma projeção em um grupo e sua chave.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on key equality, and groups the results.</source>
          <target state="translated">Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">O tipo dos elementos da primeira sequência.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">O tipo dos elementos da segunda sequência.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">O tipo das chaves retornadas pelas funções de seletor de chave.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the result elements.</source>
          <target state="translated">O tipo dos elementos de resultado.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The first sequence to join.</source>
          <target state="translated">A primeira sequência a ser ingressada.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">A sequência a ser ingressada à primeira sequência.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Correlates the elements of two sequences based on equality of keys and groups the results.</source>
          <target state="translated">Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">O comparador de igualdade padrão é usado para comparar chaves.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos do tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtidos pela execução de uma junção agrupada em duas sequências.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para hash e comparação de chaves.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> gera hierárquica resultados, que significa que os elementos de <ph id="ph2">`outer`</ph> são emparelhados com coleções de correspondência de elementos de <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> permite que você basear seus resultados em todo um conjunto de correspondências para cada elemento de <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">Se não houver nenhum elemento correlacionado na <ph id="ph1">`inner`</ph> para um determinado elemento de <ph id="ph2">`outer`</ph>, a sequência de correspondências para esse elemento estará vazia, mas ainda aparecerá nos resultados.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated">O <ph id="ph1">`resultSelector`</ph> função é chamada apenas uma vez para cada <ph id="ph2">`outer`</ph> elemento junto com uma coleção de todos os <ph id="ph3">`inner`</ph> elementos que correspondem a <ph id="ph4">`outer`</ph> elemento.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">Isso difere do <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> método, no qual a função de seletor de resultado é invocada em pares que contêm um elemento de <ph id="ph2">`outer`</ph> e um elemento de <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> preserva a ordem dos elementos de <ph id="ph2">`outer`</ph>e para cada elemento de <ph id="ph3">`outer`</ph>, a ordem dos elementos correspondentes de <ph id="ph4">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> não tem nenhum equivalente direto em termos de banco de dados relacional tradicional.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">No entanto, esse método implementa um superconjunto de junções internas e externas esquerdas.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">Ambas essas operações podem ser gravadas em termos de uma junção agrupada.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt>operações Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>In query expression syntax, a <ph id="ph1">`join … into`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group Join`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`join … into`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Group Join`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> to perform a grouped join on two sequences.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> para executar uma junção agrupada em duas sequências.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">O tipo dos elementos da primeira sequência.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">O tipo dos elementos da segunda sequência.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">O tipo das chaves retornadas pelas funções de seletor de chave.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">O tipo dos elementos de resultado.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">A primeira sequência a ser ingressada.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">A sequência a ser ingressada à primeira sequência.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para executar hash e comparar chaves.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado é usado para comparar chaves.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos do tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtidos pela execução de uma junção agrupada em duas sequências.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para hash e comparação de chaves.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> gera hierárquica resultados, que significa que os elementos de <ph id="ph2">`outer`</ph> são emparelhados com coleções de correspondência de elementos de <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> permite que você basear seus resultados em todo um conjunto de correspondências para cada elemento de <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">Se não houver nenhum elemento correlacionado na <ph id="ph1">`inner`</ph> para um determinado elemento de <ph id="ph2">`outer`</ph>, a sequência de correspondências para esse elemento estará vazia, mas ainda aparecerá nos resultados.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated">O <ph id="ph1">`resultSelector`</ph> função é chamada apenas uma vez para cada <ph id="ph2">`outer`</ph> elemento junto com uma coleção de todos os <ph id="ph3">`inner`</ph> elementos que correspondem a <ph id="ph4">`outer`</ph> elemento.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">Isso difere do <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> método no qual a função de seletor de resultado é invocada em pares que contêm um elemento de <ph id="ph2">`outer`</ph> e um elemento de <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> preserva a ordem dos elementos de <ph id="ph2">`outer`</ph>e para cada elemento de <ph id="ph3">`outer`</ph>, a ordem dos elementos correspondentes de <ph id="ph4">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> não tem nenhum equivalente direto em termos de banco de dados relacional tradicional.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">No entanto, esse método implementa um superconjunto de junções internas e externas esquerdas.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">Ambas essas operações podem ser gravadas em termos de uma junção agrupada.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt>operações Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set intersection of two sequences.</source>
          <target state="translated">Produz a interseção de conjunto de duas sequências.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos que também aparecem em <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> serão retornados.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos que também aparecem na primeira sequência serão retornados.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Produz a interseção de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">Uma sequência que contém os elementos que formam a interseção de conjunto de duas sequências.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">A interseção de dois conjuntos A e B é definida como o conjunto que contém todos os elementos de um também aparecem no B, mas nenhum outro elemento.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Quando o objeto retornado por esse método é enumerado, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> gera elementos distintos que ocorrem em ambas as sequências na ordem em que aparecem no <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os valores dos tipos que implementam o <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Para comparar um tipo de dados personalizado, você precisa implementar essa interface e fornecer sua própria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos para o tipo.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the elements that appear in each of two sequences of integers.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para retornar os elementos que aparecem em cada uma das duas sequências de inteiros.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helper class.</source>
          <target state="translated">Se você deseja comparar sequências de objetos de um tipo de dados personalizado, você precisa implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica em uma classe auxiliar.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">O exemplo de código a seguir mostra como implementar essa interface em um tipo de dados personalizadas e fornecer <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois que você implementar essa interface, você pode usar sequências de <ph id="ph1">`ProductA`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos que também aparecem em <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> serão retornados.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos que também aparecem na primeira sequência serão retornados.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Produz a interseção de conjunto de duas sequências usando o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado para comparar os valores.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">Uma sequência que contém os elementos que formam a interseção de conjunto de duas sequências.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">A interseção de dois conjuntos A e B é definida como o conjunto que contém todos os elementos de um também aparecem no B, mas nenhum outro elemento.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Quando o objeto retornado por esse método é enumerado, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> gera elementos distintos que ocorrem em ambas as sequências na ordem em que aparecem no <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar valores.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra como implementar um comparador de igualdade que pode ser usado no <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois de implementar essa comparação, você pode usar sequências de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Correlaciona os elementos de duas sequências com base em chaves de correspondência.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">O tipo dos elementos da primeira sequência.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">O tipo dos elementos da segunda sequência.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">O tipo das chaves retornadas pelas funções de seletor de chave.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the result elements.</source>
          <target state="translated">O tipo dos elementos de resultado.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The first sequence to join.</source>
          <target state="translated">A primeira sequência a ser ingressada.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">A sequência a ser ingressada à primeira sequência.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Uma função para criar um elemento de resultado de dois elementos correspondentes.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Correlaciona os elementos de duas sequências com base em chaves de correspondência.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">O comparador de igualdade padrão é usado para comparar chaves.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> com elementos do tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtidos pela execução de uma junção interna em duas sequências.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para hash e comparação de chaves.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">Uma junção refere-se a operação de correlacionar os elementos de duas fontes de informações com base em uma chave comum.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> oferece duas fontes de informações e as chaves que são combinados juntos na chamada de um método.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">Isso é diferente do uso de <ph id="ph1">`SelectMany`</ph>, que requer mais de uma chamada de método para executar a mesma operação.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserva a ordem dos elementos de <ph id="ph2">`outer`</ph>e para cada um desses elementos, a ordem dos elementos de correspondência de <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In query expression syntax, a <ph id="ph1">`join`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Join`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`join`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Join`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">Em termos de banco de dados relacional, o <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> método implementa uma junção por igualdade interna.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">'Interna' significa que somente os elementos que têm uma correspondência na sequência de são incluídos nos resultados.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">Um ' equijoin' é uma junção na qual as chaves são comparadas quanto à igualdade.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">A esquerda a operação de junção externa não tem nenhum operador de consulta padrão dedicado, mas pode ser executada usando o <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt>operações Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> to perform an inner join of two sequences based on a common key.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> para executar uma junção interna de duas sequências, com base em uma chave comum.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">O tipo dos elementos da primeira sequência.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">O tipo dos elementos da segunda sequência.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">O tipo das chaves retornadas pelas funções de seletor de chave.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">O tipo dos elementos de resultado.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">A primeira sequência a ser ingressada.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">A sequência a ser ingressada à primeira sequência.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Uma função para criar um elemento de resultado de dois elementos correspondentes.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para executar hash e comparar chaves.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Correlaciona os elementos de duas sequências com base em chaves de correspondência.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado é usado para comparar chaves.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> com elementos do tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtidos pela execução de uma junção interna em duas sequências.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para hash e comparação de chaves.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">Uma junção refere-se a operação de correlacionar os elementos de duas fontes de informações com base em uma chave comum.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> oferece duas fontes de informações e as chaves que são combinados juntos na chamada de um método.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">Isso é diferente do uso de <ph id="ph1">`SelectMany`</ph>, que requer mais de uma chamada de método para executar a mesma operação.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserva a ordem dos elementos de <ph id="ph2">`outer`</ph>e para cada um desses elementos, a ordem dos elementos de correspondência de <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">Em termos de banco de dados relacional, o <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> método implementa uma junção por igualdade interna.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">'Interna' significa que somente os elementos que têm uma correspondência na sequência de são incluídos nos resultados.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">Um ' equijoin' é uma junção na qual as chaves são comparadas quanto à igualdade.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">A esquerda a operação de junção externa não tem nenhum operador de consulta padrão dedicado, mas pode ser executada usando o <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt>operações Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">Retorna o último elemento de uma sequência.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual o último elemento será retornado.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">Retorna o último elemento de uma sequência.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The value at the last position in the source sequence.</source>
          <target state="translated">O valor na última posição na sequência de origem.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método lançará uma exceção se <ph id="ph2">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Para retornar em vez disso, um valor padrão quando a sequência de origem estiver vazia, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the last element of an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para retornar o último elemento de uma matriz.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">Uma sequência de origem está vazia.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual um elemento será retornado.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Retorna o último elemento de uma sequência que satisfaz uma condição especificada.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The last element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">O último elemento na sequência que passa o teste na função de predicado especificada.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> método lançará uma exceção se nenhum elemento correspondente foi encontrado em <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Para retornar em vez disso, um valor padrão quando nenhum elemento correspondente foi encontrado, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the last element of an array that satisfies a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para retornar o último elemento de uma matriz que satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Nenhum elemento satisfaz a condição na <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">Uma sequência de origem está vazia.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Retornará o último elemento de uma sequência ou um valor padrão se nenhum elemento for encontrado.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual o último elemento será retornado.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Retorna o último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the source sequence is empty; otherwise, the last element in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se a sequência de origem estiver vazia; caso contrário, o último elemento no <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> método não fornece uma maneira de especificar um valor padrão.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Se você quiser especificar um valor padrão diferente de <ph id="ph1">`default(TSource)`</ph>, use o <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método conforme descrito na seção de exemplo.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> em uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">Às vezes, o valor de <ph id="ph1">`default(TSource)`</ph> não é o valor padrão que você deseja usar se a coleção não contém elementos.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Em vez de verificar o resultado para o valor padrão indesejado e, em seguida, alterá-la, se necessário, você pode usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método para especificar o valor padrão que você deseja usar se a coleção está vazia.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the last element.</source>
          <target state="translated">Em seguida, chame <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para obter o último elemento.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</source>
          <target state="translated">O exemplo de código a seguir usa ambas as técnicas para obter um valor padrão de 1 se uma coleção de numéricos dias do mês está vazia.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</source>
          <target state="translated">Porque o valor padrão para um número inteiro é 0, que não corresponde a qualquer dia do mês, o valor padrão deve ser especificado em vez disso, como 1.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">A primeira variável de resultado é verificada para o valor padrão indesejado após a conclusão da consulta em execução.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">A segunda variável de resultado é obtida usando <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> para especificar um valor padrão de 1.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual um elemento será retornado.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Retorna o último elemento de uma sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se a sequência for vazia ou se nenhum elemento passar no teste na função de predicado; caso contrário, o último elemento que passar no teste na função de predicado.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> passando um predicado.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">A segunda chamada para o método, há nenhum elemento na sequência que atendem à condição.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in a sequence.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que representa o número de elementos em uma sequência.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos a serem contados.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the total number of elements in a sequence.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que representa o número total de elementos em uma sequência.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the source sequence.</source>
          <target state="translated">O número de elementos na sequência de origem.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Use esse método em vez de <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> quando você espera que o resultado seja maior que <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into LongCount()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para contar os elementos em uma matriz.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O número de elementos excede <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos a serem contados.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents how many elements in a sequence satisfy a condition.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que representa quantos elementos na sequência atendem a uma condição.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">Um número que representa quantos elementos na sequência atendem à condição na função de predicado.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Use esse método em vez de <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> quando você espera que o resultado seja maior que <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into LongCount()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para contar os elementos em uma matriz que satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O número de elementos correspondentes excede <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the maximum value in a sequence of values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> da qual será determinado o valor máximo.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> da qual será determinado o valor máximo.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> da qual será determinado o valor máximo.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> da qual será determinado o valor máximo.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> anuláveis para determinar o valor máximo.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> anuláveis para determinar o valor máximo.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> anuláveis para determinar o valor máximo.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> anuláveis para determinar o valor máximo.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> anuláveis para determinar o valor máximo.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> da qual será determinado o valor máximo.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor máximo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> para determinar o valor máximo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the maximum value in a generic sequence.</source>
          <target state="translated">Retorna o valor máximo em uma sequência genérica.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, o <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método usa essa implementação para comparar valores.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Caso contrário, se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, que a implementação é usada para comparar valores.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this method returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`TSource`</ph> é um tipo de referência e a sequência de origem está vazia ou contém somente os valores que são <ph id="ph2">`null`</ph>, esse método retornará <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the maximum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> máximo.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> máximo.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> máximo.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> máximo.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> máximo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Decimal)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> máximo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Double&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Double)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> máximo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Int32)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> máximo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Int64)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> máximo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Single&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Single)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> máximo.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>seletor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor máximo.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência genérica e retorna o maior valor resultante.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">O valor máximo na sequência.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, esse método usa a implementação para comparar valores.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Caso contrário, se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, que a implementação é usada para comparar valores.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Max()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor máximo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the minimum value in a sequence of values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> anuláveis dos quais determinar o valor mínimo.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> anuláveis dos quais determinar o valor mínimo.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> anuláveis dos quais determinar o valor mínimo.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> anuláveis dos quais determinar o valor mínimo.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> anuláveis dos quais determinar o valor mínimo.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> anuláveis.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Um valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se a sequência de origem está vazia ou contém somente os valores que são <ph id="ph1">`null`</ph>, essa função retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the minimum value in a generic sequence.</source>
          <target state="translated">Retorna o valor mínimo em uma sequência genérica.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, esse método usa a implementação para comparar valores.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Caso contrário, se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, que a implementação é usada para comparar valores.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this function returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`TSource`</ph> é um tipo de referência e a sequência de origem está vazia ou contém somente os valores que são <ph id="ph2">`null`</ph>, essa função retorna <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the minimum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> mínimo.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> mínimo.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> mínimo.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> mínimo.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> mínimo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Decimal)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> mínimo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Double&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Double)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> mínimo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of source into a numeric type, specifically <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph3">`Nullable(Of Int32)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de origem em um tipo numérico, especificamente <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> em c# ou <ph id="ph3">`Nullable(Of Int32)`</ph> em <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> mínimo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Int64)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> mínimo que permite valor nulo.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">O valor do tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que corresponde ao valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Single&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Single)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> mínimo.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementação de <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>seletor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Uma sequência de valores para determinação do valor mínimo.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</source>
          <target state="translated">Invoca uma função de transformação em cada elemento de uma sequência genérica e retorna o menor valor resultante.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">O valor mínimo na sequência.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, esse método usa a implementação para comparar valores.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Caso contrário, se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, que a implementação é usada para comparar valores.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Min()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> para determinar o valor mínimo em uma sequência de valores projetadas.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The type to filter the elements of the sequence on.</source>
          <target state="translated">O tipo no qual filtrar os elementos da sequência.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> whose elements to filter.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> cujos elementos serão filtrados.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>Filters the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> based on a specified type.</source>
          <target state="translated">Filtra os elementos de um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> com base em um tipo especificado.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos da sequência de entrada de tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> method returns only those elements in <ph id="ph2">`source`</ph> that can be cast to type <ph id="ph3">`TResult`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> método retorna apenas os elementos no <ph id="ph2">`source`</ph> que pode ser convertido no tipo <ph id="ph3">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>To instead receive an exception if an element cannot be cast to type <ph id="ph1">`TResult`</ph>, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Em vez disso, receberão uma exceção se um elemento não pode ser convertido no tipo <ph id="ph1">`TResult`</ph>, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">Esse método é um de alguns métodos de operador de consulta padrão que podem ser aplicados a uma coleção que tem um tipo sem parâmetros, como um <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This is because <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> extends the type <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">Isso ocorre porque <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> estende o tipo <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> cannot only be applied to collections that are based on the parameterized <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type, but collections that are based on the non-parameterized <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> type also.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> não pode ser aplicado somente a coleções com base em com os parâmetros <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> tipo, mas coleções com base no sem parâmetros <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> digite também.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>By applying <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to a collection that implements <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you gain the ability to query the collection by using the standard query operators.</source>
          <target state="translated">Aplicando <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> para uma coleção que implementa <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, você ganha a capacidade de consultar a coleção usando os operadores de consulta padrão.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>For example, specifying a type argument of <ph id="ph1">&lt;xref:System.Object&gt;</ph> to <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> would return an object of type <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Object)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, to which the standard query operators can be applied.</source>
          <target state="translated">Por exemplo, especificar um argumento de tipo de <ph id="ph1">&lt;xref:System.Object&gt;</ph> para <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> retorna um objeto do tipo <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> em c# ou <ph id="ph4">`IEnumerable(Of Object)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, para que os operadores de consulta padrão podem ser aplicados.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to filter the elements of an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> para filtrar os elementos de um <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in ascending order.</source>
          <target state="translated">Classifica os elementos de uma sequência em ordem crescente.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Uma sequência de valores a serem ordenados.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Uma função para extrair uma chave de um elemento.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
          <target state="translated">Classifica os elementos de uma sequência em ordem crescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Dois métodos são definidos para estender o tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que é o tipo de retorno deste método.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Esses dois métodos, ou seja, <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, permitem que você especifique critérios adicionais de classificação para classificar uma sequência.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> também retornar um <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que significa que qualquer número de chamadas consecutivas para <ph id="ph4">`ThenBy`</ph> ou <ph id="ph5">`ThenByDescending`</ph> podem ser feitas.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Este método compara chaves usando o comparador padrão <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Order By`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`orderby`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Order By`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to sort the elements of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> para classificar os elementos de uma sequência.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Uma sequência de valores a serem ordenados.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Uma função para extrair uma chave de um elemento.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Classifica os elementos de uma sequência em ordem crescente usando um comparador especificado.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Dois métodos são definidos para estender o tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que é o tipo de retorno deste método.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Esses dois métodos, ou seja, <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, permitem que você especifique critérios adicionais de classificação para classificar uma sequência.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> também retornar um <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que significa que qualquer número de chamadas consecutivas para <ph id="ph4">`ThenBy`</ph> ou <ph id="ph5">`ThenByDescending`</ph> podem ser feitas.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in descending order.</source>
          <target state="translated">Classifica os elementos de uma sequência em ordem decrescente.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Uma sequência de valores a serem ordenados.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Uma função para extrair uma chave de um elemento.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
          <target state="translated">Classifica os elementos de uma sequência em ordem decrescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For an example of this method, see <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo desse método, consulte <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Dois métodos são definidos para estender o tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que é o tipo de retorno deste método.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Esses dois métodos, ou seja, <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, permitem que você especifique critérios adicionais de classificação para classificar uma sequência.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> também retornar um <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que significa que qualquer número de chamadas consecutivas para <ph id="ph4">`ThenBy`</ph> ou <ph id="ph5">`ThenByDescending`</ph> podem ser feitas.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Este método compara chaves usando o comparador padrão <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby descending`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Order By Descending`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`orderby descending`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Order By Descending`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Uma sequência de valores a serem ordenados.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Uma função para extrair uma chave de um elemento.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Classifica os elementos de uma sequência em ordem decrescente usando um comparador especificado.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Dois métodos são definidos para estender o tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que é o tipo de retorno deste método.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Esses dois métodos, ou seja, <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, permitem que você especifique critérios adicionais de classificação para classificar uma sequência.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> também retornar um <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que significa que qualquer número de chamadas consecutivas para <ph id="ph4">`ThenBy`</ph> ou <ph id="ph5">`ThenByDescending`</ph> podem ser feitas.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> para classificar os elementos de uma sequência em ordem decrescente por meio de uma função de transformação e um comparador personalizado.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">O tipo dos elementos de <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">Uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to prepend to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">O valor a ser precedido a <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Adds a value to the beginning of the sequence.</source>
          <target state="translated">Adiciona um valor ao início da sequência.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that begins with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">Uma nova sequência que começa com <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The value of the first integer in the sequence.</source>
          <target state="translated">O valor do primeiro inteiro na sequência.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The number of sequential integers to generate.</source>
          <target state="translated">O número de inteiros sequenciais a serem gerados.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>Generates a sequence of integral numbers within a specified range.</source>
          <target state="translated">Gera uma sequência de números integrais dentro de um intervalo especificado.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that contains a range of sequential integral numbers.</source>
          <target state="translated">Um <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph> <ept id="p1">&lt;/c&gt;</ept> em C# ou <bpt id="p2">&lt;c&gt;</bpt>IEnumerable (Of Int32)<ept id="p2">&lt;/c&gt;</ept> em <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> que contém um intervalo de números integrais sequenciais.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> to generate a sequence of values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> para gerar uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 is larger than <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 é maior que <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The type of the value to be repeated in the result sequence.</source>
          <target state="translated">O tipo do valor a ser repetido na sequência de resultado.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The value to be repeated.</source>
          <target state="translated">O valor a ser repetido.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The number of times to repeat the value in the generated sequence.</source>
          <target state="translated">O número de vezes para repetir o valor na sequência gerada.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>Generates a sequence that contains one repeated value.</source>
          <target state="translated">Gera uma sequência que contém um valor repetido.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains a repeated value.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém um valor repetido.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> to generate a sequence of a repeated value.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> para gerar uma sequência de um valor repetida.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to reverse.</source>
          <target state="translated">Uma sequência de valores a ser revertida.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Inverts the order of the elements in a sequence.</source>
          <target state="translated">Inverte a ordem dos elementos em uma sequência.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose elements correspond to those of the input sequence in reverse order.</source>
          <target state="translated">Uma sequência cujos elementos correspondem aos elementos da sequência de entrada em ordem inversa.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Unlike <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, this sorting method does not consider the actual values themselves in determining the order.</source>
          <target state="translated">Ao contrário de <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, esse método de classificação não considera os valores reais em si mesmos para determinar a ordem.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</source>
          <target state="translated">Em vez disso, ele retorna apenas os elementos na ordem inversa da qual eles são produzidos pela origem subjacente.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> to reverse the order of elements in an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> para inverter a ordem dos elementos de uma matriz.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um novo formulário.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>seletor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">Uma sequência de valores na qual uma função de transformação será invocada.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Uma função de transformação para aplicar a cada elemento de origem; o segundo parâmetro da função representa o índice do elemento de origem.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um novo formulário, incorporando o índice do elemento.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos são o resultado da invocação da função de transformação em cada elemento de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">O primeiro argumento para <ph id="ph1">`selector`</ph> representa o elemento para processar.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">O segundo argumento <ph id="ph1">`selector`</ph> representa o índice de base zero do elemento na sequência de origem.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">Isso pode ser útil se os elementos estão em uma ordem conhecida e fazer algo com um elemento em um índice específico, por exemplo.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">Ele também pode ser útil se você quiser recuperar o índice de um ou mais elementos.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Esse método de projeção requer que a função de transformação, <ph id="ph1">`selector`</ph>, para produzir um valor para cada valor na sequência de origem, <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">Se <ph id="ph1">`selector`</ph> retorna um valor que é uma coleção, é até o consumidor para atravessar as subsequências manualmente.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">Em tal situação, talvez seja melhor para sua consulta retornar uma única sequência agrupada de valores.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">Para fazer isso, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> método em vez de <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">Embora <ph id="ph1">`SelectMany`</ph> funciona da mesma forma que <ph id="ph2">`Select`</ph>, ele é diferente em que a função de transformação retorna uma coleção que é expandida, em seguida, por <ph id="ph3">`SelectMany`</ph> antes de ser retornado.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> to project over a sequence of values and use the index of each element.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> projeto em uma sequência de valores e usar o índice de cada elemento.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>seletor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">Uma sequência de valores na qual uma função de transformação será invocada.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um novo formulário.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos são o resultado da invocação da função de transformação em cada elemento de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Esse método de projeção requer que a função de transformação, <ph id="ph1">`selector`</ph>, para produzir um valor para cada valor na sequência de origem, <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">Se <ph id="ph1">`selector`</ph> retorna um valor que é uma coleção, é até o consumidor para atravessar as subsequências manualmente.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">Em tal situação, talvez seja melhor para sua consulta retornar uma única sequência agrupada de valores.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">Para fazer isso, use o <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> método em vez de <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">Embora <ph id="ph1">`SelectMany`</ph> funciona da mesma forma que <ph id="ph2">`Select`</ph>, ele é diferente em que a função de transformação retorna uma coleção que é expandida, em seguida, por <ph id="ph3">`SelectMany`</ph> antes de ser retornado.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`select`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Select`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`select`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Select`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to project over a sequence of values.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> ao projeto em uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> e nivela as sequências resultantes em uma sequência.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos da sequência retornado por <bpt id="p1">&lt;c&gt;</bpt>seletor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Uma sequência de valores a serem projetados.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> e nivela as sequências resultantes em uma sequência.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos são resultado da invocação da função de transformação de um para muitos em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> método enumera a sequência de entrada, usa uma função de transformação para mapear cada elemento para uma <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>e, em seguida, enumera e gera os elementos de cada tais <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">Ou seja, para cada elemento de <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> é chamado e uma sequência de valores é retornada.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> em seguida, mescla esta coleção bidimensional de coleções em um unidimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> e o retorna.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Por exemplo, se uma consulta usa <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> para obter os pedidos (do tipo <ph id="ph2">`Order`</ph>) para cada cliente em um banco de dados, o resultado é do tipo <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> em c# ou <ph id="ph4">`IEnumerable(Of Order)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se, em vez disso, a consulta usa <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> para obter os pedidos, a coleção de coleções de pedidos não é combinada e o resultado é do tipo <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> em c# ou <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> em <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`From`</ph> clause (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, cada <ph id="ph1">`from`</ph> cláusula (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`From`</ph> cláusula (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) após inicial converte para uma invocação de <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> para executar uma projeção de um-para-muitos em uma matriz.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos da sequência retornado por <bpt id="p1">&lt;c&gt;</bpt>seletor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Uma sequência de valores a serem projetados.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Uma função de transformação para aplicar a cada elemento de origem; o segundo parâmetro da função representa o índice do elemento de origem.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> e nivela as sequências resultantes em uma sequência.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The index of each source element is used in the projected form of that element.</source>
          <target state="translated">O índice de cada elemento de origem é usado no formulário projetado desse elemento.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos são o resultado da invocação da função de transformação um-para-muitos em cada elemento de uma sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> método enumera a sequência de entrada, usa uma função de transformação para mapear cada elemento para uma <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>e, em seguida, enumera e gera os elementos de cada tais <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">Ou seja, para cada elemento de <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> é chamado e uma sequência de valores é retornada.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> em seguida, mescla esta coleção bidimensional de coleções em um unidimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> e o retorna.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Por exemplo, se uma consulta usa <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> para obter os pedidos (do tipo <ph id="ph2">`Order`</ph>) para cada cliente em um banco de dados, o resultado é do tipo <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> em c# ou <ph id="ph4">`IEnumerable(Of Order)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se, em vez disso, a consulta usa <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> para obter os pedidos, a coleção de coleções de pedidos não é combinada e o resultado é do tipo <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> em c# ou <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> em <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">O primeiro argumento para <ph id="ph1">`selector`</ph> representa o elemento para processar.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">O segundo argumento <ph id="ph1">`selector`</ph> representa o índice de base zero do elemento na sequência de origem.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">Isso pode ser útil se os elementos estão em uma ordem conhecida e fazer algo com um elemento em um índice específico, por exemplo.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">Ele também pode ser útil se você quiser recuperar o índice de um ou mais elementos.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array and use the index of each outer element.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> para realizar uma projeção de um-para-muitos em uma matriz e usará o índice de cada elemento externo.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos intermediários coletados pelo <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">O tipo dos elementos da sequência resultante.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">Uma sequência de valores a serem projetados.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the input sequence.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento da sequência intermediária.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, mescla as sequências resultantes em uma sequência e chama uma função de seletor de resultado em cada elemento contido nele.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos são o resultado de chamar a função de transformação de um para muitos <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> em cada elemento de <ph id="ph3">&lt;paramref name="source" /&gt;</ph> e, em seguida, mapear cada um desses elementos de sequência e seu elemento de origem correspondente para um elemento de resultado.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> método é útil quando você precisa manter os elementos de <ph id="ph2">`source`</ph> no escopo para a lógica de consulta que ocorre após a chamada a <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">Consulte a seção de exemplo para obter um exemplo de código.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Se há uma relação bidirecional entre objetos do tipo <ph id="ph1">`TSource`</ph> e objetos do tipo <ph id="ph2">`TCollection`</ph>, ou seja, se um objeto do tipo <ph id="ph3">`TCollection`</ph> fornece uma propriedade para recuperar o <ph id="ph4">`TSource`</ph> objeto que gerou a ele, você não precisa essa sobrecarga de <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">Em vez disso, você pode usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> e navegue de volta para o <ph id="ph2">`TSource`</ph> objeto por meio de <ph id="ph3">`TCollection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`From`</ph> clause (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, cada <ph id="ph1">`from`</ph> cláusula (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`From`</ph> cláusula (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) após inicial converte para uma invocação de <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to <ph id="ph2">`Select`</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> para realizar uma projeção de um-para-muitos em uma matriz e usar uma função de seletor de resultado para manter cada elemento correspondente da sequência de origem no escopo para a chamada final <ph id="ph2">`Select`</ph>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos intermediários coletados pelo <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">O tipo dos elementos da sequência resultante.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">Uma sequência de valores a serem projetados.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Uma função de transformação para aplicar a cada elemento de origem; o segundo parâmetro da função representa o índice do elemento de origem.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento da sequência intermediária.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">Projeta cada elemento de uma sequência em um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, mescla as sequências resultantes em uma sequência e chama uma função de seletor de resultado em cada elemento contido nele.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The index of each source element is used in the intermediate projected form of that element.</source>
          <target state="translated">O índice de cada elemento de origem é usado no formulário projetado intermediário do elemento.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos são o resultado de chamar a função de transformação de um para muitos <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> em cada elemento de <ph id="ph3">&lt;paramref name="source" /&gt;</ph> e, em seguida, mapear cada um desses elementos de sequência e seu elemento de origem correspondente para um elemento de resultado.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> método é útil quando você precisa manter os elementos de <ph id="ph2">`source`</ph> no escopo para a lógica de consulta que ocorre após a chamada a <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">Consulte a seção de exemplo para obter um exemplo de código.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Se há uma relação bidirecional entre objetos do tipo <ph id="ph1">`TSource`</ph> e objetos do tipo <ph id="ph2">`TCollection`</ph>, ou seja, se um objeto do tipo <ph id="ph3">`TCollection`</ph> fornece uma propriedade para recuperar o <ph id="ph4">`TSource`</ph> objeto que gerou a ele, você não precisa essa sobrecarga de <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">Em vez disso, você pode usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> e navegue de volta para o <ph id="ph2">`TSource`</ph> objeto por meio de <ph id="ph3">`TCollection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether two sequences are equal according to an equality comparer.</source>
          <target state="translated">Determina se duas sequências são iguais de acordo com um comparador de igualdade.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> para comparar com <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> para comparar com a primeira sequência.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</source>
          <target state="translated">Determina se duas sequências são iguais comparando os elementos usando o comparador de igualdade padrão para o tipo.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se as duas sequências de origem forem de mesmo comprimento e seus elementos correspondentes forem iguais de acordo com o comparador de igualdade padrão para seu tipo; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método enumera as sequências de duas fonte em paralelo e compara os elementos correspondentes usando o comparador de igualdade padrão para <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os valores dos tipos que implementam o <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Para comparar um tipo de dados personalizado, você precisa implementar essa interface e fornecer sua própria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos para o tipo.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine whether two sequences are equal.</source>
          <target state="translated">Os exemplos de código a seguir demonstram como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para determinar se duas sequências são iguais.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the first two examples, the method determines whether the compared sequences contain references to the same objects.</source>
          <target state="translated">Os dois primeiros exemplos, o método determina se as sequências comparadas contêm referências para os mesmos objetos.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the third and fourth examples, the method compares the actual data of the objects within the sequences.</source>
          <target state="translated">Nos exemplos a terceira e quarto, o método compara os dados reais dos objetos dentro de sequências.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In this example the sequences are equal.</source>
          <target state="translated">Neste exemplo, as sequências são iguais.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example compares two sequences that are not equal.</source>
          <target state="translated">O exemplo de código a seguir compara duas sequências que não são iguais.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</source>
          <target state="translated">Observe que as sequências contêm dados idênticos, mas como os objetos que eles contêm têm referências diferentes, as sequências não são consideradas iguais.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in your class.</source>
          <target state="translated">Se você deseja comparar os dados reais dos objetos em sequências em vez de apenas comparar suas referências, você precisa implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica em sua classe.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a helper class and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">O exemplo de código a seguir mostra como implementar essa interface em uma classe auxiliar e fornecer <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois que você implementar essa interface, você pode usar sequências de <ph id="ph1">`ProductA`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> para comparar com <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> para comparar com a primeira sequência.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to use to compare elements.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> a ser usado para comparar elementos.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether two sequences are equal by comparing their elements by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Determina se duas sequências são iguais, comparando seus elementos usando um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal according to <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se as duas sequências de origem tiverem o mesmo tamanho e seus elementos correspondentes forem comparados como iguais de acordo com o <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> método enumera as sequências de duas fonte em paralelo e compara os elementos correspondentes usando especificado <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os elementos.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra como implementar um comparador de igualdade que pode ser usado no <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois de implementar essa comparação, você pode usar sequências de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence.</source>
          <target state="translated">Retorna um único elemento específico de uma sequência.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual o único elemento será retornado.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
          <target state="translated">Retornará o único elemento de uma sequência e lançará uma exceção se não houver exatamente um elemento na sequência.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence.</source>
          <target state="translated">O único elemento de uma sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if the input sequence is empty.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método lançará uma exceção se a sequência de entrada está vazia.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return <ph id="ph1">`null`</ph> when the input sequence is empty, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Em vez disso, retornar <ph id="ph1">`null`</ph> quando a sequência de entrada estiver vazia, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para selecionar o único elemento de uma matriz.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element.</source>
          <target state="translated">O exemplo de código a seguir demonstra que <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> lança uma exceção quando a sequência não contém exatamente um elemento.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">A sequência de entrada contém mais de um elemento.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence is empty.</source>
          <target state="translated">A sequência de entrada está vazia.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual retornar um único elemento.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Uma função para testar um elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
          <target state="translated">Retorna o único elemento de uma sequência que satisfaz uma condição especificada e gera uma exceção se houver mais de um tal elemento.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies a condition.</source>
          <target state="translated">O único elemento da sequência de entrada que atende a uma condição.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if the input sequence contains no matching element.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> método lançará uma exceção se a sequência de entrada não contém nenhum elemento correspondente.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return <ph id="ph1">`null`</ph> when no matching element is found, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Em vez disso, retornar <ph id="ph1">`null`</ph> quando nenhum elemento correspondente foi encontrado, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para selecionar o único elemento de uma matriz que satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra que <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> lança uma exceção quando a sequência não contém exatamente um elemento que atendem à condição.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Nenhum elemento satisfaz a condição na <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Mais de um elemento satisfaz a condição na <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">Uma sequência de origem está vazia.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence, or a default value if that element is not found.</source>
          <target state="translated">Retornará um único elemento específico de uma sequência ou um valor padrão se esse elemento não for encontrado.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual o único elemento será retornado.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
          <target state="translated">Retorna o único elemento de uma sequência ou um valor padrão se a sequência é vazia; esse método gera uma exceção se há mais de um elemento na sequência.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence contains no elements.</source>
          <target state="translated">O único elemento da sequência de entrada, ou <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), se a sequência não contiver elementos.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> método não fornece uma maneira de especificar um valor padrão.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Se você quiser especificar um valor padrão diferente de <ph id="ph1">`default(TSource)`</ph>, use o <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método conforme descrito na seção de exemplo.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para selecionar o único elemento de uma matriz.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element.</source>
          <target state="translated">O exemplo de código a seguir demonstra que <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> retorna um valor padrão quando a sequência não contém exatamente um elemento.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">Às vezes, o valor de <ph id="ph1">`default(TSource)`</ph> não é o valor padrão que você deseja usar se a coleção não contém elementos.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Em vez de verificar o resultado para o valor padrão indesejado e, em seguida, alterá-la, se necessário, você pode usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> método para especificar o valor padrão que você deseja usar se a coleção está vazia.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the element.</source>
          <target state="translated">Em seguida, chame <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para obter o elemento.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</source>
          <target state="translated">O exemplo de código a seguir usa ambas as técnicas para obter um valor padrão de 1, se um conjunto de números de página está vazio.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</source>
          <target state="translated">Porque o valor padrão para um número inteiro é 0, que não é um número de página válido normalmente, o valor padrão deve ser especificado como 1 em vez disso.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">A primeira variável de resultado é verificada para o valor padrão indesejado após a conclusão da consulta em execução.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">A segunda variável de resultado é obtida usando <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> para especificar um valor padrão de 1.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">A sequência de entrada contém mais de um elemento.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual retornar um único elemento.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Uma função para testar um elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
          <target state="translated">Retorna o único elemento de uma sequência que satisfaz uma condição especificada ou um valor padrão se esse elemento não existir. Esse método lança uma exceção se mais de um elemento satisfizer a condição.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies the condition, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if no such element is found.</source>
          <target state="translated">O único elemento da sequência de entrada que atende à condição ou <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se esse elemento não for encontrado.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor padrão para referência e tipos anuláveis é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para selecionar o único elemento de uma matriz que satisfazem uma condição.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">O exemplo de código a seguir demonstra que <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> retorna um valor padrão quando a sequência não contém exatamente um elemento que atendem à condição.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Mais de um elemento satisfaz a condição na <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual os elementos serão retornados.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to skip before returning the remaining elements.</source>
          <target state="translated">O número de elementos a serem ignorados antes de retornar os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
          <target state="translated">Ignora um número especificado de elementos em uma sequência e retorna os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements that occur after the specified index in the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos que ocorrem após o índice especificado na sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`source`</ph> contains fewer than <ph id="ph2">`count`</ph> elements, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`source`</ph> contém menos de <ph id="ph2">`count`</ph> elementos, vazio <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> é retornado.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, all elements of <ph id="ph2">`source`</ph> are yielded.</source>
          <target state="translated">Se <ph id="ph1">`count`</ph> é menor ou igual a zero, todos os elementos de <ph id="ph2">`source`</ph> são gerou.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> métodos são complementa funcional.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Dada uma sequência <ph id="ph1">`coll`</ph> inteiro e <ph id="ph2">`n`</ph>, concatenando os resultados de <ph id="ph3">`coll.Take(n)`</ph> e <ph id="ph4">`coll.Skip(n)`</ph> gera a mesma sequência <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Skip`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> to skip a specified number of elements in a sorted array and return the remaining elements.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> para ignorar um número especificado de elementos em uma matriz classificada e retorna os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual os elementos serão retornados.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos da sequência de entrada, começando no primeiro elemento da série linear que não passa no teste especificado por <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method is implemented by using deferred execution.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method tests each element of <ph id="ph1">`source`</ph> by using <ph id="ph2">`predicate`</ph> and skips the element if the result is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Este método testa cada elemento de <ph id="ph1">`source`</ph> usando <ph id="ph2">`predicate`</ph> e ignora o elemento se o resultado for <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">Depois que a função de predicado retorna <ph id="ph1">`false`</ph> para um elemento, esse elemento e os elementos restantes no <ph id="ph2">`source`</ph> são gerou e não houver nenhuma mais invocações de <ph id="ph3">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`predicate`</ph> retorna <ph id="ph2">`true`</ph> para todos os elementos na sequência, vazio <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> é retornado.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> métodos são complementa funcional.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Dada uma sequência <ph id="ph1">`coll`</ph> e uma função pura <ph id="ph2">`p`</ph>, concatenando os resultados de <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> gera a mesma sequência <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Skip While`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition is true.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para ignorar os elementos de uma matriz como uma condição for verdadeira.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> do qual os elementos serão retornados.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Uma função para testar cada elemento de origem em relação a uma condição; o segundo parâmetro da função representa o índice do elemento de origem.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">O índice do elemento é usado na lógica da função de predicado.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos da sequência de entrada, começando no primeiro elemento da série linear que não passa no teste especificado por <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and skips the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> método testa cada elemento de <ph id="ph2">`source`</ph> usando <ph id="ph3">`predicate`</ph> e ignora o elemento se o resultado for <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">Depois que a função de predicado retorna <ph id="ph1">`false`</ph> para um elemento, esse elemento e os elementos restantes no <ph id="ph2">`source`</ph> são gerou e não houver nenhuma mais invocações de <ph id="ph3">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`predicate`</ph> retorna <ph id="ph2">`true`</ph> para todos os elementos na sequência, vazio <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> é retornado.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">O primeiro argumento de <ph id="ph1">`predicate`</ph> representa o elemento para teste.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">O segundo argumento representa o índice de base zero do elemento no <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> métodos são complementa funcional.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Dada uma sequência <ph id="ph1">`coll`</ph> e uma função pura <ph id="ph2">`p`</ph>, concatenando os resultados de <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> gera a mesma sequência <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Skip While`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition that depends on the element's index is true.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> para ignorar os elementos de uma matriz como uma condição que depende do índice do elemento é true.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the sum of a sequence of numeric values.</source>
          <target state="translated">Computa a soma de uma sequência de valores numéricos.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcula a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> método retornará zero se <ph id="ph2">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcula a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcula a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcula a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> que permitem valores nulos para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Computa a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The result doesnot include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> que permitem valores nulos para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Computa a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que permitem valores nulos para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Computa a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que permitem valores nulos para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Computa a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> que permitem valores nulos para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Computa a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> que permitem valores nulos.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> para cálculo da soma.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcula a soma de uma sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">A soma dos valores na sequência.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> para somar os valores de uma sequência.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The result does not included values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluídos valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Decimal)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Double&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Double)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Int32)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph></source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Int64)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A soma é maior que <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Este método retorna zero se <ph id="ph1">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O resultado não incluir valores que são <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">`Nullable&lt;Single&gt;`</ph> em c# ou <ph id="ph4">`Nullable(Of Single)`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Uma sequência de valores usados para calcular uma soma.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Uma função de transformação a ser aplicada a cada elemento.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcula a soma da sequência de valores <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The sum of the projected values.</source>
          <target state="translated">A soma dos valores projetados.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> método retornará zero se <ph id="ph2">`source`</ph> não contém elementos.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Você pode aplicar esse método para uma sequência de valores arbitrários, se você fornecer uma função <ph id="ph1">`selector`</ph>, que projeta os membros de <ph id="ph2">`source`</ph> em um tipo numérico, especificamente <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Aggregate Into Sum()`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> para somar os valores projetados de uma sequência.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The sequence to return elements from.</source>
          <target state="translated">A sequência da qual os elementos serão retornados.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to return.</source>
          <target state="translated">O número de elementos a serem retornados.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
          <target state="translated">Retorna um número especificado de elementos contíguos do início de uma sequência.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the specified number of elements from the start of the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém o número especificado de elementos do início da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> enumerates <ph id="ph2">`source`</ph> and yields elements until <ph id="ph3">`count`</ph> elements have been yielded or <ph id="ph4">`source`</ph> contains no more elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> Enumera <ph id="ph2">`source`</ph> e gera elementos até <ph id="ph3">`count`</ph> elementos produziram ou <ph id="ph4">`source`</ph> não contém mais elementos.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> exceeds the number of elements in <ph id="ph2">`source`</ph>, all elements of <ph id="ph3">`source`</ph> are returned.</source>
          <target state="translated">Se <ph id="ph1">`count`</ph> excede o número de elementos em <ph id="ph2">`source`</ph>, todos os elementos de <ph id="ph3">`source`</ph> são retornados.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, <ph id="ph2">`source`</ph> is not enumerated and an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`count`</ph> é menor ou igual a zero, <ph id="ph2">`source`</ph> não é enumerado e um vazio <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> é retornado.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> métodos são complementa funcional.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Dada uma sequência <ph id="ph1">`coll`</ph> inteiro e <ph id="ph2">`n`</ph>, concatenando os resultados de <ph id="ph3">`coll.Take(n)`</ph> e <ph id="ph4">`coll.Skip(n)`</ph> gera a mesma sequência <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Take`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> to return elements from the start of a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> para retornar elementos desde o início de uma sequência.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</source>
          <target state="translated">Retorna elementos de uma sequência contanto que uma condição especificada seja true e, em seguida, ignora os elementos restantes.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence to return elements from.</source>
          <target state="translated">Uma sequência a qual retornar os elementos.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste não é mais aprovado.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> método testa cada elemento de <ph id="ph2">`source`</ph> usando <ph id="ph3">`predicate`</ph> e gera o elemento se o resultado for <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">Enumeração interrompe quando a função de predicado retorna <ph id="ph1">`false`</ph> para um elemento ou quando <ph id="ph2">`source`</ph> não contém mais elementos.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> métodos são complementa funcional.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Dada uma sequência <ph id="ph1">`coll`</ph> e uma função pura <ph id="ph2">`p`</ph>, concatenando os resultados de <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> gera a mesma sequência <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Take While`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition is true.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para retornar elementos desde o início de uma sequência como uma condição for verdadeira.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The sequence to return elements from.</source>
          <target state="translated">A sequência da qual os elementos serão retornados.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Uma função para testar cada elemento de origem em relação a uma condição; o segundo parâmetro da função representa o índice do elemento de origem.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">O índice do elemento é usado na lógica da função de predicado.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste não é mais aprovado.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> método testa cada elemento de <ph id="ph2">`source`</ph> usando <ph id="ph3">`predicate`</ph> e gera o elemento se o resultado for <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">Enumeração interrompe quando a função de predicado retorna <ph id="ph1">`false`</ph> para um elemento ou quando <ph id="ph2">`source`</ph> não contém mais elementos.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">O primeiro argumento de <ph id="ph1">`predicate`</ph> representa o elemento para teste.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">O segundo argumento representa o índice de base zero do elemento no <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> métodos são complementa funcional.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Dada uma sequência <ph id="ph1">`coll`</ph> e uma função pura <ph id="ph2">`p`</ph>, concatenando os resultados de <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> gera a mesma sequência <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Take While`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> para retornar elementos desde o início de uma sequência como uma condição que usa o índice do elemento é true.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order.</source>
          <target state="translated">Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> que contém elementos a ser classificados.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
          <target state="translated">Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> são definidos para estender o tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que também é o tipo de retorno dos métodos a seguir.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Esse design permite que você especificar vários critérios de classificação com a aplicação de qualquer número de <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Este método compara chaves usando o comparador padrão <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Order By [first criterion], [second criterion]`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Order By [first criterion], [second criterion]`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> para executar uma ordenação secundária dos elementos em uma sequência.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> que contém elementos a ser classificados.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente usando um comparador especificado.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> são definidos para estender o tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que também é o tipo de retorno dos métodos a seguir.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Esse design permite que você especificar vários critérios de classificação com a aplicação de qualquer número de <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order.</source>
          <target state="translated">Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> que contém elementos a ser classificados.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
          <target state="translated">Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente, de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> são definidos para estender o tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que também é o tipo de retorno dos métodos a seguir.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Esse design permite que você especificar vários critérios de classificação com a aplicação de qualquer número de <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This sorting method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Esse método de classificação compara chaves usando o comparador padrão <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> query expression syntax, an <ph id="ph2">`orderby [first criterion], [second criterion] descending`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`orderby [first criterion], [second criterion] descending`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Order By [first criterion], [second criterion] Descending`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Em <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintaxe de expressão de consulta um <ph id="ph2">`Order By [first criterion], [second criterion] Descending`</ph> cláusula se traduz em uma chamada de <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> que contém elementos a ser classificados.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente usando um comparador especificado.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
          <target state="translated">Para solicitar uma sequência, os valores dos elementos de si mesmos, especifique a função identity (<ph id="ph1">`x =&gt; x`</ph> na <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph3">`Function(x) x`</ph> na <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) para <ph id="ph5">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> são definidos para estender o tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, que também é o tipo de retorno dos métodos a seguir.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Esse design permite que você especificar vários critérios de classificação com a aplicação de qualquer número de <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Porque <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> herda de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, você pode chamar <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> nos resultados de uma chamada para <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> ou <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Isso apresenta um novo primário ordenação que ignora a ordem estabelecida anteriormente.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador padrão <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Esse método executa uma classificação estável; ou seja, se as chaves de dois elementos são iguais, a ordem dos elementos é preservada.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Em contraste, uma classificação instável não preserva a ordem dos elementos que têm a mesma chave.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> para executar uma ordenação secundária dos elementos em uma sequência em ordem decrescente, usando um comparador personalizado.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create an array from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> para criar uma matriz.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates an array from a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Cria uma matriz de um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An array that contains the elements from the input sequence.</source>
          <target state="translated">Uma matriz que contém os elementos da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns an array that contains the query results.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método força a avaliação imediata de consulta e retorna uma matriz que contém os resultados da consulta.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">Você pode acrescentar esse método à sua consulta para obter uma cópia armazenada em cache os resultados da consulta.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> has similar behavior but returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> instead of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> tem um comportamento semelhante mas retorna um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> em vez de uma matriz.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> to force immediate query evaluation and return an array of results.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> para forçar a avaliação imediata de consulta e retornar uma matriz de resultados.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, de acordo com uma função de seletor de chave especificada.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> que contém chaves e valores.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> método usa o comparador de igualdade padrão <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> by using a key selector.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> para criar um <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> usando um seletor de chave.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera uma chave que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera chaves duplicatas para dois elementos.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the keys returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo das chaves retornado por <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, de acordo com uma função de seletor de chave especificada e um comparador de chaves.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> que contém chaves e valores.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera uma chave que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera chaves duplicatas para dois elementos.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, de acordo com as funções especificadas de seletor de chave e seletor de elemento.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> que contém valores do tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selecionados da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> método usa o comparador de igualdade padrão <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera uma chave que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera chaves duplicatas para dois elementos.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer, and an element selector function.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> de acordo com uma função de seletor de chave, um comparador e uma função de seletor de elemento especificados.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> que contém valores do tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selecionados da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera uma chave que é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> gera chaves duplicatas para dois elementos.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains elements from the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> que contém elementos da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método força a avaliação imediata de consulta e retorna um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém os resultados da consulta.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">Você pode acrescentar esse método à sua consulta para obter uma cópia armazenada em cache os resultados da consulta.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> has similar behavior but returns an array instead of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> tem um comportamento semelhante mas retorna uma matriz em vez de um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> to force immediate query evaluation and return a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> para forçar a avaliação imediata de consulta e retornar um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> que contém os resultados da consulta.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a generic <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> genérico de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, de acordo com uma função de seletor de chave especificada.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> que contém chaves e valores.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> método retorna um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, um dicionário de um-para-muitos que mapeia chaves para coleções de valores.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> difere de um <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, que executa um mapeamento de chaves para valores únicos.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">O comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, de acordo com uma função de seletor de chave especificada e um comparador de chaves.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> que contém chaves e valores.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> método retorna um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, um dicionário de um-para-muitos que mapeia chaves para coleções de valores.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> is different to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> é diferente para um <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, que executa um mapeamento de chaves para valores únicos.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, de acordo com as funções especificadas de seletor de chave e seletor de elemento.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> que contém valores do tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selecionados da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> método retorna um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, um dicionário de um-para-muitos que mapeia chaves para coleções de valores.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> difere de um <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, que executa um mapeamento de chaves para valores únicos.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">O comparador de igualdade padrão <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using a key selector function and an element selector function.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> para criar um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> usando uma função de seletor de chave e uma função de seletor de elemento.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo de chave retornada pelo <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo do valor retornado por <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> por meio do qual um <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> será criado.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Uma função para extrair uma chave de cada elemento.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar chaves.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer and an element selector function.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> de um <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> de acordo com uma função de seletor de chave, um comparador e uma função de seletor de elemento especificados.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> que contém valores do tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selecionados da sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> método retorna um <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, um dicionário de um-para-muitos que mapeia chaves para coleções de valores.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> difere de um <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, que executa um mapeamento de chaves para valores únicos.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> é usado para comparar as chaves.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set union of two sequences.</source>
          <target state="translated">Produz a união de conjunto de duas sequências.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos formam o primeiro conjunto da união.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos formam o segundo conjunto da união.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
          <target state="translated">Produz a união de conjunto de duas sequências usando o comparador de igualdade padrão.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method excludes duplicates from the return set.</source>
          <target state="translated">Este método exclui duplicatas do conjunto de retorno.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This is different behavior to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method, which returns all the elements in the input sequences including duplicates.</source>
          <target state="translated">Este é um comportamento diferente para o <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> método, que retorna todos os elementos nas sequências de entrada, incluindo duplicatas.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">O comparador de igualdade padrão, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar os valores dos tipos que implementam o <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Para comparar um tipo de dados personalizado, você precisa implementar essa interface e fornecer sua própria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos para o tipo.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">Quando o objeto retornado por esse método é enumerado, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumera <ph id="ph2">`first`</ph> e <ph id="ph3">`second`</ph> nessa ordem e produz cada elemento que já não gerou.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the union of two sequences of integers.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> para obter a união de duas sequências de inteiros.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">Se você deseja comparar sequências de objetos de um tipo de dados personalizado, você precisa implementar o <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface genérica em um helperclass.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">O exemplo de código a seguir mostra como implementar essa interface em um tipo de dados personalizadas e fornecer <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois que você implementar essa interface, você pode usar sequências de <ph id="ph1">`ProductA`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">O tipo dos elementos das sequências de entrada.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos formam o primeiro conjunto da união.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> cujos elementos distintos formam o segundo conjunto da união.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> para comparar valores.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Produz a união de conjunto de duas sequências usando o <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> é <ph id="ph2">`null`</ph>, o comparador de igualdade padrão, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, é usado para comparar valores.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">Quando o objeto retornado por esse método é enumerado, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumera <ph id="ph2">`first`</ph> e <ph id="ph3">`second`</ph> nessa ordem e produz cada elemento que já não gerou.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method returns all the elements in the input sequences including duplicates, whereas <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> returns only unique values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> método difere de <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> método porque o <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> método retorna todos os elementos nas sequências de entrada, incluindo duplicatas, enquanto <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> retorna apenas valores exclusivos.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra como implementar um comparador de igualdade que pode ser usado no <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Depois de implementar essa comparação, você pode usar sequências de <ph id="ph1">`Product`</ph> objetos no <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> método, conforme mostrado no exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtra uma sequência de valores com base em um predicado.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a ser filtrado.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Uma função para testar cada elemento em relação a uma condição.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtra uma sequência de valores com base em um predicado.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos da sequência de entrada que atendem à condição.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In query expression syntax, a <ph id="ph1">`where`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Where`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</source>
          <target state="translated">Na sintaxe de expressão de consulta, um <ph id="ph1">`where`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) ou <ph id="ph3">`Where`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) cláusula se traduz em uma chamada de <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> para filtrar uma sequência.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O tipo dos elementos de <bpt id="p1">&lt;c&gt;</bpt>fonte<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a ser filtrado.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Uma função para testar cada elemento de origem em relação a uma condição; o segundo parâmetro da função representa o índice do elemento de origem.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtra uma sequência de valores com base em um predicado.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Each element's index is used in the logic of the predicate function.</source>
          <target state="translated">O índice de cada elemento é usado na lógica da função de predicado.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos da sequência de entrada que atendem à condição.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">O primeiro argumento de <ph id="ph1">`predicate`</ph> representa o elemento para teste.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">O segundo argumento representa o índice de base zero do elemento no <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence based on a predicate that involves the index of each element.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> para filtrar uma sequência com base em um predicado que envolve o índice de cada elemento.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the first input sequence.</source>
          <target state="translated">O tipo de elementos na primeira sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the second input sequence.</source>
          <target state="translated">O tipo de elementos na segunda sequência de entrada.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the result sequence.</source>
          <target state="translated">O tipo de elementos na sequência de resultado.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The first sequence to merge.</source>
          <target state="translated">A primeira sequência a ser mesclada.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The second sequence to merge.</source>
          <target state="translated">A segunda sequência a ser mesclada.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
          <target state="translated">Uma função que especifica como mesclar os elementos das duas sequências.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</source>
          <target state="translated">Aplica uma função especificada para os elementos correspondentes de duas sequências, produzindo uma sequência dos resultados.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains merged elements of two input sequences.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> que contém elementos mesclados de duas sequências de entrada.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Esse método é implementado usando a execução adiada.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">O imediata valor de retorno é um objeto que armazena todas as informações necessárias para executar a ação.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">A consulta representada por esse método não é executada até que o objeto é enumerado ou chamando seu <ph id="ph1">`GetEnumerator`</ph> método diretamente ou usando <ph id="ph2">`foreach`</ph> na <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> ou <ph id="ph4">`For Each`</ph> em <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
          <target state="translated">O método mescla cada elemento da primeira sequência com um elemento que tem o mesmo índice na segunda sequência.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
          <target state="translated">Se as sequências não têm o mesmo número de elementos, o método mescla sequências até atingir o final de um deles.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</source>
          <target state="translated">Por exemplo, se uma sequência tem três elementos e o outro um tem quatro, a sequência de resultados terá somente três elementos.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> method to merge two sequences.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> método para mesclar duas sequências.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="second" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>