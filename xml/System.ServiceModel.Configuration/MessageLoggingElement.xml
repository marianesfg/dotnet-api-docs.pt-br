<Type Name="MessageLoggingElement" FullName="System.ServiceModel.Configuration.MessageLoggingElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="648a04a6fa12fca07112b3b35fe670c9ebe0abde" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MessageLoggingElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageLoggingElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Configuration.MessageLoggingElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MessageLoggingElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageLoggingElement sealed : System::Configuration::ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="beec6-101">Representa um elemento XML que define as configurações para as capacidades de log de mensagem da WCF (Windows Communication Foundation).</span>
      <span class="sxs-lookup">
        <span data-stu-id="beec6-101">Represents an XML element that defines the settings for the message-logging capabilities of Windows Communication Foundation (WCF).</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageLoggingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Configuration.MessageLoggingElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageLoggingElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="beec6-102">Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.Configuration.MessageLoggingElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-102">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.MessageLoggingElement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filters">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.XPathMessageFilterElementCollection Filters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.XPathMessageFilterElementCollection Filters" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.Filters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filters As XPathMessageFilterElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::XPathMessageFilterElementCollection ^ Filters { System::ServiceModel::Configuration::XPathMessageFilterElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("filters", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.XPathMessageFilterElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-103">Obtém os objetos de XPathFilter usados para o log de mensagem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-103">Gets the XPathFilter objects that are used for message logging.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-104">Uma coleção de objetos XPathFilter que são usados para o log de mensagem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-104">A collection of XPathFilter objects that are used for message logging.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beec6-105">Filtros de mensagem são aplicados no nível de serviço e transporte.</span><span class="sxs-lookup"><span data-stu-id="beec6-105">Message filters are applied at the service and transport level.</span></span> <span data-ttu-id="beec6-106">Quando um ou mais filtros são definidos, apenas as mensagens que correspondem a pelo menos um dos filtros são registradas.</span><span class="sxs-lookup"><span data-stu-id="beec6-106">When one or more filters are defined, only messages that match at least one of the filters are logged.</span></span> <span data-ttu-id="beec6-107">Se nenhum filtro for definido, todas as mensagens passam.</span><span class="sxs-lookup"><span data-stu-id="beec6-107">If no filter is defined, all messages pass through.</span></span>  
  
 <span data-ttu-id="beec6-108">Os filtros oferece suporte a sintaxe completa do XPath e são aplicados na ordem em que aparecem no arquivo de configuração.</span><span class="sxs-lookup"><span data-stu-id="beec6-108">Filters support the full XPath syntax, and are applied in the order they appear in the configuration file.</span></span> <span data-ttu-id="beec6-109">Um filtro sintaticamente incorreto resulta em uma exceção de configuração.</span><span class="sxs-lookup"><span data-stu-id="beec6-109">A syntactically incorrect filter results in a configuration exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="beec6-110">Este é um exemplo de configuração de um filtro que registra apenas as mensagens que têm uma seção de cabeçalho SOAP.</span><span class="sxs-lookup"><span data-stu-id="beec6-110">The following is an example in configuring a filter that records only messages that have a SOAP Header section.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEntireMessage">
      <MemberSignature Language="C#" Value="public bool LogEntireMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogEntireMessage" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.LogEntireMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property LogEntireMessage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LogEntireMessage { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logEntireMessage", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-111">Obtém ou define um valor booliano que especifica se a mensagem inteira (cabeçalho da mensagem e corpo) é registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-111">Gets or sets a value that specifies whether the entire message (message header and body) is logged.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-112">
            <see langword="true" /> Se a mensagem inteira (cabeçalho e corpo) é registrada em log. Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-112">
              <see langword="true" /> if the entire message (message header and body) is logged; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="beec6-113">O padrão é <see langword="false" />, que significa que somente o cabeçalho da mensagem é registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-113">The default is <see langword="false" />, which means that only the message header is logged.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beec6-114">Essa configuração afeta todos os níveis de log de mensagem (serviço, transporte e malformado).</span><span class="sxs-lookup"><span data-stu-id="beec6-114">This setting affects all message logging levels (service, transport, and malformed).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogKnownPii">
      <MemberSignature Language="C#" Value="public bool LogKnownPii { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogKnownPii" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.LogKnownPii" />
      <MemberSignature Language="VB.NET" Value="Public Property LogKnownPii As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LogKnownPii { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logKnownPii", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-115">Obtém ou define um valor que indica se o identificador Pii conhecido é registrado em log.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-115">Gets or sets a value that indicates whether the known Pii identifier is logged.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-116">
            <see langword="true" /> Se o Pii conhecido é registrada em log. Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-116">
              <see langword="true" /> if the known Pii is logged; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogMalformedMessages">
      <MemberSignature Language="C#" Value="public bool LogMalformedMessages { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogMalformedMessages" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.LogMalformedMessages" />
      <MemberSignature Language="VB.NET" Value="Public Property LogMalformedMessages As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LogMalformedMessages { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logMalformedMessages", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-117">Obtém ou define um valor que especifica se mensagens malformadas são registradas em log.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-117">Gets or sets a value that specifies whether malformed messages are logged.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-118">
            <see langword="true" /> Se as mensagens malformadas são registradas; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-118">
              <see langword="true" /> if malformed messages are logged; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="beec6-119">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-119">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogMessagesAtServiceLevel">
      <MemberSignature Language="C#" Value="public bool LogMessagesAtServiceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogMessagesAtServiceLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.LogMessagesAtServiceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property LogMessagesAtServiceLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LogMessagesAtServiceLevel { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logMessagesAtServiceLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-120">Obtém ou define um valor que especifica se as mensagens são rastreadas no nível do serviço (antes das transformações relacionadas a criptografia e transporte).</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-120">Gets or sets a value that specifies whether messages are traced at the service level (before encryption and transport-related transforms).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-121">
            <see langword="true" /> Se as mensagens são rastreadas no nível de serviço (antes da criptografia e transformações relacionadas de transporte); Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-121">
              <see langword="true" /> if messages are traced at the service level (before encryption and transport-related transforms); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="beec6-122">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-122">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogMessagesAtTransportLevel">
      <MemberSignature Language="C#" Value="public bool LogMessagesAtTransportLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogMessagesAtTransportLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.LogMessagesAtTransportLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property LogMessagesAtTransportLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LogMessagesAtTransportLevel { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logMessagesAtTransportLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-123">Obtém ou define um valor que especifica se as mensagens são rastreadas no nível do transporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-123">Gets or sets a value that specifies whether messages are traced at the transport level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-124">
            <see langword="true" /> Se as mensagens são rastreadas no nível do transporte; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-124">
              <see langword="true" /> if messages are traced at the transport level; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="beec6-125">O padrão é <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-125">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="beec6-126">Todos os filtros especificados no arquivo de configuração são aplicados e somente as mensagens que correspondem aos filtros são rastreadas.</span><span class="sxs-lookup"><span data-stu-id="beec6-126">Any filters specified in the configuration file are applied, and only messages that match the filters are traced.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMessagesToLog">
      <MemberSignature Language="C#" Value="public int MaxMessagesToLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxMessagesToLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.MaxMessagesToLog" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxMessagesToLog As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxMessagesToLog { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxMessagesToLog", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-127">Obtém ou define um valor que especifica o número máximo de mensagens a serem registradas em log.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-127">Gets or sets a value that specifies the maximum number of messages to log.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-128">O número máximo de mensagens a serem registradas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-128">The maximum number of messages to log.</span>
          </span>
          <span data-ttu-id="beec6-129">O padrão é 1000.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-129">The default is 1000.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxSizeOfMessageToLog">
      <MemberSignature Language="C#" Value="public int MaxSizeOfMessageToLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxSizeOfMessageToLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.MaxSizeOfMessageToLog" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxSizeOfMessageToLog As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxSizeOfMessageToLog { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxSizeOfMessageToLog", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="beec6-130">Obtém ou define um valor que especifica o tamanho máximo, em bytes, de uma mensagem a gravar em log.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-130">Gets or sets a value that specifies the maximum size, in bytes, of a message to log.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="beec6-131">O tamanho máximo, em bytes, de uma mensagem para registrar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-131">The maximum size, in bytes, of a message to log.</span>
          </span>
          <span data-ttu-id="beec6-132">Mensagens maiores do que o limite não são registradas em log.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-132">Messages larger than the limit are not logged.</span>
          </span>
          <span data-ttu-id="beec6-133">Essa configuração afeta todos os níveis de rastreamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-133">This setting affects all trace levels.</span>
          </span>
          <span data-ttu-id="beec6-134">O padrão é Int32.MaxValue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="beec6-134">The default is Int32.MaxValue.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.MessageLoggingElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>