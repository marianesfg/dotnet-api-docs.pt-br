<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InputBinding.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b7241b30f4fa79ca9c58da7b0c7615e57d96af48a70.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41b30f4fa79ca9c58da7b0c7615e57d96af48a70</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>Represents a binding between an <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> and a command.</source>
          <target state="translated">Representa uma associação entre um <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> e um comando.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>The command is potentially a <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</source>
          <target state="translated">O comando é potencialmente um <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>You can specify that user input invokes a command by creating a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Você pode especificar que a entrada do usuário invoca um comando criando um <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the user performs the specified input, the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is set to the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> property is executed.</source>
          <target state="translated">Quando o usuário executa a entrada especificada, o <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que é definido como o <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> propriedade é executada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>You can specify that the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invokes a command that is defined on an object by creating a binding on the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties.</source>
          <target state="translated">Você pode especificar que o <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invoca um comando que é definido em um objeto, criando uma associação no <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propriedades.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">Isso permite que você defina um comando personalizado e associá-lo a entrada do usuário.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>For more information, see the second example in the Examples section.</source>
          <target state="translated">Para obter mais informações, consulte o segundo exemplo na seção de exemplos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> with the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> podem ser definidas em um objeto específico ou no nível de classe Registrando um <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> com o <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support XAML usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classe em si não oferece suporte a uso XAML porque ele não expõe um construtor público padrão (não há um construtor padrão, mas ele é protegido).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a XAML usage.</source>
          <target state="translated">No entanto, as classes derivadas podem expor um construtor público e pode definir propriedades na classe derivada que são herdadas de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> com um uso XAML.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-derived classes that can be instantiated in XAML and can set properties in XAML are <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dois existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML são <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The typical property in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming that is set in XAML and takes one or more <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects as values is the <ph id="ph3">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">A propriedade típica em <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> de programação que é definido em XAML e usa um ou mais <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objetos como valores é o <ph id="ph3">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>XAML Object Element Usage</source>
          <target state="translated">Uso de elemento Object do XAML</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClass…/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClass…/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Uma classe derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que dá suporte à sintaxe de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> ou <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>See Remarks.</source>
          <target state="translated">Consulte Observações.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.</source>
          <target state="translated">O exemplo a seguir mostra como usar um <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> para associar um <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> para o <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> comando.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the key gesture is performed, the Open command is invoked.</source>
          <target state="translated">Quando o gesto de chave é executado, o comando Abrir é invocado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following examples show how to bind a custom command to <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects.</source>
          <target state="translated">Os exemplos a seguir mostram como vincular um comando personalizado para <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>These examples create an application that enables the user to change the background color by performing one of the following actions:</source>
          <target state="translated">Esses exemplos de criam um aplicativo que permite que o usuário altere a cor do plano de fundo, executando uma das seguintes ações:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Clicking a button.</source>
          <target state="translated">Clicar em um botão.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Pressing CTRL+C.</source>
          <target state="translated">Pressionar CTRL + C.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Right-clicking a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (outside the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</source>
          <target state="translated">Clicando duas vezes um <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (fora de <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The first example creates a class named <ph id="ph1">`SimpleDelegateCommand`</ph>.</source>
          <target state="translated">O primeiro exemplo cria uma classe denominada <ph id="ph1">`SimpleDelegateCommand`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</source>
          <target state="translated">Esta classe aceita um delegado para que o objeto criar o comando possa definir a ação que ocorre quando o comando é executado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">`SimpleDelegateCommand`</ph> also defines properties that specify what key and mouse input invokes the command.</source>
          <target state="translated"><ph id="ph1">`SimpleDelegateCommand`</ph> também define as propriedades que especificam o que a chave e passe o mouse entrada chama o comando.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">`GestureKey`</ph> and <ph id="ph2">`GestureModifier`</ph> specify the keyboard input; <ph id="ph3">`MouseGesture`</ph> specifies the mouse input.</source>
          <target state="translated"><ph id="ph1">`GestureKey`</ph> e <ph id="ph2">`GestureModifier`</ph> especificar o teclado de entrada; <ph id="ph3">`MouseGesture`</ph> Especifica a entrada do mouse.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following example creates and initializes the <ph id="ph1">`ColorChangeCommand`</ph>, which is a <ph id="ph2">`SimpleDelegateCommand`</ph>.</source>
          <target state="translated">O exemplo a seguir cria e inicializa o <ph id="ph1">`ColorChangeCommand`</ph>, que é um <ph id="ph2">`SimpleDelegateCommand`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The example also defines the method that executes when the command is invoked and sets the <ph id="ph1">`GestureKey`</ph>, <ph id="ph2">`GestureModifier`</ph>, and <ph id="ph3">`MouseGesture`</ph> properties.</source>
          <target state="translated">O exemplo também define o método que é executado quando o comando é invocado e define o <ph id="ph1">`GestureKey`</ph>, <ph id="ph2">`GestureModifier`</ph>, e <ph id="ph3">`MouseGesture`</ph> propriedades.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>An application would call the <ph id="ph1">`InitializeCommand`</ph> method when the program begins, such as in the constructor of a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">Um aplicativo poderia chamar o <ph id="ph1">`InitializeCommand`</ph> método quando o programa começa, como o construtor de um <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Finally, the following example creates the user interface.</source>
          <target state="translated">Finalmente, o exemplo a seguir cria a interface do usuário.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The example adds a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> that contains a <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> and a <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
          <target state="translated">O exemplo adiciona um <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e um <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> para um <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> que contém um <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> e um <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the user selects an item in the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, he or she can change the color of the background to the selected color.</source>
          <target state="translated">Quando o usuário seleciona um item de <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, ele ou ela pode alterar a cor do plano de fundo para a cor selecionada.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>In each case, the <ph id="ph1">`CommandParameter`</ph> property is bound to the selected item in the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, and the <ph id="ph3">`Command`</ph> property is bound to the <ph id="ph4">`ColorChangeCommand`</ph>.</source>
          <target state="translated">Em cada caso, o <ph id="ph1">`CommandParameter`</ph> propriedade está associada ao item selecionado no <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>e o <ph id="ph3">`Command`</ph> propriedade está vinculada a <ph id="ph4">`ColorChangeCommand`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType&gt;</ph> properties are bound to the corresponding properties on the <ph id="ph4">`SimpleDelegateCommand`</ph> class.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType&gt;</ph>, e <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType&gt;</ph> propriedades estão associadas às propriedades correspondentes no <ph id="ph4">`SimpleDelegateCommand`</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>Provides base initialization for classes derived from <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</source>
          <target state="translated">Fornece a inicialização de base para classes derivadas de <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> is not technically an abstract class, but the default constructor is deliberately protected access.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> não é tecnicamente uma classe abstrata, mas o construtor padrão é deliberadamente acesso protegido.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>This has the effect of making <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> an "abstract" class for XAML.</source>
          <target state="translated">Isso tem o efeito de fazer <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> uma classe "abstrata" para XAML.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> that have XAML usages that expect objects of type <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, but you cannot specify an <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> instance in XAML.</source>
          <target state="translated">Há propriedades existentes no <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> com usos XAML que espera objetos do tipo <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, mas você não pode especificar um <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> instância em XAML.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>Instead, you can specify one of the device-specific <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes as values, for instance <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Em vez disso, você pode especificar um dispositivo específico <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> as classes derivadas como valores, por exemplo <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> ou <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>If you implement a custom <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> that supports a XAML usage, use this constructor for base initialization.</source>
          <target state="translated">Se você implementar um personalizado <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> que suporte o uso de XAML, use o construtor para inicialização base.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The command to associate with <bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O comando a associar ao <bpt id="p1">&lt;c&gt;</bpt>gesto<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The input gesture to associate with <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O gesto de entrada a associar ao <bpt id="p1">&lt;c&gt;</bpt>comando<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> class with the specified command and input gesture.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> com o comando e o gesto de entrada especificados.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
          <target state="translated">Se você for um desenvolvedor de software usando classes de associação de entrada existente, você geralmente não usará esse construtor, mesmo se você estiver definindo comandos personalizados.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Instead, you will either use constructors of derived classes (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), or you will use this constructor as the base instantiation of a custom class.</source>
          <target state="translated">Em vez disso, você usará os construtores de classes derivadas (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), ou você usará esse construtor como a base instanciação de uma classe personalizada.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
          <target state="translated">Embora o <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classe dá suporte a dispositivos de entrada diferentes em princípio, na prática, você deve escolher qual dispositivo representa a associação de entrada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>You only can set only one <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> value on the input binding, and gestures are device-specific.</source>
          <target state="translated">Você só pode definir apenas um <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> valor na associação de entrada e gestos são específicos do dispositivo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The following example shows how to use this constructor to associate a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como usar o construtor para associar um <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> com um <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source><ph id="ph1">&lt;paramref name="command" /&gt;</ph> or <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="command" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">O objeto a ser clonado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
          <target state="translated">Copia os valores base (não animados) das propriedades do objeto especificado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">O objeto a ser clonado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
          <source>Copies the current values of the properties of the specified object.</source>
          <target state="translated">Copia os valores atuais das propriedades do objeto especificado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Command">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> associated with this input binding.</source>
          <target state="translated">Obtém ou define o <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> associado a esta associação de entrada.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The associated command.</source>
          <target state="translated">O comando associado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classe não dá suporte a uso XAML porque ele não expõe um construtor padrão público (ele tem um construtor padrão, mas ele é protegido).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">No entanto, as classes derivadas podem expor um construtor público e portanto, pode usar propriedades que são herdadas de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in XAML and can set properties with XAML usages are <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dois existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classes derivadas que podem ser instanciadas em XAML e podem definir as propriedades com usos de XAML são <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> references a type converter that enables certain preexisting <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementations to specify values in the form of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> faz referência a um conversor de tipo que permite que determinados preexistente <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementações para especificar os valores na forma de uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
          <target state="translated">Esse comportamento de conversão de tipo define a forma de atributo de valor dessa propriedade.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>You can also bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
          <target state="translated">Você também pode associar o <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propriedades para um <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que é definido em um objeto.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">Isso permite que você defina um comando personalizado e associá-lo a entrada do usuário.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte o segundo exemplo <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso do Atributo XAML</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Property Element Usage</source>
          <target state="translated">Uso do elemento propriedade XAML</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Uma classe derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que dá suporte à sintaxe de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> ou <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>See Remarks.</source>
          <target state="translated">Consulte Observações.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>An object implementation of <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that supports object element syntax (has a public default constructor).</source>
          <target state="translated">Uma implementação de objeto de <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que oferece suporte à sintaxe de elemento de objeto (tem um construtor padrão público).</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType&gt;</ph> command.</source>
          <target state="translated">O exemplo a seguir mostra como usar um <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> para associar um <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> para o <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType&gt;</ph> comando.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>When the key gesture is performed, the Open command is invoked.</source>
          <target state="translated">Quando o gesto de chave é executado, o comando Abrir é invocado.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O valor <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Gets or sets the command-specific data for a particular command.</source>
          <target state="translated">Obtém ou define os dados específicos do comando para um determinado comando.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The command-specific data.</source>
          <target state="translated">Os dados específicos do comando.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> property is used to pass specific information to the command when it is executed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> propriedade é usada para transmitir informações específicas ao comando quando ele é executado.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">O tipo de dados é definido pelo comando.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
          <target state="translated">Muitos comandos não esperam parâmetros de comando. para que esses comandos, quaisquer parâmetros de comando passados serão ignorados.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>If the command that an input binding is associated with is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> of the input binding is passed to the <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> handlers through the <ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> event data when the command is processed.</source>
          <target state="translated">Se o comando associado uma associação de entrada é um <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, o <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> da associação de entrada é passado para o <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> manipuladores por meio de <ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> e o <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> dados de evento quando o comando é processado.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O tipo de dados e a finalidade do parâmetro de comando são definidos de forma diferente para cada comando e pode ser <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>You can bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
          <target state="translated">Você pode vincular o <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propriedades para um <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que é definido em um objeto.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">Isso permite que você defina um comando personalizado e associá-lo a entrada do usuário.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte o segundo exemplo <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classe não dá suporte a uso XAML porque ele não expõe um construtor padrão público (ele tem um construtor padrão, mas ele é protegido).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with XAML usage.</source>
          <target state="translated">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir as propriedades que são herdadas de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> com o uso do XAML.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in XAML and can set properties in XAML are <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dois existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML são <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso do Atributo XAML</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Property Element Usage</source>
          <target state="translated">Uso do elemento propriedade XAML</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Uma classe derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que dá suporte à sintaxe de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> ou <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>See Remarks.</source>
          <target state="translated">Consulte Observações.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>A string that is processed by a particular command.</source>
          <target state="translated">Uma cadeia de caracteres que é processada por um comando específico.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Strings are the common type used for command parameters because they can be easily set in XAML.</source>
          <target state="translated">Cadeias de caracteres são o tipo comum usado para parâmetros de comando porque eles podem ser facilmente definidos em XAML.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
          <target state="translated">Para o formato de cadeia de caracteres esperada e seu objetivo, consulte a documentação para o comando específico que a associação de entrada está associada.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Many commands do not expect parameters.</source>
          <target state="translated">Muitos comandos não esperam parâmetros.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>An object that is processed by a particular command.</source>
          <target state="translated">Um objeto que é processado por um comando específico.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
          <target state="translated">Todas as suas <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> comandos usam cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
          <target state="translated">Portanto, essa sintaxe de elemento de propriedade só é relevante para cenários de comando personalizado.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
          <target state="translated">Para oferecer suporte a essa sintaxe, o <ph id="ph1">`commandParameterObject`</ph> objeto também deve dar suporte a sintaxe de elemento de objeto (deve ter um construtor padrão público).</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandParameterProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandParameter" /&gt;</ph> dependency property.</source>
          <target state="translated">Identifica a propriedade de dependência <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandParameter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> dependency property.</source>
          <target state="translated">Identifica a propriedade de dependência <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>Gets or sets the target element of the command.</source>
          <target state="translated">Obtém ou define o elemento de destino do comando.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The target of the command.</source>
          <target state="translated">O destino do comando.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>In the Windows Presentation Foundation commanding system, the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> object is applicable only when the <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">No comando de sistema, o Windows Presentation Foundation a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propriedade em uma <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> objeto é aplicável somente quando o <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph> é um <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> é definido em um <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> e o comando correspondente não é um <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, o destino do comando será ignorado.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>When used with a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the object on which the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised.</source>
          <target state="translated">Quando usado com um <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, o destino do comando é o objeto no qual o <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> os eventos são gerados.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property is not set, the element with keyboard focus is used as the target.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propriedade não for definida, o elemento com o foco do teclado é usado como o destino.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classe em si não suporta o uso XAML, porque ele não expõe um construtor padrão público (há um construtor padrão, mas ele é protegido).</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a XAML usage.</source>
          <target state="translated">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir as propriedades que são herdadas de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> com um uso XAML.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in XAML and can set properties in XAML are <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dois existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML são <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso do Atributo XAML</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Uma classe derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que dá suporte à sintaxe de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> ou <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>See Remarks.</source>
          <target state="translated">Consulte Observações.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
          <target state="translated">Uma cadeia de caracteres que usa um tipo de sintaxe de associação que pode retornar uma referência de objeto a um elemento nomeado.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>See Remarks.</source>
          <target state="translated">Consulte Observações.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandTargetProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandTarget" /&gt;</ph> dependency property.</source>
          <target state="translated">Identifica a propriedade de dependência <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandTarget" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CreateInstanceCore">
          <source>Creates an instance of an <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</source>
          <target state="translated">Cria uma instância de um <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CreateInstanceCore">
          <source>The new object.</source>
          <target state="translated">O novo objeto.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> associated with this input binding.</source>
          <target state="translated">Obtém ou define o <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> associado a esta associação de entrada.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The associated gesture.</source>
          <target state="translated">O gesto associado.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The input gesture is the action that invokes the command.</source>
          <target state="translated">O gesto de entrada é a ação que invoca o comando.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Examples of input gestures in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> are <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</source>
          <target state="translated">Exemplos de gestos de entrada no <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> são <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> é uma combinação de um <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> e um conjunto de <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> é uma combinação de um <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> e um conjunto de <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classe em si não suporta o uso XAML, porque ele não expõe um construtor padrão público (há um construtor padrão, mas ele é protegido).</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>However, derived classes can expose a public constructor and thus can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a XAML usage.</source>
          <target state="translated">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir as propriedades que são herdadas de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> com um uso XAML.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in XAML and can set properties in XAML are <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dois existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML são <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso do Atributo XAML</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> ou -</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> ou -</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Property Element Usage</source>
          <target state="translated">Uso do elemento propriedade XAML</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Uma classe derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que dá suporte à sintaxe de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> ou <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>See Remarks.</source>
          <target state="translated">Consulte Observações.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A custom derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> that supports object element syntax.</source>
          <target state="translated">Um personalizado classe derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> que oferece suporte à sintaxe de elemento de objeto.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como usar um <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> para associar um <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> para um <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> ALT+L is pressed, the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command is invoked.</source>
          <target state="translated">Quando o <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> ALT + L é pressionado, o <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> comando é invocado.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">O objeto a ser clonado.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
          <source>Makes the instance a frozen clone of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> by using base (non-animated) property values.</source>
          <target state="translated">Torna a instância um clone congelado do <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> especificado usando valores de propriedade base (não animados).</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">O objeto a ser clonado.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>Makes the current instance a frozen clone of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph>.</source>
          <target state="translated">Torna a instância atual um clone congelado do <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">Se o objeto tiver propriedades de dependência animadas, seus valores animados atuais serão copiados.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>