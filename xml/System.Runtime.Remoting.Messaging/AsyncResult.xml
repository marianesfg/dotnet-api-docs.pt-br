<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncResult.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d8dcfaa989a8bc907f295feb15394366e5aa96ac.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8dcfaa989a8bc907f295feb15394366e5aa96ac</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
          <target state="translated">Encapsula os resultados de uma operação assíncrona em um delegado.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is used in conjunction with asynchronous method calls made using delegates.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe é usada em conjunto com chamadas de método assíncrono feitas usando delegados.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the delegate's <ph id="ph2">`BeginInvoke`</ph> method can be cast to an <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> retornado a partir do delegado <ph id="ph2">`BeginInvoke`</ph> método pode ser convertido em um <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> has the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property that holds the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> tem o <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> propriedade que contém o delegado do objeto no qual a chamada assíncrona foi invocada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`BeginInvoke`</ph> e chamadas assíncronas usando delegados, consulte <bpt id="p1">[</bpt>programação assíncrona usando delegados<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriedade para obter um <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>e como aguardar uma chamada assíncrona em um representante.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> é sinalizado quando a chamada assíncrona é concluída, e você pode esperar por ele chamando o método <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o <ph id="ph1">`Main`</ph> que faz a chamada de método.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Para obter mais informações e mais exemplos de como chamar métodos de forma assíncrona usando delegados, consulte <bpt id="p1">[</bpt>chamando métodos síncronos assincronamente<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Obtém o objeto delegado no qual a chamada assíncrona foi invocada.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">O objeto delegado no qual a chamada assíncrona foi invocada.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property can be cast to the actual class of the user-defined delegate.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> propriedade pode ser convertida para a classe real do delegado definido pelo usuário.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
          <target state="translated">Por exemplo, se o delegado que foi usado para fazer a chamada assíncrona é do tipo <ph id="ph1">`MyDelegate`</ph>, o representante que é retornado por esta propriedade deve ser convertido em <ph id="ph2">`MyDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
          <target state="translated">O método de retorno de chamada pode chamar o delegado <ph id="ph1">`EndInvoke`</ph> método com a assinatura correta, para obter os resultados da chamada de método assíncrono.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property to get the delegate that was used to make the asynchronous call, in order to call <ph id="ph2">`EndInvoke`</ph>.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> propriedade para obter o delegado que foi usado para fazer a chamada assíncrona, para chamar <ph id="ph2">`EndInvoke`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example casts the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, which is the only parameter of the callback method, to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> object.</source>
          <target state="translated">O exemplo converte o <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, que é o único parâmetro do método de retorno de chamada, um <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o <ph id="ph1">`Main`</ph> que faz a chamada de método.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a maneira como funciona esse exemplo de retorno de chamada, e mais exemplos de como chamar métodos de forma assíncrona por usando delegados, consulte <bpt id="p1">[</bpt>chamando métodos síncronos assincronamente<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The request <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> interface.</source>
          <target state="translated">A interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> da solicitação.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The response <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">A interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> da resposta.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface is not relevant to the <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> método o <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface não é relevante para o <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implementation by <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Implementação por <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> lança um <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Instead, obtain an <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> by casting the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface returned by an asynchronous call made using a delegate.</source>
          <target state="translated">Em vez disso, obtenha um <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> convertendo o <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface retornado por uma chamada assíncrona feita usando um representante.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>Gets the object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated">Obtém o objeto fornecido como o último parâmetro da chamada de método <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated">O objeto fornecido como o último parâmetro de um <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> chamada de método.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o <ph id="ph1">`BeginInvoke`</ph> método, consulte <bpt id="p1">[</bpt>programação assíncrona usando delegados<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The following code example demonstrates how the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> property is used to pass information to a callback method.</source>
          <target state="translated">O exemplo de código a seguir demonstra como o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> propriedade é usada para passar informações para um método de retorno de chamada.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The last parameter of the <ph id="ph1">`BeginInvoke`</ph> method call is a format string, which the callback method uses to format an output message.</source>
          <target state="translated">O último parâmetro do <ph id="ph1">`BeginInvoke`</ph> chamada de método é uma cadeia de caracteres de formato, que usa o método de retorno de chamada para formatar uma mensagem de saída.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o <ph id="ph1">`Main`</ph> que faz a chamada de método.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a maneira como funciona esse exemplo de retorno de chamada, e mais exemplos de como chamar métodos de forma assíncrona por usando delegados, consulte <bpt id="p1">[</bpt>chamando métodos síncronos assincronamente<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">Obtém um <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que encapsula os identificadores de sincronização do Win32 e permite a implementação de vários esquemas de sincronização.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que encapsula os identificadores de sincronização do Win32 e permite a implementação de vários esquemas de sincronização.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> returned by this method is automatically signaled when the asynchronous operation has completed.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> retornado por esse método automaticamente é sinalizado quando a operação assíncrona foi concluída.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
          <target state="translated">O identificador de espera não é fechado automaticamente quando você chama <ph id="ph1">`EndInvoke`</ph> sobre o delegado que foi usado para fazer com que o método assíncrono chamada.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
          <target state="translated">Se você liberar todas as referências para o identificador de espera, os recursos de sistema serão liberados quando a coleta de lixo recuperar o identificador de espera.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>To free the system resources as soon as you are finished using the wait handle, call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para liberar os recursos do sistema, assim que terminar de usar o identificador de espera, chame o <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">Coleta de lixo funciona com mais eficiência quando objetos descartáveis explicitamente estão fechados ou descartados.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contained in the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property can be used to block the current thread until the asynchronous call is complete.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contidas o <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriedade pode ser usada para bloquear o thread atual até que a chamada assíncrona é concluída.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>However the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> will ignore the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, if one was specified during the <ph id="ph3">`BeginInvoke`</ph> call.</source>
          <target state="translated">No entanto, a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> ignorará o <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, se tiver sido especificado durante a <ph id="ph3">`BeginInvoke`</ph> chamar.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Therefore, a situation can occur where the application shuts down before the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> has finished executing, even if a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> is used to block until the asynchronous call completion.</source>
          <target state="translated">Portanto, uma situação pode ocorrer em que o aplicativo é desligado antes do <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> concluiu a execução, mesmo se um <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> é usado para bloquear até a conclusão da chamada assíncrona.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For an example of such a situation, see the example for the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class, and remove the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> statement.</source>
          <target state="translated">Para obter um exemplo de tal situação, consulte o exemplo para o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe e, em seguida, remova o <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> instrução.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriedade para obter um <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>e como aguardar uma chamada assíncrona em um representante.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> é sinalizado quando a chamada assíncrona é concluída, e você pode esperar por ele chamando o método <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o <ph id="ph1">`Main`</ph> que faz a chamada de método.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Para obter mais informações e mais exemplos de como chamar métodos de forma assíncrona usando delegados, consulte <bpt id="p1">[</bpt>chamando métodos síncronos assincronamente<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously.</source>
          <target state="translated">Obtém um valor que indica se a chamada <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> foi concluída de maneira síncrona.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se o <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> chamada concluída de forma síncrona; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
          <target state="translated">Se for detectado que o <ph id="ph1">`BeginInvoke`</ph> chamada concluída de forma síncrona no <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> representante, é provável que o thread que chamou BeginInvoke é o thread atual.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Most providers of the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface will not use the capability and will return a default <ph id="ph2">`false`</ph>.</source>
          <target state="translated">A maioria dos provedores do <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface não usará o recurso e retornará um padrão <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">A implementação atual de <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> sempre retorna <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source>Gets or sets a value indicating whether <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>.</source>
          <target state="translated">Obtém ou define um valor que indica se <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> foi chamado no <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> foi chamado no atual <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>Gets the response message for the asynchronous call.</source>
          <target state="translated">Obtém a mensagem de resposta para a chamada assíncrona.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
          <target state="translated">Uma mensagem de comunicação remota deve representar uma resposta a uma chamada de método em um objeto remoto.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method can return an object after the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method is called.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> método pode retornar um objeto após o <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> return value can be cast to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> valor de retorno pode ser convertido em um <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>However, you do not need to call either of these methods directly.</source>
          <target state="translated">No entanto, você não precisa chamar esses métodos diretamente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">Eles são destinados para uso pela infraestrutura de comunicação remota do .NET Framework.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Gets a value indicating whether the server has completed the call.</source>
          <target state="translated">Obtém um valor que indica se o servidor concluiu a chamada.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> after the server has completed the call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Depois que o servidor concluiu a chamada; Caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">O servidor não deve usar todos os recursos fornecidos pelo cliente fora do após a semântica de compartilhamento depois que ele define o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Thus, it is safe for the client to destroy the resources after the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Portanto, é seguro para o cliente destruir os recursos após o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> propriedade retorna <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> returned by <ph id="ph3">`BeginInvoke`</ph> to discover when an asynchronous call completes.</source>
          <target state="translated">O exemplo a seguir mostra como usar o <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> retornado por <ph id="ph3">`BeginInvoke`</ph> para descobrir quando uma chamada assíncrona é concluída.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>You might do this when making the asynchronous call from a thread that services the user interface.</source>
          <target state="translated">Você pode fazer isso ao fazer a chamada assíncrona de um thread que atenda à interface do usuário.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">A sondagem da conclusão permite que o thread de chamada continue em execução enquanto a chamada assíncrona é executada em um thread <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o <ph id="ph1">`Main`</ph> que faz a chamada de método.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Para obter mais informações e mais exemplos de como chamar métodos de forma assíncrona usando delegados, consulte <bpt id="p1">[</bpt>chamando métodos síncronos assincronamente<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>Gets the next message sink in the sink chain.</source>
          <target state="translated">Obtém o próximo coletor de mensagem da cadeia de coletor.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface that represents the next message sink in the sink chain.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> do coletor de interface que representa a próxima mensagem na cadeia de coletor.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">A implementação atual de <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> retorna <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> para a chamada de método remoto atual.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>Sets an <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
          <target state="translated">Define um <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> para a chamada de método remoto atual, que oferece uma maneira de controlar mensagens assíncronas depois de elas serem despachadas.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>You do not need to call the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> method.</source>
          <target state="translated">Você não precisa chamar o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>A response message to a method call on a remote object.</source>
          <target state="translated">Uma mensagem de resposta para uma chamada de método em um objeto remoto.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
          <target state="translated">Processa de maneira síncrona uma mensagem de resposta retornada por uma chamada de método em um objeto remoto.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> método implementa o <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>You do not need to call this method directly.</source>
          <target state="translated">Você não precisa chamar este método diretamente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">Ele é destinado ao uso pela infraestrutura de comunicação remota do .NET Framework.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> invokes the consumer code's <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> invoca o código do consumidor <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It also sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instance returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method.</source>
          <target state="translated">Ele também define o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instância retornada pelo <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, the same object is returned by <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</source>
          <target state="translated">Se o <ph id="ph1">`msg`</ph> parâmetro é do tipo <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, o mesmo objeto é retornado por <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
          <target state="translated">Caso contrário, será retornada uma mensagem de resposta que contém uma exceção de comunicação remota.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> also modifies the value returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> também modifica o valor retornado pelo <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> propriedade.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>