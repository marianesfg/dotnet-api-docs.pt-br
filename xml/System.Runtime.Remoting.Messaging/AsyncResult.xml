<Type Name="AsyncResult" FullName="System.Runtime.Remoting.Messaging.AsyncResult">
  <TypeSignature Language="C#" Value="public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit AsyncResult extends System.Object implements class System.IAsyncResult, class System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.AsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncResult&#xA;Implements IAsyncResult, IMessageSink" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncResult : IAsyncResult, System::Runtime::Remoting::Messaging::IMessageSink" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Messaging.IMessageSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="098b9-101">Encapsula os resultados de uma operação assíncrona em um delegado.</span><span class="sxs-lookup"><span data-stu-id="098b9-101">Encapsulates the results of an asynchronous operation on a delegate.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-102">O <xref:System.Runtime.Remoting.Messaging.AsyncResult> classe é usada em conjunto com chamadas de método assíncrono feitas usando delegados.</span><span class="sxs-lookup"><span data-stu-id="098b9-102">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is used in conjunction with asynchronous method calls made using delegates.</span></span> <span data-ttu-id="098b9-103">O <xref:System.IAsyncResult> retornado a partir do delegado `BeginInvoke` método pode ser convertido em um <xref:System.Runtime.Remoting.Messaging.AsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="098b9-103">The <xref:System.IAsyncResult> returned from the delegate's `BeginInvoke` method can be cast to an <xref:System.Runtime.Remoting.Messaging.AsyncResult>.</span></span> <span data-ttu-id="098b9-104">O <xref:System.Runtime.Remoting.Messaging.AsyncResult> tem o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> propriedade que contém o delegado do objeto no qual a chamada assíncrona foi invocada.</span><span class="sxs-lookup"><span data-stu-id="098b9-104">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked.</span></span>  
  
 <span data-ttu-id="098b9-105">Para obter mais informações sobre `BeginInvoke` e chamadas assíncronas usando delegados, consulte [programação assíncrona usando delegados](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-105">For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="098b9-106">O exemplo a seguir demonstra como usar o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propriedade para obter um <xref:System.Threading.WaitHandle>e como aguardar uma chamada assíncrona em um representante.</span><span class="sxs-lookup"><span data-stu-id="098b9-106">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="098b9-107">O <xref:System.Threading.WaitHandle> é sinalizado quando a chamada assíncrona é concluída, e você pode esperar por ele chamando o método <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="098b9-107">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="098b9-108">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o `Main` que faz a chamada de método.</span><span class="sxs-lookup"><span data-stu-id="098b9-108">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="098b9-109">Para obter mais informações e mais exemplos de como chamar métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-109">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncDelegate">
      <MemberSignature Language="C#" Value="public virtual object AsyncDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncDelegate As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ AsyncDelegate { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-110">Obtém o objeto delegado no qual a chamada assíncrona foi invocada.</span><span class="sxs-lookup"><span data-stu-id="098b9-110">Gets the delegate object on which the asynchronous call was invoked.</span></span></summary>
        <value><span data-ttu-id="098b9-111">O objeto delegado no qual a chamada assíncrona foi invocada.</span><span class="sxs-lookup"><span data-stu-id="098b9-111">The delegate object on which the asynchronous call was invoked.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-112">O <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> propriedade pode ser convertida para a classe real do delegado definido pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="098b9-112">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property can be cast to the actual class of the user-defined delegate.</span></span>  
  
 <span data-ttu-id="098b9-113">Por exemplo, se o delegado que foi usado para fazer a chamada assíncrona é do tipo `MyDelegate`, o representante que é retornado por esta propriedade deve ser convertido em `MyDelegate`.</span><span class="sxs-lookup"><span data-stu-id="098b9-113">For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`.</span></span> <span data-ttu-id="098b9-114">O método de retorno de chamada pode chamar o delegado `EndInvoke` método com a assinatura correta, para obter os resultados da chamada de método assíncrono.</span><span class="sxs-lookup"><span data-stu-id="098b9-114">The callback method can then call the delegate's `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="098b9-115">O exemplo de código a seguir demonstra como usar o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> propriedade para obter o delegado que foi usado para fazer a chamada assíncrona, para chamar `EndInvoke`.</span><span class="sxs-lookup"><span data-stu-id="098b9-115">The following code example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`.</span></span> <span data-ttu-id="098b9-116">O exemplo converte o <xref:System.IAsyncResult>, que é o único parâmetro do método de retorno de chamada, um <xref:System.Runtime.Remoting.Messaging.AsyncResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="098b9-116">The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.</span></span>  
  
 <span data-ttu-id="098b9-117">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o `Main` que faz a chamada de método.</span><span class="sxs-lookup"><span data-stu-id="098b9-117">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="098b9-118">Para obter mais informações sobre a maneira como funciona esse exemplo de retorno de chamada, e mais exemplos de como chamar métodos de forma assíncrona por usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-118">For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsyncProcessMessage (msg As IMessage, replySink As IMessageSink) As IMessageCtrl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessageCtrl ^ AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Messaging::IMessageSink ^ replySink);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageCtrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="replySink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="098b9-119">A interface <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> da solicitação.</span><span class="sxs-lookup"><span data-stu-id="098b9-119">The request <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span></span></param>
        <param name="replySink"><span data-ttu-id="098b9-120">A interface <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> da resposta.</span><span class="sxs-lookup"><span data-stu-id="098b9-120">The response <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface.</span></span></param>
        <summary><span data-ttu-id="098b9-121">Implementa a interface <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" />.</span><span class="sxs-lookup"><span data-stu-id="098b9-121">Implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface.</span></span></summary>
        <returns><span data-ttu-id="098b9-122">Nenhum valor é retornado.</span><span class="sxs-lookup"><span data-stu-id="098b9-122">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-123">O <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A> método o <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface não é relevante para o <xref:System.Runtime.Remoting.Messaging.AsyncResult> classe.</span><span class="sxs-lookup"><span data-stu-id="098b9-123">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A> method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class.</span></span> <span data-ttu-id="098b9-124">Implementação por <xref:System.Runtime.Remoting.Messaging.AsyncResult> lança um <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="098b9-124">Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="098b9-125">Em vez disso, obtenha um <xref:System.Runtime.Remoting.Messaging.AsyncResult> convertendo o <xref:System.IAsyncResult> interface retornado por uma chamada assíncrona feita usando um representante.</span><span class="sxs-lookup"><span data-stu-id="098b9-125">Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public virtual object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-126">Obtém o objeto fornecido como o último parâmetro da chamada de método <see langword="BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="098b9-126">Gets the object provided as the last parameter of a <see langword="BeginInvoke" /> method call.</span></span></summary>
        <value><span data-ttu-id="098b9-127">O objeto fornecido como o último parâmetro de um <see langword="BeginInvoke" /> chamada de método.</span><span class="sxs-lookup"><span data-stu-id="098b9-127">The object provided as the last parameter of a <see langword="BeginInvoke" /> method call.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-128">Para obter mais informações sobre o `BeginInvoke` método, consulte [programação assíncrona usando delegados](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-128">For more information about the `BeginInvoke` method, see [Asynchronous Programming Using Delegates](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="098b9-129">O exemplo de código a seguir demonstra como o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> propriedade é usada para passar informações para um método de retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="098b9-129">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="098b9-130">O último parâmetro do `BeginInvoke` chamada de método é uma cadeia de caracteres de formato, que usa o método de retorno de chamada para formatar uma mensagem de saída.</span><span class="sxs-lookup"><span data-stu-id="098b9-130">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="098b9-131">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o `Main` que faz a chamada de método.</span><span class="sxs-lookup"><span data-stu-id="098b9-131">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="098b9-132">Para obter mais informações sobre a maneira como funciona esse exemplo de retorno de chamada, e mais exemplos de como chamar métodos de forma assíncrona por usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-132">For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-133">Obtém um <see cref="T:System.Threading.WaitHandle" /> que encapsula os identificadores de sincronização do Win32 e permite a implementação de vários esquemas de sincronização.</span><span class="sxs-lookup"><span data-stu-id="098b9-133">Gets a <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</span></span></summary>
        <value><span data-ttu-id="098b9-134">Um <see cref="T:System.Threading.WaitHandle" /> que encapsula os identificadores de sincronização do Win32 e permite a implementação de vários esquemas de sincronização.</span><span class="sxs-lookup"><span data-stu-id="098b9-134">A <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-135">O <xref:System.Threading.WaitHandle> retornado por esse método automaticamente é sinalizado quando a operação assíncrona foi concluída.</span><span class="sxs-lookup"><span data-stu-id="098b9-135">The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed.</span></span>  
  
 <span data-ttu-id="098b9-136">O identificador de espera não é fechado automaticamente quando você chama `EndInvoke` sobre o delegado que foi usado para fazer com que o método assíncrono chamada.</span><span class="sxs-lookup"><span data-stu-id="098b9-136">The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call.</span></span> <span data-ttu-id="098b9-137">Se você liberar todas as referências para o identificador de espera, os recursos de sistema serão liberados quando a coleta de lixo recuperar o identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="098b9-137">If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</span></span> <span data-ttu-id="098b9-138">Para liberar os recursos do sistema, assim que terminar de usar o identificador de espera, chame o <xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="098b9-138">To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="098b9-139">Coleta de lixo funciona com mais eficiência quando objetos descartáveis explicitamente estão fechados ou descartados.</span><span class="sxs-lookup"><span data-stu-id="098b9-139">Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="098b9-140">O <xref:System.Threading.WaitHandle> contidas o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propriedade pode ser usada para bloquear o thread atual até que a chamada assíncrona é concluída.</span><span class="sxs-lookup"><span data-stu-id="098b9-140">The <xref:System.Threading.WaitHandle> contained in the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property can be used to block the current thread until the asynchronous call is complete.</span></span> <span data-ttu-id="098b9-141">No entanto, a <xref:System.Threading.WaitHandle> ignorará o <xref:System.AsyncCallback>, se tiver sido especificado durante a `BeginInvoke` chamar.</span><span class="sxs-lookup"><span data-stu-id="098b9-141">However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call.</span></span> <span data-ttu-id="098b9-142">Portanto, uma situação pode ocorrer em que o aplicativo é desligado antes do <xref:System.AsyncCallback> concluiu a execução, mesmo se um <xref:System.Threading.WaitHandle> é usado para bloquear até a conclusão da chamada assíncrona.</span><span class="sxs-lookup"><span data-stu-id="098b9-142">Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion.</span></span> <span data-ttu-id="098b9-143">Para obter um exemplo de tal situação, consulte o exemplo para o <xref:System.Runtime.Remoting.Messaging.AsyncResult> classe e, em seguida, remova o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> instrução.</span><span class="sxs-lookup"><span data-stu-id="098b9-143">For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> statement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="098b9-144">O exemplo a seguir demonstra como usar o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propriedade para obter um <xref:System.Threading.WaitHandle>e como aguardar uma chamada assíncrona em um representante.</span><span class="sxs-lookup"><span data-stu-id="098b9-144">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="098b9-145">O <xref:System.Threading.WaitHandle> é sinalizado quando a chamada assíncrona é concluída, e você pode esperar por ele chamando o método <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="098b9-145">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="098b9-146">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o `Main` que faz a chamada de método.</span><span class="sxs-lookup"><span data-stu-id="098b9-146">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="098b9-147">Para obter mais informações e mais exemplos de como chamar métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-147">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public virtual bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-148">Obtém um valor que indica se a chamada <see langword="BeginInvoke" /> foi concluída de maneira síncrona.</span><span class="sxs-lookup"><span data-stu-id="098b9-148">Gets a value indicating whether the <see langword="BeginInvoke" /> call completed synchronously.</span></span></summary>
        <value>
          <span data-ttu-id="098b9-149"><see langword="true" /> Se o <see langword="BeginInvoke" /> chamada concluída de forma síncrona; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="098b9-149"><see langword="true" /> if the <see langword="BeginInvoke" /> call completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-150">Se for detectado que o `BeginInvoke` chamada concluída de forma síncrona no <xref:System.AsyncCallback> representante, é provável que o thread que chamou BeginInvoke é o thread atual.</span><span class="sxs-lookup"><span data-stu-id="098b9-150">If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread.</span></span> <span data-ttu-id="098b9-151">A maioria dos provedores do <xref:System.IAsyncResult> interface não usará o recurso e retornará um padrão `false`.</span><span class="sxs-lookup"><span data-stu-id="098b9-151">Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`.</span></span>  
  
 <span data-ttu-id="098b9-152">A implementação atual de <xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A> sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="098b9-152">Current implementation of <xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A> always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvokeCalled">
      <MemberSignature Language="C#" Value="public bool EndInvokeCalled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndInvokeCalled" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled" />
      <MemberSignature Language="VB.NET" Value="Public Property EndInvokeCalled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndInvokeCalled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-153">Obtém ou define um valor que indica se <see langword="EndInvoke" /> foi chamado no <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> atual.</span><span class="sxs-lookup"><span data-stu-id="098b9-153">Gets or sets a value indicating whether <see langword="EndInvoke" /> has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />.</span></span></summary>
        <value>
          <span data-ttu-id="098b9-154"><see langword="true" /> Se <see langword="EndInvoke" /> foi chamado no atual <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="098b9-154"><see langword="true" /> if <see langword="EndInvoke" /> has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReplyMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage GetReplyMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplyMessage () As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessage ^ GetReplyMessage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="098b9-155">Obtém a mensagem de resposta para a chamada assíncrona.</span><span class="sxs-lookup"><span data-stu-id="098b9-155">Gets the response message for the asynchronous call.</span></span></summary>
        <returns><span data-ttu-id="098b9-156">Uma mensagem de comunicação remota deve representar uma resposta a uma chamada de método em um objeto remoto.</span><span class="sxs-lookup"><span data-stu-id="098b9-156">A remoting message that should represent a response to a method call on a remote object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-157">O <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> método pode retornar um objeto após o <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="098b9-157">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called.</span></span> <span data-ttu-id="098b9-158">O <xref:System.Runtime.Remoting.Messaging.IMessage> valor de retorno pode ser convertido em um <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.</span><span class="sxs-lookup"><span data-stu-id="098b9-158">The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.</span></span>  
  
 <span data-ttu-id="098b9-159">No entanto, você não precisa chamar esses métodos diretamente.</span><span class="sxs-lookup"><span data-stu-id="098b9-159">However, you do not need to call either of these methods directly.</span></span> <span data-ttu-id="098b9-160">Eles são destinados para uso pela infraestrutura de comunicação remota do .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="098b9-160">They are intended for use by the remoting infrastructure of the .NET Framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public virtual bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-161">Obtém um valor que indica se o servidor concluiu a chamada.</span><span class="sxs-lookup"><span data-stu-id="098b9-161">Gets a value indicating whether the server has completed the call.</span></span></summary>
        <value>
          <span data-ttu-id="098b9-162"><see langword="true" /> Depois que o servidor concluiu a chamada; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="098b9-162"><see langword="true" /> after the server has completed the call; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-163">O servidor não deve usar todos os recursos fornecidos pelo cliente fora do após a semântica de compartilhamento depois que ele define o <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="098b9-163">The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property to `true`.</span></span> <span data-ttu-id="098b9-164">Portanto, é seguro para o cliente destruir os recursos após o <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> propriedade retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="098b9-164">Thus, it is safe for the client to destroy the resources after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="098b9-165">O exemplo a seguir mostra como usar o <xref:System.IAsyncResult.IsCompleted%2A> propriedade o <xref:System.Runtime.Remoting.Messaging.AsyncResult> retornado por `BeginInvoke` para descobrir quando uma chamada assíncrona é concluída.</span><span class="sxs-lookup"><span data-stu-id="098b9-165">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes.</span></span> <span data-ttu-id="098b9-166">Você pode fazer isso ao fazer a chamada assíncrona de um thread que atenda à interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="098b9-166">You might do this when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="098b9-167">A sondagem da conclusão permite que o thread de chamada continue em execução enquanto a chamada assíncrona é executada em um thread <xref:System.Threading.ThreadPool>.</span><span class="sxs-lookup"><span data-stu-id="098b9-167">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="098b9-168">O exemplo consiste em duas classes, a classe que contém o método que é chamado de forma assíncrona, e a classe que contém o `Main` que faz a chamada de método.</span><span class="sxs-lookup"><span data-stu-id="098b9-168">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="098b9-169">Para obter mais informações e mais exemplos de como chamar métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="098b9-169">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSink As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Messaging::IMessageSink ^ NextSink { System::Runtime::Remoting::Messaging::IMessageSink ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Messaging.IMessageSink.NextSink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="098b9-170">Obtém o próximo coletor de mensagem da cadeia de coletor.</span><span class="sxs-lookup"><span data-stu-id="098b9-170">Gets the next message sink in the sink chain.</span></span></summary>
        <value><span data-ttu-id="098b9-171">Um <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> do coletor de interface que representa a próxima mensagem na cadeia de coletor.</span><span class="sxs-lookup"><span data-stu-id="098b9-171">An <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface that represents the next message sink in the sink chain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-172">A implementação atual de <xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A> retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="098b9-172">The current implementation of <xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A> returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMessageCtrl">
      <MemberSignature Language="C#" Value="public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMessageCtrl(class System.Runtime.Remoting.Messaging.IMessageCtrl mc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetMessageCtrl (mc As IMessageCtrl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetMessageCtrl(System::Runtime::Remoting::Messaging::IMessageCtrl ^ mc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mc" Type="System.Runtime.Remoting.Messaging.IMessageCtrl" />
      </Parameters>
      <Docs>
        <param name="mc"><span data-ttu-id="098b9-173">O <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> para a chamada de método remoto atual.</span><span class="sxs-lookup"><span data-stu-id="098b9-173">The <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> for the current remote method call.</span></span></param>
        <summary><span data-ttu-id="098b9-174">Define um <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> para a chamada de método remoto atual, que oferece uma maneira de controlar mensagens assíncronas depois de elas serem despachadas.</span><span class="sxs-lookup"><span data-stu-id="098b9-174">Sets an <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-175">Você não precisa chamar o <xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="098b9-175">You do not need to call the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SyncProcessMessage (msg As IMessage) As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessage ^ SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="098b9-176">Uma mensagem de resposta para uma chamada de método em um objeto remoto.</span><span class="sxs-lookup"><span data-stu-id="098b9-176">A response message to a method call on a remote object.</span></span></param>
        <summary><span data-ttu-id="098b9-177">Processa de maneira síncrona uma mensagem de resposta retornada por uma chamada de método em um objeto remoto.</span><span class="sxs-lookup"><span data-stu-id="098b9-177">Synchronously processes a response message returned by a method call on a remote object.</span></span></summary>
        <returns><span data-ttu-id="098b9-178">Retorna <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="098b9-178">Returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="098b9-179">O <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> método implementa o <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface.</span><span class="sxs-lookup"><span data-stu-id="098b9-179">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface.</span></span> <span data-ttu-id="098b9-180">Você não precisa chamar este método diretamente.</span><span class="sxs-lookup"><span data-stu-id="098b9-180">You do not need to call this method directly.</span></span> <span data-ttu-id="098b9-181">Ele é destinado ao uso pela infraestrutura de comunicação remota do .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="098b9-181">It is intended for use by the remoting infrastructure of the .NET Framework.</span></span>  
  
 <span data-ttu-id="098b9-182"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> invoca o código do consumidor <xref:System.AsyncCallback> delegate.</span><span class="sxs-lookup"><span data-stu-id="098b9-182"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> invokes the consumer code's <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="098b9-183">Ele também define o <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instância retornada pelo <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> método.</span><span class="sxs-lookup"><span data-stu-id="098b9-183">It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method.</span></span> <span data-ttu-id="098b9-184">Se o `msg` parâmetro é do tipo <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, o mesmo objeto é retornado por <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>.</span><span class="sxs-lookup"><span data-stu-id="098b9-184">If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>.</span></span> <span data-ttu-id="098b9-185">Caso contrário, será retornada uma mensagem de resposta que contém uma exceção de comunicação remota.</span><span class="sxs-lookup"><span data-stu-id="098b9-185">Otherwise, a reply message that contains a remoting exception is returned.</span></span>  
  
 <span data-ttu-id="098b9-186"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> também modifica o valor retornado pelo <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="098b9-186"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>