<Type Name="WindowHelperService" FullName="System.Activities.Presentation.Hosting.WindowHelperService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6788e687fed126841febce899e2de4b5d38c3c34" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52251383" /></Metadata><TypeSignature Language="C#" Value="public class WindowHelperService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WindowHelperService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Hosting.WindowHelperService" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowHelperService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowHelperService" />
  <TypeSignature Language="F#" Value="type WindowHelperService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece funcionalidades para registrar e cancelar o registro de representantes para notificações de eventos e também para definir a posse das janelas.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowHelperService (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hwnd As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowHelperService(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="new System.Activities.Presentation.Hosting.WindowHelperService : nativeint -&gt; System.Activities.Presentation.Hosting.WindowHelperService" Usage="new System.Activities.Presentation.Hosting.WindowHelperService hwnd" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Um identificador de uma janela pai.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Activities.Presentation.Hosting.WindowHelperService" /> com o identificador específico de uma janela pai.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentWindowHwnd">
      <MemberSignature Language="C#" Value="public IntPtr ParentWindowHwnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ParentWindowHwnd" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentWindowHwnd As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ParentWindowHwnd { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ParentWindowHwnd : nativeint" Usage="System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o identificador da janela pai.</summary>
        <value>Retorna <see cref="T:System.IntPtr" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterWindowMessageHandler">
      <MemberSignature Language="C#" Value="public bool RegisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RegisterWindowMessageHandler(class System.Activities.Presentation.Hosting.WindowMessage callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterWindowMessageHandler (callback As WindowMessage) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RegisterWindowMessageHandler(System::Activities::Presentation::Hosting::WindowMessage ^ callback);" />
      <MemberSignature Language="F#" Value="member this.RegisterWindowMessageHandler : System.Activities.Presentation.Hosting.WindowMessage -&gt; bool" Usage="windowHelperService.RegisterWindowMessageHandler callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.Hosting.WindowMessage" />
      </Parameters>
      <Docs>
        <param name="callback">O representante a ser registrado para notificações de eventos.</param>
        <summary>Registra o representante especificado para notificações de eventos.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="callback" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TrySetWindowOwner">
      <MemberSignature Language="C#" Value="public bool TrySetWindowOwner (System.Windows.DependencyObject source, System.Windows.Window target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetWindowOwner(class System.Windows.DependencyObject source, class System.Windows.Window target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetWindowOwner (source As DependencyObject, target As Window) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetWindowOwner(System::Windows::DependencyObject ^ source, System::Windows::Window ^ target);" />
      <MemberSignature Language="F#" Value="member this.TrySetWindowOwner : System.Windows.DependencyObject * System.Windows.Window -&gt; bool" Usage="windowHelperService.TrySetWindowOwner (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="target" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="source">O proprietário do <paramref name="target" />.</param>
        <param name="target">A janela que deve ser de propriedade da <paramref name="source" />.</param>
        <summary>Atribui a janela a ser a proprietária da janela especificada.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterWindowMessageHandler">
      <MemberSignature Language="C#" Value="public bool UnregisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterWindowMessageHandler(class System.Activities.Presentation.Hosting.WindowMessage callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnregisterWindowMessageHandler (callback As WindowMessage) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UnregisterWindowMessageHandler(System::Activities::Presentation::Hosting::WindowMessage ^ callback);" />
      <MemberSignature Language="F#" Value="member this.UnregisterWindowMessageHandler : System.Activities.Presentation.Hosting.WindowMessage -&gt; bool" Usage="windowHelperService.UnregisterWindowMessageHandler callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.Hosting.WindowMessage" />
      </Parameters>
      <Docs>
        <param name="callback">O representante a ser removido das notificações de eventos.</param>
        <summary>Cancela o registro do representante especificado para notificações de eventos.</summary>
        <returns><see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>