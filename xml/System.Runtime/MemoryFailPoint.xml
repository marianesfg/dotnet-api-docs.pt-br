<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1d40f8a8a99bf05bb613279f96e44d6af30c24b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39755967" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="84dc5-101">Verifica se há recursos suficientes de memória antes de executar uma operação.</span>
      <span class="sxs-lookup">
        <span data-stu-id="84dc5-101">Checks for sufficient memory resources before executing an operation.</span>
      </span>
      <span data-ttu-id="84dc5-102">Essa classe não pode ser herdada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="84dc5-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="84dc5-103">Essa classe destina-se para uso em desenvolvimento avançado.</span><span class="sxs-lookup"><span data-stu-id="84dc5-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="84dc5-104">Criando uma instância da <xref:System.Runtime.MemoryFailPoint> classe cria um portão de memória.</span><span class="sxs-lookup"><span data-stu-id="84dc5-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="84dc5-105">Verifica um portão de memória para recursos suficientes antes de iniciar uma atividade que requer uma grande quantidade de memória.</span><span class="sxs-lookup"><span data-stu-id="84dc5-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="84dc5-106">Falha na verificação resulta em um <xref:System.InsufficientMemoryException> exceção sendo lançada.</span><span class="sxs-lookup"><span data-stu-id="84dc5-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="84dc5-107">Essa exceção impede que uma operação de ser iniciado e reduz a possibilidade de falha devido à falta de recursos.</span><span class="sxs-lookup"><span data-stu-id="84dc5-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="84dc5-108">Isso permite que você diminuir o desempenho para evitar um <xref:System.OutOfMemoryException> exceção e qualquer dano de estado que pode resultar de tratamento inadequado da exceção em locais aleatórios no seu código.</span><span class="sxs-lookup"><span data-stu-id="84dc5-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="84dc5-109">Esse tipo implementa o <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="84dc5-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="84dc5-110">Quando você terminar de usar o tipo, você deve descartá-lo diretamente ou indiretamente.</span><span class="sxs-lookup"><span data-stu-id="84dc5-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="84dc5-111">Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A> método em um `try` / `catch` bloco.</span><span class="sxs-lookup"><span data-stu-id="84dc5-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="84dc5-112">Para descartá-los indiretamente, usar uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="84dc5-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="84dc5-113">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico da interface.</span><span class="sxs-lookup"><span data-stu-id="84dc5-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="84dc5-114">Lançando um <xref:System.InsufficientMemoryException> exceção, um aplicativo pode distinguir entre uma estimativa que uma operação não poderá concluir e uma operação concluída parcialmente que pode ter corrompido o estado do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="84dc5-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="84dc5-115">Isso permite que um aplicativo para reduzir a frequência de uma diretiva de escalonamento pessimista, que pode exigir a descarregar atual <xref:System.AppDomain> ou reciclar o processo.</span><span class="sxs-lookup"><span data-stu-id="84dc5-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="84dc5-116"><xref:System.Runtime.MemoryFailPoint> verifica se há memória suficiente e espaço de endereço virtual consecutivas estão disponíveis na coleta de lixo todos os heaps e podem aumentar o tamanho do arquivo de permuta.</span><span class="sxs-lookup"><span data-stu-id="84dc5-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="84dc5-117"><xref:System.Runtime.MemoryFailPoint> nenhuma garantia em relação à disponibilidade de longo prazo da memória durante o tempo de vida da porta, mas os chamadores deve sempre usa o <xref:System.Runtime.MemoryFailPoint.Dispose%2A> método para garantir que os recursos associados com <xref:System.Runtime.MemoryFailPoint> são liberados.</span><span class="sxs-lookup"><span data-stu-id="84dc5-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="84dc5-118">Para usar um portão de memória, você deve criar um <xref:System.Runtime.MemoryFailPoint> do objeto e especifique o número de megabytes (MB) de memória que a próxima operação espera usar.</span><span class="sxs-lookup"><span data-stu-id="84dc5-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="84dc5-119">Se memória suficiente não estiver disponível, um <xref:System.InsufficientMemoryException> exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="84dc5-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="84dc5-120">O parâmetro do construtor deve ser um inteiro positivo.</span><span class="sxs-lookup"><span data-stu-id="84dc5-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="84dc5-121">Um valor negativo gera um <xref:System.ArgumentOutOfRangeException> exceção.</span><span class="sxs-lookup"><span data-stu-id="84dc5-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="84dc5-122"><xref:System.Runtime.MemoryFailPoint> opera em uma granularidade de 16 MB.</span><span class="sxs-lookup"><span data-stu-id="84dc5-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="84dc5-123">Qualquer valor menor que 16 MB é tratados como 16 MB, e outros valores são tratados como o próximo múltiplo maior de 16 MB.</span><span class="sxs-lookup"><span data-stu-id="84dc5-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84dc5-124"><xref:System.Runtime.MemoryFailPoint> permite que um aplicativo fique lento em si para evitar a falta de memória de maneira corrompam.</span><span class="sxs-lookup"><span data-stu-id="84dc5-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="84dc5-125">Ele deve ser usado dentro de um escopo léxico.</span><span class="sxs-lookup"><span data-stu-id="84dc5-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="84dc5-126">O exemplo a seguir inicia threads para processar itens em uma fila de trabalho.</span><span class="sxs-lookup"><span data-stu-id="84dc5-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="84dc5-127">Antes de cada thread é iniciado, os recursos de memória disponível são verificados usando <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="84dc5-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="84dc5-128">Se uma exceção for lançada, o método principal aguarda até que a memória está disponível antes de iniciar o próximo segmento.</span><span class="sxs-lookup"><span data-stu-id="84dc5-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="84dc5-129">para chamar código não gerenciado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="84dc5-129">for calling unmanaged code.</span>
      </span>
      <span data-ttu-id="84dc5-130">Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="84dc5-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      </span>
      <span data-ttu-id="84dc5-131">Ação de segurança: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="84dc5-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">
          <span data-ttu-id="84dc5-132">O tamanho da memória necessária, em megabytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-132">The required memory size, in megabytes.</span>
          </span>
          <span data-ttu-id="84dc5-133">Isso deve ser um valor positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-133">This must be a positive value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84dc5-134">Inicializa uma nova instância da classe <see cref="T:System.Runtime.MemoryFailPoint" />, especificando a quantidade de memória necessária para uma execução bem-sucedida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84dc5-135">A quantidade de memória usada pelo seu aplicativo para processar um item de trabalho pode ser determinada empiricamente.</span><span class="sxs-lookup"><span data-stu-id="84dc5-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="84dc5-136">Para estimar a quantidade de memória que seu aplicativo precisa para processar uma solicitação, considere usar o <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> método para determinar a quantidade de memória disponível antes e depois chamar o método que processa o item de trabalho.</span><span class="sxs-lookup"><span data-stu-id="84dc5-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="84dc5-137">Consulte a <xref:System.Runtime.MemoryFailPoint> classe para um exemplo de código que determina dinamicamente o valor para o `sizeInMegabytes` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="84dc5-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84dc5-138">O exemplo a seguir demonstra como determinar a quantidade de memória que exige que um método durante a execução.</span><span class="sxs-lookup"><span data-stu-id="84dc5-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="84dc5-139">Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Runtime.MemoryFailPoint> classe.</span><span class="sxs-lookup"><span data-stu-id="84dc5-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="84dc5-140">O tamanho de memória especificado é negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-140">The specified memory size is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.InsufficientMemoryException">
          <span data-ttu-id="84dc5-141">Não há memória suficiente para iniciar a execução do código protegido pelo portão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-141">There is insufficient memory to begin execution of the code protected by the gate.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="84dc5-142">requer confiança total para o chamador imediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-142">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="84dc5-143">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-143">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="84dc5-144">Libera todos os recursos usados pelo <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84dc5-145">Chame <xref:System.Runtime.MemoryFailPoint.Dispose%2A> quando tiver terminado de usar o <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="84dc5-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="84dc5-146">O <xref:System.Runtime.MemoryFailPoint.Dispose%2A> método deixa o <xref:System.Runtime.MemoryFailPoint> em um estado inutilizável.</span><span class="sxs-lookup"><span data-stu-id="84dc5-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="84dc5-147">Depois de chamar <xref:System.Runtime.MemoryFailPoint>, você deve liberar todas as referências para o <xref:System.Runtime.MemoryFailPoint> para que o coletor de lixo possa recuperar a memória que o <xref:System.Runtime.MemoryFailPoint> estava ocupando.</span><span class="sxs-lookup"><span data-stu-id="84dc5-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="84dc5-148">Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="84dc5-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84dc5-149">Sempre chamar <xref:System.Runtime.MemoryFailPoint.Dispose%2A> antes de liberar sua última referência para o <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="84dc5-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="84dc5-150">Caso contrário, os recursos que ele está usando não serão liberados até que o coletor de lixo chame o <xref:System.Runtime.MemoryFailPoint> do objeto `Finalize` método.</span><span class="sxs-lookup"><span data-stu-id="84dc5-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="84dc5-151">Garante que os recursos são liberados e outras operações de limpeza são executadas quando o coletor de lixo recupera o objeto <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="84dc5-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84dc5-152">O coletor de lixo chama o <xref:System.Runtime.MemoryFailPoint.Finalize%2A> método quando o objeto atual está pronto para ser finalizado.</span><span class="sxs-lookup"><span data-stu-id="84dc5-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>