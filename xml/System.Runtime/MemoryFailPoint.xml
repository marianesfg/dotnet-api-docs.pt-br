<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemoryFailPoint.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac561e44bc871caa29f826e0555271beb6a45d2de1c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e44bc871caa29f826e0555271beb6a45d2de1c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Verifica se há recursos suficientes de memória antes de executar uma operação.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class cannot be inherited.</source>
          <target state="translated">Essa classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class is intended for use in advanced development.</source>
          <target state="translated">Essa classe é destinada para uso em desenvolvimento avançado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Creating an instance of the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class creates a memory gate.</source>
          <target state="translated">Criar uma instância do <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> classe cria um portão de memória.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Verifica um portão de memória para recursos suficientes antes de iniciar uma atividade que requer uma grande quantidade de memória.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Failing the check results in an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception being thrown.</source>
          <target state="translated">Falha na verificação resulta em um <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exceção sendo lançada.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Essa exceção impede que uma operação seja iniciado e reduz a possibilidade de falha devido à falta de recursos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This enables you decrease performance to avoid an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">Isso permite que você diminuir o desempenho para evitar um <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exceção e qualquer dano de estado que pode resultar de tratamento inadequado de exceção arbitrários locais no seu código.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para descartar o tipo diretamente, chame seu <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método em um <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para descartar indiretamente dele, use uma construção de linguagem, como <ph id="ph1">`using`</ph> (em c#) ou <ph id="ph2">`Using`</ph> (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tópico de interface.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>By throwing an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">Lançando um <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exceção, um aplicativo pode distinguir entre uma previsão que uma operação não poderá concluir e uma operação concluída parcialmente que pode ter corrompido o estado do aplicativo.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or recycling the process.</source>
          <target state="translated">Isso permite que um aplicativo reduzir a frequência de uma política de escalação pessimista, que pode exigir a descarregar atual <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> ou reciclar o processo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> verifica se há memória suficiente e espaço de endereço virtual consecutivas estão disponíveis na coleta de lixo todos os heaps e podem aumentar o tamanho do arquivo de permuta.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method to ensure that resources associated with <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> are released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> nenhuma garantia em relação à disponibilidade de longo prazo da memória durante o tempo de vida da porta, mas os chamadores deve sempre utiliza o <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> método para garantir que os recursos associados com <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> são liberados.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To use a memory gate, you must create a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Para usar um portão de memória, você deve criar um <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> do objeto e especifique o número de megabytes (MB) de memória que a próxima operação espera usar.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If enough memory is not available, an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception is thrown.</source>
          <target state="translated">Se há memória suficiente não estiver disponível, um <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exceção será lançada.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">O parâmetro do construtor deve ser um inteiro positivo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A negative value raises an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">Um valor negativo gera um <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> operates at a granularity of 16 MB.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> opera em uma granularidade de 16 MB.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Valores menores do que 16 MB são tratados como 16 MB e outros valores são tratados como o próximo múltiplo maior de 16 MB.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> enables an application to slow itself to avoid running out of memory in a corrupting manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> permite que um aplicativo lenta para evitar a falta de memória de maneira corrompida.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>It should be used within a lexical scope.</source>
          <target state="translated">Ele deve ser usado em um escopo léxico.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The following example launches threads to process items in a work queue.</source>
          <target state="translated">O exemplo a seguir inicia threads para processar os itens em uma fila de trabalho.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Before each thread is launched, the available memory resources are checked using <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Antes de cada thread é iniciado, os recursos de memória disponíveis são verificados usando <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If an exception is thrown, the main method waits until memory is available before launching the next thread.</source>
          <target state="translated">Se uma exceção for lançada, o método principal aguarda até que a memória está disponível antes de iniciar o próximo segmento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>for calling unmanaged code.</source>
          <target state="translated">para chamar código não gerenciado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">O tamanho da memória necessária, em megabytes.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This must be a positive value.</source>
          <target state="translated">Isso deve ser um valor positivo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>, especificando a quantidade de memória necessária para uma execução bem-sucedida.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">A quantidade de memória usada pelo seu aplicativo para processar um item de trabalho pode ser determinada empiricamente.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>To estimate the amount of memory your application needs to process a request, consider using the <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Para estimar a quantidade de memória que seu aplicativo precisa para processar uma solicitação, considere o uso de <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> método para determinar a quantidade de memória disponível antes e depois de chamar o método que processa o item de trabalho.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class for a code example that dynamically determines the value for the <ph id="ph2">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Consulte o <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> classe para um exemplo de código que determina dinamicamente o valor para o <ph id="ph2">`sizeInMegabytes`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The following example demonstrates how to determine the amount of memory a method requires when executing.</source>
          <target state="translated">O exemplo a seguir demonstra como determinar a quantidade de memória que um método exige durante a execução.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The specified memory size is negative.</source>
          <target state="translated">O tamanho de memória especificado é negativo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">Não há memória suficiente para iniciar a execução do código protegido pelo portão.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</source>
          <target state="translated">Libera todos os recursos usados pelo <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Chamar <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> quando tiver terminado de usar o <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> in an unusable state.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> método deixa o <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> em um estado inutilizável.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> was occupying.</source>
          <target state="translated">Depois de chamar <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, você deve liberar todas as referências para o <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> para o coletor de lixo possa recuperar a memória que o <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> estava ocupando.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>implementar um método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Sempre chamar <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> antes de liberar sua última referência para o <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> do objeto <ph id="ph2">`Finalize`</ph> método.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> object.</source>
          <target state="translated">Garante que os recursos são liberados e outras operações de limpeza são executadas quando o coletor de lixo recupera o objeto <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>The garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> method when the current object is ready to be finalized.</source>
          <target state="translated">O coletor de lixo chama o <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> método quando o objeto atual está pronto para ser finalizado.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>