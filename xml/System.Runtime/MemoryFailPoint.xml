<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6513e2fd2b79bb4917d07c3fde06b9d25715af8c" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48646217" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Verifica se há recursos suficientes de memória antes de executar uma operação. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Essa classe destina-se para uso em desenvolvimento avançado.  
  
 Criando uma instância da <xref:System.Runtime.MemoryFailPoint> classe cria um portão de memória. Verifica um portão de memória para recursos suficientes antes de iniciar uma atividade que requer uma grande quantidade de memória. Falha na verificação resulta em um <xref:System.InsufficientMemoryException> exceção sendo lançada. Essa exceção impede que uma operação de ser iniciado e reduz a possibilidade de falha devido à falta de recursos. Isso permite que você diminuir o desempenho para evitar um <xref:System.OutOfMemoryException> exceção e qualquer dano de estado que pode resultar de tratamento inadequado da exceção em locais aleatórios no seu código.  
  
> [!IMPORTANT]
>  Esse tipo implementa o <xref:System.IDisposable> interface. Quando você terminar de usar o tipo, você deve descartá-lo diretamente ou indiretamente. Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A> método em um `try` / `catch` bloco. Para descartá-los indiretamente, usar uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic). Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico da interface.  
  
 Lançando um <xref:System.InsufficientMemoryException> exceção, um aplicativo pode distinguir entre uma estimativa que uma operação não poderá concluir e uma operação concluída parcialmente que pode ter corrompido o estado do aplicativo. Isso permite que um aplicativo para reduzir a frequência de uma diretiva de escalonamento pessimista, que pode exigir a descarregar atual <xref:System.AppDomain> ou reciclar o processo.  
  
 <xref:System.Runtime.MemoryFailPoint> verifica se há memória suficiente e espaço de endereço virtual consecutivas estão disponíveis na coleta de lixo todos os heaps e podem aumentar o tamanho do arquivo de permuta.  <xref:System.Runtime.MemoryFailPoint> nenhuma garantia em relação à disponibilidade de longo prazo da memória durante o tempo de vida da porta, mas os chamadores deve sempre usa o <xref:System.Runtime.MemoryFailPoint.Dispose%2A> método para garantir que os recursos associados com <xref:System.Runtime.MemoryFailPoint> são liberados.  
  
 Para usar um portão de memória, você deve criar um <xref:System.Runtime.MemoryFailPoint> do objeto e especifique o número de megabytes (MB) de memória que a próxima operação espera usar. Se memória suficiente não estiver disponível, um <xref:System.InsufficientMemoryException> exceção é lançada.  
  
 O parâmetro do construtor deve ser um inteiro positivo. Um valor negativo gera um <xref:System.ArgumentOutOfRangeException> exceção.  
  
 <xref:System.Runtime.MemoryFailPoint> opera em uma granularidade de 16 MB. Qualquer valor menor que 16 MB é tratados como 16 MB, e outros valores são tratados como o próximo múltiplo maior de 16 MB.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> permite que um aplicativo fique lento em si para evitar a falta de memória de maneira corrompam.  Ele deve ser usado dentro de um escopo léxico.  O exemplo a seguir inicia threads para processar itens em uma fila de trabalho.  Antes de cada thread é iniciado, os recursos de memória disponível são verificados usando <xref:System.Runtime.MemoryFailPoint>.  Se uma exceção for lançada, o método principal aguarda até que a memória está disponível antes de iniciar o próximo segmento.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar código não gerenciado. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Ação de segurança: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">O tamanho da memória necessária, em megabytes. Isso deve ser um valor positivo.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.MemoryFailPoint" />, especificando a quantidade de memória necessária para uma execução bem-sucedida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A quantidade de memória usada pelo seu aplicativo para processar um item de trabalho pode ser determinada empiricamente.  Para estimar a quantidade de memória que seu aplicativo precisa para processar uma solicitação, considere usar o <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> método para determinar a quantidade de memória disponível antes e depois chamar o método que processa o item de trabalho. Consulte a <xref:System.Runtime.MemoryFailPoint> classe para um exemplo de código que determina dinamicamente o valor para o `sizeInMegabytes` parâmetro.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como determinar a quantidade de memória que exige que um método durante a execução. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Runtime.MemoryFailPoint> classe.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O tamanho de memória especificado é negativo.</exception>
        <exception cref="T:System.InsufficientMemoryException">Não há memória suficiente para iniciar a execução do código protegido pelo portão.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requer confiança total para o chamador imediato. Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pelo <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame <xref:System.Runtime.MemoryFailPoint.Dispose%2A> quando tiver terminado de usar o <xref:System.Runtime.MemoryFailPoint>. O <xref:System.Runtime.MemoryFailPoint.Dispose%2A> método deixa o <xref:System.Runtime.MemoryFailPoint> em um estado inutilizável. Depois de chamar <xref:System.Runtime.MemoryFailPoint>, você deve liberar todas as referências para o <xref:System.Runtime.MemoryFailPoint> para que o coletor de lixo possa recuperar a memória que o <xref:System.Runtime.MemoryFailPoint> estava ocupando. Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Sempre chamar <xref:System.Runtime.MemoryFailPoint.Dispose%2A> antes de liberar sua última referência para o <xref:System.Runtime.MemoryFailPoint>. Caso contrário, os recursos que ele está usando não serão liberados até que o coletor de lixo chame o <xref:System.Runtime.MemoryFailPoint> do objeto `Finalize` método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Garante que os recursos são liberados e outras operações de limpeza são executadas quando o coletor de lixo recupera o objeto <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O coletor de lixo chama o <xref:System.Runtime.MemoryFailPoint.Finalize%2A> método quando o objeto atual está pronto para ser finalizado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>