<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52590225" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="65948-101">Fornece um meio para invocar um fluxo de trabalho como se ele fosse uma chamada de método.</span>
      <span class="sxs-lookup">
        <span data-stu-id="65948-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-102"><xref:System.Activities.WorkflowInvoker> contém a instância e métodos estáticos para chamar fluxos de trabalho de forma síncrona e métodos de instância para chamar fluxos de trabalho de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="65948-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="65948-103"><xref:System.Activities.WorkflowInvoker> não permitir o controle de instância, como a persistência, descarregamento ou continuando indicadores.</span><span class="sxs-lookup"><span data-stu-id="65948-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="65948-104">Se o controle de instância for desejado, use <xref:System.Activities.WorkflowApplication> em vez disso.</span><span class="sxs-lookup"><span data-stu-id="65948-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="65948-105">Para executar fluxos de trabalho de forma síncrona com nenhum controle de instância, chame o <xref:System.Activities.WorkflowInvoker.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="65948-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="65948-106">Para executar um fluxo de trabalho assincronamente com nenhum controle de instância, use o <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> e <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> pares de métodos, ou o <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="65948-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-107">O exemplo a seguir invoca forma síncrona um fluxo de trabalho consiste em uma única <xref:System.Activities.Statements.WriteLine> atividade usando <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="65948-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="65948-108">A definição do fluxo de trabalho a ser invocado por esta instância da classe <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-109">Inicializa uma nova instância da classe <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-110"><xref:System.Activities.WorkflowInvoker> contém a instância e métodos estáticos para chamar fluxos de trabalho de forma síncrona e métodos de instância para chamar fluxos de trabalho de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="65948-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-111">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única <xref:System.Activities.Statements.WriteLine> atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="65948-112">Invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono do <see cref="T:System.IAsyncResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-113">Para obter mais informações, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="65948-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="65948-114">O método a ser chamado quando o fluxo de trabalho tiver sido concluído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="65948-115">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-116">Invoca um fluxo de trabalho usando de forma assíncrona o <see cref="T:System.AsyncCallback" /> especificado e o estado fornecido pelo usuário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-117">Uma referência à operação invocar assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-118">Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> do `callback` método.</span><span class="sxs-lookup"><span data-stu-id="65948-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="65948-119">Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> é chamado antes que o fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</span><span class="sxs-lookup"><span data-stu-id="65948-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="65948-120">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-121">Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono.</span><span class="sxs-lookup"><span data-stu-id="65948-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="65948-122">Para obter mais informações, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="65948-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-123">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-124">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-125">Esses são recuperadas chamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="65948-126">Quando a chamada para <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-127">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="65948-128">O método a ser chamado quando o fluxo de trabalho tiver sido concluído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="65948-129">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-130">Invoca um fluxo de trabalho de forma assíncrona usando o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada, o <see cref="T:System.AsyncCallback" /> e o estado fornecido pelo usuário especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-131">Uma referência à operação invocar assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-132">Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> do `callback` método.</span><span class="sxs-lookup"><span data-stu-id="65948-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="65948-133">Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> é chamado antes que o fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</span><span class="sxs-lookup"><span data-stu-id="65948-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="65948-134">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-135">Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono.</span><span class="sxs-lookup"><span data-stu-id="65948-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="65948-136">Para obter mais informações, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="65948-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-137">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-138">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-139">Esses são recuperadas chamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="65948-140">Quando a chamada para <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="65948-141">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="65948-142">O método a ser chamado quando o fluxo de trabalho tiver sido concluído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="65948-143">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-144">Invoca um fluxo de trabalho de forma assíncrona usando o intervalo de tempo limite, a <see cref="T:System.AsyncCallback" /> e o estado fornecido pelo usuário especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-145">Uma referência à operação invocar assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-146">Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> do `callback` método.</span><span class="sxs-lookup"><span data-stu-id="65948-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="65948-147">Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> é chamado antes que o fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</span><span class="sxs-lookup"><span data-stu-id="65948-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="65948-148">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho será anulado e uma <xref:System.TimeoutException> é lançada quando o <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="65948-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-149"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-150">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="65948-151">Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono.</span><span class="sxs-lookup"><span data-stu-id="65948-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="65948-152">Para obter mais informações, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="65948-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-153">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-154">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-155">Esses são recuperadas chamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="65948-156">Quando a chamada para <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-157">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-158">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="65948-159">O método a ser chamado quando o fluxo de trabalho tiver sido concluído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="65948-160">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-161">Invoca um fluxo de trabalho de forma assíncrona usando o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada, o intervalo de tempo limite, o <see cref="T:System.AsyncCallback" /> e o estado fornecido pelo usuário especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-162">Uma referência à operação invocar assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-163">Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> do `callback` método.</span><span class="sxs-lookup"><span data-stu-id="65948-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="65948-164">Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> é chamado antes que o fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</span><span class="sxs-lookup"><span data-stu-id="65948-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="65948-165">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho será anulado e uma <xref:System.TimeoutException> é lançada quando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> é chamado.</span><span class="sxs-lookup"><span data-stu-id="65948-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-166"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-167">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="65948-168">Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono.</span><span class="sxs-lookup"><span data-stu-id="65948-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="65948-169">Para obter mais informações, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="65948-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-170">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-171">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-172">Esses são recuperadas chamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="65948-173">Quando a chamada para <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="65948-174">O token do fluxo de trabalho a ser cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-175">As tentativas de cancelar o fluxo de trabalho que foi invocado com o <paramref name="userState" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-176">Apenas um fluxo de trabalho invocado por um dos <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas que usa um `userState` parâmetro pode ser cancelado.</span><span class="sxs-lookup"><span data-stu-id="65948-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="65948-177">Se o cancelamento for bem-sucedida, o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriedade do <xref:System.Activities.InvokeCompletedEventArgs> passado para o <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador é definido como `true`; caso contrário, ele é definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="65948-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-178">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-179">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-180">Depois que o fluxo de trabalho é invocado, o host tenta cancelar o fluxo de trabalho.</span><span class="sxs-lookup"><span data-stu-id="65948-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="65948-181">O <see cref="T:System.IAsyncResult" /> que referencia a operação <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> que iniciou o fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-182">Retorna os resultados de um fluxo de trabalho que foi invocado usando uma das sobrecargas de <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-183">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-183">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-184">Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> do `callback` o método especificado pelo <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="65948-185">Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> é chamado antes que o fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</span><span class="sxs-lookup"><span data-stu-id="65948-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="65948-186">Esse método retorna o resultado de um fluxo de trabalho invocado de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono.</span><span class="sxs-lookup"><span data-stu-id="65948-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="65948-187">Para obter mais informações, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="65948-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-188">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-189">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-190">Esses são recuperadas chamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="65948-191">Quando a chamada para <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65948-192">Obtém a <see cref="T:System.Collections.ObjectModel.Collection`1" /> de extensões que estão disponíveis para os fluxos de trabalho invocados por uma instância do <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65948-193">O <see cref="T:System.Collections.ObjectModel.Collection`1" /> das extensões que estão disponíveis para os fluxos de trabalho invocados por um <see cref="T:System.Activities.WorkflowInvoker" /> instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-194">Essa propriedade é usada por autores de host de fluxo de trabalho para adicionar extensões para o <xref:System.Activities.WorkflowInvoker> da instância para que eles estarão disponíveis para os fluxos de trabalho invocados por ele.</span><span class="sxs-lookup"><span data-stu-id="65948-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-195">O exemplo a seguir registra um personalizado <xref:System.Activities.Tracking.TrackingParticipant> com o <xref:System.Activities.WorkflowInvoker.Extensions%2A> coleção de um <xref:System.Activities.WorkflowInvoker> instância.</span><span class="sxs-lookup"><span data-stu-id="65948-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="65948-196">Este exemplo de código é parte do [acompanhamento personalizado](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) exemplo.</span><span class="sxs-lookup"><span data-stu-id="65948-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="65948-197">Invoca um fluxo de trabalho de forma síncrona e retorna um dicionário de <see cref="T:System.Activities.OutArgument" /> da atividade raiz e valores de <see cref="T:System.Activities.InOutArgument" /> inseridos por nome de argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-197">Invokes a workflow synchronously and returns a dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-198">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-199">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-200">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65948-201">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho passada para o construtor de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-202">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-202">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-203">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-204">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-205">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-206">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única `DiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="65948-207">A atividade de `DiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-208">Quando a chamada para `Invoke` retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="65948-209">O fluxo de trabalho é chamado duas vezes, usando a definição de fluxo de trabalho passada para o `WorkflowInvoker` construtor.</span><span class="sxs-lookup"><span data-stu-id="65948-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="65948-210">Se a atividade de raiz do fluxo de trabalho não tiver nenhum argumento de saída ou eles não são necessários pelo host, ele podem ser desconsiderados.</span><span class="sxs-lookup"><span data-stu-id="65948-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="65948-211">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única <xref:System.Activities.Statements.WriteLine> argumentos de atividade que não tem nenhuma saída.</span><span class="sxs-lookup"><span data-stu-id="65948-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="65948-212">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-213">Invoca um fluxo de trabalho usando a definição de fluxo de trabalho especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-214">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-214">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-215">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-216">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-217">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-218">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única `DiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="65948-219">A atividade de `DiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-220">Quando a chamada para `Invoke` retorna, cada argumento de saída é retornado no dicionário de saídas, chaveado segundo o nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="65948-221">Se a atividade de raiz do fluxo de trabalho não tiver nenhum argumento de saída ou eles não são necessários pelo host, ele podem ser desconsiderados.</span><span class="sxs-lookup"><span data-stu-id="65948-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="65948-222">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única <xref:System.Activities.Statements.WriteLine> argumentos de atividade que não tem nenhuma saída.</span><span class="sxs-lookup"><span data-stu-id="65948-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-223">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-224">Invoca a atividade passada para o construtor <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> de forma síncrona com o <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado dos parâmetros de entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-225">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-225">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-226">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-227">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-228">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-229">O exemplo a seguir chama um fluxo de trabalho que consiste em uma única atividade de `Divide` que tem dois argumentos conectados e dois argumentos de saída.</span><span class="sxs-lookup"><span data-stu-id="65948-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="65948-230">Quando o fluxo de trabalho é chamado, o dicionário de `arguments` é passado que contém os valores para cada argumento de entrada, fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="65948-231">Quando o `Invoke` a chamada retorna, cada argumento de saída é retornado no dicionário de `outputs` , também fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="65948-232">Se o fluxo de trabalho deriva <xref:System.Activities.ActivityWithResult>, como `CodeActivity<TResult>` ou `Activity<TResult>`, e há argumentos de saída além bem definido <xref:System.Activities.Activity%601.Result%2A> saída argumento, uma sobrecarga não genérico de `Invoke`, como esta, deve ser usado em ordem para recuperar os argumentos adicionais.</span><span class="sxs-lookup"><span data-stu-id="65948-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="65948-233">Para fazer isso, a definição de fluxo de trabalho é passado para o `WorkflowInvoker` construtor deve ser do tipo <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="65948-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="65948-234">Neste exemplo o `Divide` atividade deriva `CodeActivity<int>`, mas é declarado como <xref:System.Activities.Activity> para que essa sobrecarga de `Invoke`, que retorna um dicionário de argumentos em vez de um único valor de retorno é usado.</span><span class="sxs-lookup"><span data-stu-id="65948-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="65948-235">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-236">Invoca um fluxo de trabalho de forma síncrona com o intervalo de tempo limite especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-237">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-237">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-238">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-239">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-240">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-241"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-242">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-243">O exemplo a seguir invoca um fluxo de trabalho que contém duas <xref:System.Activities.Statements.WriteLine> atividades e um <xref:System.Activities.Statements.Delay> atividade configurada com um <xref:System.Activities.Statements.Delay.Duration%2A> de um minuto.</span><span class="sxs-lookup"><span data-stu-id="65948-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="65948-244">Esse fluxo de trabalho é chamado duas vezes; na primeira vez com um intervalo de tempo limite de dois minutos e a segunda vez com um intervalo de tempo limite de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="65948-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="65948-245">O primeiro fluxo de trabalho for concluído com êxito, mas o outro não e um <xref:System.TimeoutException> é lançada e a seguinte mensagem é exibida.</span><span class="sxs-lookup"><span data-stu-id="65948-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="65948-246">Para obter um exemplo de uso `Invoke` com argumentos de saída, consulte a sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> com os mesmos parâmetros que essa sobrecarga sem o intervalo de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="65948-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="65948-247">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="65948-248">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-249">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho especificada e <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-250">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-250">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-251">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-252">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-253">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-254">O exemplo a seguir chama um fluxo de trabalho que consiste em uma única atividade de `Divide` que tem dois argumentos conectados e dois argumentos de saída.</span><span class="sxs-lookup"><span data-stu-id="65948-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="65948-255">Quando o fluxo de trabalho é chamado, o dicionário de `arguments` é passado que contém os valores para cada argumento de entrada, fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="65948-256">Quando o `Invoke` a chamada retorna, cada argumento de saída é retornado no dicionário de `outputs` , também fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="65948-257">Se o fluxo de trabalho deriva <xref:System.Activities.ActivityWithResult>, como `CodeActivity<TResult>` ou `Activity<TResult>`, e há argumentos de saída além bem definido <xref:System.Activities.Activity%601.Result%2A> saída argumento, uma sobrecarga não genérico de `Invoke`, como esta, deve ser usado em ordem para recuperar os argumentos adicionais.</span><span class="sxs-lookup"><span data-stu-id="65948-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="65948-258">Para fazer isso, a definição de fluxo de trabalho passada em `Invoke` deve ser do tipo <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="65948-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="65948-259">Neste exemplo o `Divide` atividade deriva `CodeActivity<int>`, mas é declarado como <xref:System.Activities.Activity> para que essa sobrecarga de `Invoke`, que retorna um dicionário de argumentos em vez de um único valor de retorno é usado.</span><span class="sxs-lookup"><span data-stu-id="65948-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="65948-260">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-261">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-262">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho e o intervalo de tempo limite especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-263">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-263">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-264">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-265">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-266">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-267"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-268">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-269">O exemplo a seguir invoca um fluxo de trabalho que contém duas <xref:System.Activities.Statements.WriteLine> atividades e um <xref:System.Activities.Statements.Delay> atividade configurada com um <xref:System.Activities.Statements.Delay.Duration%2A> de um minuto.</span><span class="sxs-lookup"><span data-stu-id="65948-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="65948-270">Esse fluxo de trabalho é chamado duas vezes; na primeira vez com um intervalo de tempo limite de dois minutos e a segunda vez com um intervalo de tempo limite de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="65948-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="65948-271">O primeiro fluxo de trabalho for concluído com êxito, mas o outro não e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="65948-272">Para obter um exemplo de uso `Invoke` com argumentos de saída, consulte a sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> com os mesmos parâmetros que essa sobrecarga sem o intervalo de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="65948-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-273">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-274">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-275">Invoca a atividade passada para o construtor de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> de forma síncrona com os parâmetros de entrada de <see cref="T:System.Collections.Generic.IDictionary`2" /> especificados e o intervalo de tempo limite especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-276">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-276">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-277">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-278">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-279">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-280"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-281">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-282">O exemplo a seguir invoca um fluxo de trabalho que contém duas <xref:System.Activities.Statements.WriteLine> atividades e um <xref:System.Activities.Statements.Delay> atividade configurada com um <xref:System.Activities.Statements.Delay.Duration%2A> de um minuto.</span><span class="sxs-lookup"><span data-stu-id="65948-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="65948-283">Esse fluxo de trabalho é chamado duas vezes; na primeira vez com um intervalo de tempo limite de dois minutos e a segunda vez com um intervalo de tempo limite de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="65948-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="65948-284">O primeiro fluxo de trabalho for concluído com êxito, mas o outro não e um <xref:System.TimeoutException> é lançada e a seguinte mensagem é exibida.</span><span class="sxs-lookup"><span data-stu-id="65948-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="65948-285">Para obter um exemplo de uso `Invoke` com argumentos de entrada e saídos, consulte a sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> com os mesmos parâmetros que essa sobrecarga sem o intervalo de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="65948-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="65948-286">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="65948-287">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-288">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-289">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho, o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada e o intervalo de tempo limite especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-290">Um dicionário dos valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> da atividade raiz inseridos pelo nome do argumento que representam as saídas do fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-290">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-291">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-292">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-293">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-294"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-295">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-296">O exemplo a seguir invoca um fluxo de trabalho que contém duas <xref:System.Activities.Statements.WriteLine> atividades e um <xref:System.Activities.Statements.Delay> atividade configurada com um <xref:System.Activities.Statements.Delay.Duration%2A> de um minuto.</span><span class="sxs-lookup"><span data-stu-id="65948-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="65948-297">Esse fluxo de trabalho é chamado duas vezes; na primeira vez com um intervalo de tempo limite de dois minutos e a segunda vez com um intervalo de tempo limite de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="65948-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="65948-298">O primeiro fluxo de trabalho for concluído com êxito, mas o outro não e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="65948-299">Para obter um exemplo de uso `Invoke` com argumentos de entrada e saídos, consulte a sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> com os mesmos parâmetros que essa sobrecarga sem o intervalo de tempo limite.</span><span class="sxs-lookup"><span data-stu-id="65948-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="65948-300">O tipo de fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="65948-301">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="65948-302">A definição de fluxo de trabalho precisa ser derivada de <see cref="T:System.Activities.ActivityWithResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-303">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho passada para o construtor de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-304">Um valor do tipo TResult com o resultado da execução da atividade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-305">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-306">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-307">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-308">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única `Add` atividade que tem dois argumentos de entrada e como ele deriva `CodeActivity<int>` houver bem-definidos <xref:System.Activities.Activity%601.Result%2A> argumento de saída.</span><span class="sxs-lookup"><span data-stu-id="65948-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="65948-309">Quando o fluxo de trabalho é chamado, o dicionário de `arguments` é passado que contém os valores para cada argumento de entrada, fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="65948-310">Quando a chamada para `Invoke` retorna o valor da <xref:System.Activities.Activity%601.Result%2A> argumento de saída é retornado.</span><span class="sxs-lookup"><span data-stu-id="65948-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="65948-311">Este exemplo de código é baseado fora do [usando a classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemplo.</span><span class="sxs-lookup"><span data-stu-id="65948-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="65948-312">O tipo de fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="65948-313">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="65948-314">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-315">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho especificada e <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-316">Um valor do tipo TResult com o resultado da execução da atividade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-317">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-318">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-319">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.Invoke%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-320"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-321">Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída, concluída com êxito se o fluxo de trabalho se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-322">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única `Add` atividade que tem dois argumentos de entrada e como ele deriva `CodeActivity<int>` houver bem-definidos <xref:System.Activities.Activity%601.Result%2A> argumento de saída.</span><span class="sxs-lookup"><span data-stu-id="65948-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="65948-323">Quando o fluxo de trabalho é chamado, o dicionário de `arguments` é passado que contém os valores para cada argumento de entrada, fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="65948-324">Quando a chamada para `Invoke` retorna o valor da <xref:System.Activities.Activity%601.Result%2A> argumento de saída é retornado.</span><span class="sxs-lookup"><span data-stu-id="65948-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="65948-325">Este exemplo de código é baseado fora do [usando a classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemplo.</span><span class="sxs-lookup"><span data-stu-id="65948-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="65948-326">O tipo de fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="65948-327">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="65948-328">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-329">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-330">Invoca um fluxo de trabalho de forma síncrona usando a definição de fluxo de trabalho, o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada e o intervalo de tempo limite especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-331">Um valor do tipo TResult com o resultado da execução da atividade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-332">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-333">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-334">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-335"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-336">Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída, concluída com êxito se o fluxo de trabalho se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-337">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única `Add` atividade que tem dois argumentos de entrada e como ele deriva `CodeActivity<int>` houver bem-definidos <xref:System.Activities.Activity%601.Result%2A> argumento de saída.</span><span class="sxs-lookup"><span data-stu-id="65948-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="65948-338">Quando o fluxo de trabalho é chamado, o dicionário de `arguments` é passado que contém os valores para cada argumento de entrada, fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="65948-339">Quando a chamada para `Invoke` retorna o valor da <xref:System.Activities.Activity%601.Result%2A> argumento de saída é retornado.</span><span class="sxs-lookup"><span data-stu-id="65948-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="65948-340">Este exemplo de código é baseado fora do [usando a classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemplo.</span><span class="sxs-lookup"><span data-stu-id="65948-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="65948-341">O tipo de fluxo de trabalho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="65948-342">A definição de fluxo de trabalho do fluxo de trabalho a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="65948-343">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="65948-344">O dicionário de parâmetros de saída adicionais do fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-345">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-346">Invoca um fluxo de trabalho usando a definição de fluxo de trabalho, o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada, o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de saída adicionais e o intervalo de tempo limite especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65948-347">Um valor do tipo TResult com o resultado da execução da atividade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-348">Este blocos de método até que o fluxo de trabalho for concluído, incluindo o tempo ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="65948-349">Toda a execução de fluxo de trabalho é garantida para executar no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="65948-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="65948-350">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-351"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-352">Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída, concluída com êxito se o fluxo de trabalho se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-353">O exemplo a seguir invoca um fluxo de trabalho consiste em uma única `Add` atividade que tem dois argumentos de entrada e como ele deriva `CodeActivity<int>` houver bem-definidos <xref:System.Activities.Activity%601.Result%2A> argumento de saída.</span><span class="sxs-lookup"><span data-stu-id="65948-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="65948-354">Quando o fluxo de trabalho é chamado, o dicionário de `arguments` é passado que contém os valores para cada argumento de entrada, fechado pelo nome do argumento.</span><span class="sxs-lookup"><span data-stu-id="65948-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="65948-355">Quando a chamada para `Invoke` retorna o valor da <xref:System.Activities.Activity%601.Result%2A> argumento de saída é retornado.</span><span class="sxs-lookup"><span data-stu-id="65948-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="65948-356">Este exemplo de código é baseado fora do [usando a classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemplo.</span><span class="sxs-lookup"><span data-stu-id="65948-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="65948-357">Invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-358">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-359">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-360">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-361">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65948-362">Invoca um fluxo de trabalho de forma assíncrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-363">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-364">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-365">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-366">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-367">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-368">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-369">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-370">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-371">Invoca um fluxo de trabalho de forma assíncrona usado o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-372">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-373">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-374">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-375">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-376">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-377">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-378">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="65948-379">Um objeto fornecido pelo usuário usado para distinguir esta operação de invocação assíncrona específica das outras operações de invocação assíncrona atuais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-380">Invoca um fluxo de trabalho de forma assíncrona usando o identificador exclusivo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-381">O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operações para a atividade atual.</span><span class="sxs-lookup"><span data-stu-id="65948-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="65948-382">Se o `userState` parâmetro não é exclusivo, um <xref:System.ArgumentException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="65948-383">`userState` é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="65948-384">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-385">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-386">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-387">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-388">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-389">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-390">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="65948-391">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-392">Invoca um fluxo de trabalho de forma assíncrona com o intervalo de tempo limite especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-393">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-394">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-395"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-396">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="65948-397">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-398">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-399">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-400">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-401">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-402">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="65948-403">Um objeto fornecido pelo usuário usado para distinguir esta operação de invocação assíncrona específica das outras operações de invocação assíncrona atuais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-404">Invoca um fluxo de trabalho de forma assíncrona usando o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada especificado e um identificador exclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-405">O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operações para a atividade atual.</span><span class="sxs-lookup"><span data-stu-id="65948-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="65948-406">Se `userState` não é exclusivo, um <xref:System.ArgumentException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="65948-407">`userState` é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="65948-408">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-409">Para configurar um intervalo de tempo limite no qual o fluxo de trabalho deve ser concluída, use um dos <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas que aceitam um <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="65948-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="65948-410">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-411">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-412">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-413">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-414">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-415">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-416">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-417">Invoca um fluxo de trabalho de forma assíncrona com o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada especificado e o intervalo de tempo limite especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-418">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-419">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-420"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-421">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="65948-422">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-423">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-424">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-425">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-426">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="65948-427">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="65948-428">Um objeto fornecido pelo usuário usado para distinguir esta operação de invocação assíncrona específica das outras operações de invocação assíncrona atuais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-429">Invoca um fluxo de trabalho de forma assíncrona com o intervalo de tempo limite especificado e um identificador exclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-430">O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operações para a atividade atual.</span><span class="sxs-lookup"><span data-stu-id="65948-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="65948-431">Se `userState` não é exclusivo, um <xref:System.ArgumentException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="65948-432">`userState` é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="65948-433">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-434">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-435"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-436">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="65948-437">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-438">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-439">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-440">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-441">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="65948-442">O dicionário de parâmetros de entrada para o fluxo de trabalho, inseridos por nome de argumento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="65948-443">O intervalo no qual o fluxo de trabalho deve ser concluído antes de ele ser anulado e um <see cref="T:System.TimeoutException" /> ser gerado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="65948-444">Um objeto fornecido pelo usuário usado para distinguir esta operação de invocação assíncrona específica das outras operações de invocação assíncrona atuais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65948-445">Invoca um fluxo de trabalho de forma assíncrona com o <see cref="T:System.Collections.Generic.IDictionary`2" /> de parâmetros de entrada especificado, o intervalo de tempo limite especificado e um identificador exclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-446">O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operações para a atividade atual.</span><span class="sxs-lookup"><span data-stu-id="65948-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="65948-447">Se `userState` não é exclusivo, um <xref:System.ArgumentException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="65948-448">`userState` é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="65948-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="65948-449">Para ser notificado quando o fluxo de trabalho for concluído, lidar com <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="65948-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="65948-450">Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho é anulada e um <xref:System.TimeoutException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="65948-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65948-451"><xref:System.TimeoutException> é acionada somente se o intervalo de tempo limite decorre e fluxo de trabalho se torna ocioso durante a execução.</span><span class="sxs-lookup"><span data-stu-id="65948-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="65948-452">Um fluxo de trabalho que recebe mais tempo do intervalo de tempo limite especificado para concluir concluída com êxito se o fluxo de trabalho não se torna ocioso.</span><span class="sxs-lookup"><span data-stu-id="65948-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="65948-453">Esse método invoca um fluxo de trabalho de forma assíncrona usando o padrão de design assíncrono baseado em evento.</span><span class="sxs-lookup"><span data-stu-id="65948-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="65948-454">Para mais informações, consulte [Visão geral sobre o padrão assíncrono baseado em evento](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="65948-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-455">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-456">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-457">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65948-458">Ocorre quando o fluxo de trabalho invocado por uma das sobrecargas de <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> é concluído ou cancelado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65948-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65948-459">Lidar com isso para determinar se um fluxo de trabalho chamado com um do <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> sobrecargas foi concluídas com êxito e para recuperar os argumentos de saída de fluxo de trabalho concluído.</span><span class="sxs-lookup"><span data-stu-id="65948-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65948-460">O exemplo a seguir invoca um fluxo de trabalho consiste em um `LongRunningDiceRoll` atividade.</span><span class="sxs-lookup"><span data-stu-id="65948-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="65948-461">A atividade de `LongRunningDiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados.</span><span class="sxs-lookup"><span data-stu-id="65948-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="65948-462">Quando o fluxo de trabalho for concluído estes são recuperados a <xref:System.Activities.WorkflowInvoker.InvokeCompleted> manipulador.</span><span class="sxs-lookup"><span data-stu-id="65948-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>