<Type Name="Handle" FullName="System.Activities.Handle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f21db137592d43bc32c2d5e184edc79b77804b6d" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52606345" /></Metadata><TypeSignature Language="C#" Value="public abstract class Handle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Handle extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Handle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Handle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Handle abstract" />
  <TypeSignature Language="F#" Value="type Handle = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um tipo que tem seu tempo de vida controlado pelo tempo de execução do fluxo de trabalho.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipos derivados de <xref:System.Activities.Handle> têm seus tempos de vida controlados pelo tempo de execução do fluxo de trabalho. Para variáveis de fluxo de trabalho dos tipos de identificador, o tempo de execução usa o construtor padrão necessárias para criar uma instância do tipo, atribui-lo para o <xref:System.Activities.Variable>e chamadas <xref:System.Activities.Handle.OnInitialize%2A> ao inicializar o ambiente. Quando a variável sai do escopo, <xref:System.Activities.Handle.OnUninitialize%2A> é chamado.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Handle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Handle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Activities.Handle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes que derivam de <xref:System.Activities.Handle> deve fornecer um construtor padrão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionPropertyName">
      <MemberSignature Language="C#" Value="public string ExecutionPropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExecutionPropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Handle.ExecutionPropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionPropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExecutionPropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutionPropertyName : string" Usage="System.Activities.Handle.ExecutionPropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome a ser usado por este <see cref="T:System.Activities.Handle" /> quando adicionado às propriedades de execução de uma atividade.</summary>
        <value>O nome do tipo derivado conforme fornecido por <see cref="P:System.Type.FullName" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialize (System.Activities.HandleInitializationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialize(class System.Activities.HandleInitializationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.OnInitialize(System.Activities.HandleInitializationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialize (context As HandleInitializationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialize(System::Activities::HandleInitializationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Activities.HandleInitializationContext -&gt; unit&#xA;override this.OnInitialize : System.Activities.HandleInitializationContext -&gt; unit" Usage="handle.OnInitialize context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.HandleInitializationContext" />
      </Parameters>
      <Docs>
        <param name="context">O ambiente no qual o identificador está sendo criado.</param>
        <summary>Chamado pelo tempo de execução do fluxo de trabalho quando o ambiente que contém o <see cref="T:System.Activities.Handle" /> é inicializado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUninitialize">
      <MemberSignature Language="C#" Value="protected virtual void OnUninitialize (System.Activities.HandleInitializationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUninitialize(class System.Activities.HandleInitializationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUninitialize (context As HandleInitializationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUninitialize(System::Activities::HandleInitializationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member OnUninitialize : System.Activities.HandleInitializationContext -&gt; unit&#xA;override this.OnUninitialize : System.Activities.HandleInitializationContext -&gt; unit" Usage="handle.OnUninitialize context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.HandleInitializationContext" />
      </Parameters>
      <Docs>
        <param name="context">O ambiente no qual o identificador foi criado.</param>
        <summary>Chamado pelo tempo de execução do fluxo de trabalho quando a <see cref="T:System.Activities.Variable" /> do <see cref="T:System.Activities.Handle" /> sai do escopo.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Activities.ActivityInstance Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.ActivityInstance Owner" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Handle.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As ActivityInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::ActivityInstance ^ Owner { System::Activities::ActivityInstance ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Activities.ActivityInstance" Usage="System.Activities.Handle.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.ActivityInstance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a <see cref="T:System.Activities.ActivityInstance" /> que contém a <see cref="T:System.Activities.Variable" /> que contém o <see cref="T:System.Activities.Handle" />.</summary>
        <value>A instância de atividade que contém o <see cref="T:System.Activities.Variable" /> que contém o <see cref="T:System.Activities.Handle" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfUninitialized">
      <MemberSignature Language="C#" Value="protected void ThrowIfUninitialized ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ThrowIfUninitialized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.ThrowIfUninitialized" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ThrowIfUninitialized ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ThrowIfUninitialized();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfUninitialized : unit -&gt; unit" Usage="handle.ThrowIfUninitialized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gera uma <see cref="T:System.InvalidOperationException" /> quando o <see cref="T:System.Activities.Handle" /> não é inicializado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Handle.ThrowIfUninitialized%2A> Fornece um método conveniente para chamar a partir de todos os métodos ou propriedades da classe derivada que não são válidas de autores de classe do identificador personalizado derivado se o <xref:System.Activities.Handle> não foi inicializada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>