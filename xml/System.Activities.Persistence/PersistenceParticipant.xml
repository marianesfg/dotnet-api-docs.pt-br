<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa2e99298a9810e8d7420e251d5691da39b8654a" />
    <Meta Name="ms.sourcegitcommit" Value="44933aff38db926168781f50300446344189a04d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/16/2018" />
    <Meta Name="ms.locfileid" Value="39064819" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <TypeSignature Language="F#" Value="type PersistenceParticipant = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Essa classe permite que ambos <see cref="T:System.Activities.WorkflowApplication" /> e <see cref="T:System.ServiceModel.WorkflowServiceHost" /> participem no processo de persistência. Um participante de persistência deriva da classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> ou <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> (classe derivada da classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" />), implementa métodos abstratos e adiciona uma instância da classe como uma extensão da instância do fluxo de trabalho. O <see cref="T:System.Activities.WorkflowApplication" /> e <see cref="T:System.ServiceModel.WorkflowServiceHost" /> procuram por tais extensões ao persistirem uma instância e invocarem os métodos apropriados em momentos apropriados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um host executa as seguintes etapas (ou estágios) quando manter uma instância de:  
  
1.  Coleta os valores a serem persistidos.  
  
2.  Mapeia os campos de valores estruturados monolíticos para valores individuais.  
  
3.  Problemas de <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> para o provedor de persistência.  
  
4.  Desempenho de e/s sob a transação de persistência.  
  
 Um host conclui uma etapa antes de começar o próximo estágio. Por exemplo, ao persistir, o host coleta valores de todos os participantes de persistência antes de passar para o segundo estágio. Na segunda etapa, o host fornece todos os valores coletados na primeira etapa para todos os participantes de persistência no segundo estágio de mapeamento. Na terceira etapa, o host fornece todos os valores coletados nos estágios primeiros e segundo para o provedor de persistência ao invocar o <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>. Em seguida, na quarta fase, o host fornece todos os valores coletados para todos os participantes de e/s de persistência na transação de persistência.  
  
 Um host executa os seguintes estágios ao carregar uma instância de persistência:  
  
1.  Problemas de <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> e <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> para o provedor de persistência.  
  
2.  Desempenho de e/s sob a transação de persistência.  
  
3.  Publica os valores carregados.  
  
 Em que as extensões de instância de fluxo de trabalho de nível, mais altas que derivam de <xref:System.Activities.Persistence.PersistenceParticipant> classe pode participar (coletar) primeiro e segundo estágios (Map) do processo de persistência e o terceiro estágio (publicar) do processo de carregamento.  Extensões de instância de fluxo de trabalho, derivando da classe de PersistenceIOParticipant adicionalmente podem participar a quarta etapa do processo de persistência e o segundo estágio do processo de carregamento (e/s).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma classe que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este exemplo é do [processo de contratação](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) exemplo.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma instância da classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma classe que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este exemplo é do [processo de contratação](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) exemplo.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member CollectValues :  *  -&gt; unit&#xA;override this.CollectValues :  *  -&gt; unit" Usage="persistenceParticipant.CollectValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Os valores de leitura/gravação a serem persistidos.</param>
        <param name="writeOnlyValues">Os valores somente gravação a serem persistidos.</param>
        <summary>Um host invoca esse método em um participante de persistência personalizado para coletar valores de leitura/gravação e valores somente gravação a serem persistidos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valores de leitura / gravação no dicionário primeiro como pacotes do host <xref:System.Runtime.DurableInstancing.InstanceValue> objetos de um <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> coleção e valores somente gravação de pacotes no dicionário de segundo como <xref:System.Runtime.DurableInstancing.InstanceValue> objetos com <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> e <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> sinaliza o conjunto. Para obter mais informações, consulte <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.  
  
> [!IMPORTANT]
>  Cada valor fornecido por implementações de <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> por todos os participantes de persistência dentro de persistência de um episódio deve ter um XName exclusivo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar CollectValues em uma classe que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este exemplo é do [participantes de persistência](~/docs/framework/windows-workflow-foundation/persistence-participants.md) exemplo.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;&#xA;override this.MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;" Usage="persistenceParticipant.MapValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Os valores de leitura/gravação a serem persistidos.</param>
        <param name="writeOnlyValues">Os valores somente gravação a serem persistidos.</param>
        <summary>Um host invoca este método depois de concluir a coleta de valores no primeiro estágio. O host encaminha dois dicionários somente leitura dos valores que coletou de todos os participantes da persistência durante o primeiro estágio (estágio CollectValues) a este método para mapeamento. O host adiciona os valores contidos no dicionário retornado por esse método à coleção de valores somente gravação.</summary>
        <returns>Um dicionário que contém valores adicionais de somente gravação a serem persistidos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada valor fornecido por implementações de todos os <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> métodos por todos os participantes de persistência, incluindo todos os valores coletados no primeiro estágio (estágio CollectValues) devem ter um XName exclusivo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar MapValues em uma classe que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este exemplo é do [processo de compra corporativo](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) exemplo.  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberSignature Language="F#" Value="abstract member PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit&#xA;override this.PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit" Usage="persistenceParticipant.PublishValues readWriteValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Os valores de leitura/gravação que foram carregados do repositório de persistência. Esse dicionário corresponde ao dicionário de valores de leitura/gravação persistidos no episódio de persistência mais recente.</param>
        <summary>O host invoca esse método e passa todos os valores carregados na coleção <see cref="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData" /> (preenchidos pelo <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> ou <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" />) como um parâmetro de dicionário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como usar PublishValues em uma classe que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este exemplo é do [participantes de persistência](~/docs/framework/windows-workflow-foundation/persistence-participants.md) exemplo.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>