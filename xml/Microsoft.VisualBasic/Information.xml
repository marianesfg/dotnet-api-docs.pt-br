<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0818b20d88b4475c4e82d722179c62133eef703" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65135716" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="deb6b-101">O módulo <see langword="Information" /> contém os procedimentos usados para retornar, testar ou verificar informações.</span><span class="sxs-lookup"><span data-stu-id="deb6b-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-102">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca de tempo de execução que fornecem informações de erro, validem dados, determinam os limites de matriz e recuperar informações de tipo e a cor de dados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-103">O exemplo a seguir usa o `VbTypeName` função para retornar nomes de tipo de dados para diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="deb6b-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="deb6b-104">Informações e resumo da interação</span><span class="sxs-lookup"><span data-stu-id="deb6b-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="deb6b-105">Resumo de tipos de dados</span><span class="sxs-lookup"><span data-stu-id="deb6b-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="deb6b-106">Resumo de declarações e constantes</span><span class="sxs-lookup"><span data-stu-id="deb6b-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="deb6b-107">Palavras-chave (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="deb6b-108">Membros de biblioteca de tempo de execução do Visual Basic</span><span class="sxs-lookup"><span data-stu-id="deb6b-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="deb6b-109">Retorna um inteiro que indica o número de linha da última instrução executada.</span><span class="sxs-lookup"><span data-stu-id="deb6b-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="deb6b-110">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="deb6b-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="deb6b-111">Retorna um inteiro que indica o número de linha da última instrução executada.</span><span class="sxs-lookup"><span data-stu-id="deb6b-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="deb6b-112">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="deb6b-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-113">Se o Visual Basic encontrar sem números de linha, ele retorna 0.</span><span class="sxs-lookup"><span data-stu-id="deb6b-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-114">Este exemplo usa o `Erl` propriedade para indicar o número de linha.</span><span class="sxs-lookup"><span data-stu-id="deb6b-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="deb6b-115">Contém informações sobre erros de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="deb6b-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="deb6b-116">Contém informações sobre erros de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="deb6b-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-117">As propriedades do `Err` objeto são definidas pelo gerador de um erro - o Visual Basic, um objeto ou o programador.</span><span class="sxs-lookup"><span data-stu-id="deb6b-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="deb6b-118">Quando ocorre um erro de tempo de execução, as propriedades do `Err` são preenchidas com informações que identificam exclusivamente o erro do objeto e que você pode usar para manipular o erro.</span><span class="sxs-lookup"><span data-stu-id="deb6b-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="deb6b-119">Para gerar um erro de tempo de execução em seu código, use o `Raise` método.</span><span class="sxs-lookup"><span data-stu-id="deb6b-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="deb6b-120">O `Err` propriedades do objeto são redefinidas para zero ou cadeias de caracteres de comprimento zero ("") após uma `Exit Sub`, `Exit Function`, `Exit Property`, ou `Resume Next` instrução dentro de uma rotina de tratamento de erros.</span><span class="sxs-lookup"><span data-stu-id="deb6b-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="deb6b-121">Usando qualquer forma do `Resume` não redefinirão instrução fora de uma rotina de tratamento de erros de `Err` propriedades do objeto.</span><span class="sxs-lookup"><span data-stu-id="deb6b-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="deb6b-122">Você pode usar o `Clear` método para redefinir explicitamente `Err`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="deb6b-123">Use o `Raise` método em vez de `Error` instrução para gerar erros de tempo de execução para erros de sistema e módulos de classe.</span><span class="sxs-lookup"><span data-stu-id="deb6b-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="deb6b-124">Sua decisão sobre se deve usar o `Raise` método em outro código depende da riqueza das informações que você deseja retornar.</span><span class="sxs-lookup"><span data-stu-id="deb6b-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="deb6b-125">O `Err` é um objeto intrínseco com escopo global.</span><span class="sxs-lookup"><span data-stu-id="deb6b-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="deb6b-126">Portanto, você não precisa criar uma instância no seu código.</span><span class="sxs-lookup"><span data-stu-id="deb6b-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-127">Este exemplo usa as propriedades do `Err` objeto na construção de uma caixa de diálogo de mensagem de erro.</span><span class="sxs-lookup"><span data-stu-id="deb6b-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="deb6b-128">Observe que, se você usar o `Clear` método primeiro, quando você gera um erro do Visual Basic com o `Raise` método, valores padrão do Visual Basic tornam-se as propriedades do `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="deb6b-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="deb6b-129">Instrução Error</span><span class="sxs-lookup"><span data-stu-id="deb6b-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="deb6b-130">Instrução On Error (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="deb6b-131">Instrução Exit (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="deb6b-132">Instrução Resume</span><span class="sxs-lookup"><span data-stu-id="deb6b-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="deb6b-133">Mensagens de erro (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="deb6b-134">Instrução Try...Catch...Finally (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="deb6b-135">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-135">Required.</span></span> <span data-ttu-id="deb6b-136">Variável <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="deb6b-137">Retorna um valor <see langword="Boolean" /> que indica se uma variável aponta para uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="deb6b-138">Retorna um valor <see langword="Boolean" /> que indica se uma variável aponta para uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-139">`IsArray` Retorna `True` se a variável aponta para uma matriz; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="deb6b-140">`IsArray` é especialmente útil com objetos que podem conter matrizes.</span><span class="sxs-lookup"><span data-stu-id="deb6b-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-141">Este exemplo usa o `IsArray` função para verificar se diversas variáveis de referem a uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="deb6b-142">Matrizes no Visual Basic</span><span class="sxs-lookup"><span data-stu-id="deb6b-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="deb6b-143">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-143">Required.</span></span> <span data-ttu-id="deb6b-144">Expressão <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="deb6b-145">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa um valor de <see langword="Date" /> válido.</span><span class="sxs-lookup"><span data-stu-id="deb6b-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="deb6b-146">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa um valor de <see langword="Date" /> válido.</span><span class="sxs-lookup"><span data-stu-id="deb6b-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-147">`IsDate` Retorna `True` se `Expression` é do <xref:System.DateTime> dados de tipo ou podem ser convertidos nele; caso contrário, ele retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="deb6b-148">O <xref:System.DateTime> tipo de dados contém um valor de data e um valor de tempo.</span><span class="sxs-lookup"><span data-stu-id="deb6b-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="deb6b-149">`IsDate` Retorna `True` se `Expression` representa uma data válida, uma hora válida, ou uma data válida e a hora.</span><span class="sxs-lookup"><span data-stu-id="deb6b-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-150">O exemplo a seguir usa o `IsDate` função para determinar se a diversas variáveis representam válido <xref:System.DateTime> valores.</span><span class="sxs-lookup"><span data-stu-id="deb6b-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="deb6b-151">No exemplo anterior, `IsDate` retorna `True` para as quatro primeiras chamadas e `False` para a última chamada.</span><span class="sxs-lookup"><span data-stu-id="deb6b-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="deb6b-152">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-152">Required.</span></span> <span data-ttu-id="deb6b-153">Expressão <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="deb6b-154">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é avaliada como a classe <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="deb6b-155">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é avaliada como a classe <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-156">`IsDBNull` Retorna `True` se o tipo de dados `Expression` é avaliada como o <xref:System.DBNull> digite; caso contrário, `IsDBNull` retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="deb6b-157">O <xref:System.DBNull?displayProperty=nameWithType> valor indica que o `Object` representa dados ausentes ou inexistentes.</span><span class="sxs-lookup"><span data-stu-id="deb6b-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="deb6b-158">`DBNull` não é o mesmo que `Nothing`, que indica que uma variável ainda não foi inicializada.</span><span class="sxs-lookup"><span data-stu-id="deb6b-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="deb6b-159">`DBNull` também não é o mesmo que uma cadeia de caracteres de comprimento zero (`""`), que às vezes é conhecido como uma cadeia de caracteres nula.</span><span class="sxs-lookup"><span data-stu-id="deb6b-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-160">Este exemplo usa o `IsDBNull` função para determinar se uma variável é avaliada como `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="deb6b-161">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-161">Required.</span></span> <span data-ttu-id="deb6b-162">Expressão <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="deb6b-163">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é um tipo de exceção.</span><span class="sxs-lookup"><span data-stu-id="deb6b-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="deb6b-164">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é um tipo de exceção.</span><span class="sxs-lookup"><span data-stu-id="deb6b-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-165">`IsError` Retorna `True` se a expressão representa uma `Object` variável que deriva a <xref:System.Exception> classe o <xref:System> namespace.</span><span class="sxs-lookup"><span data-stu-id="deb6b-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="deb6b-166">Uma exceção que é derivada de <xref:System.Exception?displayProperty=nameWithType> pode ser capturada com o `Try...Catch...Finally` instruções.</span><span class="sxs-lookup"><span data-stu-id="deb6b-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-167">O exemplo a seguir usa o `IsError` função para verificar se uma expressão representa uma exceção do sistema.</span><span class="sxs-lookup"><span data-stu-id="deb6b-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="deb6b-168">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-168">Required.</span></span> <span data-ttu-id="deb6b-169">Expressão <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="deb6b-170">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa não tem nenhum objeto atribuído a ela.</span><span class="sxs-lookup"><span data-stu-id="deb6b-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="deb6b-171">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa não tem nenhum objeto atribuído a ela.</span><span class="sxs-lookup"><span data-stu-id="deb6b-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-172">`IsNothing` Retorna `True` se a expressão representa uma variável de objeto que atualmente não tem nenhum objeto atribuído a ele; caso contrário, retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="deb6b-173">`IsNothing` tem como objetivo trabalhar em tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="deb6b-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="deb6b-174">Um tipo de valor não pode conter um valor de e será revertido para seu valor padrão se você atribuir `Nothing` a ele.</span><span class="sxs-lookup"><span data-stu-id="deb6b-174">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="deb6b-175">Se você fornecer um tipo de valor em `Expression`, `IsNothing` sempre retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-176">O exemplo a seguir usa o `IsNothing` função para determinar se uma variável de objeto está associada a qualquer instância do objeto.</span><span class="sxs-lookup"><span data-stu-id="deb6b-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="deb6b-177">Tipos de valor e referência</span><span class="sxs-lookup"><span data-stu-id="deb6b-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="deb6b-178">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-178">Required.</span></span> <span data-ttu-id="deb6b-179">Expressão <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="deb6b-180">Retorna um valor <see langword="Boolean" /> que indica se uma expressão pode ser avaliada como um número.</span><span class="sxs-lookup"><span data-stu-id="deb6b-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="deb6b-181">Retorna um valor <see langword="Boolean" /> que indica se uma expressão pode ser avaliada como um número.</span><span class="sxs-lookup"><span data-stu-id="deb6b-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-182">`IsNumeric` Retorna `True` se o tipo de dados `Expression` é `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, ou `UShort`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="deb6b-183">Ele também retorna `True` se `Expression` é um `Char`, `String`, ou `Object` que pode ser convertido com êxito em um número.</span><span class="sxs-lookup"><span data-stu-id="deb6b-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="deb6b-184">`Expression` pode conter caracteres não numéricos.</span><span class="sxs-lookup"><span data-stu-id="deb6b-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="deb6b-185">`IsNumeric` Retorna `True` se `Expression` é uma cadeia de caracteres que contém um número hexadecimal ou octal válido.</span><span class="sxs-lookup"><span data-stu-id="deb6b-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="deb6b-186">`IsNumeric` também retorna `True` se `Expression` contém uma expressão numérica válida que comece com um + ou - caracteres ou contém vírgulas.</span><span class="sxs-lookup"><span data-stu-id="deb6b-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="deb6b-187">`IsNumeric` Retorna `False` se `Expression` é do tipo de dados `Date`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="deb6b-188">Ele retorna `False` se `Expression` é um `Char`, `String`, ou `Object` que não pode ser convertido com êxito em um número.</span><span class="sxs-lookup"><span data-stu-id="deb6b-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-189">O exemplo a seguir usa o `IsNumeric` função para determinar se o conteúdo de uma variável pode ser avaliado como um número.</span><span class="sxs-lookup"><span data-stu-id="deb6b-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="deb6b-190">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-190">Required.</span></span> <span data-ttu-id="deb6b-191">Expressão <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="deb6b-192">Retorna um valor <see langword="Boolean" /> que indica se uma expressão avalia para um tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="deb6b-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="deb6b-193">Retorna um valor <see langword="Boolean" /> que indica se uma expressão avalia para um tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="deb6b-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-194">`IsReference` Retorna `True` se `Expression` representa um tipo de referência, como uma instância da classe, um `String` tipo ou uma matriz de qualquer tipo; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="deb6b-195">Um tipo de referência contém um ponteiro para dados armazenados em outro lugar na memória.</span><span class="sxs-lookup"><span data-stu-id="deb6b-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="deb6b-196">Um tipo de valor contém seus próprios dados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-197">Este exemplo usa o `IsReference` função para verificar se diversas variáveis se referem a tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="deb6b-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="deb6b-198">No exemplo anterior, as três primeiras chamadas para `IsReference` retornar `True`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="deb6b-199">Retorna a última chamada `False`, pois `Integer` é um tipo de valor, não um tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="deb6b-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="deb6b-200">Tipos de valor e referência</span><span class="sxs-lookup"><span data-stu-id="deb6b-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="deb6b-201">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-201">Required.</span></span> <span data-ttu-id="deb6b-202">Matriz de qualquer tipo de dados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-202">Array of any data type.</span></span> <span data-ttu-id="deb6b-203">A matriz na qual você deseja encontrar o subscrito mais baixo possível de uma dimensão.</span><span class="sxs-lookup"><span data-stu-id="deb6b-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="deb6b-204">Opcional.</span><span class="sxs-lookup"><span data-stu-id="deb6b-204">Optional.</span></span> <span data-ttu-id="deb6b-205"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-205"><see langword="Integer" />.</span></span> <span data-ttu-id="deb6b-206">A dimensão para a qual o subscrito mais baixo possível deve ser retornado.</span><span class="sxs-lookup"><span data-stu-id="deb6b-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="deb6b-207">Use 1 para a primeira dimensão, 2 para a segunda e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="deb6b-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="deb6b-208">Se <paramref name="Rank" /> for omitido, 1 será pressuposto.</span><span class="sxs-lookup"><span data-stu-id="deb6b-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="deb6b-209">Retorna o subscrito mais baixo disponível para a dimensão indicada de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="deb6b-210"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-210"><see langword="Integer" />.</span></span> <span data-ttu-id="deb6b-211">O valor mais baixo da subscrição que a dimensão especificada pode conter.</span><span class="sxs-lookup"><span data-stu-id="deb6b-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="deb6b-212"><see langword="LBound" /> sempre retorna 0, desde que <paramref name="Array" /> tenha sido inicializado, mesmo se não contiver elementos, como por exemplo, se for uma cadeia de comprimento zero.</span><span class="sxs-lookup"><span data-stu-id="deb6b-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="deb6b-213">Se <paramref name="Array" /> for <see langword="Nothing" />, <see langword="LBound" /> gera um <see cref="T:System.ArgumentNullException" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-214">Como subscritos de matriz iniciam em 0, a menor subscrição disponível para cada dimensão é sempre 0.</span><span class="sxs-lookup"><span data-stu-id="deb6b-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="deb6b-215">Para uma matriz com as seguintes dimensões, `LBound` retorna os valores na tabela a seguir:</span><span class="sxs-lookup"><span data-stu-id="deb6b-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="deb6b-216">Chamada para LBound</span><span class="sxs-lookup"><span data-stu-id="deb6b-216">Call to LBound</span></span>|<span data-ttu-id="deb6b-217">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="deb6b-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="deb6b-218">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="deb6b-219">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="deb6b-220">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-221">O exemplo a seguir usa o `LBound` função para determinar a menor subscrição disponível para a dimensão indicada de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="deb6b-222"><paramref name="Array" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="deb6b-223"><paramref name="Rank" /> é menor que 1 ou <paramref name="Rank" /> é maior que a classificação de <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="deb6b-224">Instrução Dim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="deb6b-225">Instrução ReDim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="deb6b-226">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-226">Required.</span></span> <span data-ttu-id="deb6b-227">Um número inteiro no intervalo de 0-15.</span><span class="sxs-lookup"><span data-stu-id="deb6b-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="deb6b-228">Retorna um valor <see langword="Integer" /> que representa o código de cor RGB correspondente ao número de cor especificado.</span><span class="sxs-lookup"><span data-stu-id="deb6b-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="deb6b-229">Retorna um valor <see langword="Integer" /> que representa o código de cor RGB correspondente ao número de cor especificado.</span><span class="sxs-lookup"><span data-stu-id="deb6b-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-230">Começando com o byte menos significativo, o valor retornado especifica os valores de vermelhos, verdes e azuis usados para definir a cor apropriada no sistema RGB usado pela linguagem Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="deb6b-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="deb6b-231">O `Color` possui as seguintes configurações.</span><span class="sxs-lookup"><span data-stu-id="deb6b-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="deb6b-232">Número</span><span class="sxs-lookup"><span data-stu-id="deb6b-232">Number</span></span>|<span data-ttu-id="deb6b-233">Cor</span><span class="sxs-lookup"><span data-stu-id="deb6b-233">Color</span></span>|<span data-ttu-id="deb6b-234">Número</span><span class="sxs-lookup"><span data-stu-id="deb6b-234">Number</span></span>|<span data-ttu-id="deb6b-235">Cor</span><span class="sxs-lookup"><span data-stu-id="deb6b-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="deb6b-236">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-236">0</span></span>|<span data-ttu-id="deb6b-237">Preto</span><span class="sxs-lookup"><span data-stu-id="deb6b-237">Black</span></span>|<span data-ttu-id="deb6b-238">8</span><span class="sxs-lookup"><span data-stu-id="deb6b-238">8</span></span>|<span data-ttu-id="deb6b-239">Cinza</span><span class="sxs-lookup"><span data-stu-id="deb6b-239">Gray</span></span>|  
|<span data-ttu-id="deb6b-240">1</span><span class="sxs-lookup"><span data-stu-id="deb6b-240">1</span></span>|<span data-ttu-id="deb6b-241">Azul</span><span class="sxs-lookup"><span data-stu-id="deb6b-241">Blue</span></span>|<span data-ttu-id="deb6b-242">9</span><span class="sxs-lookup"><span data-stu-id="deb6b-242">9</span></span>|<span data-ttu-id="deb6b-243">Azul-claro</span><span class="sxs-lookup"><span data-stu-id="deb6b-243">Light blue</span></span>|  
|<span data-ttu-id="deb6b-244">2</span><span class="sxs-lookup"><span data-stu-id="deb6b-244">2</span></span>|<span data-ttu-id="deb6b-245">Verde</span><span class="sxs-lookup"><span data-stu-id="deb6b-245">Green</span></span>|<span data-ttu-id="deb6b-246">10</span><span class="sxs-lookup"><span data-stu-id="deb6b-246">10</span></span>|<span data-ttu-id="deb6b-247">Verde claro</span><span class="sxs-lookup"><span data-stu-id="deb6b-247">Light green</span></span>|  
|<span data-ttu-id="deb6b-248">3</span><span class="sxs-lookup"><span data-stu-id="deb6b-248">3</span></span>|<span data-ttu-id="deb6b-249">Ciano</span><span class="sxs-lookup"><span data-stu-id="deb6b-249">Cyan</span></span>|<span data-ttu-id="deb6b-250">11</span><span class="sxs-lookup"><span data-stu-id="deb6b-250">11</span></span>|<span data-ttu-id="deb6b-251">Ciano-claro</span><span class="sxs-lookup"><span data-stu-id="deb6b-251">Light cyan</span></span>|  
|<span data-ttu-id="deb6b-252">4</span><span class="sxs-lookup"><span data-stu-id="deb6b-252">4</span></span>|<span data-ttu-id="deb6b-253">Vermelho</span><span class="sxs-lookup"><span data-stu-id="deb6b-253">Red</span></span>|<span data-ttu-id="deb6b-254">12</span><span class="sxs-lookup"><span data-stu-id="deb6b-254">12</span></span>|<span data-ttu-id="deb6b-255">Vermelho-claro</span><span class="sxs-lookup"><span data-stu-id="deb6b-255">Light red</span></span>|  
|<span data-ttu-id="deb6b-256">5</span><span class="sxs-lookup"><span data-stu-id="deb6b-256">5</span></span>|<span data-ttu-id="deb6b-257">Magenta</span><span class="sxs-lookup"><span data-stu-id="deb6b-257">Magenta</span></span>|<span data-ttu-id="deb6b-258">13</span><span class="sxs-lookup"><span data-stu-id="deb6b-258">13</span></span>|<span data-ttu-id="deb6b-259">Luz magenta</span><span class="sxs-lookup"><span data-stu-id="deb6b-259">Light magenta</span></span>|  
|<span data-ttu-id="deb6b-260">6</span><span class="sxs-lookup"><span data-stu-id="deb6b-260">6</span></span>|<span data-ttu-id="deb6b-261">Amarelo</span><span class="sxs-lookup"><span data-stu-id="deb6b-261">Yellow</span></span>|<span data-ttu-id="deb6b-262">14</span><span class="sxs-lookup"><span data-stu-id="deb6b-262">14</span></span>|<span data-ttu-id="deb6b-263">Amarelo-claro</span><span class="sxs-lookup"><span data-stu-id="deb6b-263">Light yellow</span></span>|  
|<span data-ttu-id="deb6b-264">7</span><span class="sxs-lookup"><span data-stu-id="deb6b-264">7</span></span>|<span data-ttu-id="deb6b-265">Branco</span><span class="sxs-lookup"><span data-stu-id="deb6b-265">White</span></span>|<span data-ttu-id="deb6b-266">15</span><span class="sxs-lookup"><span data-stu-id="deb6b-266">15</span></span>|<span data-ttu-id="deb6b-267">Branco brilhante</span><span class="sxs-lookup"><span data-stu-id="deb6b-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-268">Este exemplo usa o `QBColor` função para alterar para a cor indicada pelo `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="deb6b-269">`QBColor` aceita valores inteiros entre 0 e 15.</span><span class="sxs-lookup"><span data-stu-id="deb6b-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="deb6b-270"><paramref name="Color" /> está fora do intervalo de 0 a 15, inclusive.</span><span class="sxs-lookup"><span data-stu-id="deb6b-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="deb6b-271">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-271">Required.</span></span> <span data-ttu-id="deb6b-272"><see langword="Integer" /> no intervalo 0-255, inclusive, que representa a intensidade do componente vermelho da cor.</span><span class="sxs-lookup"><span data-stu-id="deb6b-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="deb6b-273">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-273">Required.</span></span> <span data-ttu-id="deb6b-274"><see langword="Integer" /> no intervalo 0-255, inclusive, que representa a intensidade do componente verde da cor.</span><span class="sxs-lookup"><span data-stu-id="deb6b-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="deb6b-275">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-275">Required.</span></span> <span data-ttu-id="deb6b-276"><see langword="Integer" /> no intervalo de 0 a 255 (incluindo este número), que representa a intensidade do componente azul da cor.</span><span class="sxs-lookup"><span data-stu-id="deb6b-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="deb6b-277">Retorna um valor <see langword="Integer" /> que representa um valor de cor RGB de um conjunto de componentes de cor vermelho, verde e azul.</span><span class="sxs-lookup"><span data-stu-id="deb6b-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="deb6b-278">Retorna um valor <see langword="Integer" /> que representa um valor de cor RGB de um conjunto de componentes de cor vermelho, verde e azul.</span><span class="sxs-lookup"><span data-stu-id="deb6b-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-279">Métodos de aplicativo e as propriedades que aceitam uma especificação de cor esperam a especificação de um número que representa um RGB valor de cor.</span><span class="sxs-lookup"><span data-stu-id="deb6b-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="deb6b-280">Um valor de cor RGB especifica a intensidade relativa de vermelho, verde e azul para fazer com que uma cor específica a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="deb6b-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="deb6b-281">Se o valor de qualquer argumento para `RGB` é maior que 255, 255 é usado.</span><span class="sxs-lookup"><span data-stu-id="deb6b-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="deb6b-282">A tabela a seguir lista algumas cores padrão e os valores de vermelhos, verdes e azuis que elas incluem.</span><span class="sxs-lookup"><span data-stu-id="deb6b-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="deb6b-283">Cor</span><span class="sxs-lookup"><span data-stu-id="deb6b-283">Color</span></span>|<span data-ttu-id="deb6b-284">Valor de vermelho</span><span class="sxs-lookup"><span data-stu-id="deb6b-284">Red value</span></span>|<span data-ttu-id="deb6b-285">Valor verde</span><span class="sxs-lookup"><span data-stu-id="deb6b-285">Green value</span></span>|<span data-ttu-id="deb6b-286">Valor de azul</span><span class="sxs-lookup"><span data-stu-id="deb6b-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="deb6b-287">Preto</span><span class="sxs-lookup"><span data-stu-id="deb6b-287">Black</span></span>|<span data-ttu-id="deb6b-288">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-288">0</span></span>|<span data-ttu-id="deb6b-289">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-289">0</span></span>|<span data-ttu-id="deb6b-290">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-290">0</span></span>|  
|<span data-ttu-id="deb6b-291">Azul</span><span class="sxs-lookup"><span data-stu-id="deb6b-291">Blue</span></span>|<span data-ttu-id="deb6b-292">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-292">0</span></span>|<span data-ttu-id="deb6b-293">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-293">0</span></span>|<span data-ttu-id="deb6b-294">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-294">255</span></span>|  
|<span data-ttu-id="deb6b-295">Verde</span><span class="sxs-lookup"><span data-stu-id="deb6b-295">Green</span></span>|<span data-ttu-id="deb6b-296">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-296">0</span></span>|<span data-ttu-id="deb6b-297">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-297">255</span></span>|<span data-ttu-id="deb6b-298">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-298">0</span></span>|  
|<span data-ttu-id="deb6b-299">Ciano</span><span class="sxs-lookup"><span data-stu-id="deb6b-299">Cyan</span></span>|<span data-ttu-id="deb6b-300">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-300">0</span></span>|<span data-ttu-id="deb6b-301">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-301">255</span></span>|<span data-ttu-id="deb6b-302">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-302">255</span></span>|  
|<span data-ttu-id="deb6b-303">Vermelho</span><span class="sxs-lookup"><span data-stu-id="deb6b-303">Red</span></span>|<span data-ttu-id="deb6b-304">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-304">255</span></span>|<span data-ttu-id="deb6b-305">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-305">0</span></span>|<span data-ttu-id="deb6b-306">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-306">0</span></span>|  
|<span data-ttu-id="deb6b-307">Magenta</span><span class="sxs-lookup"><span data-stu-id="deb6b-307">Magenta</span></span>|<span data-ttu-id="deb6b-308">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-308">255</span></span>|<span data-ttu-id="deb6b-309">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-309">0</span></span>|<span data-ttu-id="deb6b-310">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-310">255</span></span>|  
|<span data-ttu-id="deb6b-311">Amarelo</span><span class="sxs-lookup"><span data-stu-id="deb6b-311">Yellow</span></span>|<span data-ttu-id="deb6b-312">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-312">255</span></span>|<span data-ttu-id="deb6b-313">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-313">255</span></span>|<span data-ttu-id="deb6b-314">0</span><span class="sxs-lookup"><span data-stu-id="deb6b-314">0</span></span>|  
|<span data-ttu-id="deb6b-315">Branco</span><span class="sxs-lookup"><span data-stu-id="deb6b-315">White</span></span>|<span data-ttu-id="deb6b-316">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-316">255</span></span>|<span data-ttu-id="deb6b-317">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-317">255</span></span>|<span data-ttu-id="deb6b-318">255</span><span class="sxs-lookup"><span data-stu-id="deb6b-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-319">Este exemplo mostra como o `RGB` função é usada para retornar um número inteiro que representa um `RGB` valor de cor.</span><span class="sxs-lookup"><span data-stu-id="deb6b-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="deb6b-320"><paramref name="Green" />, <paramref name="Blue" /> ou <paramref name="Red" /> está fora do intervalo de 0 a 255, inclusive.</span><span class="sxs-lookup"><span data-stu-id="deb6b-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="deb6b-321">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-321">Required.</span></span> <span data-ttu-id="deb6b-322">Uma variável <see langword="String" /> que contém um nome do tipo Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="deb6b-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="deb6b-323">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do sistema de uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="deb6b-324">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do sistema de uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-325">`SystemTypeName` Retorna o nome totalmente qualificado common language runtime (CLR) tipo correspondente ao nome do tipo Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="deb6b-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="deb6b-326">Por exemplo, se `VbName` contém "Data", `SystemTypeName` retorna "System. DateTime".</span><span class="sxs-lookup"><span data-stu-id="deb6b-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="deb6b-327">Se `SystemTypeName` não reconhece o valor da `VbName`, ele retorna `Nothing` (não a cadeia de caracteres "Nada").</span><span class="sxs-lookup"><span data-stu-id="deb6b-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-328">O exemplo a seguir usa o `SystemTypeName` função para retornar nomes de tipo de dados para diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="deb6b-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="deb6b-329">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="deb6b-330">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-330">Required.</span></span> <span data-ttu-id="deb6b-331">Variável <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="deb6b-332">Se <see langword="Option Strict" /> for <see langword="Off" />, você poderá passar uma variável de qualquer tipo de dados, exceto uma estrutura.</span><span class="sxs-lookup"><span data-stu-id="deb6b-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="deb6b-333">Retorna um valor de <see langword="String" /> que contém informações de tipo de dados sobre uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="deb6b-334">Retorna um valor de <see langword="String" /> que contém informações de tipo de dados sobre uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-335">A tabela a seguir mostra a `String` valores retornados pelo `TypeName` para conteúdos diferentes de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="deb6b-336">`VarName` Conteúdo</span><span class="sxs-lookup"><span data-stu-id="deb6b-336">`VarName` contents</span></span>|<span data-ttu-id="deb6b-337">Cadeia de caracteres retornada</span><span class="sxs-lookup"><span data-stu-id="deb6b-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="deb6b-338">16-bit `True` ou `False` tipo de valor</span><span class="sxs-lookup"><span data-stu-id="deb6b-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="deb6b-339">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="deb6b-339">"Boolean"</span></span>|  
|<span data-ttu-id="deb6b-340">tipo de valor binário de 8 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-340">8-bit binary value type</span></span>|<span data-ttu-id="deb6b-341">"Byte"</span><span class="sxs-lookup"><span data-stu-id="deb6b-341">"Byte"</span></span>|  
|<span data-ttu-id="deb6b-342">tipo de valor de caractere de 16 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-342">16-bit character value type</span></span>|<span data-ttu-id="deb6b-343">"Char"</span><span class="sxs-lookup"><span data-stu-id="deb6b-343">"Char"</span></span>|  
|<span data-ttu-id="deb6b-344">tipo de data de 64 bits e o valor de tempo</span><span class="sxs-lookup"><span data-stu-id="deb6b-344">64-bit date and time value type</span></span>|<span data-ttu-id="deb6b-345">"Data"</span><span class="sxs-lookup"><span data-stu-id="deb6b-345">"Date"</span></span>|  
|<span data-ttu-id="deb6b-346">Tipo de referência que indica dados ausentes ou inexistentes</span><span class="sxs-lookup"><span data-stu-id="deb6b-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="deb6b-347">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="deb6b-347">"DBNull"</span></span>|  
|<span data-ttu-id="deb6b-348">tipo de valor numérico ponto fixo de 128 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="deb6b-349">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="deb6b-349">"Decimal"</span></span>|  
|<span data-ttu-id="deb6b-350">tipo de valor numérico ponto flutuante de 64 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="deb6b-351">"Double"</span><span class="sxs-lookup"><span data-stu-id="deb6b-351">"Double"</span></span>|  
|<span data-ttu-id="deb6b-352">tipo de valor inteiro de 32 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-352">32-bit integer value type</span></span>|<span data-ttu-id="deb6b-353">"Integer"</span><span class="sxs-lookup"><span data-stu-id="deb6b-353">"Integer"</span></span>|  
|<span data-ttu-id="deb6b-354">Tipo de referência que aponta para um objeto não especializado</span><span class="sxs-lookup"><span data-stu-id="deb6b-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="deb6b-355">"Object"</span><span class="sxs-lookup"><span data-stu-id="deb6b-355">"Object"</span></span>|  
|<span data-ttu-id="deb6b-356">Tipo de referência que aponta para um objeto especializado criado da classe *objectclass*</span><span class="sxs-lookup"><span data-stu-id="deb6b-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="deb6b-357">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="deb6b-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="deb6b-358">tipo de valor inteiro de 64 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-358">64-bit integer value type</span></span>|<span data-ttu-id="deb6b-359">"Longo"</span><span class="sxs-lookup"><span data-stu-id="deb6b-359">"Long"</span></span>|  
|<span data-ttu-id="deb6b-360">Tipo de referência com nenhum objeto atualmente atribuído a ele</span><span class="sxs-lookup"><span data-stu-id="deb6b-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="deb6b-361">"Nada"</span><span class="sxs-lookup"><span data-stu-id="deb6b-361">"Nothing"</span></span>|  
|<span data-ttu-id="deb6b-362">tipo de valor inteiro com sinal de 8 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-362">8-bit signed integer value type</span></span>|<span data-ttu-id="deb6b-363">"SByte"</span><span class="sxs-lookup"><span data-stu-id="deb6b-363">"SByte"</span></span>|  
|<span data-ttu-id="deb6b-364">tipo de valor inteiro de 16 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-364">16-bit integer value type</span></span>|<span data-ttu-id="deb6b-365">"Curto"</span><span class="sxs-lookup"><span data-stu-id="deb6b-365">"Short"</span></span>|  
|<span data-ttu-id="deb6b-366">tipo de valor numérico ponto flutuante de 32 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="deb6b-367">"Único"</span><span class="sxs-lookup"><span data-stu-id="deb6b-367">"Single"</span></span>|  
|<span data-ttu-id="deb6b-368">Tipo de referência que aponta para uma cadeia de caracteres de 16 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="deb6b-369">"String"</span><span class="sxs-lookup"><span data-stu-id="deb6b-369">"String"</span></span>|  
|<span data-ttu-id="deb6b-370">tipo de valor inteiro sem sinal de 32 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="deb6b-371">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="deb6b-371">"UInteger"</span></span>|  
|<span data-ttu-id="deb6b-372">tipo de valor inteiro sem sinal de 64 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="deb6b-373">"ULong"</span><span class="sxs-lookup"><span data-stu-id="deb6b-373">"ULong"</span></span>|  
|<span data-ttu-id="deb6b-374">tipo de valor inteiro sem sinal de 16 bits</span><span class="sxs-lookup"><span data-stu-id="deb6b-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="deb6b-375">"UShort"</span><span class="sxs-lookup"><span data-stu-id="deb6b-375">"UShort"</span></span>|  
  
 <span data-ttu-id="deb6b-376">Se `VarName` é uma matriz, a cadeia de caracteres retornada pode ser qualquer uma das cadeias de caracteres na tabela anterior com parênteses vazios anexados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="deb6b-377">Por exemplo, se `VarName` aponta para uma matriz de inteiros, `TypeName` retorna "Integer ()".</span><span class="sxs-lookup"><span data-stu-id="deb6b-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="deb6b-378">Quando `TypeName` retorna o nome de um tipo de referência, como uma classe, ele retorna somente o nome em si, não o nome qualificado.</span><span class="sxs-lookup"><span data-stu-id="deb6b-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="deb6b-379">Por exemplo, se `VarName` aponta para um objeto da classe <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` retorna "PaperSource".</span><span class="sxs-lookup"><span data-stu-id="deb6b-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="deb6b-380">Observe que, se a variável é declarada para ser de um determinado tipo de classe, mas não tem um objeto atribuído a ele, `TypeName` retorna "Nada".</span><span class="sxs-lookup"><span data-stu-id="deb6b-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-381">O exemplo a seguir usa o `TypeName` função para retornar informações sobre diversas variáveis do tipo de dados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="deb6b-382">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="deb6b-383">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-383">Required.</span></span> <span data-ttu-id="deb6b-384">Matriz de qualquer tipo de dados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-384">Array of any data type.</span></span> <span data-ttu-id="deb6b-385">A matriz na qual você deseja encontrar o subscrito mais alto possível de uma dimensão.</span><span class="sxs-lookup"><span data-stu-id="deb6b-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="deb6b-386">Opcional.</span><span class="sxs-lookup"><span data-stu-id="deb6b-386">Optional.</span></span> <span data-ttu-id="deb6b-387"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-387"><see langword="Integer" />.</span></span> <span data-ttu-id="deb6b-388">A dimensão para a qual o subscrito mais alto possível deve ser retornado.</span><span class="sxs-lookup"><span data-stu-id="deb6b-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="deb6b-389">Use 1 para a primeira dimensão, 2 para a segunda e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="deb6b-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="deb6b-390">Se <paramref name="Rank" /> for omitido, 1 será pressuposto.</span><span class="sxs-lookup"><span data-stu-id="deb6b-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="deb6b-391">Retorna o subscrito mais alto disponível para a dimensão indicada de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="deb6b-392"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-392"><see langword="Integer" />.</span></span> <span data-ttu-id="deb6b-393">O valor mais alto da subscrição que a dimensão especificada pode conter.</span><span class="sxs-lookup"><span data-stu-id="deb6b-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="deb6b-394">Se <paramref name="Array" /> tiver apenas um elemento, <see langword="UBound" /> retornará 0.</span><span class="sxs-lookup"><span data-stu-id="deb6b-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="deb6b-395">Se <paramref name="Array" /> não tiver elementos (por exemplo, se for uma cadeia de tamanho zero), <see langword="UBound" /> retornará -1.</span><span class="sxs-lookup"><span data-stu-id="deb6b-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-396">Como subscritos de matriz iniciam em 0, o comprimento de uma dimensão é maior por um que o maior subscrito disponível para a dimensão.</span><span class="sxs-lookup"><span data-stu-id="deb6b-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="deb6b-397">Para uma matriz com as seguintes dimensões, `UBound` retorna os valores na tabela a seguir:</span><span class="sxs-lookup"><span data-stu-id="deb6b-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="deb6b-398">Chamada para UBound</span><span class="sxs-lookup"><span data-stu-id="deb6b-398">Call to UBound</span></span>|<span data-ttu-id="deb6b-399">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="deb6b-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="deb6b-400">100</span><span class="sxs-lookup"><span data-stu-id="deb6b-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="deb6b-401">5</span><span class="sxs-lookup"><span data-stu-id="deb6b-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="deb6b-402">4</span><span class="sxs-lookup"><span data-stu-id="deb6b-402">4</span></span>|  
  
 <span data-ttu-id="deb6b-403">Você pode usar `UBound` para determinar o total de número de elementos em uma matriz, mas você deve ajustar o valor retornado à conta o fato de que os subscritos começam em 0.</span><span class="sxs-lookup"><span data-stu-id="deb6b-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="deb6b-404">O exemplo a seguir calcula o tamanho total da matriz `a` no exemplo anterior:</span><span class="sxs-lookup"><span data-stu-id="deb6b-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="deb6b-405">O valor calculado para `total` é 3030, que é 101 \* 6 \* 5.</span><span class="sxs-lookup"><span data-stu-id="deb6b-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-406">O exemplo a seguir usa o `UBound` função para determinar o maior subscrito disponível para a dimensão indicada de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="deb6b-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="deb6b-407"><paramref name="Array" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="deb6b-408"><paramref name="Rank" /> é menor que 1 ou <paramref name="Rank" /> é maior que a classificação de <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="deb6b-409">Instrução Dim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="deb6b-410">Instrução ReDim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="deb6b-411">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-411">Required.</span></span> <span data-ttu-id="deb6b-412">Variável <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="deb6b-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="deb6b-413">Se <see langword="Option Strict" /> for <see langword="Off" />, você poderá passar uma variável de qualquer tipo de dados, exceto uma estrutura.</span><span class="sxs-lookup"><span data-stu-id="deb6b-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="deb6b-414">Retorna um valor <see langword="Integer" /> que contém a classificação de tipo de dados de uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="deb6b-415">Retorna um valor <see langword="Integer" /> que contém a classificação de tipo de dados de uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-416">O valor inteiro retornado por `VarType` é um membro do <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="deb6b-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="deb6b-417">A tabela a seguir mostra os valores retornados pelo `VarType` para casos especiais de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="deb6b-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="deb6b-418">Tipo de dados representado pelo `VarName`</span><span class="sxs-lookup"><span data-stu-id="deb6b-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="deb6b-419">Valor retornado por `VarType`</span><span class="sxs-lookup"><span data-stu-id="deb6b-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="deb6b-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="deb6b-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="deb6b-421">Enumeração</span><span class="sxs-lookup"><span data-stu-id="deb6b-421">Enumeration</span></span>|<span data-ttu-id="deb6b-422">Tipo de dados subjacente (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, ou `ULong`)</span><span class="sxs-lookup"><span data-stu-id="deb6b-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="deb6b-423">Matriz</span><span class="sxs-lookup"><span data-stu-id="deb6b-423">Array</span></span>|<span data-ttu-id="deb6b-424">OR bit a bit de tipo de elemento de matriz e `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="deb6b-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="deb6b-425">Matriz de matrizes</span><span class="sxs-lookup"><span data-stu-id="deb6b-425">Array of arrays</span></span>|<span data-ttu-id="deb6b-426">OR bit a bit de `VariantType.Object` e `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="deb6b-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="deb6b-427">Estrutura (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="deb6b-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="deb6b-428">Unknown</span><span class="sxs-lookup"><span data-stu-id="deb6b-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-429">O exemplo a seguir usa o `VarType` função para retornar informações sobre diversas variáveis de classificação de tipo de dados.</span><span class="sxs-lookup"><span data-stu-id="deb6b-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="deb6b-430">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="deb6b-431">Necessário.</span><span class="sxs-lookup"><span data-stu-id="deb6b-431">Required.</span></span> <span data-ttu-id="deb6b-432">Variável <see langword="String" /> que contém um nome de tipo usado pelo Common Language Runtime.</span><span class="sxs-lookup"><span data-stu-id="deb6b-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="deb6b-433">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do Visual Basic de uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="deb6b-434">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do Visual Basic de uma variável.</span><span class="sxs-lookup"><span data-stu-id="deb6b-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deb6b-435">`VbTypeName` Retorna o nome do tipo Visual Basic correspondente ao nome do tipo common language runtime.</span><span class="sxs-lookup"><span data-stu-id="deb6b-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="deb6b-436">Por exemplo, se `UrtName` contiver "Int32" ou "Int32" `VbTypeName` retorna "Integer".</span><span class="sxs-lookup"><span data-stu-id="deb6b-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="deb6b-437">Se `VbTypeName` não reconhece o valor da `UrtName`, ele retorna `Nothing` (não a cadeia de caracteres "Nada").</span><span class="sxs-lookup"><span data-stu-id="deb6b-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="deb6b-438">O nome do tipo em `UrtName` pode ser obtido de várias fontes, por exemplo o <xref:System.Reflection.MemberInfo.Name%2A> propriedade no <xref:System.Reflection.MemberInfo> matriz do <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="deb6b-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deb6b-439">O exemplo a seguir usa o `VbTypeName` função para retornar nomes de tipo de dados para diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="deb6b-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="deb6b-440">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="deb6b-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>