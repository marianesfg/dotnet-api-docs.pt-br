<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2eb7b4c550a11b5654a23c73a2f51fb4d5c2526a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36726771" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ba951-101">O módulo <see langword="Information" /> contém os procedimentos usados para retornar, testar ou verificar informações.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ba951-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-102">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que fornecem informações de erro, validam dados, determinam os limites da matriz e recuperar informações de tipo e a cor de dados.</span><span class="sxs-lookup"><span data-stu-id="ba951-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-103">O exemplo a seguir usa o `VbTypeName` função para retornar nomes de tipo de dados para diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="ba951-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ba951-104">Retorna um inteiro que indica o número de linha da última instrução executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-104">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="ba951-105">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-105">Read-only.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-106">Retorna um inteiro que indica o número de linha da última instrução executada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-106">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="ba951-107">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-107">Read-only.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-108">Se o Visual Basic encontre sem números de linha, ele retornará 0.</span><span class="sxs-lookup"><span data-stu-id="ba951-108">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-109">Este exemplo usa o `Erl` propriedade para indicar o número da linha.</span><span class="sxs-lookup"><span data-stu-id="ba951-109">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ba951-110">Contém informações sobre erros de tempo de execução.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-110">Contains information about run-time errors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-111">Contém informações sobre erros de tempo de execução.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-111">Contains information about run-time errors.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-112">As propriedades do `Err` objeto são definidas pelo gerador de um erro — Visual Basic, um objeto ou o programador.</span><span class="sxs-lookup"><span data-stu-id="ba951-112">The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="ba951-113">Quando ocorre um erro de tempo de execução, as propriedades do `Err` são preenchidas com informações que identificam exclusivamente o erro do objeto e que você pode usar para manipular o erro.</span><span class="sxs-lookup"><span data-stu-id="ba951-113">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="ba951-114">Para gerar um erro de tempo de execução em seu código, use o `Raise` método.</span><span class="sxs-lookup"><span data-stu-id="ba951-114">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="ba951-115">O `Err` propriedades do objeto são redefinidas para zero ou cadeias de caracteres de comprimento zero ("") após uma `Exit Sub`, `Exit Function`, `Exit Property`, ou `Resume Next` instrução dentro de uma rotina de tratamento de erros.</span><span class="sxs-lookup"><span data-stu-id="ba951-115">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="ba951-116">Usando qualquer forma do `Resume` instrução fora de uma rotina de tratamento de erros não redefinirá o `Err` propriedades do objeto.</span><span class="sxs-lookup"><span data-stu-id="ba951-116">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="ba951-117">Você pode usar o `Clear` método para redefinir explicitamente `Err`.</span><span class="sxs-lookup"><span data-stu-id="ba951-117">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="ba951-118">Use o `Raise` método em vez de `Error` instrução para gerar erros de tempo de execução de erros do sistema e módulos de classe.</span><span class="sxs-lookup"><span data-stu-id="ba951-118">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="ba951-119">Sua decisão sobre a possibilidade de usar o `Raise` método no outro código depende a riqueza de informações que você deseja retornar.</span><span class="sxs-lookup"><span data-stu-id="ba951-119">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="ba951-120">O `Err` é um objeto intrínseco com escopo global.</span><span class="sxs-lookup"><span data-stu-id="ba951-120">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="ba951-121">Portanto, você não precisa criar uma instância no seu código.</span><span class="sxs-lookup"><span data-stu-id="ba951-121">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-122">Este exemplo usa as propriedades do `Err` objeto na construção de uma caixa de diálogo de mensagem de erro.</span><span class="sxs-lookup"><span data-stu-id="ba951-122">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="ba951-123">Observe que, se você usar o `Clear` método primeiro, quando você gera um erro do Visual Basic com o `Raise` método, valores padrão do Visual Basic tornam-se as propriedades do `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="ba951-123">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="ba951-124">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-124">Required.</span>
          </span>
          <span data-ttu-id="ba951-125">Variável <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-125">
              <see langword="Object" /> variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-126">Retorna um valor <see langword="Boolean" /> que indica se uma variável aponta para uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-126">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-127">Retorna um valor <see langword="Boolean" /> que indica se uma variável aponta para uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-127">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-128">`IsArray` Retorna `True` se a variável aponta para uma matriz; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="ba951-128">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="ba951-129">`IsArray` é especialmente útil com objetos que podem conter matrizes.</span><span class="sxs-lookup"><span data-stu-id="ba951-129">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-130">Este exemplo usa o `IsArray` para verificar se diversas variáveis referenciam uma matriz.</span><span class="sxs-lookup"><span data-stu-id="ba951-130">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ba951-131">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-131">Required.</span>
          </span>
          <span data-ttu-id="ba951-132">Expressão <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-132">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-133">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa um valor de <see langword="Date" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-133">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-134">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa um valor de <see langword="Date" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-134">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-135">`IsDate` Retorna `True` se `Expression` é o <xref:System.DateTime> dados digite ou pode ser convertido para ele; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="ba951-135">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="ba951-136">O <xref:System.DateTime> tipo de dados contém um valor de data e um valor de tempo.</span><span class="sxs-lookup"><span data-stu-id="ba951-136">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="ba951-137">`IsDate` Retorna `True` se `Expression` representa uma data válida, uma hora válida, ou uma data válida e a hora.</span><span class="sxs-lookup"><span data-stu-id="ba951-137">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-138">O exemplo a seguir usa o `IsDate` função para determinar se diversas variáveis representam válido <xref:System.DateTime> valores.</span><span class="sxs-lookup"><span data-stu-id="ba951-138">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="ba951-139">No exemplo anterior, `IsDate` retorna `True` para as quatro primeiras chamadas e `False` para a última chamada.</span><span class="sxs-lookup"><span data-stu-id="ba951-139">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ba951-140">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-140">Required.</span>
          </span>
          <span data-ttu-id="ba951-141">Expressão <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-141">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-142">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é avaliada como a classe <see cref="T:System.DBNull" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-142">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-143">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é avaliada como a classe <see cref="T:System.DBNull" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-143">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-144">`IsDBNull` Retorna `True` se o tipo de dados `Expression` é avaliada como o <xref:System.DBNull> tipo; caso contrário, `IsDBNull` retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="ba951-144">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="ba951-145">O <xref:System.DBNull?displayProperty=nameWithType> valor indica que o `Object` representa dados ausentes ou inexistentes.</span><span class="sxs-lookup"><span data-stu-id="ba951-145">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="ba951-146">`DBNull` não é o mesmo que `Nothing`, que indica que uma variável ainda não foi inicializada.</span><span class="sxs-lookup"><span data-stu-id="ba951-146">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="ba951-147">`DBNull` também não é o mesmo que uma cadeia de caracteres de comprimento zero (`""`), que às vezes é conhecido como uma cadeia de caracteres nula.</span><span class="sxs-lookup"><span data-stu-id="ba951-147">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-148">Este exemplo usa o `IsDBNull` função para determinar se uma variável for avaliada como `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="ba951-148">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ba951-149">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-149">Required.</span>
          </span>
          <span data-ttu-id="ba951-150">Expressão <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-150">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-151">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é um tipo de exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-151">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-152">Retorna um valor <see langword="Boolean" /> que indica se uma expressão é um tipo de exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-152">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-153">`IsError` Retorna `True` se a expressão representa um `Object` variável da qual deriva a <xref:System.Exception> classe no <xref:System> namespace.</span><span class="sxs-lookup"><span data-stu-id="ba951-153">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="ba951-154">Uma exceção que é derivada de <xref:System.Exception?displayProperty=nameWithType> pode ser detectada com a `Try...Catch...Finally` instruções.</span><span class="sxs-lookup"><span data-stu-id="ba951-154">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-155">O exemplo a seguir usa o `IsError` para verificar se uma expressão representa uma exceção do sistema.</span><span class="sxs-lookup"><span data-stu-id="ba951-155">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ba951-156">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-156">Required.</span>
          </span>
          <span data-ttu-id="ba951-157">Expressão <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-157">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-158">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa não tem nenhum objeto atribuído a ela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-158">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-159">Retorna um valor <see langword="Boolean" /> que indica se uma expressão representa não tem nenhum objeto atribuído a ela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-159">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-160">`IsNothing` Retorna `True` se a expressão representa uma variável de objeto que atualmente não tem nenhum objeto atribuído a ela; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="ba951-160">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="ba951-161">`IsNothing` tem como objetivo trabalhar em tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="ba951-161">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="ba951-162">Um tipo de valor não pode armazenar um valor e será revertido para seu valor padrão, se você atribuir `Nothing` a ele.</span><span class="sxs-lookup"><span data-stu-id="ba951-162">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="ba951-163">Se você fornecer um tipo de valor em `Expression`, `IsNothing` sempre retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="ba951-163">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-164">O exemplo a seguir usa o `IsNothing` função para determinar se uma variável de objeto é associada a qualquer instância do objeto.</span><span class="sxs-lookup"><span data-stu-id="ba951-164">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ba951-165">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-165">Required.</span>
          </span>
          <span data-ttu-id="ba951-166">Expressão <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-166">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-167">Retorna um valor <see langword="Boolean" /> que indica se uma expressão pode ser avaliada como um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-167">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-168">Retorna um valor <see langword="Boolean" /> que indica se uma expressão pode ser avaliada como um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-168">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-169">`IsNumeric` Retorna `True` se o tipo de dados `Expression` é `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, ou `UShort`.</span><span class="sxs-lookup"><span data-stu-id="ba951-169">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="ba951-170">Ele também retorna `True` se `Expression` é um `Char`, `String`, ou `Object` que pode ser convertido com êxito em um número.</span><span class="sxs-lookup"><span data-stu-id="ba951-170">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="ba951-171">`Expression` pode conter caracteres não numéricos.</span><span class="sxs-lookup"><span data-stu-id="ba951-171">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="ba951-172">`IsNumeric` Retorna `True` se `Expression` é uma cadeia de caracteres que contém um número hexadecimal ou octal válido.</span><span class="sxs-lookup"><span data-stu-id="ba951-172">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="ba951-173">`IsNumeric` também retorna `True` se `Expression` contém uma expressão numérica válida que começa com um + ou - o caractere ou contiverem vírgulas.</span><span class="sxs-lookup"><span data-stu-id="ba951-173">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="ba951-174">`IsNumeric` Retorna `False` se `Expression` é do tipo de dados `Date`.</span><span class="sxs-lookup"><span data-stu-id="ba951-174">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="ba951-175">Ele retorna `False` se `Expression` é um `Char`, `String`, ou `Object` que não pode ser convertido com êxito em um número.</span><span class="sxs-lookup"><span data-stu-id="ba951-175">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-176">O exemplo a seguir usa o `IsNumeric` função para determinar se o conteúdo de uma variável pode ser avaliado como um número.</span><span class="sxs-lookup"><span data-stu-id="ba951-176">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ba951-177">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-177">Required.</span>
          </span>
          <span data-ttu-id="ba951-178">Expressão <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-178">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-179">Retorna um valor <see langword="Boolean" /> que indica se uma expressão avalia para um tipo de referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-179">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-180">Retorna um valor <see langword="Boolean" /> que indica se uma expressão avalia para um tipo de referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-180">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-181">`IsReference` Retorna `True` se `Expression` representa um tipo de referência, como uma instância da classe, uma `String` tipo ou uma matriz de qualquer tipo; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="ba951-181">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="ba951-182">Um tipo de referência contém um ponteiro para dados armazenados em outro lugar na memória.</span><span class="sxs-lookup"><span data-stu-id="ba951-182">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="ba951-183">Um tipo de valor contém seus próprios dados.</span><span class="sxs-lookup"><span data-stu-id="ba951-183">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-184">Este exemplo usa o `IsReference` para verificar se diversas variáveis referenciam a tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="ba951-184">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="ba951-185">No exemplo anterior, as três primeiras chamadas para `IsReference` retornar `True`.</span><span class="sxs-lookup"><span data-stu-id="ba951-185">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="ba951-186">Retorna a última chamada `False`, pois `Integer` é um tipo de valor, não é um tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="ba951-186">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="ba951-187">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-187">Required.</span>
          </span>
          <span data-ttu-id="ba951-188">Matriz de qualquer tipo de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-188">Array of any data type.</span>
          </span>
          <span data-ttu-id="ba951-189">A matriz na qual você deseja encontrar o subscrito mais baixo possível de uma dimensão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-189">The array in which you want to find the lowest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="ba951-190">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-190">Optional.</span>
          </span>
          <span data-ttu-id="ba951-191">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-191">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="ba951-192">A dimensão para a qual o subscrito mais baixo possível deve ser retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-192">The dimension for which the lowest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="ba951-193">Use 1 para a primeira dimensão, 2 para a segunda e assim por diante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-193">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="ba951-194">Se <c>Classificar</c> for omitido, 1 será pressuposto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-194">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-195">Retorna o subscrito mais baixo disponível para a dimensão indicada de uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-195">Returns the lowest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-196">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-196">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="ba951-197">O valor mais baixo da subscrição que a dimensão especificada pode conter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-197">The lowest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="ba951-198">
            <see langword="LBound" /> sempre retorna 0, desde que <paramref name="Array" /> tenha sido inicializado, mesmo se não contiver elementos, como por exemplo, se for uma cadeia de comprimento zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-198">
              <see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span>
          </span>
          <span data-ttu-id="ba951-199">Se <paramref name="Array" /> for <see langword="Nothing" />, <see langword="LBound" /> gera um <see cref="T:System.ArgumentNullException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-199">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-200">Como subscritos de matriz iniciam em 0, a menor subscrição disponível para cada dimensão é sempre 0.</span><span class="sxs-lookup"><span data-stu-id="ba951-200">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="ba951-201">Para uma matriz com as seguintes dimensões, `LBound` retorna os valores na tabela a seguir:</span><span class="sxs-lookup"><span data-stu-id="ba951-201">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="ba951-202">Chamada para LBound</span><span class="sxs-lookup"><span data-stu-id="ba951-202">Call to LBound</span></span>|<span data-ttu-id="ba951-203">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="ba951-203">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="ba951-204">0</span><span class="sxs-lookup"><span data-stu-id="ba951-204">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="ba951-205">0</span><span class="sxs-lookup"><span data-stu-id="ba951-205">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="ba951-206">0</span><span class="sxs-lookup"><span data-stu-id="ba951-206">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ba951-207">O exemplo a seguir usa o `LBound` função para determinar a menor subscrição disponível para a dimensão indicada de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="ba951-207">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba951-208">
            <paramref name="Array" /> é <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-208">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="ba951-209">
            <paramref name="Rank" /> é menor que 1 ou <paramref name="Rank" /> é maior que a classificação de <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-209">
              <paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">
          <span data-ttu-id="ba951-210">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-210">Required.</span>
          </span>
          <span data-ttu-id="ba951-211">Um número inteiro no intervalo de 0 a 15.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-211">A whole number in the range 0–15.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-212">Retorna um valor <see langword="Integer" /> que representa o código de cor RGB correspondente ao número de cor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-212">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-213">Retorna um valor <see langword="Integer" /> que representa o código de cor RGB correspondente ao número de cor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-213">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-214">Começando com o byte menos significativo, o valor retornado especifica os valores de vermelhos, verdes e azuis usados para definir a cor apropriada no sistema RGB usado pela linguagem Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="ba951-214">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="ba951-215">O `Color` possui as seguintes configurações.</span><span class="sxs-lookup"><span data-stu-id="ba951-215">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="ba951-216">Número</span><span class="sxs-lookup"><span data-stu-id="ba951-216">Number</span></span>|<span data-ttu-id="ba951-217">Cor</span><span class="sxs-lookup"><span data-stu-id="ba951-217">Color</span></span>|<span data-ttu-id="ba951-218">Número</span><span class="sxs-lookup"><span data-stu-id="ba951-218">Number</span></span>|<span data-ttu-id="ba951-219">Cor</span><span class="sxs-lookup"><span data-stu-id="ba951-219">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="ba951-220">0</span><span class="sxs-lookup"><span data-stu-id="ba951-220">0</span></span>|<span data-ttu-id="ba951-221">Preto</span><span class="sxs-lookup"><span data-stu-id="ba951-221">Black</span></span>|<span data-ttu-id="ba951-222">8</span><span class="sxs-lookup"><span data-stu-id="ba951-222">8</span></span>|<span data-ttu-id="ba951-223">Cinza</span><span class="sxs-lookup"><span data-stu-id="ba951-223">Gray</span></span>|  
|<span data-ttu-id="ba951-224">1</span><span class="sxs-lookup"><span data-stu-id="ba951-224">1</span></span>|<span data-ttu-id="ba951-225">Azul</span><span class="sxs-lookup"><span data-stu-id="ba951-225">Blue</span></span>|<span data-ttu-id="ba951-226">9</span><span class="sxs-lookup"><span data-stu-id="ba951-226">9</span></span>|<span data-ttu-id="ba951-227">Azul claro</span><span class="sxs-lookup"><span data-stu-id="ba951-227">Light blue</span></span>|  
|<span data-ttu-id="ba951-228">2</span><span class="sxs-lookup"><span data-stu-id="ba951-228">2</span></span>|<span data-ttu-id="ba951-229">Verde</span><span class="sxs-lookup"><span data-stu-id="ba951-229">Green</span></span>|<span data-ttu-id="ba951-230">10</span><span class="sxs-lookup"><span data-stu-id="ba951-230">10</span></span>|<span data-ttu-id="ba951-231">Verde-claro</span><span class="sxs-lookup"><span data-stu-id="ba951-231">Light green</span></span>|  
|<span data-ttu-id="ba951-232">3</span><span class="sxs-lookup"><span data-stu-id="ba951-232">3</span></span>|<span data-ttu-id="ba951-233">Ciano</span><span class="sxs-lookup"><span data-stu-id="ba951-233">Cyan</span></span>|<span data-ttu-id="ba951-234">11</span><span class="sxs-lookup"><span data-stu-id="ba951-234">11</span></span>|<span data-ttu-id="ba951-235">Ciano-claro</span><span class="sxs-lookup"><span data-stu-id="ba951-235">Light cyan</span></span>|  
|<span data-ttu-id="ba951-236">4</span><span class="sxs-lookup"><span data-stu-id="ba951-236">4</span></span>|<span data-ttu-id="ba951-237">Vermelho</span><span class="sxs-lookup"><span data-stu-id="ba951-237">Red</span></span>|<span data-ttu-id="ba951-238">12</span><span class="sxs-lookup"><span data-stu-id="ba951-238">12</span></span>|<span data-ttu-id="ba951-239">Vermelho-claro</span><span class="sxs-lookup"><span data-stu-id="ba951-239">Light red</span></span>|  
|<span data-ttu-id="ba951-240">5</span><span class="sxs-lookup"><span data-stu-id="ba951-240">5</span></span>|<span data-ttu-id="ba951-241">Magenta</span><span class="sxs-lookup"><span data-stu-id="ba951-241">Magenta</span></span>|<span data-ttu-id="ba951-242">13</span><span class="sxs-lookup"><span data-stu-id="ba951-242">13</span></span>|<span data-ttu-id="ba951-243">Magenta claro</span><span class="sxs-lookup"><span data-stu-id="ba951-243">Light magenta</span></span>|  
|<span data-ttu-id="ba951-244">6</span><span class="sxs-lookup"><span data-stu-id="ba951-244">6</span></span>|<span data-ttu-id="ba951-245">Amarelo</span><span class="sxs-lookup"><span data-stu-id="ba951-245">Yellow</span></span>|<span data-ttu-id="ba951-246">14</span><span class="sxs-lookup"><span data-stu-id="ba951-246">14</span></span>|<span data-ttu-id="ba951-247">Amarelo-claro</span><span class="sxs-lookup"><span data-stu-id="ba951-247">Light yellow</span></span>|  
|<span data-ttu-id="ba951-248">7</span><span class="sxs-lookup"><span data-stu-id="ba951-248">7</span></span>|<span data-ttu-id="ba951-249">Branco</span><span class="sxs-lookup"><span data-stu-id="ba951-249">White</span></span>|<span data-ttu-id="ba951-250">15</span><span class="sxs-lookup"><span data-stu-id="ba951-250">15</span></span>|<span data-ttu-id="ba951-251">Branco brilhante</span><span class="sxs-lookup"><span data-stu-id="ba951-251">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ba951-252">Este exemplo usa o `QBColor` função para alterar para a cor indicada pelo `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="ba951-252">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="ba951-253">`QBColor` aceita valores inteiros entre 0 e 15.</span><span class="sxs-lookup"><span data-stu-id="ba951-253">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba951-254">
            <paramref name="Color" /> está fora do intervalo de 0 a 15, inclusive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-254">
              <paramref name="Color" /> is outside of range 0 to 15, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">
          <span data-ttu-id="ba951-255">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-255">Required.</span>
          </span>
          <span data-ttu-id="ba951-256">
            <see langword="Integer" /> no intervalo 0 – 255, inclusive, que representa a intensidade do componente vermelho da cor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-256">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</span>
          </span>
        </param>
        <param name="Green">
          <span data-ttu-id="ba951-257">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-257">Required.</span>
          </span>
          <span data-ttu-id="ba951-258">
            <see langword="Integer" /> no intervalo 0 – 255, inclusive, que representa a intensidade do componente verde da cor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-258">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</span>
          </span>
        </param>
        <param name="Blue">
          <span data-ttu-id="ba951-259">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-259">Required.</span>
          </span>
          <span data-ttu-id="ba951-260">
            <see langword="Integer" /> no intervalo 0 – 255, inclusive, que representa a intensidade do componente azul da cor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-260">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-261">Retorna um valor <see langword="Integer" /> que representa um valor de cor RGB de um conjunto de componentes de cor vermelho, verde e azul.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-261">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-262">Retorna um valor <see langword="Integer" /> que representa um valor de cor RGB de um conjunto de componentes de cor vermelho, verde e azul.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-262">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-263">Métodos do aplicativo e as propriedades que aceitam uma especificação de cor esperam que essa especificação seja um número que representa um RGB valor de cor.</span><span class="sxs-lookup"><span data-stu-id="ba951-263">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="ba951-264">Um valor de cor RGB especifica a intensidade relativa de vermelho, verde e azul para fazer com que uma cor específica a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="ba951-264">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="ba951-265">Se o valor de qualquer argumento para `RGB` é maior que 255, 255 será usado.</span><span class="sxs-lookup"><span data-stu-id="ba951-265">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="ba951-266">A tabela a seguir lista algumas cores padrão e os valores de vermelhos, verdes e azuis que elas incluem.</span><span class="sxs-lookup"><span data-stu-id="ba951-266">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="ba951-267">Cor</span><span class="sxs-lookup"><span data-stu-id="ba951-267">Color</span></span>|<span data-ttu-id="ba951-268">Valor de vermelho</span><span class="sxs-lookup"><span data-stu-id="ba951-268">Red value</span></span>|<span data-ttu-id="ba951-269">Valor verde</span><span class="sxs-lookup"><span data-stu-id="ba951-269">Green value</span></span>|<span data-ttu-id="ba951-270">Valor azul</span><span class="sxs-lookup"><span data-stu-id="ba951-270">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="ba951-271">Preto</span><span class="sxs-lookup"><span data-stu-id="ba951-271">Black</span></span>|<span data-ttu-id="ba951-272">0</span><span class="sxs-lookup"><span data-stu-id="ba951-272">0</span></span>|<span data-ttu-id="ba951-273">0</span><span class="sxs-lookup"><span data-stu-id="ba951-273">0</span></span>|<span data-ttu-id="ba951-274">0</span><span class="sxs-lookup"><span data-stu-id="ba951-274">0</span></span>|  
|<span data-ttu-id="ba951-275">Azul</span><span class="sxs-lookup"><span data-stu-id="ba951-275">Blue</span></span>|<span data-ttu-id="ba951-276">0</span><span class="sxs-lookup"><span data-stu-id="ba951-276">0</span></span>|<span data-ttu-id="ba951-277">0</span><span class="sxs-lookup"><span data-stu-id="ba951-277">0</span></span>|<span data-ttu-id="ba951-278">255</span><span class="sxs-lookup"><span data-stu-id="ba951-278">255</span></span>|  
|<span data-ttu-id="ba951-279">Verde</span><span class="sxs-lookup"><span data-stu-id="ba951-279">Green</span></span>|<span data-ttu-id="ba951-280">0</span><span class="sxs-lookup"><span data-stu-id="ba951-280">0</span></span>|<span data-ttu-id="ba951-281">255</span><span class="sxs-lookup"><span data-stu-id="ba951-281">255</span></span>|<span data-ttu-id="ba951-282">0</span><span class="sxs-lookup"><span data-stu-id="ba951-282">0</span></span>|  
|<span data-ttu-id="ba951-283">Ciano</span><span class="sxs-lookup"><span data-stu-id="ba951-283">Cyan</span></span>|<span data-ttu-id="ba951-284">0</span><span class="sxs-lookup"><span data-stu-id="ba951-284">0</span></span>|<span data-ttu-id="ba951-285">255</span><span class="sxs-lookup"><span data-stu-id="ba951-285">255</span></span>|<span data-ttu-id="ba951-286">255</span><span class="sxs-lookup"><span data-stu-id="ba951-286">255</span></span>|  
|<span data-ttu-id="ba951-287">Vermelho</span><span class="sxs-lookup"><span data-stu-id="ba951-287">Red</span></span>|<span data-ttu-id="ba951-288">255</span><span class="sxs-lookup"><span data-stu-id="ba951-288">255</span></span>|<span data-ttu-id="ba951-289">0</span><span class="sxs-lookup"><span data-stu-id="ba951-289">0</span></span>|<span data-ttu-id="ba951-290">0</span><span class="sxs-lookup"><span data-stu-id="ba951-290">0</span></span>|  
|<span data-ttu-id="ba951-291">Magenta</span><span class="sxs-lookup"><span data-stu-id="ba951-291">Magenta</span></span>|<span data-ttu-id="ba951-292">255</span><span class="sxs-lookup"><span data-stu-id="ba951-292">255</span></span>|<span data-ttu-id="ba951-293">0</span><span class="sxs-lookup"><span data-stu-id="ba951-293">0</span></span>|<span data-ttu-id="ba951-294">255</span><span class="sxs-lookup"><span data-stu-id="ba951-294">255</span></span>|  
|<span data-ttu-id="ba951-295">Amarelo</span><span class="sxs-lookup"><span data-stu-id="ba951-295">Yellow</span></span>|<span data-ttu-id="ba951-296">255</span><span class="sxs-lookup"><span data-stu-id="ba951-296">255</span></span>|<span data-ttu-id="ba951-297">255</span><span class="sxs-lookup"><span data-stu-id="ba951-297">255</span></span>|<span data-ttu-id="ba951-298">0</span><span class="sxs-lookup"><span data-stu-id="ba951-298">0</span></span>|  
|<span data-ttu-id="ba951-299">Branco</span><span class="sxs-lookup"><span data-stu-id="ba951-299">White</span></span>|<span data-ttu-id="ba951-300">255</span><span class="sxs-lookup"><span data-stu-id="ba951-300">255</span></span>|<span data-ttu-id="ba951-301">255</span><span class="sxs-lookup"><span data-stu-id="ba951-301">255</span></span>|<span data-ttu-id="ba951-302">255</span><span class="sxs-lookup"><span data-stu-id="ba951-302">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ba951-303">Este exemplo mostra como o `RGB` função é usada para retornar um número inteiro que representa um `RGB` valor de cor.</span><span class="sxs-lookup"><span data-stu-id="ba951-303">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba951-304">
            <paramref name="Green" />, <paramref name="Blue" /> ou <paramref name="Red" /> está fora do intervalo de 0 a 255, inclusive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-304">
              <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">
          <span data-ttu-id="ba951-305">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-305">Required.</span>
          </span>
          <span data-ttu-id="ba951-306">Uma variável <see langword="String" /> que contém um nome do tipo Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-306">A <see langword="String" /> variable containing a Visual Basic type name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-307">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do sistema de uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-307">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-308">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do sistema de uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-308">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-309">`SystemTypeName` Retorna o nome totalmente qualificado common language runtime (CLR) tipo correspondente ao nome do tipo de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="ba951-309">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="ba951-310">Por exemplo, se `VbName` contém "Data", `SystemTypeName` retorna "System. DateTime".</span><span class="sxs-lookup"><span data-stu-id="ba951-310">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="ba951-311">Se `SystemTypeName` não reconhece o valor de `VbName`, ele retorna `Nothing` (não a cadeia de caracteres "Nothing").</span><span class="sxs-lookup"><span data-stu-id="ba951-311">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-312">O exemplo a seguir usa o `SystemTypeName` função para retornar nomes de tipo de dados para diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="ba951-312">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="ba951-313">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-313">Required.</span>
          </span>
          <span data-ttu-id="ba951-314">Variável <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-314">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="ba951-315">Se <see langword="Option Strict" /> for <see langword="Off" />, você poderá passar uma variável de qualquer tipo de dados, exceto uma estrutura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-315">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-316">Retorna um valor de <see langword="String" /> que contém informações de tipo de dados sobre uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-316">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-317">Retorna um valor de <see langword="String" /> que contém informações de tipo de dados sobre uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-317">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-318">A tabela a seguir mostra o `String` valores retornados por `TypeName` para conteúdos diferentes de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="ba951-318">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="ba951-319">`VarName` Conteúdo</span><span class="sxs-lookup"><span data-stu-id="ba951-319">`VarName` contents</span></span>|<span data-ttu-id="ba951-320">Cadeia de caracteres retornada</span><span class="sxs-lookup"><span data-stu-id="ba951-320">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="ba951-321">16-bit `True` ou `False` tipo de valor</span><span class="sxs-lookup"><span data-stu-id="ba951-321">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="ba951-322">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="ba951-322">"Boolean"</span></span>|  
|<span data-ttu-id="ba951-323">tipo de valor binário de 8 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-323">8-bit binary value type</span></span>|<span data-ttu-id="ba951-324">"Bytes"</span><span class="sxs-lookup"><span data-stu-id="ba951-324">"Byte"</span></span>|  
|<span data-ttu-id="ba951-325">tipo de valor de caractere de 16 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-325">16-bit character value type</span></span>|<span data-ttu-id="ba951-326">"Char"</span><span class="sxs-lookup"><span data-stu-id="ba951-326">"Char"</span></span>|  
|<span data-ttu-id="ba951-327">tipo de data de 64 bits e o valor de tempo</span><span class="sxs-lookup"><span data-stu-id="ba951-327">64-bit date and time value type</span></span>|<span data-ttu-id="ba951-328">"Data"</span><span class="sxs-lookup"><span data-stu-id="ba951-328">"Date"</span></span>|  
|<span data-ttu-id="ba951-329">Tipo de referência que indica dados ausentes ou inexistentes</span><span class="sxs-lookup"><span data-stu-id="ba951-329">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="ba951-330">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="ba951-330">"DBNull"</span></span>|  
|<span data-ttu-id="ba951-331">tipo de valor numérico ponto fixo de 128 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-331">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="ba951-332">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="ba951-332">"Decimal"</span></span>|  
|<span data-ttu-id="ba951-333">tipo de valor numérico ponto flutuante de 64 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-333">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="ba951-334">"Double"</span><span class="sxs-lookup"><span data-stu-id="ba951-334">"Double"</span></span>|  
|<span data-ttu-id="ba951-335">tipo de valor inteiro de 32 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-335">32-bit integer value type</span></span>|<span data-ttu-id="ba951-336">"Integer"</span><span class="sxs-lookup"><span data-stu-id="ba951-336">"Integer"</span></span>|  
|<span data-ttu-id="ba951-337">Tipo de referência que aponta para um objeto não-especializado</span><span class="sxs-lookup"><span data-stu-id="ba951-337">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="ba951-338">'Objeto'</span><span class="sxs-lookup"><span data-stu-id="ba951-338">"Object"</span></span>|  
|<span data-ttu-id="ba951-339">Tipo de referência que aponta para um objeto especializado criado a partir de classe *objectclass*</span><span class="sxs-lookup"><span data-stu-id="ba951-339">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="ba951-340">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="ba951-340">"*objectclass*"</span></span>|  
|<span data-ttu-id="ba951-341">tipo de valor inteiro de 64 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-341">64-bit integer value type</span></span>|<span data-ttu-id="ba951-342">"Longo"</span><span class="sxs-lookup"><span data-stu-id="ba951-342">"Long"</span></span>|  
|<span data-ttu-id="ba951-343">Tipo de referência com nenhum objeto atualmente atribuído a ele</span><span class="sxs-lookup"><span data-stu-id="ba951-343">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="ba951-344">"Nada"</span><span class="sxs-lookup"><span data-stu-id="ba951-344">"Nothing"</span></span>|  
|<span data-ttu-id="ba951-345">tipo de valor inteiro de 8 bits assinado</span><span class="sxs-lookup"><span data-stu-id="ba951-345">8-bit signed integer value type</span></span>|<span data-ttu-id="ba951-346">"SByte"</span><span class="sxs-lookup"><span data-stu-id="ba951-346">"SByte"</span></span>|  
|<span data-ttu-id="ba951-347">tipo de valor inteiro de 16 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-347">16-bit integer value type</span></span>|<span data-ttu-id="ba951-348">"Curto"</span><span class="sxs-lookup"><span data-stu-id="ba951-348">"Short"</span></span>|  
|<span data-ttu-id="ba951-349">tipo de valor numérico ponto flutuante de 32 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-349">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="ba951-350">"Único"</span><span class="sxs-lookup"><span data-stu-id="ba951-350">"Single"</span></span>|  
|<span data-ttu-id="ba951-351">Tipo de referência que aponta para uma cadeia de caracteres de 16 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-351">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="ba951-352">"String"</span><span class="sxs-lookup"><span data-stu-id="ba951-352">"String"</span></span>|  
|<span data-ttu-id="ba951-353">tipo de valor inteiro não assinado de 32 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-353">32-bit unsigned integer value type</span></span>|<span data-ttu-id="ba951-354">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="ba951-354">"UInteger"</span></span>|  
|<span data-ttu-id="ba951-355">tipo de valor inteiro não assinado de 64 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-355">64-bit unsigned integer value type</span></span>|<span data-ttu-id="ba951-356">"ULong"</span><span class="sxs-lookup"><span data-stu-id="ba951-356">"ULong"</span></span>|  
|<span data-ttu-id="ba951-357">tipo de valor inteiro não assinado de 16 bits</span><span class="sxs-lookup"><span data-stu-id="ba951-357">16-bit unsigned integer value type</span></span>|<span data-ttu-id="ba951-358">"UShort"</span><span class="sxs-lookup"><span data-stu-id="ba951-358">"UShort"</span></span>|  
  
 <span data-ttu-id="ba951-359">Se `VarName` é uma matriz, a cadeia de caracteres retornada poderá ser qualquer uma das cadeias de caracteres na tabela anterior com parênteses vazios anexados.</span><span class="sxs-lookup"><span data-stu-id="ba951-359">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="ba951-360">Por exemplo, se `VarName` aponta para uma matriz de inteiros, `TypeName` retorna "Integer ()".</span><span class="sxs-lookup"><span data-stu-id="ba951-360">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="ba951-361">Quando `TypeName` retorna o nome de um tipo de referência como uma classe, ele retorna somente o nome em si, não o nome qualificado.</span><span class="sxs-lookup"><span data-stu-id="ba951-361">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="ba951-362">Por exemplo, se `VarName` aponta para um objeto da classe <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` retorna "PaperSource".</span><span class="sxs-lookup"><span data-stu-id="ba951-362">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="ba951-363">Observe que, se a variável é declarada com um determinado tipo de classe, mas não tem um objeto atribuído a ele, `TypeName` retorna "Nada".</span><span class="sxs-lookup"><span data-stu-id="ba951-363">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-364">O exemplo a seguir usa o `TypeName` função para retornar informações sobre diversas variáveis de tipo de dados.</span><span class="sxs-lookup"><span data-stu-id="ba951-364">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="ba951-365">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-365">Required.</span>
          </span>
          <span data-ttu-id="ba951-366">Matriz de qualquer tipo de dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-366">Array of any data type.</span>
          </span>
          <span data-ttu-id="ba951-367">A matriz na qual você deseja encontrar o subscrito mais alto possível de uma dimensão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-367">The array in which you want to find the highest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="ba951-368">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-368">Optional.</span>
          </span>
          <span data-ttu-id="ba951-369">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-369">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="ba951-370">A dimensão para a qual o subscrito mais alto possível deve ser retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-370">The dimension for which the highest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="ba951-371">Use 1 para a primeira dimensão, 2 para a segunda e assim por diante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-371">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="ba951-372">Se <c>Classificar</c> for omitido, 1 será pressuposto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-372">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-373">Retorna o subscrito mais alto disponível para a dimensão indicada de uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-373">Returns the highest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-374">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-374">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="ba951-375">O valor mais alto da subscrição que a dimensão especificada pode conter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-375">The highest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="ba951-376">Se <paramref name="Array" /> tiver apenas um elemento, <see langword="UBound" /> retornará 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-376">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span>
          </span>
          <span data-ttu-id="ba951-377">Se <paramref name="Array" /> não tiver elementos (por exemplo, se for uma cadeia de tamanho zero), <see langword="UBound" /> retornará -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-377">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-378">Como subscritos de matriz iniciam em 0, o comprimento de uma dimensão é maior que o maior subscrito disponível para a dimensão.</span><span class="sxs-lookup"><span data-stu-id="ba951-378">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="ba951-379">Para uma matriz com as seguintes dimensões, `UBound` retorna os valores na tabela a seguir:</span><span class="sxs-lookup"><span data-stu-id="ba951-379">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="ba951-380">Chamada para UBound</span><span class="sxs-lookup"><span data-stu-id="ba951-380">Call to UBound</span></span>|<span data-ttu-id="ba951-381">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="ba951-381">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="ba951-382">100</span><span class="sxs-lookup"><span data-stu-id="ba951-382">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="ba951-383">5</span><span class="sxs-lookup"><span data-stu-id="ba951-383">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="ba951-384">4</span><span class="sxs-lookup"><span data-stu-id="ba951-384">4</span></span>|  
  
 <span data-ttu-id="ba951-385">Você pode usar `UBound` para determinar o total de número de elementos em uma matriz, mas você deve ajustar o valor retornado para compensar o fato de que o subscritos iniciam em 0.</span><span class="sxs-lookup"><span data-stu-id="ba951-385">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="ba951-386">O exemplo a seguir calcula o tamanho total da matriz `a` no exemplo anterior:</span><span class="sxs-lookup"><span data-stu-id="ba951-386">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="ba951-387">O valor calculado para `total` é 3030, que é 101 * 6 * 5.</span><span class="sxs-lookup"><span data-stu-id="ba951-387">The value calculated for `total` is 3030, which is 101 * 6 * 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-388">O exemplo a seguir usa o `UBound` função para determinar a maior subscrição disponível para a dimensão indicada de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="ba951-388">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba951-389">
            <paramref name="Array" /> é <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-389">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="ba951-390">
            <paramref name="Rank" /> é menor que 1 ou <paramref name="Rank" /> é maior que a classificação de <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-390">
              <paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="ba951-391">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-391">Required.</span>
          </span>
          <span data-ttu-id="ba951-392">Variável <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-392">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="ba951-393">Se <see langword="Option Strict" /> for <see langword="Off" />, você poderá passar uma variável de qualquer tipo de dados, exceto uma estrutura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-393">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-394">Retorna um valor <see langword="Integer" /> que contém a classificação de tipo de dados de uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-394">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-395">Retorna um valor <see langword="Integer" /> que contém a classificação de tipo de dados de uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-395">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-396">O valor inteiro retornado por `VarType` é membro de <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="ba951-396">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="ba951-397">A tabela a seguir mostra os valores retornados por `VarType` para casos especiais de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="ba951-397">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="ba951-398">Tipo de dados representado pelo `VarName`</span><span class="sxs-lookup"><span data-stu-id="ba951-398">Data type represented by `VarName`</span></span>|<span data-ttu-id="ba951-399">Valor retornado pelo `VarType`</span><span class="sxs-lookup"><span data-stu-id="ba951-399">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="ba951-400">Nothing</span><span class="sxs-lookup"><span data-stu-id="ba951-400">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="ba951-401">Enumeração</span><span class="sxs-lookup"><span data-stu-id="ba951-401">Enumeration</span></span>|<span data-ttu-id="ba951-402">Tipo de dados subjacente (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, ou `ULong`)</span><span class="sxs-lookup"><span data-stu-id="ba951-402">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="ba951-403">Matriz</span><span class="sxs-lookup"><span data-stu-id="ba951-403">Array</span></span>|<span data-ttu-id="ba951-404">OR bit a bit de tipo de elemento de matriz e `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="ba951-404">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="ba951-405">Matriz de matrizes</span><span class="sxs-lookup"><span data-stu-id="ba951-405">Array of arrays</span></span>|<span data-ttu-id="ba951-406">OR bit a bit de `VariantType.Object` e `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="ba951-406">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="ba951-407">Estrutura (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="ba951-407">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="ba951-408">Unknown</span><span class="sxs-lookup"><span data-stu-id="ba951-408">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="ba951-409">O exemplo a seguir usa o `VarType` função para retornar informações de classificação de tipo de dados sobre diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="ba951-409">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">
          <span data-ttu-id="ba951-410">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-410">Required.</span>
          </span>
          <span data-ttu-id="ba951-411">Variável <see langword="String" /> que contém um nome de tipo usado pelo Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-411">
              <see langword="String" /> variable containing a type name used by the common language runtime.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba951-412">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do Visual Basic de uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-412">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba951-413">Retorna um valor <see langword="String" /> que contém o nome do tipo de dados do Visual Basic de uma variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba951-413">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba951-414">`VbTypeName` Retorna o nome do tipo de Visual Basic correspondente ao nome do tipo common language runtime.</span><span class="sxs-lookup"><span data-stu-id="ba951-414">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="ba951-415">Por exemplo, se `UrtName` contiver "Int32" ou "System. Int32", `VbTypeName` retorna "Integer".</span><span class="sxs-lookup"><span data-stu-id="ba951-415">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="ba951-416">Se `VbTypeName` não reconhece o valor de `UrtName`, ele retorna `Nothing` (não a cadeia de caracteres "Nothing").</span><span class="sxs-lookup"><span data-stu-id="ba951-416">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="ba951-417">O nome do tipo em `UrtName` pode ser obtido de várias fontes, por exemplo o <xref:System.Reflection.MemberInfo.Name%2A> propriedade o <xref:System.Reflection.MemberInfo> matriz do <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="ba951-417">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba951-418">O exemplo a seguir usa o `VbTypeName` função para retornar nomes de tipo de dados para diversas variáveis.</span><span class="sxs-lookup"><span data-stu-id="ba951-418">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>