<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Collection.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac528818091bfa2bd27afdc2ecfcceb158714c2dc63.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28818091bfa2bd27afdc2ecfcceb158714c2dc63</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>A Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> is an ordered set of items that can be referred to as a unit.</source>
          <target state="translated">Um Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> é um conjunto ordenado de itens que podem ser referenciados como uma unidade.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of a Visual Basic <ph id="ph3">`Collection`</ph>.</source>
          <target state="translated">Sempre que possível, você deve usar as coleções genéricas no <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace ou o <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace em vez de um Visual Basic <ph id="ph3">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>coleções<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The Visual Basic <ph id="ph1">`Collection`</ph> object provides a convenient way to refer to a related group of items as a single object.</source>
          <target state="translated">O Visual Basic <ph id="ph1">`Collection`</ph> objeto fornece uma maneira conveniente para se referir a um grupo relacionado de itens como um único objeto.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The items, or <bpt id="p1">*</bpt>elements<ept id="p1">*</ept>, in a collection need only be related by the fact that they exist in the collection.</source>
          <target state="translated">Os itens ou <bpt id="p1">*</bpt>elementos<ept id="p1">*</ept>, em uma coleção somente precisa ser relacionada pelo fato de que existam na coleção.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Elements of a collection do not have to share the same data type.</source>
          <target state="translated">Elementos de uma coleção não é necessário que compartilhar o mesmo tipo de dados.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>You can create a collection the same way you create other objects, as the following example illustrates.</source>
          <target state="translated">Você pode criar uma coleção da mesma maneira que você criar outros objetos, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Once you have created a collection, you can do any of the following:</source>
          <target state="translated">Depois de criar uma coleção, você pode fazer o seguinte:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Add an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method.</source>
          <target state="translated">Adicionar um elemento com o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> method.</source>
          <target state="translated">Remover um elemento com o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove all elements with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> method.</source>
          <target state="translated">Remover todos os elementos com o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Find out how many elements the collection contains with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property.</source>
          <target state="translated">Descobrir quantos elementos a coleção contém com o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Check whether a specific element is present with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> method.</source>
          <target state="translated">Verifique se um elemento específico está presente com o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Return a specific element from the collection with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property.</source>
          <target state="translated">Retorna um elemento específico da coleção com o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterate through the entire collection with the <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Percorrer toda a coleção com o <bpt id="p1">[</bpt>para cada um... Próxima instrução<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Although the Visual Basic <ph id="ph1">`Collection`</ph> object has functionality identical to the <ph id="ph2">`Collection`</ph> object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</source>
          <target state="translated">Embora o Visual Basic <ph id="ph1">`Collection`</ph> objeto tem funcionalidade idêntica do <ph id="ph2">`Collection`</ph> do objeto no Visual Basic 6.0, os dois não podem interoperar em um ambiente COM.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterating through a Visual Basic <ph id="ph1">`Collection`</ph> is not a thread-safe procedure.</source>
          <target state="translated">Iterando por meio de um Visual Basic <ph id="ph1">`Collection`</ph> não é um procedimento de thread-safe.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</source>
          <target state="translated">Mesmo se a coleção for sincronizada, outros threads ainda podem modificar a coleção, fazendo com que o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir a segurança de thread durante a enumeração, bloqueie a coleção ou capture as exceções resultante de alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information on locking a programming element, see <bpt id="p1">[</bpt>SyncLock Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o bloqueio de um elemento de programação, consulte <bpt id="p1">[</bpt>Instrução SyncLock<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The following example creates the <ph id="ph1">`Collection`</ph> object <ph id="ph2">`names`</ph> and a dialog box with which a user can add objects (names) to the collection.</source>
          <target state="translated">O exemplo a seguir cria o <ph id="ph1">`Collection`</ph> objeto <ph id="ph2">`names`</ph> e uma caixa de diálogo com a qual um usuário pode adicionar objetos (nomes) à coleção.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>It then displays the names in the collection, and finally empties the collection without disposing of the <ph id="ph1">`Collection`</ph> object itself.</source>
          <target state="translated">Ele exibirá os nomes na coleção e finalmente desocupada coleção sem descartar o <ph id="ph1">`Collection`</ph> objeto propriamente dito.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To see how this works, choose the <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu and declare a public variable called <ph id="ph1">`instanceName`</ph> at the module level of <ph id="ph2">`nameClass`</ph> (type <ph id="ph3">`Public instanceName`</ph>) to hold the names of each instance.</source>
          <target state="translated">Para ver como isso funciona, escolha o <bpt id="p1">**</bpt>Adicionar classe<ept id="p1">**</ept> comando o <bpt id="p2">**</bpt>projeto<ept id="p2">**</ept> menu e declarar uma variável pública chamada <ph id="ph1">`instanceName`</ph> no nível de módulo de <ph id="ph2">`nameClass`</ph> (tipo <ph id="ph3">`Public instanceName`</ph>) para manter os nomes de cada instância.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Leave the default name as <ph id="ph1">`nameClass`</ph>.</source>
          <target state="translated">Deixe o nome padrão como <ph id="ph1">`nameClass`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Copy and paste the following code into the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> section of another module, and then start it with the statement <ph id="ph1">`classNamer`</ph> in another procedure.</source>
          <target state="translated">Copie e cole o seguinte código para o <bpt id="p1">**</bpt>geral<ept id="p1">**</ept> seção de outro módulo, e, em seguida, iniciá-lo com a instrução <ph id="ph1">`classNamer`</ph> em outro procedimento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>(This example works only with host applications that support classes.)</source>
          <target state="translated">(Este exemplo só funciona com aplicativos de host que oferece suporte para classes.)</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Creates and returns a new <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Cria e retorna um novo objeto <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collection returned by this constructor is empty and does not have any initial capacity allocated.</source>
          <target state="translated">O <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> coleção retornada por esse construtor está vazia e não tem nenhuma capacidade inicial alocada.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collections are not compatible with the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> collections available in the <ph id="ph3">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> namespaces.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> coleções não são compatíveis com o <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> coleções disponíveis no <ph id="ph3">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, e <ph id="ph5">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> namespaces.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The following example creates a new <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collection and assigns it to the variable <ph id="ph2">`coll`</ph>:</source>
          <target state="translated">O exemplo a seguir cria um novo <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> coleção e o atribui à variável <ph id="ph2">`coll`</ph>:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>This <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">Isso <ph id="ph1">`Collection`</ph> objeto é baseado em um, o que significa que os valores de índice dos elementos variam entre 1 e o valor da <ph id="ph2">`Count`</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collections hold elements of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> Mantenha a coleções de elementos do tipo <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An object of any type that specifies the element to add to the collection.</source>
          <target state="translated">Um objeto de qualquer tipo que especifica o elemento a ser adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</source>
          <target state="translated">Uma expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> exclusiva, que especifica uma cadeia de caracteres chave que pode ser usada em vez de um índice posicional, para acessar esse novo elemento na coleção.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">Uma expressão que especifica uma posição relativa na coleção.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection before the element identified by the <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">O elemento a ser adicionado é colocado na coleção antes do elemento identificado pelo argumento <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> for uma expressão numérica, ele deverá ser um número entre 1 e o valor da propriedade <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> da coleção.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> for uma expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>, ele deverá corresponder à cadeia de caracteres de chave especificada quando o elemento que está sendo referenciado foi adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Não é possível especificar <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> e <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">Uma expressão que especifica uma posição relativa na coleção.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection after the element identified by the <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">O elemento a ser adicionado é colocado na coleção após o elemento identificado pelo argumento <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see langword="Count" /&gt;</ph> property.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> for uma expressão numérica, ele deverá ser um número entre 1 e o valor da propriedade <ph id="ph1">&lt;see langword="Count" /&gt;</ph> da coleção.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element referred to was added to the collection.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> for uma expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>, ele deverá corresponder à cadeia de caracteres de chave especificada quando o elemento referenciado foi adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Não é possível especificar <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> e <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Adds an element to a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Adiciona um elemento a um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <ph id="ph1">`Before`</ph> or <ph id="ph2">`After`</ph> argument must refer to an existing element of the collection; otherwise, an error occurs.</source>
          <target state="translated">O <ph id="ph1">`Before`</ph> ou <ph id="ph2">`After`</ph> argumento deve se referir a um elemento existente da coleção; caso contrário, ocorrerá um erro.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If both the <ph id="ph1">`Before`</ph> and <ph id="ph2">`After`</ph> arguments are omitted, the new object is added to the end of the collection.</source>
          <target state="translated">Se o <ph id="ph1">`Before`</ph> e <ph id="ph2">`After`</ph> argumentos forem omitidos, o novo objeto é adicionado ao final da coleção.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An error also occurs if a specified <ph id="ph1">`Key`</ph> value matches the key for an existing element of the collection.</source>
          <target state="translated">Também ocorrerá um erro se um especificado <ph id="ph1">`Key`</ph> valor corresponde à chave para um elemento existente da coleção.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The following example uses the <ph id="ph1">`Add`</ph> method to add <ph id="ph2">`child`</ph> objects — instances of a class called <ph id="ph3">`child`</ph> containing a <ph id="ph4">`Public`</ph> property <ph id="ph5">`name`</ph> — to a collection called <ph id="ph6">`family`</ph>.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Add`</ph> método para adicionar <ph id="ph2">`child`</ph> objetos — instâncias de uma classe chamada <ph id="ph3">`child`</ph> que contém um <ph id="ph4">`Public`</ph> propriedade <ph id="ph5">`name`</ph> — para uma coleção chamada <ph id="ph6">`family`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>To see how this works, create a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls and set their <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> properties to <ph id="ph4">`Add`</ph> and <ph id="ph5">`List`</ph>.</source>
          <target state="translated">Para ver como isso funciona, crie um <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> com dois <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> controles e defina suas <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> propriedades <ph id="ph4">`Add`</ph> e <ph id="ph5">`List`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Add the <ph id="ph1">`child`</ph> class definition and the <ph id="ph2">`family`</ph> declaration to the form code.</source>
          <target state="translated">Adicionar o <ph id="ph1">`child`</ph> definição da classe e o <ph id="ph2">`family`</ph> declaração para o código do formulário.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Modify the <ph id="ph1">`_Click`</ph> event handlers for the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and <bpt id="p2">**</bpt>List<ept id="p2">**</ept> buttons as shown.</source>
          <target state="translated">Modificar o <ph id="ph1">`_Click`</ph> manipuladores de eventos para o <bpt id="p1">**</bpt>adicionar<ept id="p1">**</ept> e <bpt id="p2">**</bpt>lista<ept id="p2">**</ept> botões, conforme mostrado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button allows you to add children.</source>
          <target state="translated">O <bpt id="p1">**</bpt>adicionar<ept id="p1">**</ept> botão permite que você adicione filhos.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>List<ept id="p1">**</ept> button displays the names of all the children.</source>
          <target state="translated">O <bpt id="p1">**</bpt>lista<ept id="p1">**</ept> botão exibe os nomes de todos os filhos.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>Deletes all elements of a Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Exclui todos os elementos de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> do Visual Basic.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>The <ph id="ph1">`Clear`</ph> method empties the collection and resets its <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property to 0.</source>
          <target state="translated">O <ph id="ph1">`Clear`</ph> método limpa a coleção e redefine sua <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriedade como 0.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies the key for which to search the elements of the collection.</source>
          <target state="translated">Uma expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> que especifica a chave pela qual pesquisar os elementos da coleção.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Retorna um valor <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> que indica se um objeto do Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> contém um elemento com uma chave específica.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Retorna um valor <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> que indica se um objeto do Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> contém um elemento com uma chave específica.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source><ph id="ph1">`Contains`</ph> returns <ph id="ph2">`True`</ph> if the collection contains an element with a key exactly matching <ph id="ph3">`Key`</ph>.</source>
          <target state="translated"><ph id="ph1">`Contains`</ph> Retorna <ph id="ph2">`True`</ph> se a coleção contém um elemento com uma chave exatamente correspondente <ph id="ph3">`Key`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Otherwise, <ph id="ph1">`Contains`</ph> returns <ph id="ph2">`False`</ph>.</source>
          <target state="translated">Caso contrário, <ph id="ph1">`Contains`</ph> retorna <ph id="ph2">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Case is ignored when matching key values.</source>
          <target state="translated">Caso é ignorado quando valores de chave correspondentes.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A Visual Basic <ph id="ph1">`Collection`</ph> can hold some elements that have keys and other elements without keys.</source>
          <target state="translated">Um Visual Basic <ph id="ph1">`Collection`</ph> pode conter alguns elementos que têm chaves e outros elementos sem chaves.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>This depends on whether the call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method supplies an argument to the optional <ph id="ph2">`Key`</ph> parameter.</source>
          <target state="translated">Isso depende se a chamada para o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> método fornece um argumento opcional <ph id="ph2">`Key`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>If you intend to search the collection for elements using their keys, remember to supply the <ph id="ph1">`Key`</ph> argument every time you call the <ph id="ph2">`Add`</ph> method.</source>
          <target state="translated">Se você pretende pesquisar a coleção de elementos usando suas chaves, lembre-se de fornecer o <ph id="ph1">`Key`</ph> argumento toda vez que você chamar o <ph id="ph2">`Add`</ph> método.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> contendo o número de elementos em uma coleção.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> contendo o número de elementos em uma coleção.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Use the <ph id="ph1">`Count`</ph> property to determine the number of elements in a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Use o <ph id="ph1">`Count`</ph> propriedade para determinar o número de elementos em uma <ph id="ph2">`Collection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>This example illustrates the use of the <ph id="ph1">`Count`</ph> property to display the number of elements in a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Este exemplo ilustra o uso do <ph id="ph1">`Count`</ph> propriedade para exibir o número de elementos em uma <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto na variável <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>The <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">O <ph id="ph1">`Collection`</ph> objeto é baseado em um, o que significa que os valores de índice dos elementos variam entre 1 e o valor da <ph id="ph2">`Count`</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Retorna uma referência a um objeto de enumerador usado para iterar sobre um objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Retorna uma referência a um objeto de enumerador usado para iterar sobre um objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> calls <ph id="ph1">`GetEnumerator`</ph> to obtain an enumerator object to support iteration over a collection's elements.</source>
          <target state="translated">O <bpt id="p1">[</bpt>para cada um... Próxima instrução<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> chamadas <ph id="ph1">`GetEnumerator`</ph> para obter um objeto enumerator para oferecer suporte à iteração sobre os elementos da coleção.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Normally, you use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop to traverse a collection or array, and you do not need to call <ph id="ph3">`GetEnumerator`</ph> explicitly.</source>
          <target state="translated">Normalmente, você usa um <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> para atravessar uma coleção ou matriz, e você não precisa chamar <ph id="ph3">`GetEnumerator`</ph> explicitamente.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>If you need closer control over the iteration than the <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> statements provide, you can use the <ph id="ph3">`GetEnumerator`</ph> method to perform a customized traversal.</source>
          <target state="translated">Se precisar de mais controle sobre a iteração que o <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> fornecer instruções, você pode usar o <ph id="ph3">`GetEnumerator`</ph> método para executar uma passagem personalizada.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following are some cases in which you might need to do this.</source>
          <target state="translated">A seguir estão alguns casos em que você talvez precise fazer isso.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to return to the beginning of the collection and start the iteration again before it is finished.</source>
          <target state="translated">Você talvez queira retornar ao início da coleção e iniciar a iteração novamente antes de ser concluído.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to skip over one or more elements for a variety of reasons.</source>
          <target state="translated">Você talvez queira ignorar um ou mais elementos por uma variedade de razões.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might need to change the elements of the collection in the middle of a traversal.</source>
          <target state="translated">Talvez seja necessário alterar os elementos da coleção no meio de uma passagem.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>In this case you must obtain a new enumerator object because the previous one is invalidated.</source>
          <target state="translated">Nesse caso, você deve obter um novo objeto de enumerador porque anterior é invalidado.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following example shows how to use <ph id="ph1">`GetEnumerator`</ph> to retrieve all the elements of a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">O exemplo a seguir mostra como usar <ph id="ph1">`GetEnumerator`</ph> para recuperar todos os elementos de uma <ph id="ph2">`Collection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source><ph id="ph1">`GetEnumerator`</ph> constructs and returns an enumerator object, which implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface of the <ph id="ph3">&lt;xref:System.Collections&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">`GetEnumerator`</ph> cria e retorna um objeto de enumerador, que implementa o <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface do <ph id="ph3">&lt;xref:System.Collections&gt;</ph> namespace.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The enumerator object exposes the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> methods.</source>
          <target state="translated">O objeto enumerator expõe o <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriedade e o <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>para cada um... Próxima instrução<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) Uma expressão numérica que especifica a posição de um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> deve ser um número entre 1 e o valor da propriedade <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> da coleção.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">Ou (B) Uma expressão <ph id="ph1">&lt;see langword="Object" /&gt;</ph> que especifica a posição ou a cadeia de caracteres de chave de um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Se <ph id="ph1">`Index`</ph> é do tipo <ph id="ph2">`Object`</ph>, o <ph id="ph3">`Item`</ph> propriedade tentará tratá-lo um <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> matriz ou valor inteiro.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Se <ph id="ph1">`Item`</ph> não é possível converter <ph id="ph2">`Index`</ph> para <ph id="ph3">`String`</ph> ou <ph id="ph4">`Integer`</ph>, ele lança uma <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">O <ph id="ph1">`Item`</ph> é a propriedade padrão para uma coleção.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Portanto, as linhas de código a seguir são equivalentes.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Item`</ph> propriedade para recuperar uma referência a um objeto em uma coleção.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Ele cria <ph id="ph1">`birthdays`</ph> como um <ph id="ph2">`Collection`</ph> de objeto e, em seguida, recupera o objeto que representa o aniversário de Bill, usando a chave <ph id="ph3">`"Bill"`</ph> como o <ph id="ph4">`Index`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Observe que a primeira chamada especifica explicitamente o <ph id="ph1">`Item`</ph> propriedade, mas o segundo não.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Ambas as chamadas funcionam porque o <ph id="ph1">`Item`</ph> é a propriedade padrão para um <ph id="ph2">`Collection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) Uma expressão numérica que especifica a posição de um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> deve ser um número entre 1 e o valor da propriedade <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> da coleção.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">Ou (B) Uma expressão <ph id="ph1">&lt;see langword="Object" /&gt;</ph> que especifica a posição ou a cadeia de caracteres de chave de um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Se <ph id="ph1">`Index`</ph> é do tipo <ph id="ph2">`Object`</ph>, o <ph id="ph3">`Item`</ph> propriedade tentará tratá-lo um <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> matriz ou valor inteiro.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Se <ph id="ph1">`Item`</ph> não é possível converter <ph id="ph2">`Index`</ph> para <ph id="ph3">`String`</ph> ou <ph id="ph4">`Integer`</ph>, ele lança uma <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">O <ph id="ph1">`Item`</ph> é a propriedade padrão para uma coleção.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Portanto, as linhas de código a seguir são equivalentes.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Item`</ph> propriedade para recuperar uma referência a um objeto em uma coleção.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Ele cria <ph id="ph1">`birthdays`</ph> como um <ph id="ph2">`Collection`</ph> de objeto e, em seguida, recupera o objeto que representa o aniversário de Bill, usando a chave <ph id="ph3">`"Bill"`</ph> como o <ph id="ph4">`Index`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Observe que a primeira chamada especifica explicitamente o <ph id="ph1">`Item`</ph> propriedade, mas o segundo não.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Ambas as chamadas funcionam porque o <ph id="ph1">`Item`</ph> é a propriedade padrão para um <ph id="ph2">`Collection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">Uma expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> exclusiva, que especifica uma cadeia de caracteres chave que pode ser usada, em vez de um índice posicional, para acessar um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> deve corresponder ao argumento <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> especificado quando o elemento foi adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retorna um elemento específico de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> por posição ou por chave.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">Somente leitura.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Se <ph id="ph1">`Index`</ph> é do tipo <ph id="ph2">`Object`</ph>, o <ph id="ph3">`Item`</ph> propriedade tentará tratá-lo um <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> matriz ou valor inteiro.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Se <ph id="ph1">`Item`</ph> não é possível converter <ph id="ph2">`Index`</ph> para <ph id="ph3">`String`</ph> ou <ph id="ph4">`Integer`</ph>, ele lança uma <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">O <ph id="ph1">`Item`</ph> é a propriedade padrão para uma coleção.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Portanto, as linhas de código a seguir são equivalentes.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Item`</ph> propriedade para recuperar uma referência a um objeto em uma coleção.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Ele cria <ph id="ph1">`birthdays`</ph> como um <ph id="ph2">`Collection`</ph> de objeto e, em seguida, recupera o objeto que representa o aniversário de Bill, usando a chave <ph id="ph3">`"Bill"`</ph> como o <ph id="ph4">`Index`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Observe que a primeira chamada especifica explicitamente o <ph id="ph1">`Item`</ph> propriedade, mas o segundo não.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Ambas as chamadas funcionam porque o <ph id="ph1">`Item`</ph> é a propriedade padrão para um <ph id="ph2">`Collection`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Remove um elemento de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">Uma expressão numérica que especifica a posição de um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> deve ser um número entre 1 e o valor da propriedade <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> da coleção.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Remove um elemento de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">Quando <ph id="ph1">`Remove`</ph> exclui um elemento de uma coleção, ele diminui a coleção <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">Ele também diminui o <ph id="ph1">`Index`</ph> valor de cada elemento que anteriormente seguia o elemento excluído na coleção.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">Se um elemento foi adicionado à coleção sem uma <ph id="ph1">`Key`</ph>, você deve usar o <ph id="ph2">`Index`</ph> para removê-lo.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Este exemplo ilustra o uso do <ph id="ph1">`Remove`</ph> método para remover objetos de uma <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto na variável <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">Seguindo as quatro chamadas para o <ph id="ph1">`Add`</ph> método, o <ph id="ph2">`Count`</ph> propriedade contiver 4, elemento <ph id="ph3">`"Bill"`</ph> tem valor de índice 1 e o elemento <ph id="ph4">`"Pete"`</ph> tem valor de índice 4.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">Após a primeira chamada para <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> é 3, elemento <ph id="ph3">`"Bill"`</ph> é excluído e o elemento <ph id="ph4">`"Pete"`</ph> tem valor de índice 3.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">Após a segunda chamada para <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> é 2, elemento <ph id="ph3">`"Mike"`</ph> é excluído e o elemento <ph id="ph4">`"Pete"`</ph> tem valor de índice 2.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">Uma expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> exclusiva, que especifica uma cadeia de caracteres chave que pode ser usada, em vez de um índice posicional, para acessar um elemento da coleção.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> deve corresponder ao argumento <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> especificado quando o elemento foi adicionado à coleção.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Remove um elemento de um objeto <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">Quando <ph id="ph1">`Remove`</ph> exclui um elemento de uma coleção, ele diminui a coleção <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriedade por um.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">Ele também diminui o <ph id="ph1">`Index`</ph> valor de cada elemento que anteriormente seguia o elemento excluído na coleção.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">Se um elemento foi adicionado à coleção sem uma <ph id="ph1">`Key`</ph>, você deve usar o <ph id="ph2">`Index`</ph> para removê-lo.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Este exemplo ilustra o uso do <ph id="ph1">`Remove`</ph> método para remover objetos de uma <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto na variável <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">Seguindo as quatro chamadas para o <ph id="ph1">`Add`</ph> método, o <ph id="ph2">`Count`</ph> propriedade contiver 4, elemento <ph id="ph3">`"Bill"`</ph> tem valor de índice 1 e o elemento <ph id="ph4">`"Pete"`</ph> tem valor de índice 4.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">Após a primeira chamada para <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> é 3, elemento <ph id="ph3">`"Bill"`</ph> é excluído e o elemento <ph id="ph4">`"Pete"`</ph> tem valor de índice 3.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">Após a segunda chamada para <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> é 2, elemento <ph id="ph3">`"Mike"`</ph> é excluído e o elemento <ph id="ph4">`"Pete"`</ph> tem valor de índice 2.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados do objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copia os elementos do <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> para um <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, começando em um determinado índice <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Os elementos são copiados para o <ph id="ph1">&lt;xref:System.Array&gt;</ph> na mesma ordem em que o enumerador que itera por meio de <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is obtained from the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</source>
          <target state="translated">Esse método é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é obtido a partir de <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é multidimensional.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O número de elementos no objeto de origem <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> é maior do que o espaço disponível de <ph id="ph2">&lt;paramref name="index" /&gt;</ph> até o final do <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O tipo do objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> de origem não pode ser automaticamente convertido para o tipo de <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Retorna um enumerador que itera pela coleção.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object that can be used to iterate through the collection.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que pode ser usado para iterar pela coleção.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">[Visual Basic, C#]</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">O <ph id="ph1">`foreach`</ph> instrução de linguagem c# (<ph id="ph2">`for each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> também retorna o enumerador a essa posição.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">Nesta posição, o <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriedade está definida.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar o método <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retorna o mesmo objeto até <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> ser chamado.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Se a última chamada <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> é indefinido.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para definir <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente, é possível chamar <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> seguido de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser adicionado ao objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Adiciona um item ao objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">A posição na qual o novo elemento foi inserido.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Você também pode usar o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> tem um tamanho fixo.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Removes all items from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Remove todos os itens do objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>This method removes all items from the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Este método Remove todos os itens do <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser localizado no objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object contains a specific value.</source>
          <target state="translated">Determina se um objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> contém um valor específico.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Returns <ph id="ph1">&lt;see langword="True" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">&lt;see langword="True" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> for encontrado no objeto <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>, caso contrário, <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>This method determines whether the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object contains a specific value.</source>
          <target state="translated">Este método determina se o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto contém um valor específico.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser localizado no objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Determina o índice de um item específico no objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if found in the collection; otherwise, -1.</source>
          <target state="translated">O índice de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se encontrado na coleção; caso contrário, -1.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>This method determines the index of a specific item in the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Este método determina o índice de um item específico no <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">O índice baseado em zero no qual o <bpt id="p1">&lt;c&gt;</bpt>valor<ept id="p1">&lt;/c&gt;</ept> deve ser inserido.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to insert into the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser inserido no objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object at the specified index.</source>
          <target state="translated">Insere um item no objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> no índice especificado.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, then <ph id="ph3">`value`</ph> is appended to the end.</source>
          <target state="translated">Se <ph id="ph1">`index`</ph> é igual ao número de itens no <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> do objeto, em seguida, <ph id="ph3">`value`</ph> é acrescentado ao final.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">Em coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção descem para acomodar o novo elemento.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Este comportamento não se aplica às coleções em que elementos sejam agrupados conceitualmente em buckets, como uma tabela de hash.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> não é um índice válido no objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> tem um tamanho fixo.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is null reference in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é uma referência nula no objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser removido do objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Remove a primeira ocorrência de um objeto específico do objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">Em coleções de elementos contíguos, como listas, os elementos que seguem o elemento removido sobem para ocupar o ponto vazio.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Este comportamento não se aplica às coleções em que elementos sejam agrupados conceitualmente em buckets, como uma tabela de hash.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not found in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object remains unchanged and no exception is thrown.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não foi encontrado no <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto, o <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto permanece inalterado e nenhuma exceção é lançada.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> tem um tamanho fixo.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The zero-based index of the item to remove.</source>
          <target state="translated">O índice com base em zero do item a ser removido.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Removes the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object item at the specified index.</source>
          <target state="translated">Remove o item de objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> no índice especificado.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">Em coleções de elementos contíguos, como listas, os elementos que seguem o elemento removido sobem para ocupar o ponto vazio.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Este comportamento não se aplica às coleções em que elementos sejam agrupados conceitualmente em buckets, como uma tabela de hash.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> não é um índice válido no objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> tem um tamanho fixo.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>The object that initiated the callback.</source>
          <target state="translated">O objeto que iniciou o retorno de chamada.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Runs after the entire <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">Será executado quando o todo o grafo do objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> tiver sido desserializado.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>This method is called after the entire <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">Esse método é chamado após todo o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> gráfico de objeto tiver sido desserializado.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> que contém as informações necessárias para serializar o objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> que contém a origem e o destino do fluxo serializado associado ao objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Returns the data needed to serialize the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Retorna os dados necessários para serializar o objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface.</source>
          <target state="translated">Implementa a interface <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method returns the data needed to serialize the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Esse método retorna os dados necessários para serializar o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objeto.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>