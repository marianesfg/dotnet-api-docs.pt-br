<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db858d535030f701aac72d90bb3cdd8de3417d03" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174022" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5fc79-101">Um Visual Basic <see langword="Collection" /> é um conjunto ordenado de itens que podem ser referenciados como uma unidade.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5fc79-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5fc79-102">Sempre que possível, você deve usar as coleções genéricas no <xref:System.Collections.Generic?displayProperty=nameWithType> namespace ou o <xref:System.Collections.Concurrent> namespace em vez de um Visual Basic `Collection`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="5fc79-103">Para obter mais informações, consulte [coleções](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="5fc79-103">For more information, see [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="5fc79-104">O Visual Basic `Collection` objeto fornece uma maneira conveniente para se referir a um grupo relacionado de itens como um único objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="5fc79-105">Os itens ou *elementos*, em uma coleção somente precisa ser relacionada pelo fato de que existam na coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="5fc79-106">Elementos de uma coleção não é necessário que compartilhar o mesmo tipo de dados.</span><span class="sxs-lookup"><span data-stu-id="5fc79-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="5fc79-107">Você pode criar uma coleção da mesma maneira que você criar outros objetos, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="5fc79-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="5fc79-108">Depois de criar uma coleção, você pode fazer o seguinte:</span><span class="sxs-lookup"><span data-stu-id="5fc79-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="5fc79-109">Adicionar um elemento com o <xref:Microsoft.VisualBasic.Collection.Add%2A> método.</span><span class="sxs-lookup"><span data-stu-id="5fc79-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="5fc79-110">Remover um elemento com o <xref:Microsoft.VisualBasic.Collection.Remove%2A> método.</span><span class="sxs-lookup"><span data-stu-id="5fc79-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="5fc79-111">Remover todos os elementos com o <xref:Microsoft.VisualBasic.Collection.Clear%2A> método.</span><span class="sxs-lookup"><span data-stu-id="5fc79-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="5fc79-112">Descobrir quantos elementos a coleção contém com o <xref:Microsoft.VisualBasic.Collection.Count%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="5fc79-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="5fc79-113">Verifique se um elemento específico está presente com o <xref:Microsoft.VisualBasic.Collection.Contains%2A> método.</span><span class="sxs-lookup"><span data-stu-id="5fc79-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="5fc79-114">Retorna um elemento específico da coleção com o <xref:Microsoft.VisualBasic.Collection.Item%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="5fc79-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="5fc79-115">Percorrer toda a coleção com o [para cada um... Próxima instrução](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="5fc79-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="5fc79-116">Embora o Visual Basic `Collection` objeto tem funcionalidade idêntica do `Collection` do objeto no Visual Basic 6.0, os dois não podem interoperar em um ambiente COM.</span><span class="sxs-lookup"><span data-stu-id="5fc79-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="5fc79-117">Iterando por meio de um Visual Basic `Collection` não é um procedimento de thread-safe.</span><span class="sxs-lookup"><span data-stu-id="5fc79-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="5fc79-118">Mesmo se a coleção for sincronizada, outros threads ainda podem modificar a coleção, fazendo com que o enumerador lançar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="5fc79-119">Para garantir a segurança de thread durante a enumeração, bloqueie a coleção ou capture as exceções resultante de alterações feitas por outros threads.</span><span class="sxs-lookup"><span data-stu-id="5fc79-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="5fc79-120">Para obter mais informações sobre o bloqueio de um elemento de programação, consulte [Instrução SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="5fc79-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-121">O exemplo a seguir cria o `Collection` objeto `names` e uma caixa de diálogo com a qual um usuário pode adicionar objetos (nomes) à coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="5fc79-122">Ele exibirá os nomes na coleção e finalmente desocupada coleção sem descartar o `Collection` objeto propriamente dito.</span><span class="sxs-lookup"><span data-stu-id="5fc79-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="5fc79-123">Para ver como isso funciona, escolha o **Adicionar classe** comando o **projeto** menu e declarar uma variável pública chamada `instanceName` no nível de módulo de `nameClass` (tipo `Public instanceName`) para manter os nomes de cada instância.</span><span class="sxs-lookup"><span data-stu-id="5fc79-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="5fc79-124">Deixe o nome padrão como `nameClass`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="5fc79-125">Copie e cole o seguinte código para o **geral** seção de outro módulo, e, em seguida, iniciá-lo com a instrução `classNamer` em outro procedimento.</span><span class="sxs-lookup"><span data-stu-id="5fc79-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="5fc79-126">(Este exemplo só funciona com aplicativos de host que oferece suporte para classes.)</span><span class="sxs-lookup"><span data-stu-id="5fc79-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-127">Cria e retorna um novo objeto <see cref="T:Microsoft.VisualBasic.Collection" /> do Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-128">A coleção do Visual Basic retornada por esse construtor está vazia e não tem nenhuma capacidade inicial alocada.</span><span class="sxs-lookup"><span data-stu-id="5fc79-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="5fc79-129">Coleções do Visual Basic não são compatíveis com o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] coleções disponíveis no <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, e <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span><span class="sxs-lookup"><span data-stu-id="5fc79-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-130">O exemplo a seguir cria uma nova coleção do Visual Basic e o atribui à variável `coll`:</span><span class="sxs-lookup"><span data-stu-id="5fc79-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="5fc79-131">Isso `Collection` objeto é baseado em um, o que significa que os valores de índice dos elementos variam entre 1 e o valor da `Count` propriedade.</span><span class="sxs-lookup"><span data-stu-id="5fc79-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="5fc79-132">Coleções do Visual Basic conterá os elementos do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fc79-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item">
          <span data-ttu-id="5fc79-133">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-133">Required.</span>
          </span>
          <span data-ttu-id="5fc79-134">Um objeto de qualquer tipo que especifica o elemento a ser adicionado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-134">An object of any type that specifies the element to add to the collection.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="5fc79-135">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-135">Optional.</span>
          </span>
          <span data-ttu-id="5fc79-136">Uma expressão <see langword="String" /> exclusiva, que especifica uma cadeia de caracteres chave que pode ser usada em vez de um índice posicional, para acessar esse novo elemento na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span>
          </span>
        </param>
        <param name="Before">
          <span data-ttu-id="5fc79-137">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-137">Optional.</span>
          </span>
          <span data-ttu-id="5fc79-138">Uma expressão que especifica uma posição relativa na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-138">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="5fc79-139">O elemento a ser adicionado é colocado na coleção antes do elemento identificado pelo argumento <c>Before</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-139">The element to be added is placed in the collection before the element identified by the <c>Before</c> argument.</span>
          </span>
          <span data-ttu-id="5fc79-140">Se <c>Before</c> for uma expressão numérica, ele deverá ser um número entre 1 e o valor da propriedade <see cref="P:Microsoft.VisualBasic.Collection.Count" /> da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-140">If <c>Before</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="5fc79-141">Se <c>Before</c> for uma expressão <see langword="String" />, ele deverá corresponder à cadeia de caracteres de chave especificada quando o elemento que está sendo referenciado foi adicionado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-141">If <c>Before</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="5fc79-142">Não é possível especificar <c>Before</c> e <c>After</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-142">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <param name="After">
          <span data-ttu-id="5fc79-143">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-143">Optional.</span>
          </span>
          <span data-ttu-id="5fc79-144">Uma expressão que especifica uma posição relativa na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-144">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="5fc79-145">O elemento a ser adicionado é colocado na coleção após o elemento identificado pelo argumento <c>After</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-145">The element to be added is placed in the collection after the element identified by the <c>After</c> argument.</span>
          </span>
          <span data-ttu-id="5fc79-146">Se <c>After</c> for uma expressão numérica, ele deverá ser um número entre 1 e o valor da propriedade <see langword="Count" /> da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-146">If <c>After</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span>
          </span>
          <span data-ttu-id="5fc79-147">Se <c>After</c> for uma expressão <see langword="String" />, ele deverá corresponder à cadeia de caracteres de chave especificada quando o elemento referenciado foi adicionado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-147">If <c>After</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="5fc79-148">Não é possível especificar <c>Before</c> e <c>After</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-148">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-149">Adiciona um elemento a um objeto <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-149">Adds an element to a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-150">O `Before` ou `After` argumento deve se referir a um elemento existente da coleção; caso contrário, ocorrerá um erro.</span><span class="sxs-lookup"><span data-stu-id="5fc79-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="5fc79-151">Se o `Before` e `After` argumentos forem omitidos, o novo objeto é adicionado ao final da coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="5fc79-152">Também ocorrerá um erro se um especificado `Key` valor corresponde à chave para um elemento existente da coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-153">O exemplo a seguir usa o `Add` método para adicionar `child` objetos — instâncias de uma classe chamada `child` que contém um `Public` propriedade `name` — para uma coleção chamada `family`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-153">The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`.</span></span> <span data-ttu-id="5fc79-154">Para ver como isso funciona, crie um <xref:System.Windows.Forms.Form> com dois <xref:System.Windows.Forms.Button> controles e defina suas <xref:System.Windows.Forms.Control.Text%2A> propriedades `Add` e `List`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="5fc79-155">Adicionar o `child` definição da classe e o `family` declaração para o código do formulário.</span><span class="sxs-lookup"><span data-stu-id="5fc79-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="5fc79-156">Modificar o `_Click` manipuladores de eventos para o **adicionar** e **lista** botões, conforme mostrado.</span><span class="sxs-lookup"><span data-stu-id="5fc79-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="5fc79-157">O **adicionar** botão permite que você adicione filhos.</span><span class="sxs-lookup"><span data-stu-id="5fc79-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="5fc79-158">O **lista** botão exibe os nomes de todos os filhos.</span><span class="sxs-lookup"><span data-stu-id="5fc79-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-159">Exclui todos os elementos de um objeto <see langword="Collection" /> do Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-160">O `Clear` método limpa a coleção e redefine sua <xref:Microsoft.VisualBasic.Collection.Count%2A> propriedade como 0.</span><span class="sxs-lookup"><span data-stu-id="5fc79-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="5fc79-161">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-161">Required.</span>
          </span>
          <span data-ttu-id="5fc79-162">Uma expressão <see langword="String" /> que especifica a chave pela qual pesquisar os elementos da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-163">Retorna um valor <see langword="Boolean" /> que indica se um objeto do Visual Basic <see langword="Collection" /> contém um elemento com uma chave específica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-163">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5fc79-164">Retorna um valor <see langword="Boolean" /> que indica se um objeto do Visual Basic <see langword="Collection" /> contém um elemento com uma chave específica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-164">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-165">`Contains` Retorna `True` se a coleção contém um elemento com uma chave exatamente correspondente `Key`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="5fc79-166">Caso contrário, `Contains` retorna `False`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="5fc79-167">Caso é ignorado quando valores de chave correspondentes.</span><span class="sxs-lookup"><span data-stu-id="5fc79-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="5fc79-168">Um Visual Basic `Collection` pode conter alguns elementos que têm chaves e outros elementos sem chaves.</span><span class="sxs-lookup"><span data-stu-id="5fc79-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="5fc79-169">Isso depende se a chamada para o <xref:Microsoft.VisualBasic.Collection.Add%2A> método fornece um argumento opcional `Key` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="5fc79-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="5fc79-170">Se você pretende pesquisar a coleção de elementos usando suas chaves, lembre-se de fornecer o `Key` argumento toda vez que você chamar o `Add` método.</span><span class="sxs-lookup"><span data-stu-id="5fc79-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-171">Retorna um <see langword="Integer" /> contendo o número de elementos em uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-171">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="5fc79-172">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-172">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5fc79-173">Retorna um <see langword="Integer" /> contendo o número de elementos em uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-173">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="5fc79-174">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-174">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-175">Use o `Count` propriedade para determinar o número de elementos em uma `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-175">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-176">Este exemplo ilustra o uso do `Count` propriedade para exibir o número de elementos em uma <xref:Microsoft.VisualBasic.Collection> objeto na variável `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-176">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="5fc79-177">O `Collection` objeto é baseado em um, o que significa que os valores de índice dos elementos variam entre 1 e o valor da `Count` propriedade.</span><span class="sxs-lookup"><span data-stu-id="5fc79-177">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-178">Retorna uma referência a um objeto de enumerador usado para iterar sobre um objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-178">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5fc79-179">Retorna uma referência a um objeto de enumerador usado para iterar sobre um objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-179">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-180">O [para cada um... Próxima instrução](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) chamadas `GetEnumerator` para obter um objeto enumerator para oferecer suporte à iteração sobre os elementos da coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-180">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="5fc79-181">Normalmente, você usa um `For Each`... `Next` para atravessar uma coleção ou matriz, e você não precisa chamar `GetEnumerator` explicitamente.</span><span class="sxs-lookup"><span data-stu-id="5fc79-181">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="5fc79-182">Se precisar de mais controle sobre a iteração que o `For Each`... `Next` fornecer instruções, você pode usar o `GetEnumerator` método para executar uma passagem personalizada.</span><span class="sxs-lookup"><span data-stu-id="5fc79-182">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="5fc79-183">A seguir estão alguns casos em que você talvez precise fazer isso.</span><span class="sxs-lookup"><span data-stu-id="5fc79-183">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="5fc79-184">Você talvez queira retornar ao início da coleção e iniciar a iteração novamente antes de ser concluído.</span><span class="sxs-lookup"><span data-stu-id="5fc79-184">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="5fc79-185">Você talvez queira ignorar um ou mais elementos por uma variedade de razões.</span><span class="sxs-lookup"><span data-stu-id="5fc79-185">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="5fc79-186">Talvez seja necessário alterar os elementos da coleção no meio de uma passagem.</span><span class="sxs-lookup"><span data-stu-id="5fc79-186">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="5fc79-187">Nesse caso, você deve obter um novo objeto de enumerador porque anterior é invalidado.</span><span class="sxs-lookup"><span data-stu-id="5fc79-187">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-188">O exemplo a seguir mostra como usar `GetEnumerator` para recuperar todos os elementos de uma `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-188">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="5fc79-189">`GetEnumerator` cria e retorna um objeto de enumerador, que implementa o <xref:System.Collections.IEnumerator> interface do <xref:System.Collections> namespace.</span><span class="sxs-lookup"><span data-stu-id="5fc79-189">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="5fc79-190">O objeto enumerator expõe o <xref:System.Collections.IEnumerator.Current%2A> propriedade e o <xref:System.Collections.IEnumerator.MoveNext%2A> e <xref:System.Collections.IEnumerator.Reset%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="5fc79-190">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="5fc79-191">Para obter mais informações, consulte [para cada um... Próxima instrução](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="5fc79-191">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-192">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-192">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-193">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-193">Read-only.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="5fc79-194">(A) Uma expressão numérica que especifica a posição de um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-194">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="5fc79-195">
            <c>Index</c> deve ser um número entre 1 e o valor da propriedade <see cref="P:Microsoft.VisualBasic.Collection.Count" /> da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-195">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="5fc79-196">Ou (B) Uma expressão <see langword="Object" /> que especifica a posição ou a cadeia de caracteres de chave de um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-196">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-197">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-197">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-198">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-198">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5fc79-199">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-199">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-200">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-200">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-201">Se `Index` é do tipo `Object`, o `Item` propriedade tentará tratá-lo um `String`, `Char`, `Char` matriz ou valor inteiro.</span><span class="sxs-lookup"><span data-stu-id="5fc79-201">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="5fc79-202">Se `Item` não é possível converter `Index` para `String` ou `Integer`, ele lança uma <xref:System.ArgumentException> exceção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-202">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="5fc79-203">O `Item` é a propriedade padrão para uma coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-203">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="5fc79-204">Portanto, as linhas de código a seguir são equivalentes.</span><span class="sxs-lookup"><span data-stu-id="5fc79-204">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-205">O exemplo a seguir usa o `Item` propriedade para recuperar uma referência a um objeto em uma coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-205">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="5fc79-206">Ele cria `birthdays` como um `Collection` de objeto e, em seguida, recupera o objeto que representa o aniversário de Bill, usando a chave `"Bill"` como o `Index` argumento.</span><span class="sxs-lookup"><span data-stu-id="5fc79-206">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="5fc79-207">Observe que a primeira chamada especifica explicitamente o `Item` propriedade, mas o segundo não.</span><span class="sxs-lookup"><span data-stu-id="5fc79-207">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="5fc79-208">Ambas as chamadas funcionam porque o `Item` é a propriedade padrão para um `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-208">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="5fc79-209">(A) Uma expressão numérica que especifica a posição de um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-209">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="5fc79-210">
            <c>Index</c> deve ser um número entre 1 e o valor da propriedade <see cref="P:Microsoft.VisualBasic.Collection.Count" /> da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-210">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="5fc79-211">Ou (B) Uma expressão <see langword="Object" /> que especifica a posição ou a cadeia de caracteres de chave de um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-211">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-212">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-212">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-213">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-213">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5fc79-214">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-214">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-215">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-215">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-216">Se `Index` é do tipo `Object`, o `Item` propriedade tentará tratá-lo um `String`, `Char`, `Char` matriz ou valor inteiro.</span><span class="sxs-lookup"><span data-stu-id="5fc79-216">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="5fc79-217">Se `Item` não é possível converter `Index` para `String` ou `Integer`, ele lança uma <xref:System.ArgumentException> exceção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-217">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="5fc79-218">O `Item` é a propriedade padrão para uma coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-218">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="5fc79-219">Portanto, as linhas de código a seguir são equivalentes.</span><span class="sxs-lookup"><span data-stu-id="5fc79-219">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-220">O exemplo a seguir usa o `Item` propriedade para recuperar uma referência a um objeto em uma coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-220">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="5fc79-221">Ele cria `birthdays` como um `Collection` de objeto e, em seguida, recupera o objeto que representa o aniversário de Bill, usando a chave `"Bill"` como o `Index` argumento.</span><span class="sxs-lookup"><span data-stu-id="5fc79-221">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="5fc79-222">Observe que a primeira chamada especifica explicitamente o `Item` propriedade, mas o segundo não.</span><span class="sxs-lookup"><span data-stu-id="5fc79-222">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="5fc79-223">Ambas as chamadas funcionam porque o `Item` é a propriedade padrão para um `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-223">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="5fc79-224">Uma expressão <see langword="String" /> exclusiva, que especifica uma cadeia de caracteres chave que pode ser usada, em vez de um índice posicional, para acessar um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-224">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="5fc79-225">
            <c>Key</c> deve corresponder ao argumento <c>Key</c> especificado quando o elemento foi adicionado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-225">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-226">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-226">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-227">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-227">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5fc79-228">Retorna um elemento específico de um objeto <see langword="Collection" /> por posição ou por chave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-228">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="5fc79-229">Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-229">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-230">Se `Index` é do tipo `Object`, o `Item` propriedade tentará tratá-lo um `String`, `Char`, `Char` matriz ou valor inteiro.</span><span class="sxs-lookup"><span data-stu-id="5fc79-230">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="5fc79-231">Se `Item` não é possível converter `Index` para `String` ou `Integer`, ele lança uma <xref:System.ArgumentException> exceção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-231">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="5fc79-232">O `Item` é a propriedade padrão para uma coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-232">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="5fc79-233">Portanto, as linhas de código a seguir são equivalentes.</span><span class="sxs-lookup"><span data-stu-id="5fc79-233">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-234">O exemplo a seguir usa o `Item` propriedade para recuperar uma referência a um objeto em uma coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-234">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="5fc79-235">Ele cria `birthdays` como um `Collection` de objeto e, em seguida, recupera o objeto que representa o aniversário de Bill, usando a chave `"Bill"` como o `Index` argumento.</span><span class="sxs-lookup"><span data-stu-id="5fc79-235">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="5fc79-236">Observe que a primeira chamada especifica explicitamente o `Item` propriedade, mas o segundo não.</span><span class="sxs-lookup"><span data-stu-id="5fc79-236">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="5fc79-237">Ambas as chamadas funcionam porque o `Item` é a propriedade padrão para um `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-237">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-238">Remove um elemento de um objeto <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-238">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="5fc79-239">Uma expressão numérica que especifica a posição de um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-239">A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="5fc79-240">
            <c>Index</c> deve ser um número entre 1 e o valor da propriedade <see cref="P:Microsoft.VisualBasic.Collection.Count" /> da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-240">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-241">Remove um elemento de um objeto <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-241">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-242">Quando `Remove` exclui um elemento de uma coleção, ele diminui a coleção <xref:Microsoft.VisualBasic.Collection.Count%2A> propriedade por um.</span><span class="sxs-lookup"><span data-stu-id="5fc79-242">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="5fc79-243">Ele também diminui o `Index` valor de cada elemento que anteriormente seguia o elemento excluído na coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-243">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="5fc79-244">Se um elemento foi adicionado à coleção sem uma `Key`, você deve usar o `Index` para removê-lo.</span><span class="sxs-lookup"><span data-stu-id="5fc79-244">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-245">Este exemplo ilustra o uso do `Remove` método para remover objetos de uma <xref:Microsoft.VisualBasic.Collection> objeto na variável `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-245">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="5fc79-246">Seguindo as quatro chamadas para o `Add` método, o `Count` propriedade contiver 4, elemento `"Bill"` tem valor de índice 1 e o elemento `"Pete"` tem valor de índice 4.</span><span class="sxs-lookup"><span data-stu-id="5fc79-246">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="5fc79-247">Após a primeira chamada para `Remove`, `Count` é 3, elemento `"Bill"` é excluído e o elemento `"Pete"` tem valor de índice 3.</span><span class="sxs-lookup"><span data-stu-id="5fc79-247">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="5fc79-248">Após a segunda chamada para `Remove`, `Count` é 2, elemento `"Mike"` é excluído e o elemento `"Pete"` tem valor de índice 2.</span><span class="sxs-lookup"><span data-stu-id="5fc79-248">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="5fc79-249">Uma expressão <see langword="String" /> exclusiva, que especifica uma cadeia de caracteres chave que pode ser usada, em vez de um índice posicional, para acessar um elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-249">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="5fc79-250">
            <c>Key</c> deve corresponder ao argumento <c>Key</c> especificado quando o elemento foi adicionado à coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-250">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-251">Remove um elemento de um objeto <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-251">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-252">Quando `Remove` exclui um elemento de uma coleção, ele diminui a coleção <xref:Microsoft.VisualBasic.Collection.Count%2A> propriedade por um.</span><span class="sxs-lookup"><span data-stu-id="5fc79-252">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="5fc79-253">Ele também diminui o `Index` valor de cada elemento que anteriormente seguia o elemento excluído na coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-253">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="5fc79-254">Se um elemento foi adicionado à coleção sem uma `Key`, você deve usar o `Index` para removê-lo.</span><span class="sxs-lookup"><span data-stu-id="5fc79-254">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fc79-255">Este exemplo ilustra o uso do `Remove` método para remover objetos de uma <xref:Microsoft.VisualBasic.Collection> objeto na variável `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-255">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="5fc79-256">Seguindo as quatro chamadas para o `Add` método, o `Count` propriedade contiver 4, elemento `"Bill"` tem valor de índice 1 e o elemento `"Pete"` tem valor de índice 4.</span><span class="sxs-lookup"><span data-stu-id="5fc79-256">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="5fc79-257">Após a primeira chamada para `Remove`, `Count` é 3, elemento `"Bill"` é excluído e o elemento `"Pete"` tem valor de índice 3.</span><span class="sxs-lookup"><span data-stu-id="5fc79-257">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="5fc79-258">Após a segunda chamada para `Remove`, `Count` é 2, elemento `"Mike"` é excluído e o elemento `"Pete"` tem valor de índice 2.</span><span class="sxs-lookup"><span data-stu-id="5fc79-258">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="5fc79-259">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-259">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="5fc79-260">O <see cref="T:System.Array" /> deve ter indexação com base em zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-260">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5fc79-261">O índice baseado em zero na <c>array</c> na qual a cópia começa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-261">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-262">Copia os elementos do <see cref="T:Microsoft.VisualBasic.Collection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-262">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
          <span data-ttu-id="5fc79-263">Implementa a interface <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-263">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-264">Os elementos são copiados para o <xref:System.Array> na mesma ordem em que o enumerador que itera por meio de <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-264">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="5fc79-265">Esse método é um O (`n`) operação, onde `n` é obtido a partir de <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span><span class="sxs-lookup"><span data-stu-id="5fc79-265">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fc79-266">
            <paramref name="array" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-266">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5fc79-267">
            <paramref name="index" /> é menor que zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-267">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fc79-268">
            <paramref name="array" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-268">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="5fc79-269">-ou- O número de elementos no objeto <see cref="T:Microsoft.VisualBasic.Collection" /> de origem é maior que o espaço disponível de <paramref name="index" /> até o final da <paramref name="array" /> de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-269">-or-  The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="5fc79-270">O tipo do objeto <see cref="T:Microsoft.VisualBasic.Collection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-270">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-271">Retorna um enumerador que itera pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-271">Returns an enumerator that iterates through the collection.</span>
          </span>
          <span data-ttu-id="5fc79-272">Implementa a interface <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-272">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5fc79-273">Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-273">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-274">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="5fc79-274">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="5fc79-275">O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.</span><span class="sxs-lookup"><span data-stu-id="5fc79-275">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="5fc79-276">Portanto, o uso de `foreach` é recomendado, em vez de manipular diretamente o enumerador.</span><span class="sxs-lookup"><span data-stu-id="5fc79-276">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="5fc79-277">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</span><span class="sxs-lookup"><span data-stu-id="5fc79-277">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="5fc79-278">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</span><span class="sxs-lookup"><span data-stu-id="5fc79-278">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="5fc79-279">O método <xref:System.Collections.IEnumerator.Reset%2A> também retorna o enumerador a essa posição.</span><span class="sxs-lookup"><span data-stu-id="5fc79-279">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="5fc79-280">Nesta posição, o <xref:System.Collections.IEnumerator.Current%2A> propriedade está definida.</span><span class="sxs-lookup"><span data-stu-id="5fc79-280">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="5fc79-281">Por isso, você deve chamar o método <xref:System.Collections.IEnumerator.MoveNext%2A> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="5fc79-281">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="5fc79-282"><xref:System.Collections.IEnumerator.Current%2A> retorna o mesmo objeto até <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> ser chamado.</span><span class="sxs-lookup"><span data-stu-id="5fc79-282"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="5fc79-283"><xref:System.Collections.IEnumerator.MoveNext%2A> define <xref:System.Collections.IEnumerator.Current%2A> como o próximo elemento.</span><span class="sxs-lookup"><span data-stu-id="5fc79-283"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="5fc79-284">Caso <xref:System.Collections.IEnumerator.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.Collections.IEnumerator.MoveNext%2A> retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-284">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="5fc79-285">Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A> também retornam `false`.</span><span class="sxs-lookup"><span data-stu-id="5fc79-285">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="5fc79-286">Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A> retorna `false`, <xref:System.Collections.IEnumerator.Current%2A> é indefinido.</span><span class="sxs-lookup"><span data-stu-id="5fc79-286">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="5fc79-287">Para definir <xref:System.Collections.IEnumerator.Current%2A> como o primeiro elemento da coleção novamente, é possível chamar <xref:System.Collections.IEnumerator.Reset%2A> seguido de <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="5fc79-287">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="5fc79-288">Um enumerador permanece válido desde que a coleção continue inalterada.</span><span class="sxs-lookup"><span data-stu-id="5fc79-288">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="5fc79-289">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</span><span class="sxs-lookup"><span data-stu-id="5fc79-289">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="5fc79-290">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</span><span class="sxs-lookup"><span data-stu-id="5fc79-290">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="5fc79-291">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</span><span class="sxs-lookup"><span data-stu-id="5fc79-291">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="5fc79-292">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</span><span class="sxs-lookup"><span data-stu-id="5fc79-292">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="5fc79-293">O <see cref="T:System.Object" /> a ser adicionado ao objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-293">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-294">Adiciona um item ao objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-294">Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="5fc79-295">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-295">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5fc79-296">A posição na qual o novo elemento foi inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-296">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-297">Você também pode usar o <xref:Microsoft.VisualBasic.Collection.Item%2A> propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-297">You can also use the <xref:Microsoft.VisualBasic.Collection.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5fc79-298">O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-298">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="5fc79-299">-ou- O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tem um tamanho fixo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-299">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5fc79-300">Remove todos os itens do objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-300">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="5fc79-301">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-301">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-302">Este método Remove todos os itens do <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-302">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5fc79-303">O <see cref="T:System.Collections.IList" /> é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-303">The <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="5fc79-304">O <see cref="T:System.Object" /> a ser localizado no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-304">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-305">Determina se um objeto <see cref="T:Microsoft.VisualBasic.Collection" /> contém um valor específico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-305">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span>
          </span>
          <span data-ttu-id="5fc79-306">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-306">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5fc79-307">Retorna <see langword="True" /> se o <see cref="T:System.Object" /> for encontrado no objeto <see cref="T:Microsoft.VisualBasic.Collection" />, caso contrário, <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-307">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-308">Este método determina se o <xref:Microsoft.VisualBasic.Collection> objeto contém um valor específico.</span><span class="sxs-lookup"><span data-stu-id="5fc79-308">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="5fc79-309">O <see cref="T:System.Object" /> a ser localizado no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-309">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-310">Determina o índice de um item específico no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-310">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="5fc79-311">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-311">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5fc79-312">O índice de <paramref name="value" /> se encontrado na coleção; caso contrário, -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-312">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-313">Este método determina o índice de um item específico no <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-313">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="5fc79-314">O índice baseado em zero no qual o <c>valor</c> deve ser inserido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-314">The zero-based index at which <c>value</c> should be inserted.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="5fc79-315">O <see cref="T:System.Object" /> a ser inserido no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-315">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-316">Insere um item no objeto <see cref="T:Microsoft.VisualBasic.Collection" /> no índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-316">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span>
          </span>
          <span data-ttu-id="5fc79-317">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-317">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-318">Se `index` é igual ao número de itens no <xref:Microsoft.VisualBasic.Collection> do objeto, em seguida, `value` é acrescentado ao final.</span><span class="sxs-lookup"><span data-stu-id="5fc79-318">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="5fc79-319">Em coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção descem para acomodar o novo elemento.</span><span class="sxs-lookup"><span data-stu-id="5fc79-319">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="5fc79-320">Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.</span><span class="sxs-lookup"><span data-stu-id="5fc79-320">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="5fc79-321">Este comportamento não se aplica às coleções em que elementos sejam agrupados conceitualmente em buckets, como uma tabela de hash.</span><span class="sxs-lookup"><span data-stu-id="5fc79-321">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5fc79-322">
            <paramref name="index" /> não é um índice válido no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-322">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5fc79-323">O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-323">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="5fc79-324">-ou- O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tem um tamanho fixo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-324">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="5fc79-325">
            <paramref name="value" /> é uma referência nula no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-325">
              <paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="5fc79-326">O <see cref="T:System.Object" /> a ser removido do objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-326">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-327">Remove a primeira ocorrência de um objeto específico do objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-327">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="5fc79-328">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-328">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-329">Em coleções de elementos contíguos, como listas, os elementos que seguem o elemento removido sobem para ocupar o ponto vazio.</span><span class="sxs-lookup"><span data-stu-id="5fc79-329">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="5fc79-330">Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.</span><span class="sxs-lookup"><span data-stu-id="5fc79-330">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="5fc79-331">Este comportamento não se aplica às coleções em que elementos sejam agrupados conceitualmente em buckets, como uma tabela de hash.</span><span class="sxs-lookup"><span data-stu-id="5fc79-331">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="5fc79-332">Se `value` não foi encontrado no <xref:Microsoft.VisualBasic.Collection> objeto, o <xref:Microsoft.VisualBasic.Collection> objeto permanece inalterado e nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="5fc79-332">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5fc79-333">O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-333">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="5fc79-334">-ou- O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tem um tamanho fixo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-334">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="5fc79-335">O índice com base em zero do item a ser removido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-335">The zero-based index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-336">Remove o item de objeto <see cref="T:Microsoft.VisualBasic.Collection" /> no índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-336">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span>
          </span>
          <span data-ttu-id="5fc79-337">Implementa a interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-337">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-338">Em coleções de elementos contíguos, como listas, os elementos que seguem o elemento removido sobem para ocupar o ponto vazio.</span><span class="sxs-lookup"><span data-stu-id="5fc79-338">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="5fc79-339">Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.</span><span class="sxs-lookup"><span data-stu-id="5fc79-339">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="5fc79-340">Este comportamento não se aplica às coleções em que elementos sejam agrupados conceitualmente em buckets, como uma tabela de hash.</span><span class="sxs-lookup"><span data-stu-id="5fc79-340">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5fc79-341">
            <paramref name="index" /> não é um índice válido no objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-341">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5fc79-342">O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-342">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="5fc79-343">-ou- O objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tem um tamanho fixo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-343">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="5fc79-344">O objeto que iniciou o retorno de chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-344">The object that initiated the callback.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-345">Será executado quando o todo o grafo do objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tiver sido desserializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-345">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span>
          </span>
          <span data-ttu-id="5fc79-346">Implementa a interface <see cref="T:System.Runtime.Serialization.IDeserializationCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-346">Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-347">Esse método é chamado após todo o <xref:Microsoft.VisualBasic.Collection> gráfico de objeto tiver sido desserializado.</span><span class="sxs-lookup"><span data-stu-id="5fc79-347">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="5fc79-348">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar o objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-348">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="5fc79-349">Um objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado ao objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-349">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5fc79-350">Retorna os dados necessários para serializar o objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-350">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="5fc79-351">Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5fc79-351">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fc79-352">Esse método retorna os dados necessários para serializar o <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="5fc79-352">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>