<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b720a5c53d27944cd3cd053d3b53983622209fc" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32090355" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>O módulo <see langword="Strings" /> contém procedimentos usados para executar operações de cadeia de caracteres.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que manipulam cadeias de caracteres.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como dividir uma cadeia de caracteres em seus espaços.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Necessário. Qualquer expressão <see langword="Char" /> ou <see langword="String" /> válida. Se <c>String</c> for uma expressão <see langword="String" />, somente o primeiro caractere da cadeia de caracteres será usado para a entrada. Se <c>String</c> for <see langword="Nothing" /> ou não contiver caracteres, ocorrerá um erro <see cref="T:System.ArgumentException" />.</param>
        <summary>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</summary>
        <returns>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` códigos correspondente para a primeira letra de cada cadeia de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Necessário. Qualquer expressão <see langword="Char" /> ou <see langword="String" /> válida. Se <c>String</c> for uma expressão <see langword="String" />, somente o primeiro caractere da cadeia de caracteres será usado para a entrada. Se <c>String</c> for <see langword="Nothing" /> ou não contiver caracteres, ocorrerá um erro <see cref="T:System.ArgumentException" />.</param>
        <summary>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</summary>
        <returns>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` códigos correspondente para a primeira letra de cada cadeia de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Necessário. Qualquer expressão <see langword="Char" /> ou <see langword="String" /> válida. Se <c>String</c> for uma expressão <see langword="String" />, somente o primeiro caractere da cadeia de caracteres será usado para a entrada. Se <c>String</c> for <see langword="Nothing" /> ou não contiver caracteres, ocorrerá um erro <see cref="T:System.ArgumentException" />.</param>
        <summary>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</summary>
        <returns>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` códigos correspondente para a primeira letra de cada cadeia de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Necessário. Qualquer expressão <see langword="Char" /> ou <see langword="String" /> válida. Se <c>String</c> for uma expressão <see langword="String" />, somente o primeiro caractere da cadeia de caracteres será usado para a entrada. Se <c>String</c> for <see langword="Nothing" /> ou não contiver caracteres, ocorrerá um erro <see cref="T:System.ArgumentException" />.</param>
        <summary>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</summary>
        <returns>Retorna um valor de <see langword="Integer" /> que representa o código de caractere correspondente a um caractere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` códigos correspondente para a primeira letra de cada cadeia de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Necessário. Uma expressão <see langword="Integer" /> que representa o <c>ponto de código</c> ou código de caractere, do caractere.</param>
        <summary>Retorna o caractere associado ao código de caractere especificado.</summary>
        <returns>Retorna o caractere associado ao código de caractere especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O intervalo assimétrico aceito por `CharCode` compensa as diferenças de armazenamento entre o `Short` e `Integer`. Por exemplo, -29183 é um `Short` mas + 36353 é um `Integer`. Isso também facilita a compatibilidade com o Visual Basic 6.0.  
  
 `Chr` usa o <xref:System.Text.Encoding> classe no <xref:System.Text?displayProperty=nameWithType> conjunto de namespace para determinar se o thread atual está usando um conjunto de caracteres de byte único (SBCS) ou um caractere de dois bytes (DBCS). Em seguida, leva `CharCode` como um código de pontos no conjunto apropriado. O intervalo pode ser de 0 a 255 caracteres SBCS e -32768 a 65535 para caracteres DBCS.  
  
 O valor retornado depende de página de código para o segmento atual, que está contida no <xref:System.Globalization.TextInfo.ANSICodePage%2A> propriedade o <xref:System.Globalization.TextInfo> classe no <xref:System.Globalization> namespace. Você pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` usa `CharCode` como Unicode ponto de código. O intervalo é independente das configurações da página cultura e o código para o thread atual. Valores de -32768 a-1 são tratados o mesmo como valores no intervalo de + 32768 a + 65535.  
  
 Números de 0 a 31 são os mesmos códigos de ASCII não imprimíveis padrão. Por exemplo, `Chr(10)` retorna o caractere de alimentação de uma linha.  
  
> [!NOTE]
>  O `ChrB` função em versões anteriores do Visual Basic retorna um único byte. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Chr` função para retornar o caractere associado ao código de caractere especificado.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 ou &gt; 255 para <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Necessário. Uma expressão <see langword="Integer" /> que representa o <c>ponto de código</c> ou código de caractere, do caractere.</param>
        <summary>Retorna o caractere associado ao código de caractere especificado.</summary>
        <returns>Retorna o caractere associado ao código de caractere especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O intervalo assimétrico aceito por `CharCode` compensa as diferenças de armazenamento entre o `Short` e `Integer`. Por exemplo, -29183 é um `Short` mas + 36353 é um `Integer`. Isso também facilita a compatibilidade com o Visual Basic 6.0.  
  
 `Chr` usa o <xref:System.Text.Encoding> classe no <xref:System.Text?displayProperty=nameWithType> conjunto de namespace para determinar se o thread atual está usando um conjunto de caracteres de byte único (SBCS) ou um caractere de dois bytes (DBCS). Em seguida, leva `CharCode` como um código de pontos no conjunto apropriado. O intervalo pode ser de 0 a 255 caracteres SBCS e -32768 a 65535 para caracteres DBCS.  
  
 O valor retornado depende de página de código para o segmento atual, que está contida no <xref:System.Globalization.TextInfo.ANSICodePage%2A> propriedade o <xref:System.Globalization.TextInfo> classe no <xref:System.Globalization> namespace. Você pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` usa `CharCode` como Unicode ponto de código. O intervalo é independente das configurações da página cultura e o código para o thread atual. Valores de -32768 a-1 são tratados o mesmo como valores no intervalo de + 32768 a + 65535.  
  
 Números de 0 a 31 são os mesmos códigos de ASCII não imprimíveis padrão. Por exemplo, `Chr(10)` retorna o caractere de alimentação de uma linha.  
  
> [!NOTE]
>  O `ChrB` função em versões anteriores do Visual Basic retorna um único byte. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Chr` função para retornar o caractere associado ao código de caractere especificado.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 ou &gt; 65535 para <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma matriz baseada em zero contendo um subconjunto de uma matriz <see langword="String" /> com base em critérios de filtro especificados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Necessário. Matriz unidimensional de cadeias de caracteres a ser pesquisada.</param>
        <param name="Match">Necessário. Cadeia de caracteres a ser pesquisada.</param>
        <param name="Include">Opcional. Valor <see langword="Boolean" /> que indica se as subcadeias de caracteres que incluem ou excluem <c>Match</c> devem ser retornadas. Se <c>Include</c> for <see langword="True" />, a função <see langword="Filter" /> retornará o subconjunto da matriz que contém <c>Match</c> como uma subcadeia de caracteres. Se <c>Include</c> for <see langword="False" />, a função <see langword="Filter" /> retornará o subconjunto da matriz que não contém <c>Match</c> como uma subcadeia de caracteres.</param>
        <param name="Compare">Opcional. Valor numérico que indica o tipo de comparação de cadeia de caracteres a ser usado. Consulte “Configurações” para obter os valores.</param>
        <summary>Retorna uma matriz baseada em zero contendo um subconjunto de uma matriz <see langword="String" /> com base em critérios de filtro especificados.</summary>
        <returns>Retorna uma matriz baseada em zero contendo um subconjunto de uma matriz <see langword="String" /> com base em critérios de filtro especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nenhuma correspondência de `Match` são encontradas nos `Source`, o `Filter` função retorna uma matriz vazia. Ocorrerá um erro se `Source` é definido como `Nothing` ou não é uma matriz unidimensional.  
  
 A matriz retornada pelo `Filter` função contém apenas o número de elementos suficientes para conter o número de itens correspondentes.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|Constante|Descrição|  
|`CompareMethod.Binary`|Executa uma comparação binária|  
|`CompareMethod.Text`|Executa uma comparação textual|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Filter` função.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> é <see langword="Nothing" /> ou não é uma matriz unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Necessário. Matriz unidimensional de cadeias de caracteres a ser pesquisada.</param>
        <param name="Match">Necessário. Cadeia de caracteres a ser pesquisada.</param>
        <param name="Include">Opcional. Valor <see langword="Boolean" /> que indica se as subcadeias de caracteres que incluem ou excluem <c>Match</c> devem ser retornadas. Se <c>Include</c> for <see langword="True" />, a função <see langword="Filter" /> retornará o subconjunto da matriz que contém <c>Match</c> como uma subcadeia de caracteres. Se <c>Include</c> for <see langword="False" />, a função <see langword="Filter" /> retornará o subconjunto da matriz que não contém <c>Match</c> como uma subcadeia de caracteres.</param>
        <param name="Compare">Opcional. Valor numérico que indica o tipo de comparação de cadeia de caracteres a ser usado. Consulte “Configurações” para obter os valores.</param>
        <summary>Retorna uma matriz baseada em zero contendo um subconjunto de uma matriz <see langword="String" /> com base em critérios de filtro especificados.</summary>
        <returns>Retorna uma matriz baseada em zero contendo um subconjunto de uma matriz <see langword="String" /> com base em critérios de filtro especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nenhuma correspondência de `Match` são encontradas nos `Source`, o `Filter` função retorna uma matriz vazia. Ocorrerá um erro se `Source` é definido como `Nothing` ou não é uma matriz unidimensional.  
  
 A matriz retornada pelo `Filter` função contém apenas o número de elementos suficientes para conter o número de itens correspondentes.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|`CompareMethod.Binary`|Executa uma comparação binária|  
|`CompareMethod.Text`|Executa uma comparação textual|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Filter` função.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> é <see langword="Nothing" /> ou não é uma matriz unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Qualquer expressão válida.</param>
        <param name="Style">Opcional. Uma expressão válida <see langword="String" /> de formato nomeada ou definida pelo usuário.</param>
        <summary>Retorna uma cadeia de caracteres formatada de acordo com as instruções contidas em uma expressão <see langword="String" /> de formato.</summary>
        <returns>Retorna uma cadeia de caracteres formatada de acordo com as instruções contidas em uma expressão <see langword="String" /> de formato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.String.Format%2A?displayProperty=nameWithType> método também fornece funcionalidade semelhante.  
  
 Se você estiver formatando uma cadeia de caracteres numérica não localizada, você deve usar um formato numérico definido pelo usuário para garantir que tenha a aparência desejada.  
  
 Se você tentar formatar um número sem especificar `Style`, o `Format` função fornece funcionalidade semelhante para o `Str` funcionar, apesar de ser conhecida internacionalmente. No entanto, os números positivos formatados como cadeias de caracteres usando o `Format` função não incluem um espaço à esquerda reservado para o sinal do valor; aqueles convertido usando o `Str` função reter o espaço à esquerda.  
  
## <a name="different-formats-for-different-numeric-values"></a>Formatos diferentes para valores numéricos diferentes  
 Uma expressão de formato definido pelo usuário para números pode ter de uma a três seções separadas por ponto e vírgula. Se o `Style` argumento o `Format` função contém um dos formatos numéricos predefinidos, somente uma seção será permitida.  
  
|Se você usar|Este é o resultado|  
|-|-|  
|Somente uma seção|A expressão de formato se aplica a todos os valores.|  
|Duas seções|A primeira seção aplica-se a valores positivos e zeros; a segunda se aplica a valores negativos.|  
|Trê seções|A primeira seção aplica-se a valores positivos, a segunda se aplica a valores negativos, e se aplica a terceira a zeros.|  
  
 O exemplo a seguir possui duas seções: a primeira define o formato para valores positivos e zeros; a segunda seção define o formato para valores negativos. Como o `Style` argumento o `Format` função usa uma cadeia de caracteres, ele é colocado entre aspas.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Se você incluir ponto e vírgula sem nada entre elas, a seção faltando é impressa usando o formato do valor positivo. Por exemplo, o formato a seguir exibe positivo e negativo valores usando o formato da primeira seção e exibe `Zero` se o valor for zero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Formatos numéricos predefinidos  
 A tabela a seguir identifica os nomes de formatos numéricos predefinidos. Esses podem ser usados por nome como o `Style` argumento para o `Format` função:  
  
|Nome do formato|Descrição|  
|-|-|  
|`General Number`, `G` ou `g`|Exibe o número sem nenhum separador de milhar.<br /><br /> Por exemplo, `Format(&H3FA, "g")` retorna `1018`.|  
|`Currency`, `C` ou `c`|Exibe o número com separador de milhar, se apropriado; exibe dois dígitos à direita do separador decimal. A saída é baseada nas configurações de localidade do sistema.<br /><br /> Por exemplo, `Format(1234567, "c")` retorna `$1,234,567.00`.|  
|`Fixed`, `F` ou `f`|Exibe pelo menos um dígito à esquerda e dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(1234567, "f")` retorna `1234567.00`.|  
|`Standard`, `N` ou `n`|Exibe o número com separador de milhar, pelo menos um dígito à esquerda e dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(1234567, "n")` retorna `1,234,567.00`.|  
|`Percent`|Exibe o número multiplicado por 100 com um sinal de porcentagem (%) acrescentado imediatamente à direita; sempre exibe dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(0.4744, "Percent")` retorna `47.44%`.|  
|`P`, ou `p`|Exibe o número com separador de milhar multiplicado por 100 com um sinal de porcentagem (%) anexado à direita e separado por um único espaço; sempre exibe dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(0.80345, "p")` retorna `80.35 %`.|  
|`Scientific`|Usa notação científica padrão, fornecendo dois dígitos significativos.<br /><br /> Por exemplo, `Format(1234567, "Scientific")` retorna `1.23E+06`.|  
|`E`, ou `e`|Usa notação científica padrão, fornecendo seis dígitos significativos.<br /><br /> Por exemplo, `Format(1234567, "e")` retorna `1.234567e+006`.|  
|`D`, ou `d`|Exibe o número como uma cadeia de caracteres que contém o valor do número em formato Decimal (base 10). Essa opção tem suporte para tipos integrais (`Byte`, `Short`, `Integer`, `Long`) apenas.<br /><br /> Por exemplo, `Format(&H7F, "d")` retorna `127`.|  
|`X`, ou `x`|Exibe o número como uma cadeia de caracteres que contém o valor do número em formato Hexadecimal (base 16). Essa opção tem suporte para tipos integrais (`Byte`, `Short`, `Integer`, `Long`) apenas.<br /><br /> Por exemplo, `Format(127, "x")` retorna `7f`.|  
|`Yes/No`|Exibe `No` se o número for 0; caso contrário, exibe `Yes`.<br /><br /> Por exemplo, `Format(0, "Yes/No")` retorna `No`.|  
|`True/False`|Exibe `False` se o número for 0; caso contrário, exibe `True`.<br /><br /> Por exemplo, `Format(1, "True/False")` retorna `True`.|  
|`On/Off`|Exibe `Off` se o número for 0; caso contrário, exibe `On`.<br /><br /> Por exemplo, `Format(1, "On/Off")` retorna `On`.|  
  
### <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 O `Yes/No`, `True/False`, e `On/Off` formatos não têm suporte.  
  
## <a name="user-defined-numeric-formats"></a>Formatos numéricos definidos pelo usuário  
 A tabela a seguir identifica caracteres que você pode usar para criar formatos numéricos definidos pelo usuário. Esses podem ser usados para criar o `Style` argumento para o `Format` função:  
  
|Caractere|Descrição|  
|-|-|  
|Nenhum|Exibe o número sem formatação.|  
|(`0`)|Espaço reservado de dígito. Exibe um dígito ou um zero. Se a expressão tiver um dígito na posição onde o zero aparece na cadeia de caracteres de formato, exiba-o; Caso contrário, exibe um zero nessa posição.<br /><br /> Se o número tiver menos dígitos que são zeros (em qualquer lado da divisão decimal) na expressão de formato, exibirá zeros à esquerda ou. Se o número tiver mais dígitos à direita do separador decimal que há zeros à direita do separador decimal na expressão de formato, Arredonda as casas decimais números para o mesmo número como zeros. Se o número tiver mais dígitos à esquerda do separador decimal que há zeros à esquerda do separador decimal na expressão de formato, exibirá os dígitos extras sem modificação.|  
|(`#`)|Espaço reservado de dígito. Exibe um dígito ou nada. Se a expressão tiver um dígito na posição onde o `#` caractere aparece na cadeia de formato, exibe; caso contrário, não exibirá nada naquela posição.<br /><br /> Este símbolo funciona como o `0` espaço reservado de dígito, exceto que os zeros à esquerda e não serão exibidos se o número tiver menos dígitos que há `#` caracteres nos dois lados do separador decimal na expressão de formato.|  
|(`.`)|Espaço reservado para decimal. O espaço reservado para decimal determina quantos dígitos serão exibidos à esquerda e à direita do separador decimal. Se a expressão de formato contiver apenas `#` caracteres à esquerda desse símbolo; números menores que 1 começam com um separador decimal. Para exibir um zero à esquerda com números fracionários, use zero como o primeiro espaço reservado para dígito à esquerda do separador decimal. Em algumas localidades, a vírgula é usada como o separador decimal. O caractere real usado como um espaço reservado decimal na saída formatada depende do formato numérico reconhecido pelo seu sistema. Assim, você deve usar o período como o espaço reservado decimal nos formatos, mesmo se você estiver em uma localidade que utilize uma vírgula como espaço reservado decimal. A cadeia de caracteres formatada aparecerá no formato correto para a localidade.|  
|(`%`)|Espaço reservado para porcentagem. Multiplica a expressão 100. O caractere de porcentagem (`%`) é inserida na posição onde ele aparece na cadeia de caracteres de formato.|  
|(`,`)|Separador de milhar. O separador de milhar separa os milhares das centenas em um número com quatro ou mais casas à esquerda do separador decimal. O uso padrão do separador de milhar será especificado se o formato contiver um separador de milhar cercado por espaços reservados para dígitos (`0` ou `#`).<br /><br /> Um separador de milhar imediatamente à esquerda do separador decimal (ou não um decimal for especificado) ou como o mais à direita do caractere na cadeia de caracteres significa "escalar o número dividindo-o por 1.000, arredondando se necessário." Números menores do que 1.000 mas maiores ou iguais a 500 são exibidos como `1`e menor do que 500 são exibidos como números de `0`. Dois separadores de milhar adjacentes nessa posição dimensionar por um fator de 1 milhão e um fator adicional de 1.000 para cada separador adicional.<br /><br /> Vários separadores em qualquer posição que não seja imediatamente à esquerda do separador decimal ou a posição da extrema esquerda na cadeia de caracteres são tratados simplesmente como especificando o uso de um separador de milhar. Em algumas localidades, um ponto é usado como um separador de milhar. O caractere real usado como separador de milhar na saída formatada depende do formato numérico reconhecido pelo seu sistema. Assim, você deve usar a vírgula como separador de milhar nos seus formatos, mesmo se você estiver em uma localidade que usa um ponto como um separador de milhar. A cadeia de caracteres formatada aparecerá no formato correto para a localidade.<br /><br /> Por exemplo, considere as três seguintes cadeias de caracteres:<br /><br /> -   `"#,0."`, que usa o separador de milhar para formatar o número 100 milhões como a cadeia de caracteres "100,000,000".<br />-   `"#0,."`, que usa a escala por um fator de mil para formatar o número 100 milhões como a cadeia de caracteres "100000".<br />-   `"#,0,."`, que usa o separador de milhar e escala por mil para formatar o número 100 milhões como a cadeia de caracteres "100,000".|  
|(`:`)|Separador de hora. Em algumas localidades, outros caracteres podem ser usados para representar o separador de hora. O separador de hora separa horas, minutos e segundos quando os valores de hora são formatados. O caractere real usado como separador de tempo na saída formatada é determinado pelas configurações de sistema.|  
|(`/`)|Separador de data. Em algumas localidades, outros caracteres podem ser usados para representar o separador de data. O separador de data separa dia, mês e ano quando os valores de data são formatados. O caractere real usado como separador de data na saída formatada é determinado pelas configurações de sistema.|  
|(`E-``E+``e-``e+`)|Formato científico. Se a expressão de formato contiver pelo menos um espaço reservado de dígito (`0` ou `#`) à esquerda do `E-`, `E+`, `e-`, ou `e+`, o número é exibido em formato científico e `E` ou `e` é inserido entre o número e seu expoente. O número de espaços reservados para dígito à esquerda determina o número de dígitos do exponente. Use `E-` ou `e-` para colocar um sinal de menos junto a exponentes negativos. Use `E+` ou `e+` para colocar um sinal de menos junto a expoentes negativos e um sinal de mais junto a exponentes positivos. Você também deve incluir espaços reservados de dígitos à direita desse símbolo para obter a formatação correta.|  
|`-` `+` `$` ( )|Caracteres literais. Esses caracteres são exibidos exatamente como digitado na cadeia de caracteres de formato. Para exibir um caractere diferente dos listados, preceda-o com uma barra invertida (`\`) ou coloque-o entre aspas duplas ("").|  
|(`\`)|Exibe o próximo caractere na cadeia de caracteres de formato. Para exibir um caractere que tem um significado especial como um caractere literal, preceda-o com uma barra invertida (`\`). A barra invertida não é exibida. Usar uma barra invertida é o mesmo que colocar o próximo caractere entre aspas duplas. Para exibir uma barra invertida, use duas barras invertidas (`\\`).<br /><br /> Exemplos de caracteres que não podem ser exibidos como caracteres literais são os caracteres de formatação de data e a formatação de hora (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, e `:`), os caracteres de formatação numérica (`#`, `0`, `%`, `E`, `e`, vírgula e ponto) e os caracteres de formatação de cadeia de caracteres (`@`, `&`, `<`, `>`, e `!`).|  
|(`"``ABC``"`)|Exibe a cadeia de caracteres entre aspas duplas (""). Para incluir uma cadeia de caracteres no argumento de estilo de dentro do código, você deve usar `Chr(34)` para incluir o texto (`34` é o código de caractere para aspas (")).|  
  
### <a name="legacy-code-example"></a>Exemplo de código herdado  
 A tabela a seguir contém algumas expressões de formato de exemplo para números. (Estes exemplos presumem que a configuração de localidade do sistema seja inglês-EUA) A primeira coluna contém as cadeias de caracteres de formato para o `Style` argumento o `Format` função; as outras colunas contêm a saída resultante se os dados formatados tiverem o valor atribuído nos cabeçalhos da coluna.  
  
|Formato (`Style`)|"5" formatado como|"-5" formatado como|"0.5" formatado como|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Formatos de data/hora predefinidos  
 A tabela a seguir identifica a data predefinida e nomes de formato de hora. Eles podem ser usados por nome como o argumento de estilo para o `Format` função:  
  
|Nome do formato|Descrição|  
|-|-|  
|`General Date`, ou `G`|Exibe uma data / hora. Por exemplo, `3/12/2008 11:07:31 AM`. A exibição de data é determinada pelo valor cultural atual do aplicativo.|  
|`Long Date`, `Medium Date` ou `D`|Exibe uma data de acordo com o formato de data por extenso da sua cultura atual. Por exemplo, `Wednesday, March 12, 2008`.|  
|`Short Date`, ou `d`|Exibe uma data usando o formato de data abreviada da sua cultura atual. Por exemplo, `3/12/2008`.<br /><br /> O `d` caractere exibe o dia em um formato de data definido pelo usuário.|  
|`Long Time`, `Medium Time` ou `T`|Exibe uma hora usando o formato de hora longo da sua cultura atual; geralmente inclui horas, minutos e segundos. Por exemplo, `11:07:31 AM`.|  
|`Short Time` ou `t`|Exibe uma hora usando o formato de hora curta da sua cultura atual. Por exemplo, `11:07 AM`.<br /><br /> O `t` caractere exibe `AM` ou `PM` valores para localidades que usam um relógio de 12 horas em um formato de hora definido pelo usuário.|  
|`f`|Exibe a data por extenso e hora curta de acordo com o formato da sua cultura atual. Por exemplo, `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Exibe a data por extenso e o tempo de acordo com o formato da sua cultura atual. Por exemplo, `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Exibe a data abreviada e curto período de tempo de acordo com o formato da sua cultura atual. Por exemplo, `3/12/2008 11:07 AM`.|  
|`M`, `m`|Exibe o mês e dia de uma data. Por exemplo, `March 12`.<br /><br /> O `M` caractere exibe o mês em um formato de data definido pelo usuário. O `m` caractere exibe os minutos em um formato de hora definido pelo usuário.|  
|`R`, `r`|Formata a data de acordo com o <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> propriedade. Por exemplo, `Wed, 12 Mar 2008 11:07:31 GMT`. A data formatada não ajusta o valor de data e hora. Você deve ajustar o valor de data/hora para GMT antes de chamar o `Format` função.|  
|`s`|Formata a data e hora como um índice classificável. Por exemplo, `2008-03-12T11:07:31`.<br /><br /> O `s` caractere exibe os segundos em um formato de hora definido pelo usuário.|  
|`u`|Formata a data e hora como um índice GMT classificável. Por exemplo, `2008-03-12 11:07:31Z`.|  
|`U`|Formata a data e hora com a data por extenso e hora longa como GMT. Por exemplo, `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formata a data como o mês e ano. Por exemplo, `March, 2008`.<br /><br /> O `Y` e `y` caracteres exibem o ano em um formato de data definido pelo usuário.|  
  
 Para obter mais informações sobre informações da cultura atual do aplicativo, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Formatos de data/hora definidos pelo usuário  
 A tabela a seguir mostra caracteres que você pode usar para criar formatos de data/hora definidos pelo usuário. Ao contrário de versões anteriores do Visual Basic, esses caracteres de formato diferenciam maiusculas de minúsculas.  
  
|Caractere|Descrição|  
|-|-|  
|(`:`)|Separador de hora. Em algumas localidades, outros caracteres podem ser usados para representar o separador de hora. O separador de hora separa horas, minutos e segundos quando os valores de hora são formatados. O caractere real usado como o separador de hora na saída formatada é determinado pelo valor de cultura atual do aplicativo.|  
|(`/`)|Separador de data. Em algumas localidades, outros caracteres podem ser usados para representar o separador de data. O separador de data separa dia, mês e ano quando os valores de data são formatados. O caractere real usado como separador de data na saída formatada é determinado pela cultura atual do aplicativo.|  
|(`%`)|Usado para indicar que o seguinte caractere deve ser lido como o formato de uma única letra sem considerar nenhuma letra à direita. Também é usado para indicar que o formato de uma única letra é lido como um formato definido pelo usuário. Consulte os itens a seguir para obter detalhes adicionais.|  
|`d`|Exibe o dia como um número sem zero à esquerda (por exemplo, `1`). Use `%d` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`dd`|Exibe o dia como um número com um zero à esquerda (por exemplo, `01`).|  
|`ddd`|Exibe o dia como uma abreviação (por exemplo, `Sun`).|  
|`dddd`|Exibe o dia como um nome completo (por exemplo, `Sunday`).|  
|`M`|Exibe o mês como um número sem zero à esquerda (por exemplo, janeiro é representado como `1`). Use `%M` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`MM`|Exibe o mês como um número com um zero à esquerda (por exemplo, `01/12/01`).|  
|`MMM`|Exibe o mês como uma abreviação (por exemplo, `Jan`).|  
|`MMMM`|Exibe o mês como um nome completo do mês (por exemplo, `January`).|  
|`gg`|Exibe a cadeia de caracteres do período/era (por exemplo, `A.D.`).|  
|`h`|Exibe a hora como um número sem zeros à esquerda usando o relógio de 12 horas (por exemplo, `1:15:15 PM`). Use `%h` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`hh`|Exibe a hora como um número com zeros à esquerda usando o relógio de 12 horas (por exemplo, `01:15:15 PM`).|  
|`H`|Exibe a hora como um número sem zeros à esquerda usando o relógio de 24 horas (por exemplo, `1:15:15`). Use `%H` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`HH`|Exibe a hora como um número com zeros à esquerda usando o relógio de 24 horas (por exemplo, `01:15:15`).|  
|`m`|Exibe o minuto como um número sem zeros à esquerda (por exemplo, `12:1:15`). Use `%m` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`mm`|Exibe o minuto como um número com zeros à esquerda (por exemplo, `12:01:15`).|  
|`s`|Exibe o segundo como um número sem zeros à esquerda (por exemplo, `12:15:5`). Use `%s` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`ss`|Exibe o segundo como um número com zeros à esquerda (por exemplo, `12:15:05`).|  
|`f`|Exibe frações de segundos. Por exemplo `ff` exibe centésimos de segundos, enquanto `ffff` exibem milésimos de segundos. Você pode usar até sete `f` símbolos no seu formato definido pelo usuário. Use `%f` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`t`|Usa o relógio de 12 horas e exibe uma letra maiuscula `A` para qualquer hora antes do meio-dia; exibe em letras maiusculas `P` para qualquer hora entre meio-dia e 11:59 P.M. Use `%t` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`tt`|Para localidades que usam um relógio de 12 horas, exibe uma letra maiuscula `AM` com qualquer hora antes do meio-dia; exibe em letras maiusculas `PM` com qualquer hora entre meio-dia e 11:59 P.M.<br /><br /> Para localidades que usam um relógio de 24 horas, não exibirá nada.|  
|`y`|Exibe o número do ano (0-9) sem zeros à esquerda. Use `%y` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`yy`|Exibe o ano no formato numérico de dois dígitos com um zero à esquerda, se aplicável.|  
|`yyy`|Exibe o ano no formato numérico de quatro dígitos.|  
|`yyyy`|Exibe o ano no formato numérico de quatro dígitos.|  
|`z`|Exibe o deslocamento de fuso horário sem um zero à esquerda (por exemplo, `-8`). Use `%z` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`zz`|Exibe o deslocamento de fuso horário com um zero à esquerda (por exemplo, `-08`)|  
|`zzz`|Exibe o deslocamento de fuso horário completo (por exemplo, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Exemplo de código herdado  
 Os seguintes são exemplos de data definido pelo usuário e formatos de hora para `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Formatar|Telas|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A resolução de tempo mínimo para um dispositivo é determinada pelo fabricante do dispositivo. Se o tempo de resolução para o dispositivo for grande o suficiente, o `f` caracteres de formato retorna 0 quando executado nesse dispositivo.  
  
   
  
## Examples  
 Este exemplo mostra vários usos da função `Format` para formatar valores usando os formatos `String` e os formatos definidos pelo usuário. Para o separador de data (`/`), separador de hora (`:`) e indicadores AM/PM (`t` e `tt`), a saída formatada real exibida pelo seu sistema depende das configurações de localidade que o código está usando. Quando horas e datas são exibidas no ambiente de desenvolvimento, o formato abreviado de tempo e o formato abreviado de data do local do código são usados.  
  
> [!NOTE]
>  Para localidades que usam um relógio de 24 horas, os indicadores AM/PM (`t` e `tt`) não exibem nada.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Expressão a ser formatada.</param>
        <param name="NumDigitsAfterDecimal">Opcional. Valor numérico indicando quantas casas são exibidas à direita do decimal. O valor padrão é -1, que indica que as configurações regionais do computador são usadas.</param>
        <param name="IncludeLeadingDigit">Opcional. A enumeração <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se um zero à esquerda é exibido ou não para valores fracionários. Consulte "Comentários" para obter os valores.</param>
        <param name="UseParensForNegativeNumbers">Opcional. A enumeração <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se é necessário ou não colocar valores negativos entre parênteses. Consulte "Comentários" para obter os valores.</param>
        <param name="GroupDigits">Opcional. A enumeração <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se os números são agrupados ou não usando o delimitador de grupo especificado nas configurações regionais do computador. Consulte "Comentários" para obter os valores.</param>
        <summary>Retorna uma expressão formatada como um valor de moeda usando o símbolo da moeda definido no painel de controle do sistema.</summary>
        <returns>Retorna uma expressão formatada como um valor de moeda usando o símbolo da moeda definido no painel de controle do sistema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um ou mais argumentos opcionais são omitidos, os valores correspondentes de configurações regionais do computador são usados em vez disso.  
  
 A posição do símbolo da moeda em relação ao valor de moeda é determinada pelas configurações regionais do sistema.  
  
> [!NOTE]
>  Todas as informações de configuração vêm da localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework, exceto o zero à esquerda, que é proveniente do `Number` guia.  
  
 O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos usar os seguintes valores de enumeração de três estados.  
  
|Valor|Descrição|  
|-|-|  
|`TriState.True`|verdadeiro|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Configurações regionais do computador|  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso da função `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O número de dígitos após o ponto decimal é maior que 99.</exception>
        <exception cref="T:System.InvalidCastException">O tipo não é numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Expressão <see langword="Date" /> a ser formatada.</param>
        <param name="NamedFormat">Opcional. Valor numérico que indica o formato de data/hora usado. Se omitido, <see langword="DateFormat.GeneralDate" /> será usado.</param>
        <summary>Retorna uma expressão de cadeia de caracteres que representa um valor de data/hora.</summary>
        <returns>Retorna uma expressão de cadeia de caracteres que representa um valor de data/hora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Date` tipo de dados sempre contém informações de data e hora. Para fins de conversão de tipo, Visual Basic considera 1/1/1 (1 de janeiro do ano 1) como um valor neutro para a data e 00:00:00 (meia-noite) deve ser um valor neutro para a hora. Se você formatar uma `Date` valor como uma cadeia de caracteres de data/hora, `FormatDateTime` não inclui valores neutros na cadeia de caracteres resultante. Por exemplo, se você converter # 1/1/0001 9:30:00 # em uma cadeia de caracteres, o resultado é "9:30:00 AM"; as informações de data são suprimidas. No entanto, as informações de data ainda estão presentes no original `Date` valor e pode ser recuperada com funções como `DatePart`.  
  
> [!NOTE]
>  Se você passar o `Expression` argumento como um `String` literal, `FormatDateTime` interpreta isso de acordo com o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> configuração do seu aplicativo. No entanto, se você passá-lo como um `Date` literal, use o formato #mm/dd/aaaa #, porque `FormatDateTime` sempre interpreta um `Date` literal de acordo com a cultura do inglês (EUA). Isso é necessário porque, se um aplicativo é desenvolvido e codificado usando `Date` literais de uma cultura, mas, em seguida, é executada em uma plataforma com uma cultura diferente, o `Date` literais podem ser interpretados incorretamente.  
  
 O `NamedFormat` argumento tem as seguintes configurações.  
  
|Constante|Descrição|  
|-|-|  
|`DateFormat.GeneralDate`|Exibe uma data / hora. Exiba uma parte de data como uma data abreviada. Se houver uma parte de hora, exibe um longo tempo. Se estiver presente, exibir as duas partes.|  
|`DateFormat.LongDate`|Exibe uma data usando o formato de data por extenso especificado nas configurações regionais do computador.|  
|`DateFormat.ShortDate`|Exibe uma data usando o formato de data abreviada especificado nas configurações regionais do computador.|  
|`DateFormat.LongTime`|Exibe uma hora usando o formato de hora especificado nas configurações regionais do computador.|  
|`DateFormat.ShortTime`|Exibe uma hora usando o formato de 24 horas (hh: mm).|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `FormatDateTime` função.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          A configuração <paramref name="NamedFormat" /> não é válida.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Expressão a ser formatada.</param>
        <param name="NumDigitsAfterDecimal">Opcional. Valor numérico indicando quantas casas são exibidas à direita do decimal. O valor padrão é -1, que indica que as configurações regionais do computador são usadas.</param>
        <param name="IncludeLeadingDigit">Opcional. A constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se um 0 à esquerda é exibido para valores fracionários. Consulte “Configurações” para obter os valores.</param>
        <param name="UseParensForNegativeNumbers">Opcional. A constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se é necessário colocar valores negativos entre parênteses. Consulte “Configurações” para obter os valores.</param>
        <param name="GroupDigits">Opcional. A constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se os números são agrupados usando o delimitador de grupo especificado nas configurações de localidade ou não. Consulte “Configurações” para obter os valores.</param>
        <summary>Retorna uma expressão formatada como um número.</summary>
        <returns>Retorna uma expressão formatada como um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um ou mais argumentos opcionais são omitidos os valores dos argumentos omitidos são fornecidos pelas configurações de localidade.  
  
> [!NOTE]
>  Todas as informações de configuração vêm da localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework.  
  
 O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos têm as seguintes configurações.  
  
|Constante|Descrição|  
|-|-|  
|`TriState.True`|verdadeiro|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Configurações regionais do computador|  
  
   
  
## Examples  
 Este exemplo demonstra o `FormatNumber` função.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">O tipo não é numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Expressão a ser formatada.</param>
        <param name="NumDigitsAfterDecimal">Opcional. Valor numérico indicando quantas casas são exibidas à direita do decimal. O valor padrão é -1, que indica que as configurações de localidade são usadas.</param>
        <param name="IncludeLeadingDigit">Opcional. A constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se um zero à esquerda é exibido ou não para valores fracionários. Consulte “Configurações” para obter os valores.</param>
        <param name="UseParensForNegativeNumbers">Opcional. A constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se é necessário ou não colocar valores negativos entre parênteses. Consulte “Configurações” para obter os valores.</param>
        <param name="GroupDigits">Opcional. A constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica se os números são agrupados usando o delimitador de grupo especificado nas configurações de localidade ou não. Consulte “Configurações” para obter os valores.</param>
        <summary>Retorna uma expressão formatada como um percentual (isto é, multiplicada por 100) com um caractere % à direita.</summary>
        <returns>Retorna uma expressão formatada como um percentual (isto é, multiplicada por 100) com um caractere % à direita.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um ou mais argumentos opcionais são omitidos, os valores dos argumentos omitidos são fornecidos pelas configurações de localidade.  
  
> [!NOTE]
>  Todas as informações de configuração vêm da localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework.  
  
 O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos têm as seguintes configurações.  
  
|Constante|Descrição|  
|-|-|  
|`TriState.True`|verdadeiro|  
|`TriState.False`|False|  
|`TriState.Default`|Configurações regionais do computador|  
  
   
  
## Examples  
 Este exemplo ilustra o uso do `FormatPercent` função.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">O tipo não é numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Qualquer expressão <see langword="String" /> válida.</param>
        <param name="Index">Necessário. Expressão <see langword="Integer" />. O índice do caractere (baseado em 1) no <c>str</c> a ser retornado.</param>
        <summary>Retorna um valor <see langword="Char" /> que representa o caractere de índice especificado na cadeia de caracteres fornecida.</summary>
        <returns>
          O valor <see langword="Char" /> que representa o caractere de índice especificado na cadeia de caracteres fornecida.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Index` é menor que 1 ou maior que o índice do último caractere no `str`, uma `ArgumentException` é gerada.  
  
   
  
## Examples  
 Este exemplo mostra como usar o `GetChar` função para retornar um caractere de um índice especificado em um `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> é <see langword="Nothing" />, <paramref name="Index" /> &lt; 1 ou <paramref name="Index" /> é maior que o índice do último caractere de <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um inteiro que especifica a posição inicial da primeira ocorrência de uma cadeia de caracteres dentro de outra.  O inteiro é um índice baseado em um se uma correspondência é encontrada.  Se nenhuma correspondência for encontrada, a função retornará zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Necessário. Expressão <see langword="String" /> pesquisada.</param>
        <param name="String2">Necessário. Expressão <see langword="String" /> solicitada.</param>
        <param name="Compare">Opcional. Especifica o tipo de comparação de cadeias de caracteres. Se <c>Compare</c> for omitido, a configuração <see langword="Option Compare" /> determinará o tipo de comparação.</param>
        <summary>Retorna um inteiro que especifica a posição inicial da primeira ocorrência de uma cadeia de caracteres dentro de outra.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStr retorna  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> terá tamanho zero ou <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> terá tamanho zero ou <see langword="Nothing" /></term>
              <description> A posição inicial da pesquisa, cujo padrão é a posição do primeiro caractere.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> não for encontrado  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> for encontrado em <paramref name="String1" /></term>
              <description> Posição em que a correspondência começa  
  
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, o `InStr` função é usada durante a análise de cadeias de caracteres.  
  
> [!NOTE]
>  O `InStrB` função nas versões anteriores do Visual Basic retorna um número de bytes em vez de uma posição de caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `InStrB` não é mais suportada.  
  
 As configurações do argumento `Compare` são:  
  
|Constante|Valor|Descrição|  
|-|-|-|  
|`Binary`|0|Executa uma comparação binária|  
|`Text`|1|Executa uma comparação de texto|  
  
   
  
## Examples  
 Este exemplo usa a função `InStr` para retornar a posição da primeira ocorrência de uma cadeia de caracteres dentro da outra.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Opcional. Expressão numérica que define a posição inicial de cada pesquisa. Se omitida, a pesquisa começa na posição do primeiro caractere. O índice inicial é de base 1.</param>
        <param name="String1">Necessário. Expressão <see langword="String" /> pesquisada.</param>
        <param name="String2">Necessário. Expressão <see langword="String" /> solicitada.</param>
        <param name="Compare">Opcional. Especifica o tipo de comparação de cadeias de caracteres. Se <c>Compare</c> for omitido, a configuração <see langword="Option Compare" /> determinará o tipo de comparação.</param>
        <summary>Retorna um inteiro que especifica a posição inicial da primeira ocorrência de uma cadeia de caracteres dentro de outra.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStr retorna  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> terá tamanho zero ou <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> terá tamanho zero ou <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> não for encontrado  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> for encontrado em <paramref name="String1" /></term>
              <description> Posição em que a correspondência começa  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; comprimento de <paramref name="String1" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, o `InStr` função é usada durante a análise de cadeias de caracteres.  
  
> [!NOTE]
>  O `InStrB` função nas versões anteriores do Visual Basic retorna um número de bytes em vez de uma posição de caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `InStrB` não é mais suportada.  
  
 As configurações do argumento `Compare` são:  
  
|Constante|Valor|Descrição|  
|-|-|-|  
|`Binary`|0|Executa uma comparação binária|  
|`Text`|1|Executa uma comparação de texto|  
  
   
  
## Examples  
 Este exemplo usa a função `InStr` para retornar a posição da primeira ocorrência de uma cadeia de caracteres dentro da outra.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Necessário. Expressão de cadeia de caracteres pesquisada.</param>
        <param name="StringMatch">Necessário. Expressão de cadeia de caracteres pesquisada.</param>
        <param name="Start">Opcional. Expressão numérica que define a posição inicial baseada em um de cada pesquisa, começando do lado esquerdo da cadeia de caracteres. Se <c>Start</c> for omitido, -1 será usado, o que significa que a pesquisa será iniciada na posição do último caractere. Pesquisa e continua da direita para a esquerda.</param>
        <param name="Compare">Opcional. Valor numérico que indica o tipo de comparação a ser usado ao avaliar subcadeias de caracteres. Se for omitido, será executada uma comparação binária. Consulte Configurações para obter os valores.</param>
        <summary>Retorna a posição da primeira ocorrência de uma cadeia de caracteres em outra, começando do lado direito da cadeia de caracteres.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> Retornos de InStrRev  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> tem comprimento zero  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> tem comprimento zero  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> não for encontrado  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> for encontrado em <paramref name="StringCheck" /></term>
              <description> Posição na qual a primeira correspondência é encontrada, começando com o lado direito da cadeia de caracteres.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> é maior que o tamanho de <paramref name="StringMatch" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que a sintaxe para a `InStrRev` função não é igual à sintaxe para a `InStr` função.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|`Binary`|Executa uma comparação binária.|  
|`Text`|Executa uma comparação textual.|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `InStrRev` função.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 ou <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres criada unindo um número de subcadeias contidas em uma matriz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Necessário. Matriz unidimensional que contém subcadeias a serem unidas.</param>
        <param name="Delimiter">Opcional. Qualquer cadeia de caracteres, usada para separar as subcadeias na cadeia de caracteres retornada. Se omitido, o caractere de espaço (" ") será usado. Se <c>Delimiter</c> for uma cadeia de comprimento zero ("") ou <see langword="Nothing" />, todos os itens na lista serão concatenados sem delimitadores.</param>
        <summary>Retorna uma cadeia de caracteres criada unindo um número de subcadeias contidas em uma matriz.</summary>
        <returns>Retorna uma cadeia de caracteres criada unindo um número de subcadeias contidas em uma matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Há uma paridade entre o `Join` e `Split` funções. O `Join` pega uma matriz de cadeias de caracteres de função e associa usando uma cadeia de caracteres delimitadora para retornar uma única cadeia de caracteres. O `Split` função usa uma cadeia de caracteres e a separa no delimitador, para retornar uma matriz de cadeias de caracteres. No entanto, uma diferença importante é que `Join` pode concatenar cadeias de caracteres com qualquer cadeia de caracteres delimitadora, `Split` somente pode separar cadeias de caracteres usando um único caractere delimitador.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o `Join` função para criar uma lista de várias cadeias de caracteres.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> não é unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Necessário. Matriz unidimensional que contém subcadeias a serem unidas.</param>
        <param name="Delimiter">Opcional. Qualquer cadeia de caracteres, usada para separar as subcadeias na cadeia de caracteres retornada. Se omitido, o caractere de espaço (" ") será usado. Se <c>Delimiter</c> for uma cadeia de comprimento zero ("") ou <see langword="Nothing" />, todos os itens na lista serão concatenados sem delimitadores.</param>
        <summary>Retorna uma cadeia de caracteres criada unindo um número de subcadeias contidas em uma matriz.</summary>
        <returns>Retorna uma cadeia de caracteres criada unindo um número de subcadeias contidas em uma matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Há uma paridade entre o `Join` e `Split` funções. O `Join` pega uma matriz de cadeias de caracteres de função e associa usando uma cadeia de caracteres delimitadora para retornar uma única cadeia de caracteres. O `Split` função usa uma cadeia de caracteres e a separa no delimitador, para retornar uma matriz de cadeias de caracteres. No entanto, uma diferença importante é que `Join` pode concatenar cadeias de caracteres com qualquer cadeia de caracteres delimitadora, `Split` somente pode separar cadeias de caracteres usando um único caractere delimitador.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o `Join` função para criar uma lista de várias cadeias de caracteres.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> não é unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Necessário. Qualquer expressão <see langword="String" /> ou <see langword="Char" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas.</summary>
        <returns>Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente as letras maiusculas são convertidas em minúsculas; todas as letras minúsculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passe <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa o `LCase` função para retornar uma versão minúscula de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Necessário. Qualquer expressão <see langword="String" /> ou <see langword="Char" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas.</summary>
        <returns>Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente as letras maiusculas são convertidas em minúsculas; todas as letras minúsculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passe <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa o `LCase` função para retornar uma versão minúscula de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Expressão <see langword="String" /> da qual os caracteres mais à esquerda são retornados.</param>
        <param name="Length">Necessário. Expressão <see langword="Integer" />. Expressão numérica que indica quantos caracteres serão retornados. Se for 0, uma cadeia de caracteres de tamanho zero ("") será retornada. Se for maior ou igual ao número de caracteres em <c>str</c>, a cadeia de caracteres inteira será retornada.</param>
        <summary>Retorna uma cadeia de caracteres que contém um número especificado de caracteres do lado esquerdo de uma cadeia de caracteres.</summary>
        <returns>Retorna uma cadeia de caracteres que contém um número especificado de caracteres do lado esquerdo de uma cadeia de caracteres.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função. Se usado em um aplicativo Windows Forms ou qualquer outra classe que tenha uma `Left` propriedade, você deve qualificar totalmente a função com `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  O `LeftB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LeftB` não é mais suportada.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Left` função para retornar uma subcadeia de caracteres de um determinado `String`. Em uma classe que tem um `Left` propriedade, pode ser necessário qualificar totalmente o `Left` função.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualquer expressão <see langword="String" /> válida ou nome variável. Caso <c>Expression</c> seja do tipo <see langword="Object" />, a função <see langword="Len" /> retornará o tamanho porque ele será gravado no arquivo pela função <see langword="FilePut" />.</param>
        <summary>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</summary>
        <returns>Retorna um inteiro contendo o número de caracteres em uma cadeia de caracteres ou o número nominal de bytes necessários para armazenar uma variável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número especificado de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Necessário. Expressão <see langword="String" />. Nome da variável de cadeia de caracteres.</param>
        <param name="Length">Necessário. Expressão <see langword="Integer" />. Tamanho da cadeia de caracteres retornada.</param>
        <summary>Retorna uma cadeia de caracteres alinhada à esquerda que contém a cadeia especificada ajustada no tamanho especificado.</summary>
        <returns>Retorna uma cadeia de caracteres alinhada à esquerda que contém a cadeia especificada ajustada no tamanho especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a cadeia de caracteres especificada é maior que o comprimento especificado, a cadeia de caracteres retornada é reduzida para o comprimento especificado. Se a cadeia de caracteres especificada é menor que o comprimento especificado, os espaços são adicionados para a extremidade direita da cadeia de caracteres retornada para produzir o tamanho apropriado.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `LSet` função.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Qualquer expressão <see langword="String" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres contendo uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<see langword="LTrim" />), sem espaços à direita (<see langword="RTrim" />) ou sem espaços à esquerda ou à direita (<see langword="Trim" />).</summary>
        <returns>Retorna uma cadeia de caracteres contendo uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<see langword="LTrim" />), sem espaços à direita (<see langword="RTrim" />) ou sem espaços à esquerda ou à direita (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres.  
  
   
  
## Examples  
 Este exemplo usa a função `LTrim` para retirar espaços à esquerda e a função `RTrim` para retirar espaços à direita de um variável de cadeia de caracteres. Usa a função de `Trim` para retirar ambos os tipos de espaços.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres que contém caracteres de uma cadeia de caracteres especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Expressão <see langword="String" /> da qual os caracteres são retornados.</param>
        <param name="Start">Necessário. Expressão <see langword="Integer" />. Posição inicial dos caracteres a serem retornados. Se <c>Start</c> for maior que o número de caracteres em <c>str</c>, a função <see langword="Mid" /> retornará uma cadeia de comprimento zero (""). <c>Start</c> é baseado em unidade.</param>
        <summary>Retorna uma cadeia de caracteres que consiste em todos os caracteres de uma posição especificada na cadeia de caracteres.</summary>
        <returns>Uma cadeia de caracteres que consiste em todos os caracteres da posição especificada na cadeia de caracteres.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função.  
  
 Visual Basic tem um `Mid` função e um `Mid` instrução. Os dois elementos operam em um número especificado de caracteres em uma cadeia de caracteres, mas o `Mid` função retorna os caracteres enquanto o `Mid` instrução substitui os caracteres. Para obter mais informações, consulte [instrução Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  O `MidB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic estão em Unicode, e `MidB` não é mais suportada.  
  
   
  
## Examples  
 A última linha neste exemplo usa essa sobrecarga de `Mid` função para retornar o quinto e subsequentes caracteres de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 ou <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Expressão <see langword="String" /> da qual os caracteres são retornados.</param>
        <param name="Start">Necessário. Expressão <see langword="Integer" />. Posição inicial dos caracteres a serem retornados. Se <c>Start</c> for maior que o número de caracteres em <c>str</c>, a função <see langword="Mid" /> retornará uma cadeia de comprimento zero (""). <c>Start</c> é baseado em unidade.</param>
        <param name="Length">Opcional. Expressão <see langword="Integer" />. O número de caracteres a serem retornados. Se for omitido ou se houver menos de <c>Length</c> caracteres no texto (incluindo o caractere na posição <c>Start</c>), todos os caracteres da posição inicial até o final da cadeia de caracteres serão retornados.</param>
        <summary>Retorna uma cadeia de caracteres que contém um número especificado de caracteres a partir de uma posição especificada em uma cadeia de caracteres.</summary>
        <returns>Uma cadeia de caracteres que consiste no número especificado de caracteres a partir da posição especificada na cadeia de caracteres.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função.  
  
 Visual Basic tem um `Mid` função e um `Mid` instrução. Os dois elementos operam em um número especificado de caracteres em uma cadeia de caracteres, mas o `Mid` função retorna os caracteres enquanto o `Mid` instrução substitui os caracteres. Para obter mais informações, consulte [instrução Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  O `MidB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic estão em Unicode, e `MidB` não é mais suportada.  
  
   
  
## Examples  
 Os dois primeiros `Mid` funções neste exemplo retornam o número especificado de caracteres de uma cadeia de caracteres, desde as posições de determinado. (A última função ilustra o <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> sobrecarregar e especifica apenas o ponto de partida para a extração de cadeia de caracteres.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 ou <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. A expressão de cadeia de caracteres que contém a subcadeia de caracteres a ser substituída.</param>
        <param name="Find">Necessário. A subcadeia de caracteres que está sendo pesquisada.</param>
        <param name="Replacement">Necessário. Subcadeia de caracteres de substituição.</param>
        <param name="Start">Opcional. Posição dentro da <c>Expression</c> que inicia uma subcadeia de caracteres usada para substituição. O valor retornado de <see langword="Replace" /> é uma cadeia de caracteres que começa em <c>Start</c>, com as substituições apropriadas. Caso omitido, 1 é pressuposto.</param>
        <param name="Count">Opcional. Número de substituições de subcadeias de caracteres a ser executado. Caso omitido, o valor padrão é -1, que significa "realizar todas as substituições possíveis."</param>
        <param name="Compare">Opcional. Valor numérico que indica o tipo de comparação a ser usado ao avaliar subcadeias de caracteres. Consulte Configurações para obter os valores.</param>
        <summary>Retorna uma cadeia de caracteres na qual uma subcadeia de caracteres especificada foi substituída por outra subcadeia de caracteres um número especificado de vezes.</summary>
        <returns>
          <see langword="Replace" /> retorna os seguintes valores.  
  
 <list type="table"><item><term> Se  
  
 </term><description> Replace retorna  
  
 </description></item><item><term><paramref name="Find" /> tem comprimento zero ou <see langword="Nothing" /></term><description> Cópia de <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> tem comprimento zero  
  
 </term><description> Cópia de <paramref name="Expression" /> sem nenhuma ocorrência de <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> tem comprimento zero ou <see langword="Nothing" /> ou <paramref name="Start" /> é maior que o tamanho de <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> é 0  
  
 </term><description> Cópia de <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno de `Replace` função é uma cadeia de caracteres que começa na posição especificada pelo `Start` e termina no final do `Expression` cadeia de caracteres, com as substituições feitas conforme especificado pelo `Find` e `Replace` valores.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|`Binary`|Executa uma comparação binária|  
|`Text`|Executa uma comparação textual|  
  
   
  
## Examples  
 Este exemplo demonstra o `Replace` função.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 ou <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Expressão <see langword="String" /> da qual os caracteres mais à direita são retornados.</param>
        <param name="Length">Necessário. <see langword="Integer" />. Expressão numérica que indica quantos caracteres serão retornados. Se for 0, uma cadeia de caracteres de tamanho zero ("") será retornada. Se for maior ou igual ao número de caracteres em <c>str</c>, a cadeia de caracteres inteira será retornada.</param>
        <summary>Retorna uma cadeia de caracteres que contém um número especificado de caracteres do lado direito de uma cadeia de caracteres.</summary>
        <returns>Retorna uma cadeia de caracteres que contém um número especificado de caracteres do lado direito de uma cadeia de caracteres.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função. Se usado em um formulário do Windows, ou qualquer outra classe que tenha uma `Right` propriedade, você deve qualificar totalmente a função com `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  O `RightB` função em versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes, em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `RightB` não é mais suportada.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Right` função para retornar uma subcadeia de caracteres de um determinado `String`. Em uma classe que tem um `Right` propriedade, pode ser necessário qualificar totalmente o `Right` função.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Necessário. Expressão <see langword="String" />. Nome da variável de cadeia de caracteres.</param>
        <param name="Length">Necessário. Expressão <see langword="Integer" />. Tamanho da cadeia de caracteres retornada.</param>
        <summary>Retorna uma cadeia de caracteres alinhada à direita que contém a cadeia especificada ajustada no tamanho especificado.</summary>
        <returns>Retorna uma cadeia de caracteres alinhada à direita que contém a cadeia especificada ajustada no tamanho especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Source` é maior do que `Length`, `RSet` coloca apenas os caracteres mais à esquerda, até o comprimento de `Source`, na cadeia de caracteres retornada. Se a cadeia de caracteres especificada é menor que o comprimento especificado, os espaços são adicionados para o lado esquerdo da cadeia de caracteres para produzir o tamanho apropriado. Se a cadeia de caracteres especificada é maior que o comprimento especificado, ele é reduzido para o comprimento especificado.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `RSet` função.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Qualquer expressão <see langword="String" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres contendo uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<see langword="LTrim" />), sem espaços à direita (<see langword="RTrim" />) ou sem espaços à esquerda ou à direita (<see langword="Trim" />).</summary>
        <returns>Retorna uma cadeia de caracteres contendo uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<see langword="LTrim" />), sem espaços à direita (<see langword="RTrim" />) ou sem espaços à esquerda ou à direita (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres.  
  
   
  
## Examples  
 Este exemplo usa a função `LTrim` para retirar espaços à esquerda e a função `RTrim` para retirar espaços à direita de um variável de cadeia de caracteres. Usa a função de `Trim` para retirar ambos os tipos de espaços.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Expressão <see langword="Integer" />. O número de espaços desejado na cadeia de caracteres.</param>
        <summary>Retorna uma cadeia de caracteres que consiste no número especificado de espaços.</summary>
        <returns>Retorna uma cadeia de caracteres que consiste no número especificado de espaços.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Space` função é útil para formatação de saída e para limpar dados em cadeias de caracteres de comprimento fixo.  
  
   
  
## Examples  
 Este exemplo usa o `Space` função para retornar uma cadeia de caracteres que consiste em um número especificado de espaços.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Expressão <see langword="String" /> que contém subcadeias de caracteres e delimitadores.</param>
        <param name="Delimiter">Opcional. Qualquer caractere único usado para identificar limites de subcadeia de caracteres. Se <c>Delimiter</c> for omitido, o caractere de espaço (" ") será considerado o delimitador.</param>
        <param name="Limit">Opcional. Número máximo de subcadeias de caracteres no qual a cadeia de caracteres de entrada deve ser dividida. O padrão, -1, indica que a cadeia de caracteres de entrada deve ser dividida em cada ocorrência da cadeia de caracteres <c>Delimiter</c>.</param>
        <param name="Compare">Opcional. Valor numérico que indica a comparação a ser usada ao avaliar subcadeias de caracteres. Consulte “Configurações” para obter os valores.</param>
        <summary>Retorna uma matriz unidimensional baseada em zero que contém um número especificado de subcadeias de caracteres.</summary>
        <returns>
          Matriz <see langword="String" />. Se <paramref name="Expression" /> for uma cadeia de caracteres de tamanho zero (""), <see langword="Split" /> retornará uma matriz de elemento único que contém uma cadeia de caracteres de tamanho zero. Se <paramref name="Delimiter" /> for uma cadeia de caracteres de tamanho zero ou se ela não for exibida em nenhum lugar em <paramref name="Expression" />, <see langword="Split" /> retornará uma matriz de elemento único que contém toda a cadeia de caracteres <paramref name="Expression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, ou quando `Limit` é igual a -1, o `Split` função divide a cadeia de caracteres de entrada em cada ocorrência da cadeia de caracteres delimitadora e retorna as subcadeias de caracteres em uma matriz. Quando o `Limit` parâmetro for maior que zero, o `Split` função divide a cadeia de caracteres no primeiro `Limit`ocorrências de-1 do delimitador e retorna uma matriz com as subcadeias de caracteres resultantes. Por exemplo, `Split("a:b:c", ":")` retorna a matriz `{"a", "b", "c"}`, enquanto `Split("a:b:c", ":", 2)` retorna a matriz `{"a", "b:c"}`.  
  
 Quando o `Split` função encontra dois delimitadores em uma linha ou um delimitador no início ou no final da cadeia de caracteres, ele interpreta como envolvem uma cadeia de caracteres vazia (""). Por exemplo, `Split("xx", "x")` retorna a matriz que contém três cadeias de caracteres vazias: uma entre o início da cadeia de caracteres e o primeiro "x", uma entre as duas "cadeias de caracteres x" e outra entre o último "x" e o fim da cadeia de caracteres.  
  
 Esta tabela mostra como opcional `Delimiter`, `Limit`, e `Compare` parâmetros podem alterar o comportamento do `Split` função.  
  
|Chamada de divisão|Valor de Retorno|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice e Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"alguém", "e"}|  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|Valor|  
|-|-|-|  
|`CompareMethod.Binary`|Executa uma comparação binária|0|  
|`CompareMethod.Text`|Executa uma comparação textual|1|  
  
   
  
## Examples  
 O exemplo a seguir demonstra como dividir uma cadeia de caracteres em seus espaços.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 O exemplo a seguir demonstra como dividir cadeias de caracteres com vários delimitadores em uma linha e filtrar as cadeias de caracteres vazias.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Necessário. Qualquer expressão <see langword="String" /> válida.</param>
        <param name="String2">Necessário. Qualquer expressão <see langword="String" /> válida.</param>
        <param name="Compare">Opcional. Especifica o tipo de comparação de cadeias de caracteres. Se <c>Compare</c> for omitido, a configuração <see langword="Option Compare" /> determinará o tipo de comparação.</param>
        <summary>Retorna -1, 0 ou 1, com base no resultado de uma comparação de cadeia de caracteres.</summary>
        <returns>A função <see langword="StrComp" /> tem os seguintes valores.  
  
 <list type="table"><item><term> Se  
  
 </term><description> StrComp retorna  
  
 </description></item><item><term><paramref name="String1" /> classifica à frente de <paramref name="String2" /></term><description> -1  
  
 </description></item><item><term><paramref name="String1" /> é igual a <paramref name="String2" /></term><description> 0  
  
 </description></item><item><term><paramref name="String1" /> classifica após <paramref name="String2" /></term><description> 1  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As cadeias de caracteres são comparadas por valores de classificação alfanumérica começando com o primeiro caractere. Para obter mais informações sobre comparações binárias, comparações textuais e ordem de classificação, consulte [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 As configurações do argumento `Compare` são:  
  
|Constante|Descrição|  
|-|-|  
|`Binary`|Executa uma comparação binária, com base em uma ordem de classificação derivada de representações binárias internas dos caracteres.|  
|`Text`|Executa uma comparação de texto, com base em uma ordem de classificação de maiusculas e minúsculas do texto determinada pelo seu sistema `LocaleID` valor.|  
  
   
  
## Examples  
 Este exemplo usa o `StrComp` função para retornar os resultados de uma comparação de cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          O valor <paramref name="Compare" /> não é válido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Expressão <see langword="String" /> a ser convertida.</param>
        <param name="Conversion">Necessário. Membro de <see cref="T:Microsoft.VisualBasic.VbStrConv" />. O valor de enumeração que especifica o tipo de conversão a ser executado.</param>
        <param name="LocaleID">Opcional. O valor <see langword="LocaleID" />, se for diferente do valor <see langword="LocaleID" /> do sistema. (O valor <see langword="LocaleID" /> do sistema é o padrão.)</param>
        <summary>Retorna uma cadeia de caracteres convertida, conforme especificado.</summary>
        <returns>Retorna uma cadeia de caracteres convertida, conforme especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, e `VbStrConv.Hiragana` podem causar erros de tempo de execução quando usadas em localidades onde eles não se aplicam, mas nem sempre: as constantes `VbStrConv.Katakana` e `VbStrConv.Hiragana` pode ser usado em um sistema não-japonês com o pacote de idiomas japonês instalado. Além disso, o uso das constantes `VbStrConv.Wide` e `VbStrConv.Narrow` é suportado em qualquer sistema com um idioma do Leste Asiático instalado.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passe <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 As configurações do argumento `Conversion` são:  
  
|Membro de enumeração|Descrição|  
|-|-|  
|`VbStrConv.None`|Não realiza nenhuma conversão|  
|`VbStrConv.LinguisticCasing`|Usa regras linguísticas de maiusculas e minúsculas, em vez de sistema de arquivos (padrão). Válido com `VbStrConv.UpperCase` e `VbStrConv.LowerCase` apenas.|  
|`VbStrConv.UpperCase`|Converte a cadeia de caracteres em caracteres maiúsculos.|  
|`VbStrConv.LowerCase`|Converte a cadeia de caracteres em caracteres minúsculos.|  
|`VbStrConv.ProperCase`|Converte a primeira letra de cada palavra na cadeia de caracteres em maiusculas.|  
|`VbStrConv.Wide` <sup>*</sup>|Converte estreitos (meia largura) caracteres na cadeia de caracteres (largura inteira). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Converte caracteres todo (largura inteira) na cadeia de caracteres (meia largura).|  
|`VbStrConv.Katakana` <sup>**</sup>|Converte os caracteres Hiragana da cadeira de caracteres em caracteres Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Converte os caracteres Katakana da cadeira de caracteres em caracteres Hiragana.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Converte caracteres de chinês tradicional em chinês simplificado.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Converte caracteres de chinês simplificado em chinês tradicional.|  
  
 <sup>*</sup> Aplica-se a localidades asiáticas.  
  
 <sup>**</sup> Aplica-se para o Japão apenas.  
  
> [!NOTE]
>  Essas constantes são especificadas no common language runtime do .NET Framework. Como resultado, eles podem ser usados em qualquer lugar no seu código no lugar dos valores reais. A maioria pode ser combinada (por exemplo, `UpperCase + Wide`), exceto quando eles são mutuamente exclusivos (por exemplo, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Estes são os separadores de palavras válidos para capitalização apropriada: nulo (`Chr$(0)`), guia horizontal (`Chr$(9)`), alimentação de linha (`Chr$(10)`), barra vertical (`Chr$(11)`), alimentação de formulário (`Chr$(12)`), retorno de carro (`Chr$(13)`), espaço (conjunto de caracteres de byte único) (`Chr$(32)`). O valor real para um espaço, o que pode ser total ou meia largura, varia por país/região para culturas do Leste Asiático.  
  
   
  
## Examples  
 Este exemplo converte o texto em letras minúsculas.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 ou &gt; 2048 sem suporte ou conversão sem suporte para a localidade especificada.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Expressão <see langword="Integer" />. O tamanho da cadeia de caracteres a ser retornado.</param>
        <param name="Character">Necessário. Qualquer expressão <see langword="Char" />, <see langword="String" /> ou <see langword="Object" /> válida. Somente o primeiro caractere da expressão será usado. Se Character for do tipo <see langword="Object" />, ele deverá conter um valor <see langword="Char" /> ou <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</summary>
        <returns>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere no `Character` argumento e ele é duplicado `Number` número de vezes.  
  
   
  
## Examples  
 Este exemplo usa o `StrDup` duplicado de função para retornar uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> é menor que 0 ou o tipo <paramref name="Character" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> é <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Expressão <see langword="Integer" />. O tamanho da cadeia de caracteres a ser retornado.</param>
        <param name="Character">Necessário. Qualquer expressão <see langword="Char" />, <see langword="String" /> ou <see langword="Object" /> válida. Somente o primeiro caractere da expressão será usado. Se Character for do tipo <see langword="Object" />, ele deverá conter um valor <see langword="Char" /> ou <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</summary>
        <returns>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere no `Character` argumento e ele é duplicado `Number` número de vezes.  
  
   
  
## Examples  
 Este exemplo usa o `StrDup` duplicado de função para retornar uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> é menor que 0 ou o tipo <paramref name="Character" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> é <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Expressão <see langword="Integer" />. O tamanho da cadeia de caracteres a ser retornado.</param>
        <param name="Character">Necessário. Qualquer expressão <see langword="Char" />, <see langword="String" /> ou <see langword="Object" /> válida. Somente o primeiro caractere da expressão será usado. Se Character for do tipo <see langword="Object" />, ele deverá conter um valor <see langword="Char" /> ou <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</summary>
        <returns>Retorna uma cadeia de caracteres ou um objeto que consiste no caractere especificado repetido no número de vezes especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere no `Character` argumento e ele é duplicado `Number` número de vezes.  
  
   
  
## Examples  
 Este exemplo usa o `StrDup` duplicado de função para retornar uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> é menor que 0 ou o tipo <paramref name="Character" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> é <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Expressão de cadeia de caracteres cujos caracteres serão invertidos. Se <c>Expression</c> for uma cadeia de comprimento zero (""), uma cadeia de comprimento zero será retornada.</param>
        <summary>Retorna uma cadeia de caracteres na qual a ordem dos caracteres de uma cadeia de caracteres especificada é invertida.</summary>
        <returns>Retorna uma cadeia de caracteres na qual a ordem dos caracteres de uma cadeia de caracteres especificada é invertida.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `StrReverse` função retorna uma cadeia de caracteres que contém os mesmos caracteres como `Expression`, mas em ordem oposta.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Necessário. Qualquer expressão <see langword="String" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres contendo uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<see langword="LTrim" />), sem espaços à direita (<see langword="RTrim" />) ou sem espaços à esquerda ou à direita (<see langword="Trim" />).</summary>
        <returns>Retorna uma cadeia de caracteres contendo uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<see langword="LTrim" />), sem espaços à direita (<see langword="RTrim" />) ou sem espaços à esquerda ou à direita (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres.  
  
   
  
## Examples  
 Este exemplo usa a função `LTrim` para retirar espaços à esquerda e a função `RTrim` para retirar espaços à direita de um variável de cadeia de caracteres. Usa a função de `Trim` para retirar ambos os tipos de espaços.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiúsculas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Necessário. Qualquer expressão <see langword="String" /> ou <see langword="Char" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiúsculas.</summary>
        <returns>Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente letras minúsculas são convertidas em letras maiusculas; todas as letras maiusculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passe <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa a função `UCase` para retornar uma versão de uma cadeia de caracteres em letras minúsculas.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Necessário. Qualquer expressão <see langword="String" /> ou <see langword="Char" /> válida.</param>
        <summary>Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiúsculas.</summary>
        <returns>Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente letras minúsculas são convertidas em letras maiusculas; todas as letras maiusculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passe <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa a função `UCase` para retornar uma versão de uma cadeia de caracteres em letras minúsculas.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>