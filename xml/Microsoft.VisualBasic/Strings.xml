<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db4fae13571ff6b7294ab82426f23ca45d4ba9ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710578" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <see langword="Strings" /> module contains procedures used to perform string operations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca de tempo de execução que manipulam cadeias de caracteres.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como dividir uma cadeia de caracteres em seus espaços.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para valores do caractere de byte único SBCS (conjunto) e -32768 a 32767 para valores DBCS (conjunto) de caracteres de byte duplo.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` correspondente para a primeira letra de cada cadeia de caracteres de códigos de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para valores do caractere de byte único SBCS (conjunto) e -32768 a 32767 para valores DBCS (conjunto) de caracteres de byte duplo.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` correspondente para a primeira letra de cada cadeia de caracteres de códigos de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para valores do caractere de byte único SBCS (conjunto) e -32768 a 32767 para valores DBCS (conjunto) de caracteres de byte duplo.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` correspondente para a primeira letra de cada cadeia de caracteres de códigos de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para valores do caractere de byte único SBCS (conjunto) e -32768 a 32767 para valores DBCS (conjunto) de caracteres de byte duplo.  
  
 `AscW` Retorna o ponto de código Unicode para o caractere de entrada. Ele pode ser de 0 a 65535. O valor retornado independe das configurações de cultura e da página de código para o thread atual.  
  
> [!NOTE]
>  A função `AscB` de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Asc` função retornar `Integer` correspondente para a primeira letra de cada cadeia de caracteres de códigos de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O intervalo assimétrico aceito por `CharCode` compensa as diferenças de armazenamento entre o `Short` e o `Integer`. Por exemplo, -29183 é um `Short` mas + 36353 é um `Integer`. Isso também facilita a compatibilidade com o Visual Basic 6.0.  
  
 `Chr` usa o <xref:System.Text.Encoding> classe o <xref:System.Text?displayProperty=nameWithType> definido de namespace para determinar se o thread atual está usando um conjunto de caracteres de byte único (SBCS) ou um caractere de byte duplo (DBCS). Ele considera `CharCode` como um código de pontos no conjunto apropriado. O intervalo pode ser de 0 a 255 caracteres de SBCS e -32768 a 65535 para caracteres DBCS.  
  
 O valor retornado depende da página de código para o thread atual, que está contida na <xref:System.Globalization.TextInfo.ANSICodePage%2A> propriedade do <xref:System.Globalization.TextInfo> classe o <xref:System.Globalization> namespace. Você pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` leva `CharCode` ponto de código como Unicode. O intervalo é independente das configurações de página da cultura e o código para o thread atual. Valores de -32768 a-1 são tratadas como valores no intervalo + 32768 a + 65535.  
  
 Números de 0 a 31 são o mesmo que os códigos ASCII não imprimíveis padrão. Por exemplo, `Chr(10)` retorna o caractere de alimentação de uma linha.  
  
> [!NOTE]
>  O `ChrB` função em versões anteriores do Visual Basic retorna um único byte. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Chr` função para retornar o caractere associado ao código de caractere especificado.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O intervalo assimétrico aceito por `CharCode` compensa as diferenças de armazenamento entre o `Short` e o `Integer`. Por exemplo, -29183 é um `Short` mas + 36353 é um `Integer`. Isso também facilita a compatibilidade com o Visual Basic 6.0.  
  
 `Chr` usa o <xref:System.Text.Encoding> classe o <xref:System.Text?displayProperty=nameWithType> definido de namespace para determinar se o thread atual está usando um conjunto de caracteres de byte único (SBCS) ou um caractere de byte duplo (DBCS). Ele considera `CharCode` como um código de pontos no conjunto apropriado. O intervalo pode ser de 0 a 255 caracteres de SBCS e -32768 a 65535 para caracteres DBCS.  
  
 O valor retornado depende da página de código para o thread atual, que está contida na <xref:System.Globalization.TextInfo.ANSICodePage%2A> propriedade do <xref:System.Globalization.TextInfo> classe o <xref:System.Globalization> namespace. Você pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` leva `CharCode` ponto de código como Unicode. O intervalo é independente das configurações de página da cultura e o código para o thread atual. Valores de -32768 a-1 são tratadas como valores no intervalo + 32768 a + 65535.  
  
 Números de 0 a 31 são o mesmo que os códigos ASCII não imprimíveis padrão. Por exemplo, `Chr(10)` retorna o caractere de alimentação de uma linha.  
  
> [!NOTE]
>  O `ChrB` função em versões anteriores do Visual Basic retorna um único byte. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` não é mais suportada.  
  
   
  
## Examples  
 O exemplo a seguir usa o `Chr` função para retornar o caractere associado ao código de caractere especificado.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nenhuma correspondência de `Match` encontram `Source`, o `Filter` função retorna uma matriz vazia. Ocorrerá um erro se `Source` é definido como `Nothing` ou não é uma matriz unidimensional.  
  
 A matriz retornada pelo `Filter` função contém apenas elementos suficientes para conter o número de itens correspondentes.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|Constante|Descrição|  
|`CompareMethod.Binary`|Executa uma comparação binária|  
|`CompareMethod.Text`|Executa uma comparação textual|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Filter` função.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nenhuma correspondência de `Match` encontram `Source`, o `Filter` função retorna uma matriz vazia. Ocorrerá um erro se `Source` é definido como `Nothing` ou não é uma matriz unidimensional.  
  
 A matriz retornada pelo `Filter` função contém apenas elementos suficientes para conter o número de itens correspondentes.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|`CompareMethod.Binary`|Executa uma comparação binária|  
|`CompareMethod.Text`|Executa uma comparação textual|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Filter` função.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Any valid expression.</param>
        <param name="Style">Optional. A valid named or user-defined format <see langword="String" /> expression.</param>
        <summary>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</summary>
        <returns>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.String.Format%2A?displayProperty=nameWithType> método também fornece funcionalidade semelhante.  
  
 Se você estiver formatando uma cadeia de caracteres numérica não localizada, você deve usar um formato numérico definido pelo usuário para garantir que você obtenha a aparência desejada.  
  
 Se você tentar formatar um número sem especificar `Style`, o `Format` função fornece uma funcionalidade semelhante para o `Str` funcionar, embora seja internacionalizada. No entanto, os números positivos são formatadas como cadeias de caracteres usando o `Format` função não inclua um espaço à esquerda reservado para o sinal do valor; aqueles convertido usando o `Str` função manter o espaço à esquerda.  
  
## <a name="different-formats-for-different-numeric-values"></a>Formatos diferentes para valores numéricos diferentes  
 Uma expressão de formato definido pelo usuário para números pode ter de uma a três seções separadas por ponto e vírgula. Se o `Style` argumento do `Format` função contém um dos formatos numéricos predefinidos, somente uma seção será permitida.  
  
|Se você usar|Esse é o resultado|  
|-|-|  
|Somente uma seção|A expressão de formato se aplica a todos os valores.|  
|Duas seções|A primeira seção aplica-se a valores positivos e zeros; a segunda se aplica a valores negativos.|  
|Trê seções|A primeira seção aplica-se a valores positivos, a segunda se aplica a valores negativos e se aplica a terceira a zeros.|  
  
 O exemplo a seguir tem duas seções: a primeira define o formato para valores positivos e zeros; a segunda seção define o formato para valores negativos. Uma vez que o `Style` argumento do `Format` função usa uma cadeia de caracteres, ele é colocado entre aspas.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Se você incluir ponto e vírgula sem nada entre eles, a seção faltando é impressa usando o formato do valor positivo. Por exemplo, o formato a seguir exibe positivo e negativo valores usando o formato na primeira seção e exibe `Zero` se o valor for zero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Formatos numéricos predefinidos  
 A tabela a seguir identifica os nomes de formatos numéricos predefinidos. Esses podem ser usados por nome como o `Style` argumento para o `Format` função:  
  
|Nome do formato|Descrição|  
|-|-|  
|`General Number`, `G` ou `g`|Exibe o número com Nenhum separador de milhar.<br /><br /> Por exemplo, `Format(&H3FA, "g")` retorna `1018`.|  
|`Currency`, `C` ou `c`|Exibe o número com separador de milhar, se apropriado; exibe dois dígitos à direita do separador decimal. Saída é baseada nas configurações de localidade do sistema.<br /><br /> Por exemplo, `Format(1234567, "c")` retorna `$1,234,567.00`.|  
|`Fixed`, `F` ou `f`|Exibe pelo menos um dígito à esquerda e dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(1234567, "f")` retorna `1234567.00`.|  
|`Standard`, `N` ou `n`|Exibe o número com separador de milhar, pelo menos um dígito à esquerda e dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(1234567, "n")` retorna `1,234,567.00`.|  
|`Percent`|Exibe o número multiplicado por 100 com um sinal de porcentagem (%) anexado à direita; sempre exibe dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(0.4744, "Percent")` retorna `47.44%`.|  
|`P`, ou `p`|Exibe o número com separador de milhar multiplicado por 100 com um sinal de porcentagem (%) anexado à direita e separado por um único espaço; sempre exibe dois dígitos à direita do separador decimal.<br /><br /> Por exemplo, `Format(0.80345, "p")` retorna `80.35 %`.|  
|`Scientific`|Usa notação científica padrão, fornecendo dois dígitos significativos.<br /><br /> Por exemplo, `Format(1234567, "Scientific")` retorna `1.23E+06`.|  
|`E`, ou `e`|Usa notação científica padrão, fornecendo seis dígitos significativos.<br /><br /> Por exemplo, `Format(1234567, "e")` retorna `1.234567e+006`.|  
|`D`, ou `d`|Exibe o número como uma cadeia de caracteres que contém o valor do número em formato Decimal (base 10). Essa opção tem suporte para tipos integrais (`Byte`, `Short`, `Integer`, `Long`) apenas.<br /><br /> Por exemplo, `Format(&H7F, "d")` retorna `127`.|  
|`X`, ou `x`|Exibe o número como uma cadeia de caracteres que contém o valor do número em formato Hexadecimal (base 16). Essa opção tem suporte para tipos integrais (`Byte`, `Short`, `Integer`, `Long`) apenas.<br /><br /> Por exemplo, `Format(127, "x")` retorna `7f`.|  
|`Yes/No`|Exibe `No` se o número for 0; caso contrário, exibe `Yes`.<br /><br /> Por exemplo, `Format(0, "Yes/No")` retorna `No`.|  
|`True/False`|Exibe `False` se o número for 0; caso contrário, exibe `True`.<br /><br /> Por exemplo, `Format(1, "True/False")` retorna `True`.|  
|`On/Off`|Exibe `Off` se o número for 0; caso contrário, exibe `On`.<br /><br /> Por exemplo, `Format(1, "On/Off")` retorna `On`.|  
  
### <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 O `Yes/No`, `True/False`, e `On/Off` formatos não têm suporte.  
  
## <a name="user-defined-numeric-formats"></a>Formatos numéricos definidos pelo usuário  
 A tabela a seguir identifica caracteres que você pode usar para criar formatos numéricos definidos pelo usuário. Esses podem ser usados para construir o `Style` argumento para o `Format` função:  
  
|Caractere|Descrição|  
|-|-|  
|Nenhum|Exibe o número sem formatação.|  
|(`0`)|Espaço reservado de dígito. Exibe um dígito ou um zero. Se a expressão tiver um dígito na posição onde o zero aparece na cadeia de caracteres de formato, exibi-la; Caso contrário, exibirá um zero nessa posição.<br /><br /> Se o número tiver menos dígitos que são os zeros (em ambos os lados da casa decimal) na expressão de formato, exibirá zeros à esquerda e. Se o número tiver mais dígitos à direita do separador decimal que há zeros à direita do separador decimal na expressão de formato, Arredonda as casas decimais números para o mesmo número como zeros. Se o número tiver mais dígitos à esquerda do separador decimal que há zeros à esquerda do separador decimal na expressão de formato, exibirá os dígitos extras sem modificação.|  
|(`#`)|Espaço reservado de dígito. Exibe um dígito ou nada. Se a expressão tiver um dígito na posição onde o `#` caractere aparece na cadeia de caracteres de formato, o exibe; caso contrário, não exibirá nada nessa posição.<br /><br /> Este símbolo funciona como o `0` espaço reservado de dígito, exceto pelo fato que zeros à esquerda e não são exibidos se o número tiver menos dígitos do que há `#` caracteres nos dois lados do separador decimal na expressão de formato.|  
|(`.`)|Espaço reservado para decimal. O espaço reservado para decimal determina quantos dígitos serão exibidos à esquerda e à direita do separador decimal. Se a expressão de formato contiver apenas `#` caracteres à esquerda desse símbolo; números menores que 1 começam com um separador decimal. Para exibir um zero à esquerda no caso de números fracionais, use zero como o primeiro espaço reservado para dígito à esquerda do separador decimal. Em algumas localidades, uma vírgula é usada como separador decimal. O caractere real usado como um espaço reservado decimal na saída formatada depende do formato numérico reconhecido pelo seu sistema. Assim, você deve usar o período como o espaço reservado para decimal nos formatos, mesmo se você estiver em uma localidade que utilize uma vírgula como um espaço reservado para decimal. A cadeia de caracteres formatada aparecerá no formato correto para a localidade.|  
|(`%`)|Espaço reservado para porcentagem. Multiplica a expressão 100. O caractere de porcentagem (`%`) é inserido na posição onde aparece na cadeia de caracteres de formato.|  
|(`,`)|Separador de milhar. O separador de milhar separa os milhares das centenas em um número com quatro ou mais casas à esquerda do separador decimal. O uso padrão do separador de milhar será especificado se o formato contiver um separador de milhar cercado por espaços reservados para dígitos (`0` ou `#`).<br /><br /> Um separador de milhar imediatamente à esquerda do separador decimal (ou não um decimal é especificado) ou como mais à direita do caractere na cadeia de caracteres significa "escalar o número dividindo-o por 1.000, arredondando se necessário." Números menores do que 1.000, mas maior ou iguais a 500 são exibidos como `1`e números menores do que 500 são exibidos como `0`. Dois separadores de milhar adjacentes nessa posição dimensionar por um fator de 1 milhão e um fator adicional de 1.000 para cada separador adicional.<br /><br /> Vários separadores em qualquer posição que não seja imediatamente à esquerda do separador decimal ou a posição mais à direita na cadeia de caracteres são tratados simplesmente como especificando o uso de um separador de milhar. Em algumas localidades, um ponto é usado como separador de milhar. O caractere real usado como separador de milhar na saída formatada depende do formato numérico reconhecido pelo seu sistema. Assim, você deve usar a vírgula como separador de milhar nos seus formatos, mesmo se você estiver em uma localidade que utilize um ponto como separador de milhar. A cadeia de caracteres formatada aparecerá no formato correto para a localidade.<br /><br /> Por exemplo, considere as três cadeias de caracteres de formato seguintes:<br /><br /> -   `"#,0."`, que usa o separador de milhar para formatar o número 100 milhões como a cadeia de caracteres "100,000,000".<br />-   `"#0,."`, que usa a escala por um fator de mil para formatar o número 100 milhões como a cadeia de caracteres "100000".<br />-   `"#,0,."`, que usa o separador de milhar e escala por mil para formatar o número 100 milhões como a cadeia de caracteres "100,000".|  
|(`:`)|Separador de hora. Em algumas localidades, outros caracteres podem ser usados para representar o separador de hora. O separador de hora separa horas, minutos e segundos quando valores de tempo são formatados. O caractere real usado como separador de hora na saída formatada é determinado pelas configurações de sistema.|  
|(`/`)|Separador de data. Em algumas localidades, outros caracteres podem ser usados para representar o separador de data. O separador de data separa dia, mês e ano quando valores de data são formatados. O caractere real usado como separador de data na saída formatada é determinado pelas configurações de sistema.|  
|(`E-``E+``e-``e+`)|Formato científico. Se a expressão de formato contiver pelo menos um espaço reservado para dígito (`0` ou `#`) à esquerda da `E-`, `E+`, `e-`, ou `e+`, o número é exibido em formato científico e `E` ou `e` é inserido entre o número e seu exponente. O número de espaços reservados de dígito à esquerda determina o número de dígitos no expoente. Use `E-` ou `e-` para colocar um sinal de subtração ao lado de expoentes negativos. Use `E+` ou `e+` para colocar um sinal de subtração ao lado de expoentes negativos e um sinal de adição ao lado de expoentes positivos. Você também deve incluir espaços reservados de dígitos à direita desse símbolo para obter a formatação correta.|  
|`-` `+` `$` ( )|Caracteres literais. Esses caracteres são exibidos exatamente conforme digitados na cadeia de caracteres de formato. Para exibir um caractere que não seja um dos listados, preceda-o com uma barra invertida (`\`) ou coloque-o entre aspas duplas ("").|  
|(`\`)|Exibe o próximo caractere na cadeia de caracteres de formato. Para exibir um caractere que tem um significado especial como um caractere literal, preceda-o com uma barra invertida (`\`). A barra invertida não é exibida. Usando uma barra invertida é o mesmo que colocar o próximo caractere entre aspas duplas. Para exibir uma barra invertida, use duas barras invertidas (`\\`).<br /><br /> Exemplos de caracteres que não podem ser exibidos como caracteres literais são os caracteres de formatação de data e a formatação de hora (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, e `:`), os caracteres de formatação numérica (`#`, `0`, `%`, `E`, `e`, vírgulas e ponto) e os caracteres de formatação de cadeia de caracteres (`@`, `&`, `<`, `>`, e `!`).|  
|(`"``ABC``"`)|Exibe a cadeia de caracteres entre aspas duplas (""). Para incluir uma cadeia de caracteres no argumento de estilo de dentro do código, você deve usar `Chr(34)` para incluir o texto (`34` é o código de caractere para aspas (")).|  
  
### <a name="legacy-code-example"></a>Exemplo de código herdado  
 A tabela a seguir contém algumas expressões de formato de exemplo para números. (Estes exemplos presumem que a configuração de localidade do sistema seja inglês-EUA) A primeira coluna contém as cadeias de caracteres de formato para o `Style` argumento do `Format` função; as outras colunas contêm a saída resultante se os dados formatados tiverem o valor atribuído nos cabeçalhos da coluna.  
  
|Formato (`Style`)|"5" formatado como|"-5" formatado como|"0.5" formatado como|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Formatos de data/hora predefinidos  
 A tabela a seguir identifica a data predefinida e nomes de formato de hora. Estes podem ser usados por nome como o argumento de estilo para o `Format` função:  
  
|Nome do formato|Descrição|  
|-|-|  
|`General Date`, ou `G`|Exibe uma data / hora. Por exemplo, `3/12/2008 11:07:31 AM`. Exibição de data é determinada pelo valor de cultura atual do seu aplicativo.|  
|`Long Date`, `Medium Date` ou `D`|Exibe uma data de acordo com o formato de data por extenso da sua cultura atual. Por exemplo, `Wednesday, March 12, 2008`.|  
|`Short Date`, ou `d`|Exibe uma data usando o formato de data abreviada da sua cultura atual. Por exemplo, `3/12/2008`.<br /><br /> O `d` caractere exibe o dia em um formato de data definido pelo usuário.|  
|`Long Time`, `Medium Time` ou `T`|Exibe uma hora usando o formato de hora completa da sua cultura atual; geralmente inclui horas, minutos e segundos. Por exemplo, `11:07:31 AM`.|  
|`Short Time` ou `t`|Exibe uma hora usando o formato de hora abreviada da sua cultura atual. Por exemplo, `11:07 AM`.<br /><br /> O `t` caractere exibe `AM` ou `PM` valores para localidades que usam um relógio de 12 horas em um formato de hora definido pelo usuário.|  
|`f`|Exibe a data por extenso e hora abreviada acordo com o formato da sua cultura atual. Por exemplo, `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Exibe a data por extenso e muito tempo de acordo com o formato da sua cultura atual. Por exemplo, `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Exibe a data abreviada e um curto período de acordo com o formato da sua cultura atual. Por exemplo, `3/12/2008 11:07 AM`.|  
|`M`, `m`|Exibe o mês e dia de uma data. Por exemplo, `March 12`.<br /><br /> O `M` caractere exibe o mês em um formato de data definido pelo usuário. O `m` caractere exibe os minutos em um formato de hora definido pelo usuário.|  
|`R`, `r`|Formata a data de acordo com o <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> propriedade. Por exemplo, `Wed, 12 Mar 2008 11:07:31 GMT`. A data formatada não ajusta o valor de data e hora. Você deve ajustar o valor de data/hora para GMT antes de chamar o `Format` função.|  
|`s`|Formata a data e hora como um índice classificável. Por exemplo, `2008-03-12T11:07:31`.<br /><br /> O `s` caractere exibe os segundos em um formato de hora definido pelo usuário.|  
|`u`|Formata a data e hora como um índice GMT classificável. Por exemplo, `2008-03-12 11:07:31Z`.|  
|`U`|Formata a data e hora com a data por extenso e hora longa como GMT. Por exemplo, `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formata a data como ano e mês. Por exemplo, `March, 2008`.<br /><br /> O `Y` e `y` caracteres exibem o ano em um formato de data definido pelo usuário.|  
  
 Para obter mais informações sobre informações de cultura atual do aplicativo, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Formatos de data/hora definidos pelo usuário  
 A tabela a seguir mostra caracteres que você pode usar para criar formatos de data/hora definidos pelo usuário. Ao contrário em versões anteriores do Visual Basic, esses caracteres de formato diferenciam maiusculas de minúsculas.  
  
|Caractere|Descrição|  
|-|-|  
|(`:`)|Separador de hora. Em algumas localidades, outros caracteres podem ser usados para representar o separador de hora. O separador de hora separa horas, minutos e segundos quando valores de tempo são formatados. O caractere real usado como o separador de hora na saída formatada é determinado pelo valor de cultura atual do seu aplicativo.|  
|(`/`)|Separador de data. Em algumas localidades, outros caracteres podem ser usados para representar o separador de data. O separador de data separa dia, mês e ano quando valores de data são formatados. O caractere real usado como separador de data na saída formatada é determinado pela cultura atual do seu aplicativo.|  
|(`%`)|Usado para indicar que o seguinte caractere deve ser lido como um formato de letra sem considerar nenhuma letra à direita. Também é usado para indicar que o formato de uma única letra é lido como um formato definido pelo usuário. Veja a seguir para obter mais detalhes.|  
|`d`|Exibe o dia como um número sem um zero à esquerda (por exemplo, `1`). Use `%d` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`dd`|Exibe o dia como um número com um zero à esquerda (por exemplo, `01`).|  
|`ddd`|Exibe o dia como uma abreviação (por exemplo, `Sun`).|  
|`dddd`|Exibe o dia como um nome completo (por exemplo, `Sunday`).|  
|`M`|Exibe o mês como um número sem um zero à esquerda (por exemplo, janeiro é representado como `1`). Use `%M` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`MM`|Exibe o mês como um número com um zero à esquerda (por exemplo, `01/12/01`).|  
|`MMM`|Exibe o mês como uma abreviação (por exemplo, `Jan`).|  
|`MMMM`|Exibe o mês como um nome completo do mês (por exemplo, `January`).|  
|`gg`|Exibe a cadeia de caracteres de período/era (por exemplo, `A.D.`).|  
|`h`|Exibe a hora como um número sem zeros à esquerda usando o relógio de 12 horas (por exemplo, `1:15:15 PM`). Use `%h` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`hh`|Exibe a hora como um número com zeros à esquerda usando o relógio de 12 horas (por exemplo, `01:15:15 PM`).|  
|`H`|Exibe a hora como um número sem zeros à esquerda usando o relógio de 24 horas (por exemplo, `1:15:15`). Use `%H` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`HH`|Exibe a hora como um número com zeros à esquerda usando o relógio de 24 horas (por exemplo, `01:15:15`).|  
|`m`|Exibe o minuto como um número sem zeros à esquerda (por exemplo, `12:1:15`). Use `%m` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`mm`|Exibe o minuto como um número com zeros à esquerda (por exemplo, `12:01:15`).|  
|`s`|Exibe o segundo como um número sem zeros à esquerda (por exemplo, `12:15:5`). Use `%s` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`ss`|Exibe o segundo como um número com zeros à esquerda (por exemplo, `12:15:05`).|  
|`f`|Exibe frações de segundos. Por exemplo `ff` exibe centésimos de segundos, enquanto `ffff` exibe décimos de milésimos de segundos. Você pode usar até sete `f` símbolos em seu formato definido pelo usuário. Use `%f` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`t`|Usa o relógio de 12 horas e exibe uma letra maiuscula `A` para qualquer hora antes do meio-dia; exibe uma letra maiuscula `P` para qualquer hora entre meio-dia e 11:59 PM. Use `%t` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`tt`|Para localidades que usam um relógio de 12 horas, exibe uma letra maiuscula `AM` com qualquer hora antes do meio-dia; exibe uma letra maiuscula `PM` com qualquer hora entre meio-dia e 11:59 PM.<br /><br /> Para localidades que usam um relógio de 24 horas, não exibirá nada.|  
|`y`|Exibe o número do ano (0-9) sem zeros à esquerda. Use `%y` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`yy`|Exibe o ano no formato numérico de dois dígitos com um zero à esquerda, se aplicável.|  
|`yyy`|Exibe o ano no formato de quatro dígitos numérico.|  
|`yyyy`|Exibe o ano no formato de quatro dígitos numérico.|  
|`z`|Exibe o deslocamento de fuso horário sem um zero à esquerda (por exemplo, `-8`). Use `%z` se esse for o único caractere no seu formato numérico definido pelo usuário.|  
|`zz`|Exibe o deslocamento de fuso horário com um zero à esquerda (por exemplo, `-08`)|  
|`zzz`|Exibe o deslocamento de fuso horário completo (por exemplo, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Exemplo de código herdado  
 Estes são exemplos de data definido pelo usuário e formatos de hora para `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Formatar|Telas|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A resolução de tempo mínimo para um dispositivo é determinada pelo fabricante do dispositivo. Se o tempo de resolução para o dispositivo for grande o suficiente, o `f` caractere de formato retorna 0 quando executado no dispositivo.  
  
   
  
## Examples  
 Este exemplo mostra vários usos da `Format` função para formatar valores usando os `String` formatos e formatos definidos pelo usuário. Para o separador de data (`/`), separador de hora (`:`) e os indicadores AM/PM (`t` e `tt`), a saída formatada real exibida pelo seu sistema depende de configurações de localidade que o código está usando. Quando horas e datas são exibidas no ambiente de desenvolvimento, o formato de hora abreviada e o formato de data abreviada da localidade do código são usadas.  
  
> [!NOTE]
>  Para localidades que usam um relógio de 24 horas, os indicadores AM/PM (`t` e `tt`) não exibem nada.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Remarks" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses. See "Remarks" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Remarks" for values.</param>
        <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
        <returns>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um ou mais argumentos opcionais são omitidos, os valores correspondentes de configurações regionais do computador são usadas em vez disso.  
  
 A posição do símbolo da moeda em relação ao valor de moeda é determinada por configurações regionais do sistema.  
  
> [!NOTE]
>  Todas as informações de configurações vêm da localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework, exceto zero à esquerda, que é proveniente de `Number` guia.  
  
 O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos usar os seguintes valores de enumeração de três estados.  
  
|Valor|Descrição|  
|-|-|  
|`TriState.True`|verdadeiro|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Configurações regionais do computador|  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso da função `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Number of digits after decimal point is greater than 99.</exception>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, <see langword="DateFormat.GeneralDate" /> is used.</param>
        <summary>Returns a string expression representing a date/time value.</summary>
        <returns>Returns a string expression representing a date/time value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Date` tipo de dados sempre contém informações de data e hora. Para fins de conversão de tipo, o Visual Basic considera 1/1/1 (1 de janeiro do ano 1) como um valor neutro para a data e 00:00:00 (meia-noite) ser um valor neutro para a hora. Se você formatar uma `Date` valor como uma cadeia de caracteres de data/hora, `FormatDateTime` não inclui valores neutros na cadeia de caracteres resultante. Por exemplo, se você converter # 1/1/0001 9:30:00 # em uma cadeia de caracteres, o resultado é "9:30:00 AM"; as informações de data são suprimidas. No entanto, as informações de data ainda estão presentes no original `Date` de valor e pode ser recuperada com funções como `DatePart`.  
  
> [!NOTE]
>  Se você passar o `Expression` argumento como uma `String` literal `FormatDateTime` interpreta isso de acordo com o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> configuração do seu aplicativo. No entanto, se você passá-lo como um `Date` literal, use o formato #mm/dd/aaaa #, porque `FormatDateTime` sempre interpreta um `Date` literal de acordo com a cultura do inglês (EUA). Isso é necessário porque, se um aplicativo é desenvolvido e codificado usando `Date` literais de uma cultura, mas, em seguida, é executado em uma plataforma com uma cultura diferente, o `Date` literais podem ser interpretados incorretamente.  
  
 O `NamedFormat` argumento tem as seguintes configurações.  
  
|Constante|Descrição|  
|-|-|  
|`DateFormat.GeneralDate`|Exiba uma data / hora. Exiba uma parte de data como uma data abreviada. Se houver uma parte de hora, exibi-lo como um longo tempo. Se estiver presente, exibir as duas partes.|  
|`DateFormat.LongDate`|Exibe uma data usando o formato de data completa especificado nas configurações regionais do computador.|  
|`DateFormat.ShortDate`|Exibe uma data usando o formato de data abreviada especificado nas configurações regionais do computador.|  
|`DateFormat.LongTime`|Exibe uma hora usando o formato de hora especificado nas configurações regionais do computador.|  
|`DateFormat.ShortTime`|Exibe uma hora usando o formato de 24 horas (hh: mm).|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `FormatDateTime` função.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> setting is not valid.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a number.</summary>
        <returns>Returns an expression formatted as a number.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um ou mais argumentos opcionais são omitidos os valores para os argumentos omitidos são fornecidos pelas configurações de localidade.  
  
> [!NOTE]
>  Todas as informações de configurações vêm da localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado programaticamente usando o .NET Framework.  
  
 O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos têm as seguintes configurações.  
  
|Constante|Descrição|  
|-|-|  
|`TriState.True`|verdadeiro|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Configurações regionais do computador|  
  
   
  
## Examples  
 Este exemplo demonstra o `FormatNumber` função.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
        <returns>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um ou mais argumentos opcionais são omitidos, os valores para os argumentos omitidos são fornecidos pelas configurações de localidade.  
  
> [!NOTE]
>  Todas as informações de configurações vêm da localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado programaticamente usando o .NET Framework.  
  
 O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos têm as seguintes configurações.  
  
|Constante|Descrição|  
|-|-|  
|`TriState.True`|verdadeiro|  
|`TriState.False`|False|  
|`TriState.Default`|Configurações regionais do computador|  
  
   
  
## Examples  
 Este exemplo ilustra o uso do `FormatPercent` função.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Index">Required. <see langword="Integer" /> expression. The (1-based) index of the character in <c>str</c> to be returned.</param>
        <summary>Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</summary>
        <returns>
          <see langword="Char" /> value representing the character from the specified index in the supplied string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Index` é menor que 1 ou maior que o índice do último caractere no `str`, um `ArgumentException` é gerada.  
  
   
  
## Examples  
 Este exemplo mostra como usar o `GetChar` função retornar um caractere de um índice especificado em um `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.  The integer is a one-based index if a match is found.  If no match is found, the function returns zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description> The starting position for the search, which defaults to the first character position.  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, o `InStr` função é usada durante a análise de cadeias de caracteres.  
  
> [!NOTE]
>  O `InStrB` função nas versões anteriores do Visual Basic retorna um número de bytes em vez de uma posição de caractere. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `InStrB` não é mais suportada.  
  
 As configurações do argumento `Compare` são:  
  
|Constante|Valor|Descrição|  
|-|-|-|  
|`Binary`|0|Executa uma comparação binária|  
|`Text`|1|Executa uma comparação de texto|  
  
   
  
## Examples  
 Este exemplo usa o `InStr` função para retornar a posição da primeira ocorrência de uma cadeia de caracteres dentro de outra.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, o `InStr` função é usada durante a análise de cadeias de caracteres.  
  
> [!NOTE]
>  O `InStrB` função nas versões anteriores do Visual Basic retorna um número de bytes em vez de uma posição de caractere. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `InStrB` não é mais suportada.  
  
 As configurações do argumento `Compare` são:  
  
|Constante|Valor|Descrição|  
|-|-|-|  
|`Binary`|0|Executa uma comparação binária|  
|`Text`|1|Executa uma comparação de texto|  
  
   
  
## Examples  
 Este exemplo usa o `InStr` função para retornar a posição da primeira ocorrência de uma cadeia de caracteres dentro de outra.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Required. String expression being searched.</param>
        <param name="StringMatch">Required. String expression being searched for.</param>
        <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
        <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStrRev returns  </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> is zero-length  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is zero-length  </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
              <description> Position at which the first match is found, starting with the right side of the string.  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que a sintaxe para o `InStrRev` função não é o mesmo que a sintaxe para o `InStr` função.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|`Binary`|Executa uma comparação binária.|  
|`Text`|Executa uma comparação textual.|  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `InStrRev` função.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Há uma paridade entre o `Join` e `Split` funções. O `Join` função pega uma matriz de cadeias de caracteres e une-as usando uma cadeia de caracteres do delimitador, para retornar uma única cadeia de caracteres. O `Split` função usa uma cadeia de caracteres e separa no delimitador, para retornar uma matriz de cadeias de caracteres. No entanto, uma diferença importante é que `Join` pode concatenar cadeias de caracteres com qualquer cadeia de caracteres do delimitador, `Split` só pode separar cadeias de caracteres usando um único caractere delimitador.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o `Join` função para criar uma lista de várias cadeias de caracteres.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Há uma paridade entre o `Join` e `Split` funções. O `Join` função pega uma matriz de cadeias de caracteres e une-as usando uma cadeia de caracteres do delimitador, para retornar uma única cadeia de caracteres. O `Split` função usa uma cadeia de caracteres e separa no delimitador, para retornar uma matriz de cadeias de caracteres. No entanto, uma diferença importante é que `Join` pode concatenar cadeias de caracteres com qualquer cadeia de caracteres do delimitador, `Split` só pode separar cadeias de caracteres usando um único caractere delimitador.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o `Join` função para criar uma lista de várias cadeias de caracteres.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character converted to lowercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente as letras maiusculas são convertidas em minúsculas; todas as letras minúsculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade na qual o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso e, em seguida, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passar <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa o `LCase` função para retornar uma versão em minúsculas de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente as letras maiusculas são convertidas em minúsculas; todas as letras minúsculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade na qual o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso e, em seguida, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passar <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa o `LCase` função para retornar uma versão em minúsculas de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the leftmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função. Se usado em um aplicativo do Windows Forms ou qualquer outra classe que tem um `Left` propriedade, você deve qualificar totalmente a função com `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  O `LeftB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LeftB` não é mais suportada.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Left` função para retornar uma subcadeia de caracteres de um determinado `String`. Em uma classe que tem um `Left` propriedade, talvez seja necessário qualificar totalmente o `Left` função.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com tipos definidos pelo usuário e variáveis `Object`, a função `Len` retorna o tamanho porque ela será gravada no arquivo pela função `FilePut`. Se `Object` contiver um `String`, ele retornará o tamanho da cadeia de caracteres. Se `Object` contiver qualquer outro tipo, ele retornará o tamanho do objeto porque será gravado no arquivo pela função `FilePut`.  
  
 O atributo `VBFixedString` pode ser aplicado a campos de cadeia de caracteres para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. A função `Len` usa o atributo `VBFixedString`, se disponível, ao determinar o tamanho das variáveis `Object`.  
  
> [!NOTE]
>  A função `Len` não consegue determinar o número real de bytes de armazenamento necessários quando usada com cadeias de caracteres de tamanho variável em tipos de dados definidos pelo usuário.  
  
> [!NOTE]
>  A função `LenB` em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.  
  
## <a name="smart-device-developer-notes"></a>Notas do desenvolvedor de dispositivo inteligente  
 A função `Len` aceita apenas variáveis `String` e `Object` como parâmetros. Se `Object` contiver um `String`, ele retornará o tamanho do `String`. Caso um parâmetro seja uma referência `Object` NULA, a função retorna zero. Caso um `Object` contenha qualquer outro tipo, uma exceção é lançada.  
  
   
  
## Examples  
 Este exemplo usa `Len` para retornar o número de caracteres em uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a left-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a cadeia de caracteres especificada for maior que o comprimento especificado, a cadeia de caracteres retornada é reduzida para o comprimento especificado. Se a cadeia de caracteres especificada é menor que o comprimento especificado, serão adicionados espaços à extremidade direita da cadeia de caracteres retornada para produzir o tamanho apropriado.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `LSet` função.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres.  
  
   
  
## Examples  
 Este exemplo usa o `LTrim` função para retirar espaços à esquerda e o `RTrim` de espaços de função para retirar à direita de uma variável de cadeia de caracteres. Ele usa o `Trim` função para retirar ambos os tipos de espaços.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string that contains characters from a specified string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one-based.</param>
        <summary>Returns a string that contains all the characters starting from a specified position in a string.</summary>
        <returns>A string that consists of all the characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função.  
  
 O Visual Basic possui um `Mid` função e um `Mid` instrução. Os dois elementos operam em um número especificado de caracteres em uma cadeia de caracteres, mas o `Mid` função retorna os caracteres enquanto o `Mid` instrução substitui os caracteres. Para obter mais informações, consulte [instrução Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  O `MidB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic estão em Unicode, e `MidB` não é mais suportada.  
  
   
  
## Examples  
 A última linha neste exemplo usa essa sobrecarga da `Mid` função para retornar o quintas e o subsequentes caracteres de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one based.</param>
        <param name="Length">Optional. <see langword="Integer" /> expression. Number of characters to return. If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</param>
        <summary>Returns a string that contains a specified number of characters starting from a specified position in a string.</summary>
        <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função.  
  
 O Visual Basic possui um `Mid` função e um `Mid` instrução. Os dois elementos operam em um número especificado de caracteres em uma cadeia de caracteres, mas o `Mid` função retorna os caracteres enquanto o `Mid` instrução substitui os caracteres. Para obter mais informações, consulte [instrução Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  O `MidB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic estão em Unicode, e `MidB` não é mais suportada.  
  
   
  
## Examples  
 As duas primeiras `Mid` funções neste exemplo retornam o número especificado de caracteres de uma cadeia de caracteres, desde as posições de determinado. (A última função ilustra o <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> de sobrecarga e só especifica o ponto de partida para a extração de cadeia de caracteres.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression containing substring to replace.</param>
        <param name="Find">Required. Substring being searched for.</param>
        <param name="Replacement">Required. Replacement substring.</param>
        <param name="Start">Optional. Position within <c>Expression</c> that starts a substring used for replacement. The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions. If omitted, 1 is assumed.</param>
        <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
        <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
        <returns>
          <see langword="Replace" /> returns the following values.  
  
 <list type="table"><item><term> If  </term><description> Replace returns  </description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length  </term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0  </term><description> Copy of <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno de `Replace` função é uma cadeia de caracteres que começa na posição especificada por `Start` e termina no final da `Expression` cadeia de caracteres, com as substituições feitas conforme especificado pela `Find` e `Replace` valores.  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|  
|-|-|  
|`Binary`|Executa uma comparação binária|  
|`Text`|Executa uma comparação textual|  
  
   
  
## Examples  
 Este exemplo demonstra o `Replace` função.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the rightmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" />. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar o número de caracteres em `str`, use o `Len` função. Se usado em um formulário do Windows ou qualquer outra classe que tem um `Right` propriedade, você deve qualificar totalmente a função com `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  O `RightB` função em versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes, em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres em caracteres de byte duplo (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `RightB` não é mais suportada.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Right` função para retornar uma subcadeia de caracteres de um determinado `String`. Em uma classe que tem um `Right` propriedade, talvez seja necessário qualificar totalmente o `Right` função.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a right-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a right-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Source` é maior que `Length`, `RSet` coloca apenas os caracteres mais à esquerda, até o comprimento de `Source`, na cadeia de caracteres retornada. Se a cadeia de caracteres especificada é menor que o comprimento especificado, serão adicionados espaços à esquerda final da cadeia de caracteres para produzir o tamanho apropriado. Se a cadeia de caracteres especificada for maior que o comprimento especificado, ele é reduzido para o comprimento especificado.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `RSet` função.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres.  
  
   
  
## Examples  
 Este exemplo usa o `LTrim` função para retirar espaços à esquerda e o `RTrim` de espaços de função para retirar à direita de uma variável de cadeia de caracteres. Ele usa o `Trim` função para retirar ambos os tipos de espaços.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The number of spaces you want in the string.</param>
        <summary>Returns a string consisting of the specified number of spaces.</summary>
        <returns>Returns a string consisting of the specified number of spaces.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Space` função é útil para formatação de saída e limpeza de dados em cadeias de caracteres de comprimento fixo.  
  
   
  
## Examples  
 Este exemplo usa o `Space` função para retornar uma cadeia de caracteres que consiste em um número especificado de espaços.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="String" /> expression containing substrings and delimiters.</param>
        <param name="Delimiter">Optional. Any single character used to identify substring limits. If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</param>
        <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</param>
        <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
        <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
        <returns>
          <see langword="String" /> array. If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, ou quando `Limit` é igual a -1, o `Split` função divide a cadeia de caracteres de entrada em cada ocorrência da cadeia de caracteres do delimitador e retorna as subcadeias de caracteres em uma matriz. Quando o `Limit` parâmetro é maior que zero, o `Split` função divide a cadeia de caracteres no primeiro `Limit`ocorrências de-1 do delimitador e retorna uma matriz com as subcadeias de caracteres resultantes. Por exemplo, `Split("a:b:c", ":")` retorna a matriz `{"a", "b", "c"}`, enquanto `Split("a:b:c", ":", 2)` retorna a matriz `{"a", "b:c"}`.  
  
 Quando o `Split` função encontra dois delimitadores em uma linha ou um delimitador no início ou no final da cadeia de caracteres, ele interpreta como envolvem uma cadeia de caracteres vazia (""). Por exemplo, `Split("xx", "x")` retorna a matriz que contém três cadeias de caracteres vazias: uma entre o início da cadeia de caracteres e o primeiro "x", uma entre as duas "cadeias de caracteres x" e outra entre o último "x" e o fim da cadeia de caracteres.  
  
 Esta tabela mostra como opcional `Delimiter`, `Limit`, e `Compare` parâmetros podem alterar o comportamento do `Split` função.  
  
|Chamada de divisão|Valor de retorno|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice e Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"alguém", "example.com"}|  
  
 O `Compare` argumento pode ter os seguintes valores.  
  
|Constante|Descrição|Valor|  
|-|-|-|  
|`CompareMethod.Binary`|Executa uma comparação binária|0|  
|`CompareMethod.Text`|Executa uma comparação textual|1|  
  
   
  
## Examples  
 O exemplo a seguir demonstra como dividir uma cadeia de caracteres em seus espaços.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 O exemplo a seguir demonstra como dividir cadeias de caracteres com vários delimitadores em uma linha e filtrar as cadeias de caracteres vazias.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. Any valid <see langword="String" /> expression.</param>
        <param name="String2">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns -1, 0, or 1, based on the result of a string comparison.</summary>
        <returns>The <see langword="StrComp" /> function has the following return values.  
  
 <list type="table"><item><term> If  </term><description> StrComp returns  </description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1  </description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0  </description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As cadeias de caracteres são comparadas por valores de classificação alfanumérica começando com o primeiro caractere. Para obter mais informações sobre comparações binárias, comparações textuais e ordem de classificação, consulte [instrução opção comparar](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 As configurações do argumento `Compare` são:  
  
|Constante|Descrição|  
|-|-|  
|`Binary`|Executa uma comparação binária, com base em uma ordem de classificação derivada de representações binárias internas dos caracteres.|  
|`Text`|Executa uma comparação de texto, com base em uma ordem de classificação de texto diferencia maiusculas de minúsculas determinada pelo seu sistema `LocaleID` valor.|  
  
   
  
## Examples  
 Este exemplo usa o `StrComp` função para retornar os resultados de uma comparação de cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> value is not valid.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression to be converted.</param>
        <param name="Conversion">Required. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member. The enumeration value specifying the type of conversion to perform.</param>
        <param name="LocaleID">Optional. The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value. (The system <see langword="LocaleID" /> value is the default.)</param>
        <summary>Returns a string converted as specified.</summary>
        <returns>Returns a string converted as specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, e `VbStrConv.Hiragana` podem causar erros de tempo de execução quando usadas em localidades em que eles não se aplicam, mas nem sempre: as constantes `VbStrConv.Katakana` e `VbStrConv.Hiragana`pode ser usado em um sistema não-japonês com o pacote de idiomas japonês instalado. Além disso, o uso das constantes `VbStrConv.Wide` e `VbStrConv.Narrow` é compatível com qualquer sistema com um idioma do Leste Asiático instalado.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade na qual o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso e, em seguida, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passar <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 As configurações do argumento `Conversion` são:  
  
|Membro de enumeração|Descrição|  
|-|-|  
|`VbStrConv.None`|Não executa nenhuma conversão|  
|`VbStrConv.LinguisticCasing`|Usa regras linguísticas para maiusculas e minúsculas, em vez de sistema de arquivos (padrão). Válido com `VbStrConv.UpperCase` e `VbStrConv.LowerCase` apenas.|  
|`VbStrConv.UpperCase`|Converte a cadeia de caracteres em caracteres maiúsculos.|  
|`VbStrConv.LowerCase`|Converte a cadeia de caracteres em caracteres minúsculos.|  
|`VbStrConv.ProperCase`|Converte a primeira letra de cada palavra na cadeia de caracteres em maiusculas.|  
|`VbStrConv.Wide` <sup>*</sup>|Converte estreitos (meia largura) caracteres na cadeia de caracteres para caracteres largos (largura inteira). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Converte caracteres de toda a (largura inteira) na cadeia de caracteres para caracteres (meia largura).|  
|`VbStrConv.Katakana` <sup>**</sup>|Converte os caracteres Hiragana da cadeira de caracteres em caracteres Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Converte os caracteres Katakana da cadeira de caracteres em caracteres Hiragana.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Converte caracteres do chinês tradicional para chinês simplificado.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Converte caracteres do chinês simplificado para chinês tradicional.|  
  
 <sup>*</sup> Aplica-se a localidades asiáticas.  
  
 <sup>**</sup> Aplica-se para o Japão apenas.  
  
> [!NOTE]
>  Essas constantes são especificadas no common language runtime do .NET Framework. Como resultado, eles podem ser usados em qualquer lugar em seu código no lugar dos valores reais. A maioria pode ser combinada (por exemplo, `UpperCase + Wide`), exceto quando eles são mutuamente exclusivos (por exemplo, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Estes são os separadores de palavras válidos para capitalização apropriada: nulo (`Chr$(0)`), tabulação horizontal (`Chr$(9)`), alimentação de linha (`Chr$(10)`), tabulação vertical (`Chr$(11)`), alimentação de formulário (`Chr$(12)`), retorno de carro (`Chr$(13)`), espaço ( conjunto de caracteres de byte único) (`Chr$(32)`). O valor real para um espaço, que pode ser total ou meia largura, varia por país/região para culturas do Leste Asiático.  
  
   
  
## Examples  
 Este exemplo converte o texto em todas as letras minúsculas.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere na `Character` argumento e ele está duplicado `Number` vezes.  
  
   
  
## Examples  
 Este exemplo usa o `StrDup` duplicado de função para retornar uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere na `Character` argumento e ele está duplicado `Number` vezes.  
  
   
  
## Examples  
 Este exemplo usa o `StrDup` duplicado de função para retornar uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere na `Character` argumento e ele está duplicado `Number` vezes.  
  
   
  
## Examples  
 Este exemplo usa o `StrDup` duplicado de função para retornar uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression whose characters are to be reversed. If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</param>
        <summary>Returns a string in which the character order of a specified string is reversed.</summary>
        <returns>Returns a string in which the character order of a specified string is reversed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `StrReverse` função retorna uma cadeia de caracteres que contém os mesmos caracteres que `Expression`, mas na ordem oposta.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres.  
  
   
  
## Examples  
 Este exemplo usa o `LTrim` função para retirar espaços à esquerda e o `RTrim` de espaços de função para retirar à direita de uma variável de cadeia de caracteres. Ele usa o `Trim` função para retirar ambos os tipos de espaços.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apenas letras minúsculas são convertidas em maiusculas; todas as letras maiusculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade na qual o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso e, em seguida, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passar <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa o `UCase` função para retornar uma versão em maiusculas de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apenas letras minúsculas são convertidas em maiusculas; todas as letras maiusculas e caracteres que não sejam letras permanecem inalterados.  
  
 Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade na qual o aplicativo está sendo usado.  
  
> [!IMPORTANT]
>  Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso e, em seguida, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=nameWithType> método e passar <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> para o `comparisonType` argumento. Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este exemplo usa o `UCase` função para retornar uma versão em maiusculas de uma cadeia de caracteres.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>