<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9765a35a73e33a7e4affa6bc4de891155e6dac2a" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950142" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2f2a6-101">O módulo <see langword="Conversion" /> contém procedimentos usados para executar várias operações de conversão.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-102">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca de tempo de execução que convertem números decimais em outras bases, números, cadeias de caracteres, cadeias de caracteres em números e dados de um tipo para outro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-103">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-104">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="2f2a6-105">Palavras-chave (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="2f2a6-106">Membros de biblioteca de tempo de execução do Visual Basic</span><span class="sxs-lookup"><span data-stu-id="2f2a6-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="2f2a6-107">O objeto a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="2f2a6-108">O tipo para o qual o objeto será convertido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="2f2a6-109">Converte um objeto no tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-110">Um objeto cujo tipo em tempo de execução é o tipo de destino solicitado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-111">O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo `TargetType` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="2f2a6-112">Se o objeto for um objeto dinâmico, o `CTypeDynamic` método aplica-se disponíveis conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="2f2a6-113">O `CTypeDynamic` método aplica-se dinâmico conversões de acordo com a semântica de conversão definida pelo objeto em si.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="2f2a6-114">Se um objeto dinâmico herda <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta realizar a conversão usando uma conversão definida pelo usuário, estática.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="2f2a6-115">Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta realizar a conversão usando conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="2f2a6-116">Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método oferece a precedência para conversões dinâmicas sobre conversões definidas pelo usuário, estáticas.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-117">O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="2f2a6-118">Trabalhando com objetos dinâmicos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="2f2a6-119">Passo a passo: Criando e usando objetos dinâmicos (C# e Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="2f2a6-120">O tipo para o qual o objeto será convertido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="2f2a6-121">O objeto a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="2f2a6-122">Converte um objeto no tipo genérico especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-123">Um objeto digitalmente tipado como o tipo genérico solicitado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-124">O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo tipo de parâmetro genérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="2f2a6-125">Se o objeto for um objeto dinâmico, o `CTypeDynamic` método aplica-se disponíveis conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="2f2a6-126">O `CTypeDynamic` método aplica-se dinâmico conversões de acordo com a semântica de conversão definida pelo objeto em si.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="2f2a6-127">Se um objeto dinâmico herda <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta realizar a conversão usando uma conversão definida pelo usuário, estática.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="2f2a6-128">Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta realizar a conversão usando conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="2f2a6-129">Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método oferece a precedência para conversões dinâmicas sobre conversões definidas pelo usuário, estáticas.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-130">O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="2f2a6-131">Trabalhando com objetos dinâmicos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="2f2a6-132">Passo a passo: Criando e usando objetos dinâmicos (C# e Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f2a6-133">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f2a6-134">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-135">A mensagem de erro que corresponde ao erro em tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-136">O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro de tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="2f2a6-137">O valor de retorno de `ErrorToString` função corresponde ao `Description` propriedade do `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="2f2a6-138">Não se tiver ocorrido nenhum erro de tempo de execução, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").</span><span class="sxs-lookup"><span data-stu-id="2f2a6-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="2f2a6-139">Na versão 6.0 e versões anterior do Visual Basic, essa funcionalidade foi fornecida pelo `Error` função.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-140">O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-141"><paramref name="ErrorNumber" /> está fora do intervalo.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="2f2a6-142">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-142">Optional.</span></span> <span data-ttu-id="2f2a6-143">Qualquer número de erro inválido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="2f2a6-144">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-145">A mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-146">O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro de tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="2f2a6-147">O valor de retorno de `ErrorToString` função corresponde ao `Description` propriedade do `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="2f2a6-148">Se `ErrorNumber` é um número de erro válido, mas não está definido `ErrorToString` retorna a cadeia de caracteres `"Application-defined or object-defined error."` se `ErrorNumber` não for válido, ocorrerá um erro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="2f2a6-149">Se `ErrorNumber` for omitido, a mensagem correspondente o mais recente será retornado o erro de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="2f2a6-150">Se nenhum erro de tempo de execução ou `ErrorNumber` é 0, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").</span><span class="sxs-lookup"><span data-stu-id="2f2a6-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="2f2a6-151">Na versão 6.0 e versões anterior do Visual Basic, essa funcionalidade foi fornecida pelo `Error` função.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-152">O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-153"><paramref name="ErrorNumber" /> está fora do intervalo.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f2a6-154">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-155">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-155">Required.</span></span> <span data-ttu-id="2f2a6-156">Um número do tipo <see langword="Decimal" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-157">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-158">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-159">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-160">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-161">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-162">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="2f2a6-163">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-164">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-165">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-166">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-167">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-168">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-169">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-170">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-171">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-172">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-173">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-174">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-175">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-176">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-177">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-178">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-179">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-179">Required.</span></span> <span data-ttu-id="2f2a6-180">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-181">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-182">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-183">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-184">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-185">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-186">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="2f2a6-187">Começando com 15,8 do Visual Basic, o desempenho do `Double`-para-conversão inteiro é otimizado se você passar o valor retornado pela `Fix` método para qualquer uma da [funções de conversão integral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou se o `Double`valor retornado por `Fix` é convertido implicitamente em um inteiro com [opção estrita](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) definido como `Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="2f2a6-188">Essa otimização permite que o código seja executado mais rapidamente – até duas vezes mais rápido para o código que faz um grande número de conversões para tipos de inteiro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="2f2a6-189">O exemplo a seguir ilustra uma conversão desse tipo otimizada:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="2f2a6-190">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-191">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-192">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-193">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-194">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-195">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-196">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-197">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-198">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-199">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-200">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-201">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-202">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-203">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-204">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-205">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-206">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-206">Required.</span></span> <span data-ttu-id="2f2a6-207">Um número do tipo <see langword="Short" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-208">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-209">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-210">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-211">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-212">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-213">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-214">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-215">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-216">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-217">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-218">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-219">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-220">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-221">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-222">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-223">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-224">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-225">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-226">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-227">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-228">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-229">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-230">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-230">Required.</span></span> <span data-ttu-id="2f2a6-231">Um número do tipo <see langword="Integer" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-232">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-233">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-234">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-235">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-236">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-237">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-238">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-239">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-240">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-241">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-242">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-243">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-244">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-245">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-246">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-247">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-248">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-249">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-250">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-251">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-252">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-253">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-254">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-254">Required.</span></span> <span data-ttu-id="2f2a6-255">Um número do tipo <see langword="Long" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-256">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-257">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-258">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-259">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-260">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-261">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-262">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-263">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-264">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-265">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-266">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-267">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-268">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-269">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-270">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-271">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-272">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-273">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-274">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-275">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-276">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-277">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-278">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-278">Required.</span></span> <span data-ttu-id="2f2a6-279">Um número do tipo <see langword="Object" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="2f2a6-280">Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="2f2a6-281">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-282">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-283">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-284">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-285">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-286">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="2f2a6-287">Começando com o Visual Basic 15,8, se o `Number` argumento é um objeto cujo tipo de tempo de execução `Double` ou `Single`, o desempenho da conversão flutuante-ponto para inteiro é otimizado se você passar o valor retornado pelo `Fix` qualquer método o [funções de conversão integral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou se o valor retornado por `Fix` é automaticamente convertido em um inteiro com [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) definida como desativada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="2f2a6-288">Essa otimização permite que o código seja executado mais rapidamente – até duas vezes mais rápido para o código que faz um grande número de conversões para tipos de inteiro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="2f2a6-289">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="2f2a6-290">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-291">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-292">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-293">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-294">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-295">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-296">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-297">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-298">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-299">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-300">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-301">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-302">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-303">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-304">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-305">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-306">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-306">Required.</span></span> <span data-ttu-id="2f2a6-307">Um número do tipo <see langword="Single" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-308">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-309">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-310">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-311">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-312">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-313">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="2f2a6-314">Começando com 15,8 do Visual Basic, o desempenho do `Single`-para-conversão inteiro é otimizado se você passar o valor retornado pela `Fix` método para qualquer uma da [funções de conversão integral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou se o `Single`valor retornado por `Fix` é automaticamente convertido em um inteiro com [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) definida como desativada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="2f2a6-315">Essa otimização permite que o código seja executado mais rapidamente – até duas vezes mais rápido para o código que faz um grande número de conversões para tipos de inteiro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="2f2a6-316">O exemplo a seguir ilustra uma conversão desse tipo otimizada:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="2f2a6-317">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-318">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-319">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-320">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-321">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-322">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-323">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-324">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-325">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-326">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-327">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-328">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-329">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-330">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-331">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-332">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f2a6-333">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-334">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-334">Required.</span></span> <span data-ttu-id="2f2a6-335">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-336">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-337">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-338">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-339">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-339">If `Number` is</span></span>|<span data-ttu-id="2f2a6-340">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-341">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-341">Empty</span></span>|<span data-ttu-id="2f2a6-342">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-342">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-343">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-343">Any numeric value</span></span>|<span data-ttu-id="2f2a6-344">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-345">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-346">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-347">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-348"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-349"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-350">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-351">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-352">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-352">Required.</span></span> <span data-ttu-id="2f2a6-353">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-354">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-355">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-356">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-357">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-357">If `Number` is</span></span>|<span data-ttu-id="2f2a6-358">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-359">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-359">Empty</span></span>|<span data-ttu-id="2f2a6-360">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-360">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-361">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-361">Any numeric value</span></span>|<span data-ttu-id="2f2a6-362">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-363">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-364">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-365">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-366"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-367"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-368">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-369">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-370">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-370">Required.</span></span> <span data-ttu-id="2f2a6-371">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-372">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-373">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-374">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-375">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-375">If `Number` is</span></span>|<span data-ttu-id="2f2a6-376">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-377">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-377">Empty</span></span>|<span data-ttu-id="2f2a6-378">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-378">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-379">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-379">Any numeric value</span></span>|<span data-ttu-id="2f2a6-380">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-381">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-382">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-383">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-384"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-385"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-386">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-387">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-388">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-388">Required.</span></span> <span data-ttu-id="2f2a6-389">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-390">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-391">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-392">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-393">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-393">If `Number` is</span></span>|<span data-ttu-id="2f2a6-394">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-395">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-395">Empty</span></span>|<span data-ttu-id="2f2a6-396">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-396">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-397">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-397">Any numeric value</span></span>|<span data-ttu-id="2f2a6-398">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-399">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-400">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-401">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-402"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-403"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-404">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-405">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-406">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-406">Required.</span></span> <span data-ttu-id="2f2a6-407">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-408">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-409">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-410">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-411">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-411">If `Number` is</span></span>|<span data-ttu-id="2f2a6-412">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-413">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-413">Empty</span></span>|<span data-ttu-id="2f2a6-414">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-414">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-415">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-415">Any numeric value</span></span>|<span data-ttu-id="2f2a6-416">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-417">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-418">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-419">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-420"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-421"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-422">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-423">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-424">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-424">Required.</span></span> <span data-ttu-id="2f2a6-425">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-426">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-427">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-428">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-429">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-429">If `Number` is</span></span>|<span data-ttu-id="2f2a6-430">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-431">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-431">Empty</span></span>|<span data-ttu-id="2f2a6-432">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-432">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-433">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-433">Any numeric value</span></span>|<span data-ttu-id="2f2a6-434">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-435">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-436">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-437">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-438"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-439"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-440">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-441">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-442">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-442">Required.</span></span> <span data-ttu-id="2f2a6-443">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-444">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-445">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-446">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-447">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-447">If `Number` is</span></span>|<span data-ttu-id="2f2a6-448">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-449">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-449">Empty</span></span>|<span data-ttu-id="2f2a6-450">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-450">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-451">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-451">Any numeric value</span></span>|<span data-ttu-id="2f2a6-452">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-453">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-454">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-455">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-456"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-457"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-458">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-459">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-460">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-460">Required.</span></span> <span data-ttu-id="2f2a6-461">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-462">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-463">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-464">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-465">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-465">If `Number` is</span></span>|<span data-ttu-id="2f2a6-466">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-467">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-467">Empty</span></span>|<span data-ttu-id="2f2a6-468">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-468">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-469">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-469">Any numeric value</span></span>|<span data-ttu-id="2f2a6-470">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-471">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-472">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-473">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-474"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-475"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-476">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-477">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-478">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-478">Required.</span></span> <span data-ttu-id="2f2a6-479">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-480">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-481">Uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-482">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-483">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="2f2a6-483">If `Number` is</span></span>|<span data-ttu-id="2f2a6-484">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="2f2a6-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-485">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-485">Empty</span></span>|<span data-ttu-id="2f2a6-486">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-486">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-487">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="2f2a6-487">Any numeric value</span></span>|<span data-ttu-id="2f2a6-488">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-489">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="2f2a6-490">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-491">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-492"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-493"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-494">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="2f2a6-495">Como: Converter cadeias de caracteres hexadecimais em números</span><span class="sxs-lookup"><span data-stu-id="2f2a6-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f2a6-496">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-497">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-497">Required.</span></span> <span data-ttu-id="2f2a6-498">Um número do tipo <see langword="Decimal" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-499">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-500">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-501">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-502">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-503">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-504">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="2f2a6-505">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-506">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-507">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-508">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-509">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-510">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-511">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-512">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-513">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-514">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-515">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-516">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-517">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-518">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-519">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-520">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-521">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-521">Required.</span></span> <span data-ttu-id="2f2a6-522">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-523">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-524">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-525">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-526">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-527">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-528">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="2f2a6-529">Começando com o Visual Basic 15,8, o desempenho da conversão de duplo para inteiro é otimizado se você passar o valor retornado pela `Int` método para qualquer uma da [funções de conversão integral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou se o valor duplo retornado por `Int` é automaticamente convertido em um inteiro com [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) definida como desativada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="2f2a6-530">Essa otimização permite que o código seja executado mais rapidamente – até duas vezes mais rápido para o código que faz um grande número de conversões para tipos de inteiro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="2f2a6-531">O exemplo a seguir ilustra uma conversão desse tipo otimizada:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="2f2a6-532">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-533">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-534">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-535">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-536">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-537">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-538">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-539">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-540">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-541">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-542">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-543">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-544">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-545">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-546">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-547">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-548">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-548">Required.</span></span> <span data-ttu-id="2f2a6-549">Um número do tipo <see langword="Short" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-550">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-551">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-552">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-553">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-554">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-555">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-556">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-557">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-558">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-559">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-560">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-561">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-562">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-563">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-564">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-565">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-566">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-567">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-568">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-569">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-570">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-571">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-572">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-572">Required.</span></span> <span data-ttu-id="2f2a6-573">Um número do tipo <see langword="Integer" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-574">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-575">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-576">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-577">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-578">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-579">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-580">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-581">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-582">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-583">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-584">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-585">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-586">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-587">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-588">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-589">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-590">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-591">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-592">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-593">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-594">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-595">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-596">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-596">Required.</span></span> <span data-ttu-id="2f2a6-597">Um número do tipo <see langword="Long" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-598">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-599">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-600">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-601">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-602">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-603">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-604">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-605">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-606">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-607">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-608">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-609">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-610">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-611">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-612">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-613">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-614">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-615">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-616">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-617">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-618">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-619">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-620">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-620">Required.</span></span> <span data-ttu-id="2f2a6-621">Um número do tipo <see langword="Object" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="2f2a6-622">Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="2f2a6-623">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-624">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-625">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-626">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-627">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-628">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="2f2a6-629">Começando com o Visual Basic 15,8, se o `Number` argumento é um objeto cujo tipo de tempo de execução `Double` ou `Single`, o desempenho da conversão flutuante-ponto para inteiro é otimizado se você passar o valor retornado pelo `Int` qualquer método o [funções de conversão integral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou se o valor retornado por `Int` é automaticamente convertido em um inteiro com [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) definida como desativada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="2f2a6-630">Essa otimização permite que o código seja executado mais rapidamente – até duas vezes mais rápido para o código que faz um grande número de conversões para tipos de inteiro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="2f2a6-631">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="2f2a6-632">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-633">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-634">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-635">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-636">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-637">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-638">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-639">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-640">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-641">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-642">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-643">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-644">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-645">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-646">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-647">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-648">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-648">Required.</span></span> <span data-ttu-id="2f2a6-649">Um número do tipo <see langword="Single" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-650">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-651">A parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-652">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="2f2a6-653">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="2f2a6-654">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="2f2a6-655">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="2f2a6-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="2f2a6-656">Começando com 15,8 do Visual Basic, o desempenho do `Single`-para-conversão inteiro é otimizado se você passar o valor retornado pela `Int` método para qualquer uma da [funções de conversão integral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou se o `Single`valor retornado por `Int` é automaticamente convertido em um inteiro com [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) definida como desativada.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="2f2a6-657">Essa otimização permite que o código seja executado mais rapidamente – até duas vezes mais rápido para o código que faz um grande número de conversões para tipos de inteiro.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="2f2a6-658">O exemplo a seguir ilustra uma conversão desse tipo otimizada:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="2f2a6-659">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="2f2a6-660">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="2f2a6-661">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="2f2a6-662">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="2f2a6-663">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="2f2a6-664">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="2f2a6-665">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="2f2a6-666">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="2f2a6-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="2f2a6-667">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-668">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-669">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-670">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="2f2a6-671">Resumo do tipo de dados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="2f2a6-672">Resumo de matemática</span><span class="sxs-lookup"><span data-stu-id="2f2a6-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="2f2a6-673">Funções matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-674">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f2a6-675">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-676">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-676">Required.</span></span> <span data-ttu-id="2f2a6-677">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-678">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-679">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-680">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-681">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-681">If Number is</span></span>|<span data-ttu-id="2f2a6-682">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-683">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-683">Empty</span></span>|<span data-ttu-id="2f2a6-684">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-684">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-685">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-685">Any other number</span></span>|<span data-ttu-id="2f2a6-686">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-687">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-688">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-689">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-690"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-691"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-692">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-693">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-694">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-694">Required.</span></span> <span data-ttu-id="2f2a6-695">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-696">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-697">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-698">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-699">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-699">If Number is</span></span>|<span data-ttu-id="2f2a6-700">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-701">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-701">Empty</span></span>|<span data-ttu-id="2f2a6-702">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-702">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-703">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-703">Any other number</span></span>|<span data-ttu-id="2f2a6-704">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-705">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-706">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-707">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-708"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-709"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-710">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-711">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-712">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-712">Required.</span></span> <span data-ttu-id="2f2a6-713">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-714">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-715">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-716">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-717">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-717">If Number is</span></span>|<span data-ttu-id="2f2a6-718">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-719">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-719">Empty</span></span>|<span data-ttu-id="2f2a6-720">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-720">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-721">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-721">Any other number</span></span>|<span data-ttu-id="2f2a6-722">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-723">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-724">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-725">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-726"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-727"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-728">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-729">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-730">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-730">Required.</span></span> <span data-ttu-id="2f2a6-731">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-732">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-733">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-734">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-735">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-735">If Number is</span></span>|<span data-ttu-id="2f2a6-736">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-737">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-737">Empty</span></span>|<span data-ttu-id="2f2a6-738">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-738">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-739">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-739">Any other number</span></span>|<span data-ttu-id="2f2a6-740">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-741">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-742">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-743">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-744"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-745"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-746">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-747">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-748">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-748">Required.</span></span> <span data-ttu-id="2f2a6-749">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-750">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-751">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-752">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-753">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-753">If Number is</span></span>|<span data-ttu-id="2f2a6-754">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-755">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-755">Empty</span></span>|<span data-ttu-id="2f2a6-756">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-756">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-757">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-757">Any other number</span></span>|<span data-ttu-id="2f2a6-758">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-759">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-760">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-761">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-762"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-763"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-764">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-765">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-766">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-766">Required.</span></span> <span data-ttu-id="2f2a6-767">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-768">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-769">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-770">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-771">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-771">If Number is</span></span>|<span data-ttu-id="2f2a6-772">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-773">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-773">Empty</span></span>|<span data-ttu-id="2f2a6-774">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-774">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-775">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-775">Any other number</span></span>|<span data-ttu-id="2f2a6-776">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-777">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-778">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-779">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-780"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-781"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-782">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-783">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-784">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-784">Required.</span></span> <span data-ttu-id="2f2a6-785">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-786">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-787">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-788">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-789">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-789">If Number is</span></span>|<span data-ttu-id="2f2a6-790">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-791">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-791">Empty</span></span>|<span data-ttu-id="2f2a6-792">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-792">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-793">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-793">Any other number</span></span>|<span data-ttu-id="2f2a6-794">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-795">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-796">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-797">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-798"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-799"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-800">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-801">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-802">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-802">Required.</span></span> <span data-ttu-id="2f2a6-803">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-804">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-805">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-806">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-807">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-807">If Number is</span></span>|<span data-ttu-id="2f2a6-808">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-809">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-809">Empty</span></span>|<span data-ttu-id="2f2a6-810">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-810">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-811">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-811">Any other number</span></span>|<span data-ttu-id="2f2a6-812">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-813">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-814">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-815">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-816"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-817"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-818">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-819">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-820">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-820">Required.</span></span> <span data-ttu-id="2f2a6-821">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-822">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-823">Uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-824">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="2f2a6-825">Se o número for</span><span class="sxs-lookup"><span data-stu-id="2f2a6-825">If Number is</span></span>|<span data-ttu-id="2f2a6-826">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="2f2a6-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="2f2a6-827">Vazio</span><span class="sxs-lookup"><span data-stu-id="2f2a6-827">Empty</span></span>|<span data-ttu-id="2f2a6-828">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="2f2a6-828">Zero (0)</span></span>|  
|<span data-ttu-id="2f2a6-829">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="2f2a6-829">Any other number</span></span>|<span data-ttu-id="2f2a6-830">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="2f2a6-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="2f2a6-831">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="2f2a6-832">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-833">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-834"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-835"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-836">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-837">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="2f2a6-838">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-838">Required.</span></span> <span data-ttu-id="2f2a6-839">Um <see langword="Object" /> contendo qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="2f2a6-840">Retorna uma representação <see langword="String" /> de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-841">Uma representação <see langword="String" /> de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-842">Quando os números são convertidos em cadeias de caracteres, um espaço à esquerda é sempre reservado para o sinal de `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="2f2a6-843">Se `Number` for positivo, a cadeia de caracteres retornada contém um espaço à esquerda e o sinal de adição é implícita.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="2f2a6-844">Um número negativo incluirá o sinal de subtração (-) e nenhum espaço à esquerda.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="2f2a6-845">Use o `Format` função para converter valores numéricos que você deseja formatados como datas, horas ou moeda ou em outros formatos definidos pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="2f2a6-846">Ao contrário do `Str` função, o `Format` função não inclui um espaço à esquerda para o sinal de `Number`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f2a6-847">O `Str` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="2f2a6-848">Se separadores decimais diferentes forem usados (por exemplo, em aplicativos internacionais), use o `CStr` ou `Format` funções para converter um número em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="2f2a6-849">Para obter a representação de cadeia de caracteres de um número em uma cultura específica, use o número `ToString(IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="2f2a6-850">Por exemplo, use <xref:System.Double.ToString%2A> ao converter um valor do tipo `Double` para uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-851">Este exemplo usa o `Str` função retornar um `String` representação de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="2f2a6-852">Quando um número positivo é convertido em uma cadeia de caracteres, um espaço à esquerda é sempre reservado para o sinal.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f2a6-853"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="2f2a6-854"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="2f2a6-855">Resumo da conversão</span><span class="sxs-lookup"><span data-stu-id="2f2a6-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-856">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f2a6-857">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="2f2a6-858">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-858">Required.</span></span> <span data-ttu-id="2f2a6-859">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="2f2a6-860">Se <paramref name="Expression" /> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="2f2a6-861">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-862">Os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-863">O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="2f2a6-864">Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="2f2a6-865">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="2f2a6-866">Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="2f2a6-867">A chamada a seguir retorna o valor 1615198.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="2f2a6-868">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="2f2a6-869">O `Val` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="2f2a6-870">Quando separadores decimais diferentes são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="2f2a6-871">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="2f2a6-872">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="2f2a6-873">Um <xref:System.InvalidCastException> exceção seria lançada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="2f2a6-874">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="2f2a6-875">O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se ele não estivesse contido em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-876">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="2f2a6-877">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="2f2a6-878"><paramref name="InputStr" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-879"><paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-880">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="2f2a6-881">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-881">Required.</span></span> <span data-ttu-id="2f2a6-882">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="2f2a6-883">Se <paramref name="Expression" /> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="2f2a6-884">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-885">Os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-886">O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="2f2a6-887">Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="2f2a6-888">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="2f2a6-889">Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="2f2a6-890">A chamada a seguir retorna o valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="2f2a6-891">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="2f2a6-892">O `Val` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="2f2a6-893">Quando outros separadores decimais são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="2f2a6-894">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="2f2a6-895">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f2a6-896">Um <xref:System.InvalidCastException> exceção seria lançada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="2f2a6-897">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="2f2a6-898">O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se o conflito não estava contido em cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-899">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="2f2a6-900">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="2f2a6-901"><paramref name="InputStr" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-902"><paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-903">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="2f2a6-904">Necessário.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-904">Required.</span></span> <span data-ttu-id="2f2a6-905">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="2f2a6-906">Se <paramref name="Expression" /> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="2f2a6-907">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="2f2a6-908">Os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f2a6-909">O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="2f2a6-910">Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="2f2a6-911">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="2f2a6-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="2f2a6-912">Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="2f2a6-913">A chamada a seguir retorna o valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="2f2a6-914">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="2f2a6-915">O `Val` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="2f2a6-916">Quando outros separadores decimais são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="2f2a6-917">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="2f2a6-918">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f2a6-919">Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="2f2a6-920">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="2f2a6-921">O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se o conflito não estava contido em cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="2f2a6-922">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="2f2a6-923">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="2f2a6-924"><paramref name="InputStr" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f2a6-925"><paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="2f2a6-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="2f2a6-926">Funções de conversão do tipo</span><span class="sxs-lookup"><span data-stu-id="2f2a6-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>