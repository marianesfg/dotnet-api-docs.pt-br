<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4600c-101">O módulo <see langword="Conversion" /> contém procedimentos usados para executar várias operações de conversão.</span><span class="sxs-lookup"><span data-stu-id="4600c-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-102">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que convertem números decimais em outras bases, números em cadeias de caracteres, cadeias de caracteres em números e dados de um tipo para outro.</span><span class="sxs-lookup"><span data-stu-id="4600c-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-103">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="4600c-104">O objeto a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="4600c-104">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="4600c-105">O tipo para o qual o objeto será convertido.</span><span class="sxs-lookup"><span data-stu-id="4600c-105">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="4600c-106">Converte um objeto no tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-106">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="4600c-107">Um objeto cujo tipo em tempo de execução é o tipo de destino solicitado.</span><span class="sxs-lookup"><span data-stu-id="4600c-107">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-108">O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo `TargetType` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="4600c-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="4600c-109">Se o objeto for um objeto dinâmico, o `CTypeDynamic` método se aplica a conversões dinâmicos disponíveis.</span><span class="sxs-lookup"><span data-stu-id="4600c-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="4600c-110">O `CTypeDynamic` método se aplica a conversões dinâmicos de acordo com a semântica de conversão definida pelo objeto em si.</span><span class="sxs-lookup"><span data-stu-id="4600c-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="4600c-111">Se um objeto dinâmico herda de <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta executar a conversão usando uma conversão definida pelo usuário, estática.</span><span class="sxs-lookup"><span data-stu-id="4600c-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="4600c-112">Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta executar a conversão usando conversões dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="4600c-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="4600c-113">Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método dá prioridade ao conversões dinâmicos sobre conversões definidas pelo usuário, estáticos.</span><span class="sxs-lookup"><span data-stu-id="4600c-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-114">O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="4600c-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="4600c-115">O tipo para o qual o objeto será convertido.</span><span class="sxs-lookup"><span data-stu-id="4600c-115">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="4600c-116">O objeto a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="4600c-116">The object to convert.</span></span></param>
        <summary><span data-ttu-id="4600c-117">Converte um objeto no tipo genérico especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-117">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="4600c-118">Um objeto digitalmente tipado como o tipo genérico solicitado.</span><span class="sxs-lookup"><span data-stu-id="4600c-118">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-119">O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo tipo do parâmetro genérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="4600c-120">Se o objeto for um objeto dinâmico, o `CTypeDynamic` método se aplica a conversões dinâmicos disponíveis.</span><span class="sxs-lookup"><span data-stu-id="4600c-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="4600c-121">O `CTypeDynamic` método se aplica a conversões dinâmicos de acordo com a semântica de conversão definida pelo objeto em si.</span><span class="sxs-lookup"><span data-stu-id="4600c-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="4600c-122">Se um objeto dinâmico herda de <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta executar a conversão usando uma conversão definida pelo usuário, estática.</span><span class="sxs-lookup"><span data-stu-id="4600c-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="4600c-123">Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta executar a conversão usando conversões dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="4600c-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="4600c-124">Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método dá prioridade ao conversões dinâmicos sobre conversões definidas pelo usuário, estáticos.</span><span class="sxs-lookup"><span data-stu-id="4600c-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-125">O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="4600c-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4600c-126">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-126">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4600c-127">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-127">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="4600c-128">A mensagem de erro que corresponde ao erro em tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="4600c-128">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-129">O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro em tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="4600c-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="4600c-130">O valor de retorno a `ErrorToString` função corresponde ao `Description` propriedade o `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="4600c-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="4600c-131">Se nenhum erro de tempo de execução ocorreu, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").</span><span class="sxs-lookup"><span data-stu-id="4600c-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="4600c-132">No Visual Basic versão 6.0 e versões anteriores, essa funcionalidade foi fornecida pelo `Error` função.</span><span class="sxs-lookup"><span data-stu-id="4600c-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-133">O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-134"><paramref name="ErrorNumber" /> está fora do intervalo.</span><span class="sxs-lookup"><span data-stu-id="4600c-134"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="4600c-135">Opcional.</span><span class="sxs-lookup"><span data-stu-id="4600c-135">Optional.</span></span> <span data-ttu-id="4600c-136">Qualquer número de erro inválido.</span><span class="sxs-lookup"><span data-stu-id="4600c-136">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="4600c-137">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-137">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="4600c-138">A mensagem de erro que corresponde a um número de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-138">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-139">O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro em tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="4600c-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="4600c-140">O valor de retorno a `ErrorToString` função corresponde ao `Description` propriedade o `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="4600c-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="4600c-141">Se `ErrorNumber` é um número de erro válido, mas não está definido, `ErrorToString` retorna a cadeia de caracteres `"Application-defined or object-defined error."` se `ErrorNumber` não é válido, ocorrerá um erro.</span><span class="sxs-lookup"><span data-stu-id="4600c-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="4600c-142">Se `ErrorNumber` for omitido, a mensagem correspondente o mais recente será retornado o erro de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="4600c-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="4600c-143">Se nenhum erro de tempo de execução ou `ErrorNumber` é 0, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").</span><span class="sxs-lookup"><span data-stu-id="4600c-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="4600c-144">No Visual Basic versão 6.0 e versões anteriores, essa funcionalidade foi fornecida pelo `Error` função.</span><span class="sxs-lookup"><span data-stu-id="4600c-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-145">O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-146"><paramref name="ErrorNumber" /> está fora do intervalo.</span><span class="sxs-lookup"><span data-stu-id="4600c-146"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4600c-147">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-147">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-148">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-148">Required.</span></span> <span data-ttu-id="4600c-149">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-149">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-150">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-151">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-151">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-152">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-152">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-153">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-154">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-155">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-156">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-157">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-158">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-159">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-160">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-161">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-162">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-163">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-164">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-165">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-166">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-166">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-167">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-167">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-168">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-168">Required.</span></span> <span data-ttu-id="4600c-169">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-169">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-170">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-171">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-171">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-172">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-172">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-173">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-174">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-175">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-176">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-177">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-178">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-179">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-180">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-181">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-182">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-183">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-184">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-185">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-186">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-186">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-187">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-187">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-188">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-188">Required.</span></span> <span data-ttu-id="4600c-189">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-189">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-190">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-191">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-191">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-192">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-192">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-193">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-194">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-195">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-196">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-197">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-198">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-199">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-200">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-201">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-202">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-203">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-204">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-205">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-206">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-206">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-207">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-207">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-208">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-208">Required.</span></span> <span data-ttu-id="4600c-209">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-209">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-210">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-211">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-211">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-212">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-212">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-213">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-214">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-215">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-216">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-217">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-218">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-219">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-220">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-221">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-222">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-223">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-224">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-225">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-226">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-226">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-227">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-227">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-228">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-228">Required.</span></span> <span data-ttu-id="4600c-229">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-229">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-230">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-231">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-231">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-232">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-232">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-233">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-234">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-235">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-236">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-237">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-238">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-239">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-240">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-241">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-242">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-243">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-244">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-245">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-246">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-246">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-247">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-247">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-248">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-248">Required.</span></span> <span data-ttu-id="4600c-249">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-249">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-250">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-251">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-251">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-252">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-252">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-253">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-254">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-255">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-256">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-257">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-258">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-259">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-260">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-261">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-262">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-263">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-264">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-265">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-266">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-266">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-267">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-267">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-268">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-268">Required.</span></span> <span data-ttu-id="4600c-269">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-269">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-270">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-271">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-271">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-272">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-272">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-273">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-274">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-275">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-276">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-277">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-278">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-279">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-280">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-281">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-282">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-283">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-284">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-285">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-286">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-286">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-287">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-287">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4600c-288">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-288">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-289">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-289">Required.</span></span> <span data-ttu-id="4600c-290">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-290">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-291">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-291">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-292">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-292">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-293">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-294">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-294">If `Number` is</span></span>|<span data-ttu-id="4600c-295">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-296">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-296">Empty</span></span>|<span data-ttu-id="4600c-297">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-297">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-298">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-298">Any numeric value</span></span>|<span data-ttu-id="4600c-299">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-300">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-301">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-302">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-303"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-303"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-304"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-304"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-305">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-305">Required.</span></span> <span data-ttu-id="4600c-306">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-306">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-307">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-307">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-308">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-308">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-309">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-310">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-310">If `Number` is</span></span>|<span data-ttu-id="4600c-311">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-312">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-312">Empty</span></span>|<span data-ttu-id="4600c-313">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-313">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-314">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-314">Any numeric value</span></span>|<span data-ttu-id="4600c-315">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-316">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-317">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-318">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-319"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-319"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-320"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-320"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-321">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-321">Required.</span></span> <span data-ttu-id="4600c-322">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-322">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-323">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-323">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-324">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-324">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-325">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-326">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-326">If `Number` is</span></span>|<span data-ttu-id="4600c-327">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-328">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-328">Empty</span></span>|<span data-ttu-id="4600c-329">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-329">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-330">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-330">Any numeric value</span></span>|<span data-ttu-id="4600c-331">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-332">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-333">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-334">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-335"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-335"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-336"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-336"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-337">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-337">Required.</span></span> <span data-ttu-id="4600c-338">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-338">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-339">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-339">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-340">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-340">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-341">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-342">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-342">If `Number` is</span></span>|<span data-ttu-id="4600c-343">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-344">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-344">Empty</span></span>|<span data-ttu-id="4600c-345">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-345">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-346">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-346">Any numeric value</span></span>|<span data-ttu-id="4600c-347">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-348">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-349">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-350">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-351"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-351"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-352"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-352"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-353">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-353">Required.</span></span> <span data-ttu-id="4600c-354">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-354">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-355">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-355">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-356">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-356">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-357">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-358">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-358">If `Number` is</span></span>|<span data-ttu-id="4600c-359">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-360">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-360">Empty</span></span>|<span data-ttu-id="4600c-361">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-361">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-362">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-362">Any numeric value</span></span>|<span data-ttu-id="4600c-363">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-364">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-365">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-366">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-367"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-367"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-368"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-368"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-369">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-369">Required.</span></span> <span data-ttu-id="4600c-370">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-370">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-371">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-371">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-372">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-372">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-373">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-374">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-374">If `Number` is</span></span>|<span data-ttu-id="4600c-375">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-376">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-376">Empty</span></span>|<span data-ttu-id="4600c-377">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-377">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-378">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-378">Any numeric value</span></span>|<span data-ttu-id="4600c-379">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-380">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-381">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-382">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-383"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-383"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-384"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-384"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-385">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-385">Required.</span></span> <span data-ttu-id="4600c-386">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-386">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-387">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-387">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-388">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-388">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-389">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-390">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-390">If `Number` is</span></span>|<span data-ttu-id="4600c-391">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-392">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-392">Empty</span></span>|<span data-ttu-id="4600c-393">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-393">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-394">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-394">Any numeric value</span></span>|<span data-ttu-id="4600c-395">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-396">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-397">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-398">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-399"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-399"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-400"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-400"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-401">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-401">Required.</span></span> <span data-ttu-id="4600c-402">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-402">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-403">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-403">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-404">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-404">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-405">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-406">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-406">If `Number` is</span></span>|<span data-ttu-id="4600c-407">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-408">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-408">Empty</span></span>|<span data-ttu-id="4600c-409">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-409">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-410">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-410">Any numeric value</span></span>|<span data-ttu-id="4600c-411">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-412">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-413">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-414">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-415"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-415"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-416"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-416"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-417">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-417">Required.</span></span> <span data-ttu-id="4600c-418">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-418">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-419">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-419">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-420">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-420">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-421">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-422">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="4600c-422">If `Number` is</span></span>|<span data-ttu-id="4600c-423">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="4600c-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-424">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-424">Empty</span></span>|<span data-ttu-id="4600c-425">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-425">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-426">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="4600c-426">Any numeric value</span></span>|<span data-ttu-id="4600c-427">Até dezesseis caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="4600c-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4600c-428">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="4600c-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4600c-429">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-430">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-431"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-431"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-432"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-432"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4600c-433">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-433">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-434">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-434">Required.</span></span> <span data-ttu-id="4600c-435">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-435">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-436">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-437">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-437">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-438">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-438">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-439">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-440">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-441">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-442">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-443">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-444">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-445">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-446">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-447">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-448">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-449">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-450">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-451">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-452">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-452">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-453">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-453">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-454">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-454">Required.</span></span> <span data-ttu-id="4600c-455">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-455">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-456">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-457">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-457">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-458">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-458">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-459">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-460">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-461">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-462">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-463">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-464">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-465">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-466">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-467">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-468">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-469">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-470">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-471">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-472">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-472">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-473">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-473">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-474">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-474">Required.</span></span> <span data-ttu-id="4600c-475">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-475">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-476">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-477">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-477">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-478">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-478">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-479">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-480">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-481">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-482">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-483">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-484">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-485">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-486">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-487">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-488">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-489">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-490">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-491">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-492">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-492">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-493">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-493">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-494">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-494">Required.</span></span> <span data-ttu-id="4600c-495">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-495">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-496">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-497">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-497">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-498">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-498">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-499">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-500">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-501">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-502">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-503">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-504">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-505">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-506">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-507">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-508">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-509">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-510">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-511">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-512">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-512">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-513">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-513">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-514">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-514">Required.</span></span> <span data-ttu-id="4600c-515">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-515">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-516">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-517">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-517">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-518">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-518">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-519">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-520">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-521">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-522">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-523">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-524">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-525">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-526">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-527">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-528">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-529">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-530">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-531">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-532">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-532">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-533">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-533">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-534">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-534">Required.</span></span> <span data-ttu-id="4600c-535">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-535">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-536">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-537">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-537">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-538">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-538">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-539">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-540">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-541">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-542">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-543">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-544">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-545">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-546">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-547">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-548">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-549">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-550">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-551">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-552">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-552">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-553">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-553">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-554">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-554">Required.</span></span> <span data-ttu-id="4600c-555">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-555">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="4600c-556">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="4600c-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="4600c-557">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-557">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-558">Retorna a parte inteira de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-558">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-559">Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="4600c-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4600c-560">A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4600c-561">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="4600c-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4600c-562">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4600c-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-563">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="4600c-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4600c-564">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="4600c-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4600c-565">O exemplo a seguir exige que você especifique `Option Strict Off` porque conversões implícitas de tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4600c-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4600c-566">Você pode usar o `CInt` função para converter explicitamente outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4600c-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4600c-567">No entanto, `CInt` é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="4600c-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4600c-568">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4600c-569">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para executar uma conversão explícita para inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="4600c-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4600c-570">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="4600c-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4600c-571">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4600c-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4600c-572">O número não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-572">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4600c-573">O número não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-573">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4600c-574">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-574">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-575">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-575">Required.</span></span> <span data-ttu-id="4600c-576">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-576">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-577">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-577">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-578">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-578">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-579">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-580">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-580">If Number is</span></span>|<span data-ttu-id="4600c-581">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-582">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-582">Empty</span></span>|<span data-ttu-id="4600c-583">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-583">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-584">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-584">Any other number</span></span>|<span data-ttu-id="4600c-585">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-586">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-587">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-588">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-589"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-589"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-590"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-590"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-591">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-591">Required.</span></span> <span data-ttu-id="4600c-592">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-592">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-593">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-593">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-594">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-594">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-595">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-596">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-596">If Number is</span></span>|<span data-ttu-id="4600c-597">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-598">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-598">Empty</span></span>|<span data-ttu-id="4600c-599">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-599">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-600">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-600">Any other number</span></span>|<span data-ttu-id="4600c-601">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-602">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-603">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-604">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-605"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-605"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-606"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-606"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-607">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-607">Required.</span></span> <span data-ttu-id="4600c-608">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-608">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-609">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-609">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-610">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-610">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-611">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-612">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-612">If Number is</span></span>|<span data-ttu-id="4600c-613">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-614">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-614">Empty</span></span>|<span data-ttu-id="4600c-615">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-615">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-616">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-616">Any other number</span></span>|<span data-ttu-id="4600c-617">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-618">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-619">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-620">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-621"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-621"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-622"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-622"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-623">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-623">Required.</span></span> <span data-ttu-id="4600c-624">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-624">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-625">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-625">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-626">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-626">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-627">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-628">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-628">If Number is</span></span>|<span data-ttu-id="4600c-629">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-630">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-630">Empty</span></span>|<span data-ttu-id="4600c-631">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-631">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-632">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-632">Any other number</span></span>|<span data-ttu-id="4600c-633">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-634">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-635">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-636">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-637"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-637"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-638"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-638"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-639">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-639">Required.</span></span> <span data-ttu-id="4600c-640">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-640">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-641">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-641">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-642">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-642">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-643">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-644">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-644">If Number is</span></span>|<span data-ttu-id="4600c-645">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-646">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-646">Empty</span></span>|<span data-ttu-id="4600c-647">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-647">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-648">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-648">Any other number</span></span>|<span data-ttu-id="4600c-649">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-650">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-651">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-652">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-653"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-653"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-654"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-654"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-655">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-655">Required.</span></span> <span data-ttu-id="4600c-656">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-656">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-657">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-657">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-658">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-658">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-659">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-660">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-660">If Number is</span></span>|<span data-ttu-id="4600c-661">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-662">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-662">Empty</span></span>|<span data-ttu-id="4600c-663">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-663">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-664">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-664">Any other number</span></span>|<span data-ttu-id="4600c-665">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-666">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-667">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-668">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-669"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-669"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-670"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-670"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-671">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-671">Required.</span></span> <span data-ttu-id="4600c-672">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-672">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-673">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-673">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-674">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-674">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-675">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-676">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-676">If Number is</span></span>|<span data-ttu-id="4600c-677">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-678">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-678">Empty</span></span>|<span data-ttu-id="4600c-679">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-679">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-680">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-680">Any other number</span></span>|<span data-ttu-id="4600c-681">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-682">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-683">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-684">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-685"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-685"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-686"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-686"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-687">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-687">Required.</span></span> <span data-ttu-id="4600c-688">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-688">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-689">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-689">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-690">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-690">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-691">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-692">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-692">If Number is</span></span>|<span data-ttu-id="4600c-693">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-694">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-694">Empty</span></span>|<span data-ttu-id="4600c-695">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-695">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-696">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-696">Any other number</span></span>|<span data-ttu-id="4600c-697">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-698">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-699">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-700">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-701"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-701"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-702"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-702"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-703">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-703">Required.</span></span> <span data-ttu-id="4600c-704">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-704">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="4600c-705">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-705">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-706">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-706">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-707">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="4600c-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4600c-708">Se o número for</span><span class="sxs-lookup"><span data-stu-id="4600c-708">If Number is</span></span>|<span data-ttu-id="4600c-709">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="4600c-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4600c-710">Vazio</span><span class="sxs-lookup"><span data-stu-id="4600c-710">Empty</span></span>|<span data-ttu-id="4600c-711">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="4600c-711">Zero (0)</span></span>|  
|<span data-ttu-id="4600c-712">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="4600c-712">Any other number</span></span>|<span data-ttu-id="4600c-713">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="4600c-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4600c-714">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="4600c-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4600c-715">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="4600c-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-716">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-717"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-717"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-718"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-718"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="4600c-719">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-719">Required.</span></span> <span data-ttu-id="4600c-720">Um <see langword="Object" /> contendo qualquer expressão numérica válida.</span><span class="sxs-lookup"><span data-stu-id="4600c-720">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="4600c-721">Retorna uma representação <see langword="String" /> de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-721">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="4600c-722">Retorna uma representação <see langword="String" /> de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-722">Returns a <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-723">Quando os números são convertidos em cadeias de caracteres, um espaço à esquerda é sempre reservado para o sinal de `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="4600c-724">Se `Number` for positivo, a cadeia de caracteres retornada contém um espaço à esquerda e o sinal de adição é inferido.</span><span class="sxs-lookup"><span data-stu-id="4600c-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="4600c-725">Um número negativo incluirá o sinal de subtração (-) e não há espaço à esquerda.</span><span class="sxs-lookup"><span data-stu-id="4600c-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="4600c-726">Use o `Format` function para converter valores numéricos que você deseja formatados como datas, horas ou moeda ou em outros formatos definidos pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="4600c-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="4600c-727">Ao contrário de `Str` função, o `Format` função não inclui um espaço à esquerda para o sinal de `Number`.</span><span class="sxs-lookup"><span data-stu-id="4600c-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4600c-728">O `Str` função reconhece somente o ponto (`.`) como um separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="4600c-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4600c-729">Se separadores decimais diferentes forem usados (por exemplo, em aplicativos internacionais), use o `CStr` ou `Format` funções para converter um número em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="4600c-730">Para obter a representação de cadeia de caracteres de um número em uma cultura específica, use o número `ToString(IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="4600c-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="4600c-731">Por exemplo, use <xref:System.Double.ToString%2A> ao converter um valor do tipo `Double` para uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4600c-732">Este exemplo usa o `Str` função para retornar um `String` representação de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="4600c-733">Quando um número positivo é convertido em uma cadeia de caracteres, um espaço à esquerda é sempre reservado para o sinal.</span><span class="sxs-lookup"><span data-stu-id="4600c-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4600c-734"><paramref name="Number" /> não está especificado.</span><span class="sxs-lookup"><span data-stu-id="4600c-734"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="4600c-735"><paramref name="Number" /> não é um tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="4600c-735"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4600c-736">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="4600c-737">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-737">Required.</span></span> <span data-ttu-id="4600c-738">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="4600c-739">Se <c>Expression</c> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="4600c-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="4600c-740">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="4600c-741">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-742">O `Val` função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="4600c-743">Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="4600c-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="4600c-744">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="4600c-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="4600c-745">Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="4600c-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="4600c-746">A chamada a seguir retorna o valor 1615198.</span><span class="sxs-lookup"><span data-stu-id="4600c-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="4600c-747">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="4600c-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="4600c-748">O `Val` função reconhece somente o ponto (`.`) como um separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="4600c-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4600c-749">Quando separadores decimais diferentes forem usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="4600c-750">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="4600c-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="4600c-751">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="4600c-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4600c-752">Um <xref:System.InvalidCastException> exceção pode ser gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="4600c-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="4600c-753">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="4600c-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="4600c-754">O conflito entre o número formatado como um `Double` e `Integer` e `Long` caracteres de tipo deve ser capturados pelo compilador se ele não estava contido em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="4600c-755">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="4600c-756">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador de número, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="4600c-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4600c-757"><paramref name="InputStr" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="4600c-757"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-758"><paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-758"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="4600c-759">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-759">Required.</span></span> <span data-ttu-id="4600c-760">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="4600c-761">Se <c>Expression</c> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="4600c-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="4600c-762">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="4600c-763">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-764">O `Val` função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="4600c-765">Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="4600c-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="4600c-766">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="4600c-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="4600c-767">Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="4600c-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="4600c-768">A chamada a seguir retorna o valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="4600c-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="4600c-769">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="4600c-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="4600c-770">O `Val` função reconhece somente o ponto (`.`) como um separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="4600c-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4600c-771">Quando outros separadores decimais forem usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="4600c-772">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="4600c-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="4600c-773">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="4600c-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4600c-774">Um <xref:System.InvalidCastException> exceção pode ser gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="4600c-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="4600c-775">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="4600c-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="4600c-776">O conflito entre o número formatado como um `Double` e `Integer` e `Long` caracteres de tipo deve ser capturados pelo compilador se o conflito não estava contido em cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="4600c-777">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="4600c-778">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador de número, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="4600c-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4600c-779"><paramref name="InputStr" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="4600c-779"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-780"><paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-780"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="4600c-781">Necessário.</span><span class="sxs-lookup"><span data-stu-id="4600c-781">Required.</span></span> <span data-ttu-id="4600c-782">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="4600c-783">Se <c>Expression</c> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="4600c-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="4600c-784">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="4600c-785">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="4600c-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4600c-786">O `Val` função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="4600c-787">Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="4600c-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="4600c-788">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="4600c-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="4600c-789">Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="4600c-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="4600c-790">A chamada a seguir retorna o valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="4600c-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="4600c-791">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="4600c-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="4600c-792">O `Val` função reconhece somente o ponto (`.`) como um separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="4600c-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4600c-793">Quando outros separadores decimais forem usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="4600c-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="4600c-794">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="4600c-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="4600c-795">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="4600c-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4600c-796">Um <xref:System.InvalidCastException> exceção pode ser gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="4600c-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="4600c-797">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="4600c-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="4600c-798">O conflito entre o número formatado como um `Double` e `Integer` e `Long` caracteres de tipo deve ser capturados pelo compilador se o conflito não estava contido em cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="4600c-799">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="4600c-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="4600c-800">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador de número, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="4600c-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4600c-801"><paramref name="InputStr" /> é muito grande.</span><span class="sxs-lookup"><span data-stu-id="4600c-801"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4600c-802"><paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4600c-802"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>