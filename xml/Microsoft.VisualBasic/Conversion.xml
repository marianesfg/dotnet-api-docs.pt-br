<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc28c5733fb9f77e132ec584a6f025b3048ad10b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48643502" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="60a7b-101">O módulo <see langword="Conversion" /> contém procedimentos usados para executar várias operações de conversão.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60a7b-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-102">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca de tempo de execução que convertem números decimais em outras bases, números, cadeias de caracteres, cadeias de caracteres em números e dados de um tipo para outro.</span><span class="sxs-lookup"><span data-stu-id="60a7b-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-103">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="60a7b-104">Resumo da conversão</span>
      <span class="sxs-lookup">
        <span data-stu-id="60a7b-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="60a7b-105">Palavras-chave (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="60a7b-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="60a7b-106">Membros de biblioteca de tempo de execução do Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="60a7b-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="60a7b-107">O objeto a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="60a7b-108">O tipo para o qual o objeto será convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-109">Converte um objeto no tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-110">Um objeto cujo tipo em tempo de execução é o tipo de destino solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-111">O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo `TargetType` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="60a7b-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="60a7b-112">Se o objeto for um objeto dinâmico, o `CTypeDynamic` método aplica-se disponíveis conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="60a7b-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="60a7b-113">O `CTypeDynamic` método aplica-se dinâmico conversões de acordo com a semântica de conversão definida pelo objeto em si.</span><span class="sxs-lookup"><span data-stu-id="60a7b-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="60a7b-114">Se um objeto dinâmico herda <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta realizar a conversão usando uma conversão definida pelo usuário, estática.</span><span class="sxs-lookup"><span data-stu-id="60a7b-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="60a7b-115">Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta realizar a conversão usando conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="60a7b-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="60a7b-116">Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método oferece a precedência para conversões dinâmicas sobre conversões definidas pelo usuário, estáticas.</span><span class="sxs-lookup"><span data-stu-id="60a7b-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-117">O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="60a7b-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="60a7b-118">Trabalhando com objetos dinâmicos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="60a7b-119">Passo a passo: Criando e usando objetos dinâmicos (C# e Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="60a7b-120">O tipo para o qual o objeto será convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="60a7b-121">O objeto a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-122">Converte um objeto no tipo genérico especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-123">Um objeto digitalmente tipado como o tipo genérico solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-124">O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo tipo de parâmetro genérico.</span><span class="sxs-lookup"><span data-stu-id="60a7b-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="60a7b-125">Se o objeto for um objeto dinâmico, o `CTypeDynamic` método aplica-se disponíveis conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="60a7b-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="60a7b-126">O `CTypeDynamic` método aplica-se dinâmico conversões de acordo com a semântica de conversão definida pelo objeto em si.</span><span class="sxs-lookup"><span data-stu-id="60a7b-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="60a7b-127">Se um objeto dinâmico herda <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta realizar a conversão usando uma conversão definida pelo usuário, estática.</span><span class="sxs-lookup"><span data-stu-id="60a7b-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="60a7b-128">Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta realizar a conversão usando conversões dinâmicas.</span><span class="sxs-lookup"><span data-stu-id="60a7b-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="60a7b-129">Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método oferece a precedência para conversões dinâmicas sobre conversões definidas pelo usuário, estáticas.</span><span class="sxs-lookup"><span data-stu-id="60a7b-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-130">O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</span><span class="sxs-lookup"><span data-stu-id="60a7b-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="60a7b-131">Trabalhando com objetos dinâmicos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="60a7b-132">Passo a passo: Criando e usando objetos dinâmicos (C# e Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-133">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-134">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-135">A mensagem de erro que corresponde ao erro em tempo de execução mais recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-136">O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro de tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="60a7b-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="60a7b-137">O valor de retorno de `ErrorToString` função corresponde ao `Description` propriedade do `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="60a7b-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="60a7b-138">Não se tiver ocorrido nenhum erro de tempo de execução, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").</span><span class="sxs-lookup"><span data-stu-id="60a7b-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="60a7b-139">Na versão 6.0 e versões anterior do Visual Basic, essa funcionalidade foi fornecida pelo `Error` função.</span><span class="sxs-lookup"><span data-stu-id="60a7b-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-140">O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificada.</span><span class="sxs-lookup"><span data-stu-id="60a7b-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-141">
            <paramref name="ErrorNumber" /> está fora do intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="60a7b-142">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-142">Optional.</span>
          </span>
          <span data-ttu-id="60a7b-143">Qualquer número de erro inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-144">Retorna a mensagem de erro que corresponde a um número de erro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-145">A mensagem de erro que corresponde a um número de erro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-146">O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro de tempo de execução mais recente.</span><span class="sxs-lookup"><span data-stu-id="60a7b-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="60a7b-147">O valor de retorno de `ErrorToString` função corresponde ao `Description` propriedade do `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="60a7b-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="60a7b-148">Se `ErrorNumber` é um número de erro válido, mas não está definido `ErrorToString` retorna a cadeia de caracteres `"Application-defined or object-defined error."` se `ErrorNumber` não for válido, ocorrerá um erro.</span><span class="sxs-lookup"><span data-stu-id="60a7b-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="60a7b-149">Se `ErrorNumber` for omitido, a mensagem correspondente o mais recente será retornado o erro de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="60a7b-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="60a7b-150">Se nenhum erro de tempo de execução ou `ErrorNumber` é 0, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").</span><span class="sxs-lookup"><span data-stu-id="60a7b-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="60a7b-151">Na versão 6.0 e versões anterior do Visual Basic, essa funcionalidade foi fornecida pelo `Error` função.</span><span class="sxs-lookup"><span data-stu-id="60a7b-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-152">O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificada.</span><span class="sxs-lookup"><span data-stu-id="60a7b-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-153">
            <paramref name="ErrorNumber" /> está fora do intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-154">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-155">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-155">Required.</span>
          </span>
          <span data-ttu-id="60a7b-156">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-157">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-157">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-158">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-159">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-160">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-161">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-162">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-163">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-164">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-165">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-166">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-167">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-168">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-169">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-170">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-171">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-172">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-173">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-174">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-175">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-176">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-177">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-178">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-179">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-180">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-180">Required.</span>
          </span>
          <span data-ttu-id="60a7b-181">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-182">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-182">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-183">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-184">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-185">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-186">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-187">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-188">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-189">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-190">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-191">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-192">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-193">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-194">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-195">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-196">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-197">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-198">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-199">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-200">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-201">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-202">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-203">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-204">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-205">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-205">Required.</span>
          </span>
          <span data-ttu-id="60a7b-206">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-207">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-207">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-208">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-209">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-210">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-211">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-212">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-213">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-214">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-215">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-216">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-217">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-218">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-219">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-220">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-221">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-222">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-223">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-224">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-225">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-226">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-227">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-228">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-229">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-230">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-230">Required.</span>
          </span>
          <span data-ttu-id="60a7b-231">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-232">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-232">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-233">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-234">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-235">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-236">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-237">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-238">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-239">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-240">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-241">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-242">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-243">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-244">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-245">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-246">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-247">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-248">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-249">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-250">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-251">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-252">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-253">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-254">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-255">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-255">Required.</span>
          </span>
          <span data-ttu-id="60a7b-256">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-257">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-257">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-258">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-259">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-260">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-261">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-262">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-263">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-264">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-265">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-266">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-267">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-268">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-269">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-270">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-271">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-272">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-273">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-274">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-275">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-276">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-277">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-278">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-279">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-280">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-280">Required.</span>
          </span>
          <span data-ttu-id="60a7b-281">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-282">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-282">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-283">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-284">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-285">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-286">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-287">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-288">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-289">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-290">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-291">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-292">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-293">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-294">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-295">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-296">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-297">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-298">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-299">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-300">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-301">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-302">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-303">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-304">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-305">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-305">Required.</span>
          </span>
          <span data-ttu-id="60a7b-306">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-307">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-307">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-308">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-309">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-310">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-311">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-312">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-313">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-314">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-315">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-316">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-317">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-318">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-319">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-320">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-321">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-322">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-323">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-324">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-325">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-326">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-327">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-328">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-329">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-330">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-331">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-331">Required.</span>
          </span>
          <span data-ttu-id="60a7b-332">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-333">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-334">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-335">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-336">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-336">If `Number` is</span></span>|<span data-ttu-id="60a7b-337">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-338">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-338">Empty</span></span>|<span data-ttu-id="60a7b-339">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-339">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-340">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-340">Any numeric value</span></span>|<span data-ttu-id="60a7b-341">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-342">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-343">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-344">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-345">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-346">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-347">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-348">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-349">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-349">Required.</span>
          </span>
          <span data-ttu-id="60a7b-350">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-351">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-352">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-353">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-354">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-354">If `Number` is</span></span>|<span data-ttu-id="60a7b-355">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-356">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-356">Empty</span></span>|<span data-ttu-id="60a7b-357">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-357">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-358">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-358">Any numeric value</span></span>|<span data-ttu-id="60a7b-359">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-360">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-361">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-362">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-363">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-364">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-365">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-366">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-367">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-367">Required.</span>
          </span>
          <span data-ttu-id="60a7b-368">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-369">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-370">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-371">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-372">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-372">If `Number` is</span></span>|<span data-ttu-id="60a7b-373">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-374">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-374">Empty</span></span>|<span data-ttu-id="60a7b-375">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-375">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-376">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-376">Any numeric value</span></span>|<span data-ttu-id="60a7b-377">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-378">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-379">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-380">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-381">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-382">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-383">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-384">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-385">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-385">Required.</span>
          </span>
          <span data-ttu-id="60a7b-386">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-387">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-388">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-389">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-390">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-390">If `Number` is</span></span>|<span data-ttu-id="60a7b-391">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-392">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-392">Empty</span></span>|<span data-ttu-id="60a7b-393">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-393">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-394">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-394">Any numeric value</span></span>|<span data-ttu-id="60a7b-395">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-396">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-397">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-398">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-399">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-400">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-401">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-402">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-403">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-403">Required.</span>
          </span>
          <span data-ttu-id="60a7b-404">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-405">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-406">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-407">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-408">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-408">If `Number` is</span></span>|<span data-ttu-id="60a7b-409">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-410">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-410">Empty</span></span>|<span data-ttu-id="60a7b-411">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-411">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-412">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-412">Any numeric value</span></span>|<span data-ttu-id="60a7b-413">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-414">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-415">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-416">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-417">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-418">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-419">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-420">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-421">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-421">Required.</span>
          </span>
          <span data-ttu-id="60a7b-422">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-423">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-424">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-425">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-426">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-426">If `Number` is</span></span>|<span data-ttu-id="60a7b-427">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-428">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-428">Empty</span></span>|<span data-ttu-id="60a7b-429">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-429">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-430">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-430">Any numeric value</span></span>|<span data-ttu-id="60a7b-431">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-432">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-433">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-434">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-435">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-436">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-437">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-438">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-439">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-439">Required.</span>
          </span>
          <span data-ttu-id="60a7b-440">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-441">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-442">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-443">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-444">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-444">If `Number` is</span></span>|<span data-ttu-id="60a7b-445">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-446">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-446">Empty</span></span>|<span data-ttu-id="60a7b-447">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-447">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-448">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-448">Any numeric value</span></span>|<span data-ttu-id="60a7b-449">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-450">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-451">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-452">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-453">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-454">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-455">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-456">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-457">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-457">Required.</span>
          </span>
          <span data-ttu-id="60a7b-458">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-459">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-460">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-461">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-462">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-462">If `Number` is</span></span>|<span data-ttu-id="60a7b-463">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-464">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-464">Empty</span></span>|<span data-ttu-id="60a7b-465">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-465">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-466">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-466">Any numeric value</span></span>|<span data-ttu-id="60a7b-467">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-468">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-469">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-470">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-471">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-472">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-473">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-474">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-475">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-475">Required.</span>
          </span>
          <span data-ttu-id="60a7b-476">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-477">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-478">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-479">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-480">Se `Number` é</span><span class="sxs-lookup"><span data-stu-id="60a7b-480">If `Number` is</span></span>|<span data-ttu-id="60a7b-481">Hex retornará</span><span class="sxs-lookup"><span data-stu-id="60a7b-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-482">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-482">Empty</span></span>|<span data-ttu-id="60a7b-483">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-483">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-484">Qualquer valor numérico</span><span class="sxs-lookup"><span data-stu-id="60a7b-484">Any numeric value</span></span>|<span data-ttu-id="60a7b-485">Até 16 caracteres hexadecimais</span><span class="sxs-lookup"><span data-stu-id="60a7b-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="60a7b-486">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="60a7b-487">Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-488">Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-489">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-490">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-491">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="60a7b-492">Como converter cadeias de caracteres hexadecimais em números</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-493">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-494">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-494">Required.</span>
          </span>
          <span data-ttu-id="60a7b-495">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-496">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-497">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-498">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-499">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-500">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-501">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-502">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-503">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-504">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-505">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-506">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-507">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-508">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-509">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-510">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-511">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-512">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-513">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-514">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-515">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-516">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-517">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-518">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-519">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-519">Required.</span>
          </span>
          <span data-ttu-id="60a7b-520">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-521">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-521">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-522">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-523">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-524">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-525">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-526">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-527">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-528">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-529">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-530">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-531">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-532">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-533">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-534">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-535">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-536">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-537">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-538">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-539">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-540">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-541">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-542">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-543">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-544">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-544">Required.</span>
          </span>
          <span data-ttu-id="60a7b-545">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-546">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-546">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-547">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-548">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-549">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-550">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-551">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-552">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-553">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-554">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-555">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-556">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-557">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-558">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-559">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-560">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-561">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-562">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-563">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-564">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-565">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-566">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-567">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-568">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-569">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-569">Required.</span>
          </span>
          <span data-ttu-id="60a7b-570">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-571">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-571">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-572">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-573">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-574">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-575">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-576">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-577">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-578">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-579">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-580">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-581">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-582">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-583">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-584">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-585">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-586">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-587">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-588">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-589">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-590">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-591">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-592">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-593">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-594">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-594">Required.</span>
          </span>
          <span data-ttu-id="60a7b-595">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-596">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-596">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-597">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-598">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-599">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-600">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-601">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-602">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-603">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-604">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-605">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-606">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-607">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-608">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-609">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-610">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-611">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-612">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-613">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-614">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-615">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-616">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-617">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-618">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-619">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-619">Required.</span>
          </span>
          <span data-ttu-id="60a7b-620">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-621">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-621">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-622">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-623">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-624">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-625">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-626">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-627">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-628">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-629">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-630">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-631">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-632">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-633">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-634">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-635">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-636">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-637">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-638">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-639">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-640">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-641">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-642">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-643">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-644">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-644">Required.</span>
          </span>
          <span data-ttu-id="60a7b-645">Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="60a7b-646">Se <c>Number</c> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-646">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-647">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-648">Retorna a parte inteira de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-649">Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.</span><span class="sxs-lookup"><span data-stu-id="60a7b-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="60a7b-650">A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="60a7b-651">Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.</span><span class="sxs-lookup"><span data-stu-id="60a7b-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="60a7b-652">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="60a7b-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-653">Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números.</span><span class="sxs-lookup"><span data-stu-id="60a7b-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="60a7b-654">No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="60a7b-655">O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="60a7b-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="60a7b-656">Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="60a7b-657">No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="60a7b-658">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="60a7b-659">Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="60a7b-660">Por exemplo:</span><span class="sxs-lookup"><span data-stu-id="60a7b-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="60a7b-661">Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="60a7b-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-662">O número não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-663">O número não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-664">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="60a7b-665">Resumo do tipo de dados (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="60a7b-666">Resumo de matemática</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="60a7b-667">Funções matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-668">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-669">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-670">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-670">Required.</span>
          </span>
          <span data-ttu-id="60a7b-671">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-672">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-673">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-674">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-675">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-675">If Number is</span></span>|<span data-ttu-id="60a7b-676">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-677">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-677">Empty</span></span>|<span data-ttu-id="60a7b-678">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-678">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-679">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-679">Any other number</span></span>|<span data-ttu-id="60a7b-680">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-681">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-682">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-683">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-684">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-685">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-686">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-687">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-688">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-688">Required.</span>
          </span>
          <span data-ttu-id="60a7b-689">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-690">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-691">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-692">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-693">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-693">If Number is</span></span>|<span data-ttu-id="60a7b-694">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-695">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-695">Empty</span></span>|<span data-ttu-id="60a7b-696">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-696">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-697">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-697">Any other number</span></span>|<span data-ttu-id="60a7b-698">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-699">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-700">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-701">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-702">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-703">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-704">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-705">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-706">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-706">Required.</span>
          </span>
          <span data-ttu-id="60a7b-707">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-708">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-709">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-710">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-711">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-711">If Number is</span></span>|<span data-ttu-id="60a7b-712">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-713">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-713">Empty</span></span>|<span data-ttu-id="60a7b-714">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-714">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-715">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-715">Any other number</span></span>|<span data-ttu-id="60a7b-716">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-717">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-718">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-719">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-720">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-721">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-722">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-723">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-724">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-724">Required.</span>
          </span>
          <span data-ttu-id="60a7b-725">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-726">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-727">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-728">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-729">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-729">If Number is</span></span>|<span data-ttu-id="60a7b-730">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-731">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-731">Empty</span></span>|<span data-ttu-id="60a7b-732">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-732">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-733">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-733">Any other number</span></span>|<span data-ttu-id="60a7b-734">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-735">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-736">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-737">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-738">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-739">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-740">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-741">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-742">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-742">Required.</span>
          </span>
          <span data-ttu-id="60a7b-743">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-744">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-745">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-746">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-747">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-747">If Number is</span></span>|<span data-ttu-id="60a7b-748">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-749">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-749">Empty</span></span>|<span data-ttu-id="60a7b-750">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-750">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-751">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-751">Any other number</span></span>|<span data-ttu-id="60a7b-752">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-753">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-754">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-755">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-756">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-757">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-758">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-759">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-760">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-760">Required.</span>
          </span>
          <span data-ttu-id="60a7b-761">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-762">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-763">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-764">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-765">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-765">If Number is</span></span>|<span data-ttu-id="60a7b-766">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-767">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-767">Empty</span></span>|<span data-ttu-id="60a7b-768">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-768">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-769">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-769">Any other number</span></span>|<span data-ttu-id="60a7b-770">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-771">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-772">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-773">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-774">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-775">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-776">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-777">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-778">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-778">Required.</span>
          </span>
          <span data-ttu-id="60a7b-779">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-780">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-781">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-782">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-783">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-783">If Number is</span></span>|<span data-ttu-id="60a7b-784">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-785">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-785">Empty</span></span>|<span data-ttu-id="60a7b-786">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-786">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-787">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-787">Any other number</span></span>|<span data-ttu-id="60a7b-788">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-789">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-790">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-791">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-792">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-793">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-794">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-795">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-796">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-796">Required.</span>
          </span>
          <span data-ttu-id="60a7b-797">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-798">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-799">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-800">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-801">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-801">If Number is</span></span>|<span data-ttu-id="60a7b-802">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-803">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-803">Empty</span></span>|<span data-ttu-id="60a7b-804">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-804">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-805">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-805">Any other number</span></span>|<span data-ttu-id="60a7b-806">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-807">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-808">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-809">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-810">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-811">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-812">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-813">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-814">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-814">Required.</span>
          </span>
          <span data-ttu-id="60a7b-815">Qualquer expressão numérica válida ou expressão <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-816">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-817">Retorna uma cadeia de caracteres que representa o valor octal de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-818">Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</span><span class="sxs-lookup"><span data-stu-id="60a7b-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="60a7b-819">Se o número for</span><span class="sxs-lookup"><span data-stu-id="60a7b-819">If Number is</span></span>|<span data-ttu-id="60a7b-820">Retornos OCT</span><span class="sxs-lookup"><span data-stu-id="60a7b-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="60a7b-821">Vazio</span><span class="sxs-lookup"><span data-stu-id="60a7b-821">Empty</span></span>|<span data-ttu-id="60a7b-822">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="60a7b-822">Zero (0)</span></span>|  
|<span data-ttu-id="60a7b-823">Qualquer outro número</span><span class="sxs-lookup"><span data-stu-id="60a7b-823">Any other number</span></span>|<span data-ttu-id="60a7b-824">Até 22 caracteres octais</span><span class="sxs-lookup"><span data-stu-id="60a7b-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="60a7b-825">É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="60a7b-826">Por exemplo, `&O10` é a notação octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-827">Este exemplo usa a função `Oct` para retornar o valor octal de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-828">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-829">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-830">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-831">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="60a7b-832">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-832">Required.</span>
          </span>
          <span data-ttu-id="60a7b-833">Um <see langword="Object" /> contendo qualquer expressão numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-834">Retorna uma representação <see langword="String" /> de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-835">Retorna uma representação <see langword="String" /> de um número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-836">Quando os números são convertidos em cadeias de caracteres, um espaço à esquerda é sempre reservado para o sinal de `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="60a7b-837">Se `Number` for positivo, a cadeia de caracteres retornada contém um espaço à esquerda e o sinal de adição é implícita.</span><span class="sxs-lookup"><span data-stu-id="60a7b-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="60a7b-838">Um número negativo incluirá o sinal de subtração (-) e nenhum espaço à esquerda.</span><span class="sxs-lookup"><span data-stu-id="60a7b-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="60a7b-839">Use o `Format` função para converter valores numéricos que você deseja formatados como datas, horas ou moeda ou em outros formatos definidos pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="60a7b-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="60a7b-840">Ao contrário do `Str` função, o `Format` função não inclui um espaço à esquerda para o sinal de `Number`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-841">O `Str` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="60a7b-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="60a7b-842">Se separadores decimais diferentes forem usados (por exemplo, em aplicativos internacionais), use o `CStr` ou `Format` funções para converter um número em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="60a7b-843">Para obter a representação de cadeia de caracteres de um número em uma cultura específica, use o número `ToString(IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="60a7b-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="60a7b-844">Por exemplo, use <xref:System.Double.ToString%2A> ao converter um valor do tipo `Double` para uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-845">Este exemplo usa o `Str` função retornar um `String` representação de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="60a7b-846">Quando um número positivo é convertido em uma cadeia de caracteres, um espaço à esquerda é sempre reservado para o sinal.</span><span class="sxs-lookup"><span data-stu-id="60a7b-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="60a7b-847">
            <paramref name="Number" /> não está especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="60a7b-848">
            <paramref name="Number" /> não é um tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="60a7b-849">Resumo da conversão</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-850">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="60a7b-851">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="60a7b-852">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-852">Required.</span>
          </span>
          <span data-ttu-id="60a7b-853">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="60a7b-854">Se <c>Expression</c> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-854">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-855">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-856">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-857">O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="60a7b-858">Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="60a7b-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="60a7b-859">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="60a7b-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="60a7b-860">Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="60a7b-861">A chamada a seguir retorna o valor 1615198.</span><span class="sxs-lookup"><span data-stu-id="60a7b-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="60a7b-862">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="60a7b-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-863">O `Val` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="60a7b-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="60a7b-864">Quando separadores decimais diferentes são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="60a7b-865">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="60a7b-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="60a7b-866">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-867">Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="60a7b-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="60a7b-868">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="60a7b-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="60a7b-869">O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se ele não estivesse contido em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-870">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="60a7b-871">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="60a7b-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="60a7b-872">
            <paramref name="InputStr" /> é muito grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-873">
            <paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-874">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="60a7b-875">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-875">Required.</span>
          </span>
          <span data-ttu-id="60a7b-876">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="60a7b-877">Se <c>Expression</c> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-877">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-878">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-879">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-880">O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="60a7b-881">Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="60a7b-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="60a7b-882">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="60a7b-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="60a7b-883">Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="60a7b-884">A chamada a seguir retorna o valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="60a7b-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="60a7b-885">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="60a7b-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-886">O `Val` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="60a7b-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="60a7b-887">Quando outros separadores decimais são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="60a7b-888">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="60a7b-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="60a7b-889">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-890">Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="60a7b-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="60a7b-891">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="60a7b-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="60a7b-892">O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se o conflito não estava contido em cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-893">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="60a7b-894">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="60a7b-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="60a7b-895">
            <paramref name="InputStr" /> é muito grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-896">
            <paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-897">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="60a7b-898">Necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-898">Required.</span>
          </span>
          <span data-ttu-id="60a7b-899">Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="60a7b-900">Se <c>Expression</c> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-900">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60a7b-901">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60a7b-902">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60a7b-903">O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="60a7b-904">Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="60a7b-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="60a7b-905">No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="60a7b-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="60a7b-906">Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.</span><span class="sxs-lookup"><span data-stu-id="60a7b-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="60a7b-907">A chamada a seguir retorna o valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="60a7b-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="60a7b-908">A chamada a seguir retorna o valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="60a7b-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-909">O `Val` função reconhece somente o ponto (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="60a7b-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="60a7b-910">Quando outros separadores decimais são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número.</span><span class="sxs-lookup"><span data-stu-id="60a7b-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="60a7b-911">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="60a7b-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="60a7b-912">Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.</span><span class="sxs-lookup"><span data-stu-id="60a7b-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60a7b-913">Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns.</span><span class="sxs-lookup"><span data-stu-id="60a7b-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="60a7b-914">Por exemplo, o código a seguir gera essa exceção.</span><span class="sxs-lookup"><span data-stu-id="60a7b-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="60a7b-915">O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se o conflito não estava contido em cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="60a7b-916">O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="60a7b-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="60a7b-917">`Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="60a7b-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="60a7b-918">
            <paramref name="InputStr" /> é muito grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="60a7b-919">
            <paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="60a7b-920">Funções de conversão do tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="60a7b-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>