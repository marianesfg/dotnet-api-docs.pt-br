<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc0120340cfb097270b9032d2692b053057366ea" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52242777" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>O módulo <see langword="Conversion" /> contém procedimentos usados para executar várias operações de conversão.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca de tempo de execução que convertem números decimais em outras bases, números, cadeias de caracteres, cadeias de caracteres em números e dados de um tipo para outro.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palavras-chave (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membros de biblioteca de tempo de execução do Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">O objeto a ser convertido.</param>
        <param name="TargetType">O tipo para o qual o objeto será convertido.</param>
        <summary>Converte um objeto no tipo especificado.</summary>
        <returns>Um objeto cujo tipo em tempo de execução é o tipo de destino solicitado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo `TargetType` parâmetro. Se o objeto for um objeto dinâmico, o `CTypeDynamic` método aplica-se disponíveis conversões dinâmicas.  
  
 O `CTypeDynamic` método aplica-se dinâmico conversões de acordo com a semântica de conversão definida pelo objeto em si. Se um objeto dinâmico herda <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta realizar a conversão usando uma conversão definida pelo usuário, estática. Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta realizar a conversão usando conversões dinâmicas. Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método oferece a precedência para conversões dinâmicas sobre conversões definidas pelo usuário, estáticas.  
  
   
  
## Examples  
 O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Trabalhando com objetos dinâmicos (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Passo a passo: Criando e usando objetos dinâmicos (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">O tipo para o qual o objeto será convertido.</typeparam>
        <param name="Expression">O objeto a ser convertido.</param>
        <summary>Converte um objeto no tipo genérico especificado.</summary>
        <returns>Um objeto digitalmente tipado como o tipo genérico solicitado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo tipo de parâmetro genérico. Se o objeto for um objeto dinâmico, o `CTypeDynamic` método aplica-se disponíveis conversões dinâmicas.  
  
 O `CTypeDynamic` método aplica-se dinâmico conversões de acordo com a semântica de conversão definida pelo objeto em si. Se um objeto dinâmico herda <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta realizar a conversão usando uma conversão definida pelo usuário, estática. Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta realizar a conversão usando conversões dinâmicas. Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método oferece a precedência para conversões dinâmicas sobre conversões definidas pelo usuário, estáticas.  
  
   
  
## Examples  
 O exemplo a seguir usa o `CTypeDynamic` método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Trabalhando com objetos dinâmicos (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Passo a passo: Criando e usando objetos dinâmicos (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna a mensagem de erro que corresponde a um número de erro especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a mensagem de erro que corresponde a um número de erro especificado.</summary>
        <returns>A mensagem de erro que corresponde ao erro em tempo de execução mais recente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro de tempo de execução mais recente. O valor de retorno de `ErrorToString` função corresponde ao `Description` propriedade do `Err` objeto. Não se tiver ocorrido nenhum erro de tempo de execução, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").  
  
 Na versão 6.0 e versões anterior do Visual Basic, essa funcionalidade foi fornecida pelo `Error` função.  
  
   
  
## Examples  
 O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificada.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ErrorNumber" /> está fora do intervalo.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Opcional. Qualquer número de erro inválido.</param>
        <summary>Retorna a mensagem de erro que corresponde a um número de erro especificado.</summary>
        <returns>A mensagem de erro que corresponde a um número de erro especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro de tempo de execução mais recente. O valor de retorno de `ErrorToString` função corresponde ao `Description` propriedade do `Err` objeto. Se `ErrorNumber` é um número de erro válido, mas não está definido `ErrorToString` retorna a cadeia de caracteres `"Application-defined or object-defined error."` se `ErrorNumber` não for válido, ocorrerá um erro. Se `ErrorNumber` for omitido, a mensagem correspondente o mais recente será retornado o erro de tempo de execução. Se nenhum erro de tempo de execução ou `ErrorNumber` é 0, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero ("").  
  
 Na versão 6.0 e versões anterior do Visual Basic, essa funcionalidade foi fornecida pelo `Error` função.  
  
   
  
## Examples  
 O código a seguir usa o `ErrorToString` função para exibir mensagens de erro que correspondem aos números de erro especificada.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ErrorNumber" /> está fora do intervalo.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna a parte inteira de um número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se `Number` é|Hex retornará|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer valor numérico|Até 16 caracteres hexadecimais|  
  
 Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal.  
  
   
  
## Examples  
 Este exemplo usa o `Hex` função para retornar o valor hexadecimal de um número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Como converter cadeias de caracteres hexadecimais em números</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna a parte inteira de um número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um número do tipo <see langword="Double" /> ou qualquer expressão numérica válida. Se <paramref name="Number" /> contiver <see langword="Nothing" />, <see langword="Nothing" /> será retornado.</param>
        <summary>Retorna a parte inteira de um número.</summary>
        <returns>Retorna a parte inteira de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto a `Int` e `Fix` funções removem a parte fracionária de `Number` e retornar o valor inteiro resultante.  
  
 A diferença entre `Int` e `Fix` funções é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor que ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior que ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este exemplo ilustra como o `Int` e `Fix` funções retornam partes inteiras de números. No caso de um argumento de número negativo, o `Int` função retorna o primeiro inteiro negativo menor ou igual ao número; o `Fix` função retorna o primeiro inteiro negativo maior que ou igual ao número. O exemplo a seguir exige que você especifique `Option Strict Off` porque a conversão implícita do tipo `Double` digitar `Integer` não são permitidas em `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Você pode usar o `CInt` função para converter explicitamente os outros tipos de dados para o tipo `Integer` com `Option Strict Off`. No entanto, `CInt` é arredondado para o inteiro mais próximo em vez de truncar a parte fracionária do número. Por exemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Você pode usar o `CInt` função no resultado de uma chamada para `Fix` ou `Int` para realizar a conversão explícita para o inteiro sem arredondamento. Por exemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obter mais informações sobre `CInt`, consulte [funções de conversão de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O número não está especificado.</exception>
        <exception cref="T:System.ArgumentException">O número não é um tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumo do tipo de dados (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Resumo de matemática</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funções matemáticas (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Qualquer expressão numérica válida ou expressão <see langword="String" />.</param>
        <summary>Retorna uma cadeia de caracteres que representa o valor octal de um número.</summary>
        <returns>Retorna uma cadeia de caracteres que representa o valor octal de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.  
  
|Se o número for|Retornos OCT|  
|-|-|  
|Vazio|Zero (0)|  
|Qualquer outro número|Até 22 caracteres octais|  
  
 É possível representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal para 8 decimal.  
  
   
  
## Examples  
 Este exemplo usa a função `Oct` para retornar o valor octal de um número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. Um <see langword="Object" /> contendo qualquer expressão numérica válida.</param>
        <summary>Retorna uma representação <see langword="String" /> de um número.</summary>
        <returns>Retorna uma representação <see langword="String" /> de um número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando os números são convertidos em cadeias de caracteres, um espaço à esquerda é sempre reservado para o sinal de `Number`. Se `Number` for positivo, a cadeia de caracteres retornada contém um espaço à esquerda e o sinal de adição é implícita. Um número negativo incluirá o sinal de subtração (-) e nenhum espaço à esquerda.  
  
 Use o `Format` função para converter valores numéricos que você deseja formatados como datas, horas ou moeda ou em outros formatos definidos pelo usuário. Ao contrário do `Str` função, o `Format` função não inclui um espaço à esquerda para o sinal de `Number`.  
  
> [!NOTE]
>  O `Str` função reconhece somente o ponto (`.`) como separador decimal válido. Se separadores decimais diferentes forem usados (por exemplo, em aplicativos internacionais), use o `CStr` ou `Format` funções para converter um número em uma cadeia de caracteres. Para obter a representação de cadeia de caracteres de um número em uma cultura específica, use o número `ToString(IFormatProvider)` método. Por exemplo, use <xref:System.Double.ToString%2A> ao converter um valor do tipo `Double` para uma cadeia de caracteres.  
  
   
  
## Examples  
 Este exemplo usa o `Str` função retornar um `String` representação de um número. Quando um número positivo é convertido em uma cadeia de caracteres, um espaço à esquerda é sempre reservado para o sinal.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> não está especificado.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Number" /> não é um tipo numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Resumo da conversão</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />. Se <paramref name="Expression" /> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</param>
        <summary>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</summary>
        <returns>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número. Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos. No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal). Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.  
  
 A chamada a seguir retorna o valor 1615198.  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 A chamada a seguir retorna o valor decimal -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  O `Val` função reconhece somente o ponto (`.`) como separador decimal válido. Quando separadores decimais diferentes são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número. Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método. Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.  
  
> [!NOTE]
>  Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns. Por exemplo, o código a seguir gera essa exceção.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se ele não estivesse contido em uma cadeia de caracteres.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres. `Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> é muito grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Necessário. Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />. Se <paramref name="Expression" /> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</param>
        <summary>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</summary>
        <returns>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número. Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos. No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal). Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.  
  
 A chamada a seguir retorna o valor 1234123.  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 A chamada a seguir retorna o valor decimal -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  O `Val` função reconhece somente o ponto (`.`) como separador decimal válido. Quando outros separadores decimais são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número. Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método. Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.  
  
> [!NOTE]
>  Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns. Por exemplo, o código a seguir gera essa exceção.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se o conflito não estava contido em cadeias de caracteres.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres. `Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> é muito grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Necessário. Qualquer expressão <see langword="String" /> válida, variável <see langword="Object" /> ou valor <see langword="Char" />. Se <paramref name="Expression" /> for do tipo <see langword="Object" />, seu valor deverá ser conversível para <see langword="String" /> ou um erro <see cref="T:System.ArgumentException" /> ocorrerá.</param>
        <summary>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</summary>
        <returns>Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Val` função para de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número. Símbolos e caracteres que geralmente são considerados partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos. No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal). Espaços em branco, tabulações e caracteres de avanço de linha são removidos do argumento.  
  
 A chamada a seguir retorna o valor 1234123.  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 A chamada a seguir retorna o valor decimal -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  O `Val` função reconhece somente o ponto (`.`) como separador decimal válido. Quando outros separadores decimais são usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número. Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método. Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> ao converter uma cadeia de caracteres para um `Double`.  
  
> [!NOTE]
>  Um <xref:System.InvalidCastException> exceção seria gerada em resposta a determinados formatos de número incomuns. Por exemplo, o código a seguir gera essa exceção.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  O conflito entre o número formatado como uma `Double` e o `Integer` e `Long` caracteres de tipo seriam detectados pelo compilador se o conflito não estava contido em cadeias de caracteres.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 O exemplo a seguir usa o `Val` função para retornar os números contidos em cada cadeia de caracteres. `Val` Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador numérico, pontuação numérica ou espaço em branco.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> é muito grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> é uma expressão de tipo <see langword="Object" /> não conversível para <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funções de conversão do tipo</related>
      </Docs>
    </Member>
  </Members>
</Type>