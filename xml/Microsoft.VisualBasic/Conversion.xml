<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Conversion.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac557baf5640b5568751b33197c31abe05cf23b1641.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57baf5640b5568751b33197c31abe05cf23b1641</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>The <ph id="ph1">&lt;see langword="Conversion" /&gt;</ph> module contains the procedures used to perform various conversion operations.</source>
          <target state="translated">O módulo <ph id="ph1">&lt;see langword="Conversion" /&gt;</ph> contém procedimentos usados para executar várias operações de conversão.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Conversion">
          <source>This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</source>
          <target state="translated">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que convertem números decimais em outras bases, números em cadeias de caracteres, cadeias de caracteres em números e dados de um tipo para outro.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Conversion">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>The object to convert.</source>
          <target state="translated">O objeto a ser convertido.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>The type to which to convert the object.</source>
          <target state="translated">O tipo para o qual o objeto será convertido.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>Converts an object to the specified type.</source>
          <target state="translated">Converte um objeto no tipo especificado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>An object whose type at run time is the requested target type.</source>
          <target state="translated">Um objeto cujo tipo em tempo de execução é o tipo de destino solicitado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method converts the object passed as the <ph id="ph2">`Expression`</ph> parameter to the type specified by the <ph id="ph3">`TargetType`</ph> parameter.</source>
          <target state="translated">O <ph id="ph1">`CTypeDynamic`</ph> método converte o objeto passado como o <ph id="ph2">`Expression`</ph> parâmetro para o tipo especificado pelo <ph id="ph3">`TargetType`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>If the object is a dynamic object, the <ph id="ph1">`CTypeDynamic`</ph> method applies available dynamic conversions.</source>
          <target state="translated">Se o objeto for um objeto dinâmico, o <ph id="ph1">`CTypeDynamic`</ph> método se aplica a conversões dinâmicos disponíveis.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</source>
          <target state="translated">O <ph id="ph1">`CTypeDynamic`</ph> método se aplica a conversões dinâmicos de acordo com a semântica de conversão definida pelo objeto em si.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>If a dynamic object inherits from <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.</source>
          <target state="translated">Se um objeto dinâmico herda de <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, o <ph id="ph2">`CTypeDynamic`</ph> método primeiro tenta executar a conversão usando uma conversão definida pelo usuário, estática.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>If the user-defined, static conversion fails, the <ph id="ph1">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.</source>
          <target state="translated">Se a conversão definida pelo usuário, estática falhar, o <ph id="ph1">`CTypeDynamic`</ph> método tenta executar a conversão usando conversões dinâmicos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>If a dynamic object implements <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.</source>
          <target state="translated">Se um objeto dinâmico implementa <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, o <ph id="ph2">`CTypeDynamic`</ph> método dá prioridade ao conversões dinâmicos sobre conversões definidas pelo usuário, estáticos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
          <source>The following example uses the <ph id="ph1">`CTypeDynamic`</ph> method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`CTypeDynamic`</ph> método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>The type to which to convert the object.</source>
          <target state="translated">O tipo para o qual o objeto será convertido.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>The object to convert.</source>
          <target state="translated">O objeto a ser convertido.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>Converts an object to the specified generic type.</source>
          <target state="translated">Converte um objeto no tipo genérico especificado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>An object statically typed as the requested generic type.</source>
          <target state="translated">Um objeto digitalmente tipado como o tipo genérico solicitado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method converts the object passed as the <ph id="ph2">`Expression`</ph> parameter to the type specified by the type of the generic parameter.</source>
          <target state="translated">O <ph id="ph1">`CTypeDynamic`</ph> método converte o objeto passado como o <ph id="ph2">`Expression`</ph> parâmetro para o tipo especificado pelo tipo do parâmetro genérico.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>If the object is a dynamic object, the <ph id="ph1">`CTypeDynamic`</ph> method applies available dynamic conversions.</source>
          <target state="translated">Se o objeto for um objeto dinâmico, o <ph id="ph1">`CTypeDynamic`</ph> método se aplica a conversões dinâmicos disponíveis.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</source>
          <target state="translated">O <ph id="ph1">`CTypeDynamic`</ph> método se aplica a conversões dinâmicos de acordo com a semântica de conversão definida pelo objeto em si.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>If a dynamic object inherits from <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.</source>
          <target state="translated">Se um objeto dinâmico herda de <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, o <ph id="ph2">`CTypeDynamic`</ph> método primeiro tenta executar a conversão usando uma conversão definida pelo usuário, estática.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>If the user-defined, static conversion fails, the <ph id="ph1">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.</source>
          <target state="translated">Se a conversão definida pelo usuário, estática falhar, o <ph id="ph1">`CTypeDynamic`</ph> método tenta executar a conversão usando conversões dinâmicos.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>If a dynamic object implements <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.</source>
          <target state="translated">Se um objeto dinâmico implementa <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, o <ph id="ph2">`CTypeDynamic`</ph> método dá prioridade ao conversões dinâmicos sobre conversões definidas pelo usuário, estáticos.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
          <source>The following example uses the <ph id="ph1">`CTypeDynamic`</ph> method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`CTypeDynamic`</ph> método para converter um objeto dinâmico para uma cadeia de caracteres usando a conversão definida pelo objeto dinâmico.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>Returns the error message that corresponds to a given error number.</source>
          <target state="translated">Retorna a mensagem de erro que corresponde a um número de erro especificado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>Returns the error message that corresponds to a given error number.</source>
          <target state="translated">Retorna a mensagem de erro que corresponde a um número de erro especificado.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>The error message that corresponds to the most recent run-time error.</source>
          <target state="translated">A mensagem de erro que corresponde ao erro em tempo de execução mais recente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>The <ph id="ph1">`ErrorToString`</ph> function examines the property settings of the <ph id="ph2">`Err`</ph> object to identify the most recent run-time error.</source>
          <target state="translated">O <ph id="ph1">`ErrorToString`</ph> função examina as configurações de propriedade do <ph id="ph2">`Err`</ph> objeto para identificar o erro em tempo de execução mais recente.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>The return value of the <ph id="ph1">`ErrorToString`</ph> function corresponds to the <ph id="ph2">`Description`</ph> property of the <ph id="ph3">`Err`</ph> object.</source>
          <target state="translated">O valor de retorno a <ph id="ph1">`ErrorToString`</ph> função corresponde ao <ph id="ph2">`Description`</ph> propriedade o <ph id="ph3">`Err`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>If no run-time error has occurred, <ph id="ph1">`ErrorToString`</ph> returns a zero-length string ("").</source>
          <target state="translated">Se nenhum erro de tempo de execução ocorreu, <ph id="ph1">`ErrorToString`</ph> retorna uma cadeia de caracteres de comprimento zero ("").</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id="ph1">`Error`</ph> function.</source>
          <target state="translated">No Visual Basic versão 6.0 e versões anteriores, essa funcionalidade foi fornecida pelo <ph id="ph1">`Error`</ph> função.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source>The following code uses the <ph id="ph1">`ErrorToString`</ph> function to display error messages that correspond to the specified error numbers.</source>
          <target state="translated">O código a seguir usa o <ph id="ph1">`ErrorToString`</ph> função para exibir mensagens de erro que correspondem aos números de erro especificado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString">
          <source><ph id="ph1">&lt;paramref name="ErrorNumber" /&gt;</ph> is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ErrorNumber" /&gt;</ph> está fora do intervalo.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>Any valid error number.</source>
          <target state="translated">Qualquer número de erro inválido.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>Returns the error message that corresponds to a given error number.</source>
          <target state="translated">Retorna a mensagem de erro que corresponde a um número de erro especificado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>The error message that corresponds to a given error number.</source>
          <target state="translated">A mensagem de erro que corresponde a um número de erro especificado.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>The <ph id="ph1">`ErrorToString`</ph> function examines the property settings of the <ph id="ph2">`Err`</ph> object to identify the most recent run-time error.</source>
          <target state="translated">O <ph id="ph1">`ErrorToString`</ph> função examina as configurações de propriedade do <ph id="ph2">`Err`</ph> objeto para identificar o erro em tempo de execução mais recente.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>The return value of the <ph id="ph1">`ErrorToString`</ph> function corresponds to the <ph id="ph2">`Description`</ph> property of the <ph id="ph3">`Err`</ph> object.</source>
          <target state="translated">O valor de retorno a <ph id="ph1">`ErrorToString`</ph> função corresponde ao <ph id="ph2">`Description`</ph> propriedade o <ph id="ph3">`Err`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>If <ph id="ph1">`ErrorNumber`</ph> is a valid error number but is not defined, <ph id="ph2">`ErrorToString`</ph> returns the string <ph id="ph3">`"Application-defined or object-defined error."`</ph> If <ph id="ph4">`ErrorNumber`</ph> is not valid, an error occurs.</source>
          <target state="translated">Se <ph id="ph1">`ErrorNumber`</ph> é um número de erro válido, mas não está definido, <ph id="ph2">`ErrorToString`</ph> retorna a cadeia de caracteres <ph id="ph3">`"Application-defined or object-defined error."`</ph> se <ph id="ph4">`ErrorNumber`</ph> não é válido, ocorrerá um erro.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>If <ph id="ph1">`ErrorNumber`</ph> is omitted, the message corresponding to the most recent run-time error is returned.</source>
          <target state="translated">Se <ph id="ph1">`ErrorNumber`</ph> for omitido, a mensagem correspondente o mais recente será retornado o erro de tempo de execução.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>If no run-time error has occurred or <ph id="ph1">`ErrorNumber`</ph> is 0, <ph id="ph2">`ErrorToString`</ph> returns a zero-length string ("").</source>
          <target state="translated">Se nenhum erro de tempo de execução ou <ph id="ph1">`ErrorNumber`</ph> é 0, <ph id="ph2">`ErrorToString`</ph> retorna uma cadeia de caracteres de comprimento zero ("").</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id="ph1">`Error`</ph> function.</source>
          <target state="translated">No Visual Basic versão 6.0 e versões anteriores, essa funcionalidade foi fornecida pelo <ph id="ph1">`Error`</ph> função.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source>The following code uses the <ph id="ph1">`ErrorToString`</ph> function to display error messages that correspond to the specified error numbers.</source>
          <target state="translated">O código a seguir usa o <ph id="ph1">`ErrorToString`</ph> função para exibir mensagens de erro que correspondem aos números de erro especificado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="ErrorNumber" /&gt;</ph> is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ErrorNumber" /&gt;</ph> está fora do intervalo.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Returns a string representing the hexadecimal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>If <ph id="ph1">`Number`</ph> is</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> é</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Hex returns</source>
          <target state="translated">Hex retornará</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Any numeric value</source>
          <target state="translated">Qualquer valor numérico</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>Up to sixteen hexadecimal characters</source>
          <target state="translated">Até dezesseis caracteres hexadecimais</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
          <target state="translated">Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;H`</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;H10`</ph> representa decimal 16 em notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source>This example uses the <ph id="ph1">`Hex`</ph> function to return the hexadecimal value of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Hex`</ph> função para retornar o valor hexadecimal de um número.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>A number of type <ph id="ph1">&lt;see langword="Double" /&gt;</ph> or any valid numeric expression.</source>
          <target state="translated">Um número do tipo <ph id="ph1">&lt;see langword="Double" /&gt;</ph> ou qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contains <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> is returned.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Number<ept id="p1">&lt;/c&gt;</ept> contiver <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> será retornado.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>Return the integer portion of a number.</source>
          <target state="translated">Retorna a parte inteira de um número.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
          <target state="translated">Tanto o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções removem a parte fracionária <ph id="ph3">`Number`</ph> e retornar o valor inteiro resultante.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
          <target state="translated">A diferença entre <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funciona é que, se <ph id="ph3">`Number`</ph> for negativo, <ph id="ph4">`Int`</ph> retorna o primeiro inteiro negativo menor ou igual a <ph id="ph5">`Number`</ph>, enquanto <ph id="ph6">`Fix`</ph> retorna o primeiro inteiro negativo maior ou igual a <ph id="ph7">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`Int`</ph> converte-8,4 para -9, e <ph id="ph2">`Fix`</ph> converte-8,4 para -8.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
          <target state="translated"><ph id="ph1">`Fix(number)`</ph> equivale a <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>This example illustrates how the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions return integer portions of numbers.</source>
          <target state="translated">Este exemplo ilustra como o <ph id="ph1">`Int`</ph> e <ph id="ph2">`Fix`</ph> funções retornam partes inteiras de números.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>In the case of a negative number argument, the <ph id="ph1">`Int`</ph> function returns the first negative integer less than or equal to the number; the <ph id="ph2">`Fix`</ph> function returns the first negative integer greater than or equal to the number.</source>
          <target state="translated">No caso de um argumento de número negativo, o <ph id="ph1">`Int`</ph> função retorna o primeiro inteiro negativo menor ou igual ao número; o <ph id="ph2">`Fix`</ph> função retorna o primeiro inteiro negativo maior ou igual ao número.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>The following example requires you to specify <ph id="ph1">`Option Strict Off`</ph> because implicit conversions from type <ph id="ph2">`Double`</ph> to type <ph id="ph3">`Integer`</ph> are not allowed under <ph id="ph4">`Option Strict On`</ph>:</source>
          <target state="translated">O exemplo a seguir exige que você especifique <ph id="ph1">`Option Strict Off`</ph> porque conversões implícitas de tipo <ph id="ph2">`Double`</ph> digitar <ph id="ph3">`Integer`</ph> não são permitidas em <ph id="ph4">`Option Strict On`</ph>:</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function to explicitly convert other data types to type <ph id="ph2">`Integer`</ph> with <ph id="ph3">`Option Strict Off`</ph>.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função para converter explicitamente outros tipos de dados para o tipo <ph id="ph2">`Integer`</ph> com <ph id="ph3">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>However, <ph id="ph1">`CInt`</ph> rounds to the nearest integer instead of truncating the fractional part of numbers.</source>
          <target state="translated">No entanto, <ph id="ph1">`CInt`</ph> é arredondado para o inteiro mais próximo, em vez de truncar a parte fracionária do número.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>You can use the <ph id="ph1">`CInt`</ph> function on the result of a call to <ph id="ph2">`Fix`</ph> or <ph id="ph3">`Int`</ph> to perform explicit conversion to integer without rounding.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`CInt`</ph> função no resultado de uma chamada para <ph id="ph2">`Fix`</ph> ou <ph id="ph3">`Int`</ph> para executar uma conversão explícita para inteiro sem arredondamento.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>For more information on <ph id="ph1">`CInt`</ph>, see <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`CInt`</ph>, consulte <bpt id="p1">[</bpt>funções de conversão de tipo<ept id="p1">](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>Number is not specified.</source>
          <target state="translated">O número não está especificado.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
          <source>Number is not a numeric type.</source>
          <target state="translated">O número não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Any valid numeric expression or <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression.</source>
          <target state="translated">Qualquer expressão numérica válida ou expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Returns a string representing the octal value of a number.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>If Number is</source>
          <target state="translated">Se o número for</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Oct returns</source>
          <target state="translated">Retornos OCT</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Empty</source>
          <target state="translated">Vazio</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Zero (0)</source>
          <target state="translated">Zero (0)</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Any other number</source>
          <target state="translated">Qualquer outro número</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>Up to 22 octal characters</source>
          <target state="translated">Até 22 caracteres octais</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
          <target state="translated">É possível representar números octais diretamente precedendo números no intervalo adequado com <ph id="ph1">`&amp;O`</ph>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
          <target state="translated">Por exemplo, <ph id="ph1">`&amp;O10`</ph> é a notação octal para 8 decimal.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source>This example uses the <ph id="ph1">`Oct`</ph> function to return the octal value of a number.</source>
          <target state="translated">Este exemplo usa a função <ph id="ph1">`Oct`</ph> para retornar o valor octal de um número.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> containing any valid numeric expression.</source>
          <target state="translated">Um <ph id="ph1">&lt;see langword="Object" /&gt;</ph> contendo qualquer expressão numérica válida.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> representation of a number.</source>
          <target state="translated">Retorna uma representação <ph id="ph1">&lt;see langword="String" /&gt;</ph> de um número.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> representation of a number.</source>
          <target state="translated">Retorna uma representação <ph id="ph1">&lt;see langword="String" /&gt;</ph> de um número.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>When numbers are converted to strings, a leading space is always reserved for the sign of <ph id="ph1">`Number`</ph>.</source>
          <target state="translated">Quando os números são convertidos em cadeias de caracteres, um espaço à esquerda é sempre reservado para o sinal de <ph id="ph1">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>If <ph id="ph1">`Number`</ph> is positive, the returned string contains a leading space, and the plus sign is implied.</source>
          <target state="translated">Se <ph id="ph1">`Number`</ph> for positivo, a cadeia de caracteres retornada contém um espaço à esquerda e o sinal de adição é inferido.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>A negative number will include the minus sign (-) and no leading space.</source>
          <target state="translated">Um número negativo incluirá o sinal de subtração (-) e não há espaço à esquerda.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>Use the <ph id="ph1">`Format`</ph> function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</source>
          <target state="translated">Use o <ph id="ph1">`Format`</ph> function para converter valores numéricos que você deseja formatados como datas, horas ou moeda ou em outros formatos definidos pelo usuário.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>Unlike the <ph id="ph1">`Str`</ph> function, the <ph id="ph2">`Format`</ph> function does not include a leading space for the sign of <ph id="ph3">`Number`</ph>.</source>
          <target state="translated">Ao contrário de <ph id="ph1">`Str`</ph> função, o <ph id="ph2">`Format`</ph> função não inclui um espaço à esquerda para o sinal de <ph id="ph3">`Number`</ph>.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>The <ph id="ph1">`Str`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
          <target state="translated">O <ph id="ph1">`Str`</ph> função reconhece somente o ponto (<ph id="ph2">`.`</ph>) como um separador decimal válido.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>If different decimal separators are used (for example, in international applications), use the <ph id="ph1">`CStr`</ph> or <ph id="ph2">`Format`</ph> functions to convert a number to a string.</source>
          <target state="translated">Se separadores decimais diferentes forem usados (por exemplo, em aplicativos internacionais), use o <ph id="ph1">`CStr`</ph> ou <ph id="ph2">`Format`</ph> funções para converter um número em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>To get the string representation of a number in a particular culture, use the number's <ph id="ph1">`ToString(IFormatProvider)`</ph> method.</source>
          <target state="translated">Para obter a representação de cadeia de caracteres de um número em uma cultura específica, use o número <ph id="ph1">`ToString(IFormatProvider)`</ph> método.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> when converting a value of type <ph id="ph2">`Double`</ph> to a string.</source>
          <target state="translated">Por exemplo, use <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> ao converter um valor do tipo <ph id="ph2">`Double`</ph> para uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>This example uses the <ph id="ph1">`Str`</ph> function to return a <ph id="ph2">`String`</ph> representation of a number.</source>
          <target state="translated">Este exemplo usa o <ph id="ph1">`Str`</ph> função para retornar um <ph id="ph2">`String`</ph> representação de um número.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source>When a positive number is converted to a string, a leading space is always reserved for its sign.</source>
          <target state="translated">Quando um número positivo é convertido em uma cadeia de caracteres, um espaço à esquerda é sempre reservado para o sinal.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não está especificado.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> is not a numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Number" /&gt;</ph> não é um tipo numérico.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Conversion">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, <ph id="ph2">&lt;see langword="Object" /&gt;</ph> variable, or <ph id="ph3">&lt;see langword="Char" /&gt;</ph> value.</source>
          <target state="translated">Qualquer expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> válida, variável <ph id="ph2">&lt;see langword="Object" /&gt;</ph> ou valor <ph id="ph3">&lt;see langword="Char" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, its value must be convertible to <ph id="ph2">&lt;see langword="String" /&gt;</ph> or an <ph id="ph3">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> for do tipo <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, seu valor deverá ser conversível para <ph id="ph2">&lt;see langword="String" /&gt;</ph> ou um erro <ph id="ph3">&lt;see cref="T:System.ArgumentException" /&gt;</ph> ocorrerá.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>The <ph id="ph1">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.</source>
          <target state="translated">O <ph id="ph1">`Val`</ph> função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</source>
          <target state="translated">Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>However, the function recognizes the radix prefixes <ph id="ph1">`&amp;O`</ph> (for octal) and <ph id="ph2">`&amp;H`</ph> (for hexadecimal).</source>
          <target state="translated">No entanto, a função reconhece os prefixos <ph id="ph1">`&amp;O`</ph> (para octal) e <ph id="ph2">`&amp;H`</ph> (para hexadecimal).</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>Blanks, tabs, and linefeed characters are stripped from the argument.</source>
          <target state="translated">Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>The following call returns the value 1615198.</source>
          <target state="translated">A chamada a seguir retorna o valor 1615198.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>The following call returns the decimal value -1.</source>
          <target state="translated">A chamada a seguir retorna o valor decimal -1.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>The <ph id="ph1">`Val`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
          <target state="translated">O <ph id="ph1">`Val`</ph> função reconhece somente o ponto (<ph id="ph2">`.`</ph>) como um separador decimal válido.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>When different decimal separators are used, as in international applications, use <ph id="ph1">`CDbl`</ph> or <ph id="ph2">`CInt`</ph> instead to convert a string to a number.</source>
          <target state="translated">Quando separadores decimais diferentes forem usados, como em aplicativos internacionais, use <ph id="ph1">`CDbl`</ph> ou <ph id="ph2">`CInt`</ph> em vez disso, para converter uma cadeia de caracteres em um número.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id="ph1">`Parse(String, IFormatProvider)`</ph> method.</source>
          <target state="translated">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico <ph id="ph1">`Parse(String, IFormatProvider)`</ph> método.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> when converting a string to a <ph id="ph2">`Double`</ph>.</source>
          <target state="translated">Por exemplo, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> ao converter uma cadeia de caracteres para um <ph id="ph2">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exceção pode ser gerada em resposta a determinados formatos de número incomuns.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>For example, the following code raises this exception.</source>
          <target state="translated">Por exemplo, o código a seguir gera essa exceção.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>The conflict between the number formatted as a <ph id="ph1">`Double`</ph> and the <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Long`</ph> type characters would be caught by the compiler if it were not contained in a string.</source>
          <target state="translated">O conflito entre o número formatado como um <ph id="ph1">`Double`</ph> e <ph id="ph2">`Integer`</ph> e <ph id="ph3">`Long`</ph> caracteres de tipo deve ser capturados pelo compilador se ele não estava contido em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source>The following example uses the <ph id="ph1">`Val`</ph> function to return the numbers contained in each string.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Val`</ph> função para retornar os números contidos em cada cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source><ph id="ph1">`Val`</ph> stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</source>
          <target state="translated"><ph id="ph1">`Val`</ph> Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador de número, pontuação numérica ou espaço em branco.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source><ph id="ph1">&lt;paramref name="InputStr" /&gt;</ph> is too large.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="InputStr" /&gt;</ph> é muito grande.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
          <source><ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> is an <ph id="ph2">&lt;see langword="Object" /&gt;</ph> type expression that is not convertible to <ph id="ph3">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> é uma expressão de tipo <ph id="ph2">&lt;see langword="Object" /&gt;</ph> não conversível para <ph id="ph3">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, <ph id="ph2">&lt;see langword="Object" /&gt;</ph> variable, or <ph id="ph3">&lt;see langword="Char" /&gt;</ph> value.</source>
          <target state="translated">Qualquer expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> válida, variável <ph id="ph2">&lt;see langword="Object" /&gt;</ph> ou valor <ph id="ph3">&lt;see langword="Char" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, its value must be convertible to <ph id="ph2">&lt;see langword="String" /&gt;</ph> or an <ph id="ph3">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> for do tipo <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, seu valor deverá ser conversível para <ph id="ph2">&lt;see langword="String" /&gt;</ph> ou um erro <ph id="ph3">&lt;see cref="T:System.ArgumentException" /&gt;</ph> ocorrerá.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>The <ph id="ph1">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.</source>
          <target state="translated">O <ph id="ph1">`Val`</ph> função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</source>
          <target state="translated">Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>However, the function recognizes the radix prefixes <ph id="ph1">`&amp;O`</ph> (for octal) and <ph id="ph2">`&amp;H`</ph> (for hexadecimal).</source>
          <target state="translated">No entanto, a função reconhece os prefixos <ph id="ph1">`&amp;O`</ph> (para octal) e <ph id="ph2">`&amp;H`</ph> (para hexadecimal).</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>Blanks, tabs, and linefeed characters are removed from the argument.</source>
          <target state="translated">Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>The following call returns the value 1234123.</source>
          <target state="translated">A chamada a seguir retorna o valor 1234123.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>The following call returns the decimal value -1.</source>
          <target state="translated">A chamada a seguir retorna o valor decimal -1.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>The <ph id="ph1">`Val`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
          <target state="translated">O <ph id="ph1">`Val`</ph> função reconhece somente o ponto (<ph id="ph2">`.`</ph>) como um separador decimal válido.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>When other decimal separators are used, as in international applications, use <ph id="ph1">`CDbl`</ph> or <ph id="ph2">`CInt`</ph> instead to convert a string to a number.</source>
          <target state="translated">Quando outros separadores decimais forem usados, como em aplicativos internacionais, use <ph id="ph1">`CDbl`</ph> ou <ph id="ph2">`CInt`</ph> em vez disso, para converter uma cadeia de caracteres em um número.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id="ph1">`Parse(String, IFormatProvider)`</ph> method.</source>
          <target state="translated">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico <ph id="ph1">`Parse(String, IFormatProvider)`</ph> método.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> when converting a string to a <ph id="ph2">`Double`</ph>.</source>
          <target state="translated">Por exemplo, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> ao converter uma cadeia de caracteres para um <ph id="ph2">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exceção pode ser gerada em resposta a determinados formatos de número incomuns.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>For example, the following code raises this exception.</source>
          <target state="translated">Por exemplo, o código a seguir gera essa exceção.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>The conflict between the number formatted as a <ph id="ph1">`Double`</ph> and the <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.</source>
          <target state="translated">O conflito entre o número formatado como um <ph id="ph1">`Double`</ph> e <ph id="ph2">`Integer`</ph> e <ph id="ph3">`Long`</ph> caracteres de tipo deve ser capturados pelo compilador se o conflito não estava contido em cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source>The following example uses the <ph id="ph1">`Val`</ph> function to return the numbers contained in each string.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Val`</ph> função para retornar os números contidos em cada cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source><ph id="ph1">`Val`</ph> stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</source>
          <target state="translated"><ph id="ph1">`Val`</ph> Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador de número, pontuação numérica ou espaço em branco.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source><ph id="ph1">&lt;paramref name="InputStr" /&gt;</ph> is too large.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="InputStr" /&gt;</ph> é muito grande.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
          <source><ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> is an <ph id="ph2">&lt;see langword="Object" /&gt;</ph> type expression that is not convertible to <ph id="ph3">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> é uma expressão de tipo <ph id="ph2">&lt;see langword="Object" /&gt;</ph> não conversível para <ph id="ph3">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>Any valid <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, <ph id="ph2">&lt;see langword="Object" /&gt;</ph> variable, or <ph id="ph3">&lt;see langword="Char" /&gt;</ph> value.</source>
          <target state="translated">Qualquer expressão <ph id="ph1">&lt;see langword="String" /&gt;</ph> válida, variável <ph id="ph2">&lt;see langword="Object" /&gt;</ph> ou valor <ph id="ph3">&lt;see langword="Char" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> is of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, its value must be convertible to <ph id="ph2">&lt;see langword="String" /&gt;</ph> or an <ph id="ph3">&lt;see cref="T:System.ArgumentException" /&gt;</ph> error occurs.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>Expression<ept id="p1">&lt;/c&gt;</ept> for do tipo <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, seu valor deverá ser conversível para <ph id="ph2">&lt;see langword="String" /&gt;</ph> ou um erro <ph id="ph3">&lt;see cref="T:System.ArgumentException" /&gt;</ph> ocorrerá.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
          <target state="translated">Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>The <ph id="ph1">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.</source>
          <target state="translated">O <ph id="ph1">`Val`</ph> função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</source>
          <target state="translated">Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>However, the function recognizes the radix prefixes <ph id="ph1">`&amp;O`</ph> (for octal) and <ph id="ph2">`&amp;H`</ph> (for hexadecimal).</source>
          <target state="translated">No entanto, a função reconhece os prefixos <ph id="ph1">`&amp;O`</ph> (para octal) e <ph id="ph2">`&amp;H`</ph> (para hexadecimal).</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>Blanks, tabs, and linefeed characters are removed from the argument.</source>
          <target state="translated">Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>The following call returns the value 1234123.</source>
          <target state="translated">A chamada a seguir retorna o valor 1234123.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>The following call returns the decimal value -1.</source>
          <target state="translated">A chamada a seguir retorna o valor decimal -1.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>The <ph id="ph1">`Val`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
          <target state="translated">O <ph id="ph1">`Val`</ph> função reconhece somente o ponto (<ph id="ph2">`.`</ph>) como um separador decimal válido.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>When other decimal separators are used, as in international applications, use <ph id="ph1">`CDbl`</ph> or <ph id="ph2">`CInt`</ph> instead to convert a string to a number.</source>
          <target state="translated">Quando outros separadores decimais forem usados, como em aplicativos internacionais, use <ph id="ph1">`CDbl`</ph> ou <ph id="ph2">`CInt`</ph> em vez disso, para converter uma cadeia de caracteres em um número.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id="ph1">`Parse(String, IFormatProvider)`</ph> method.</source>
          <target state="translated">Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico <ph id="ph1">`Parse(String, IFormatProvider)`</ph> método.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> when converting a string to a <ph id="ph2">`Double`</ph>.</source>
          <target state="translated">Por exemplo, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> ao converter uma cadeia de caracteres para um <ph id="ph2">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exceção pode ser gerada em resposta a determinados formatos de número incomuns.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>For example, the following code raises this exception.</source>
          <target state="translated">Por exemplo, o código a seguir gera essa exceção.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>The conflict between the number formatted as a <ph id="ph1">`Double`</ph> and the <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.</source>
          <target state="translated">O conflito entre o número formatado como um <ph id="ph1">`Double`</ph> e <ph id="ph2">`Integer`</ph> e <ph id="ph3">`Long`</ph> caracteres de tipo deve ser capturados pelo compilador se o conflito não estava contido em cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source>The following example uses the <ph id="ph1">`Val`</ph> function to return the numbers contained in each string.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">`Val`</ph> função para retornar os números contidos em cada cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source><ph id="ph1">`Val`</ph> stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</source>
          <target state="translated"><ph id="ph1">`Val`</ph> Interrompe a conversão no primeiro caractere que não pode ser interpretado como um dígito numérico, modificador de número, pontuação numérica ou espaço em branco.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source><ph id="ph1">&lt;paramref name="InputStr" /&gt;</ph> is too large.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="InputStr" /&gt;</ph> é muito grande.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
          <source><ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> is an <ph id="ph2">&lt;see langword="Object" /&gt;</ph> type expression that is not convertible to <ph id="ph3">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Expression" /&gt;</ph> é uma expressão de tipo <ph id="ph2">&lt;see langword="Object" /&gt;</ph> não conversível para <ph id="ph3">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>