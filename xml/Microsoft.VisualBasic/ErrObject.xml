<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f312b550577624a19fa4dfc0a6b7ed43dd75c147" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53232425" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>O módulo <see langword="ErrObject" /> contém propriedades e procedimentos usados para identificar e manipular erros no tempo de execução usando o objeto <see langword="Err" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `ErrObject` módulo oferece suporte a `Err` objeto. Para obter mais informações, consulte <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 Este exemplo usa as propriedades do `Err` objeto na construção de uma caixa de diálogo de mensagem de erro. Observe o que acontece quando você usa o `Clear` método primeiro: Quando você gera um erro do Visual Basic com o `Raise` método, valores padrão do Visual Basic tornam-se as propriedades do `Err` objeto.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrução On Error (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Instrução Try...Catch...Finally (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palavras-chave (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membros de biblioteca de tempo de execução do Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Limpa todas as configurações de propriedade do objeto <see langword="Err" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use `Clear` limpar explicitamente a `Err` objeto depois que um erro foi tratado, como quando você usa adiado tratamento de erros com `On Error Resume Next`. O `Clear` método é chamado automaticamente sempre que qualquer uma das instruções a seguir executa:  
  
-   Qualquer tipo de `Resume` instrução  
  
-   `Exit Sub`, `Exit Function` ou `Exit Property`  
  
-   Qualquer `On Error` instrução  
  
-   Qualquer `Try...Catch...Finally` instrução  
  
    > [!NOTE]
    >  O `On Error Resume Next` construção pode ser preferível `On Error GoTo` ao tratar erros gerados durante o acesso a outros objetos. Verificando `Err` após cada interação com um objeto remove a ambiguidade sobre qual objeto foi acessado pelo código: Você pode ter certeza qual objeto colocado o código de erro `Err.Number`, bem como qual objeto originalmente gerou o erro (o objeto especificado no `Err.Source`).  
  
   
  
## Examples  
 Este exemplo usa o `Err` do objeto `Clear` método para redefinir as propriedades numéricas do `Err` objeto zero e suas propriedades de cadeia de caracteres em cadeias de caracteres de comprimento zero. Sem a chamada para `Clear`, a segunda chamada para `MsgBox` exibiria a mesma mensagem de erro.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrução On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna ou define uma expressão <see langword="String" /> que contém uma cadeia de caracteres descritiva associada a um erro. Leitura/gravação.</summary>
        <value>Retorna ou define uma expressão <see langword="String" /> que contém uma cadeia de caracteres descritiva associada a um erro. Leitura/gravação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Description` configuração da propriedade consiste em uma breve descrição do erro. Use essa propriedade para alertar o usuário a um erro que você não pode ou não deseja manipular. Ao gerar um erro definido pelo usuário, atribuir uma breve descrição do erro para o `Description` propriedade. Se o `Description` propriedade não está preenchida e o valor da <xref:Microsoft.VisualBasic.ErrObject.Number%2A> propriedade corresponde a um erro de tempo de execução do Visual Basic e, em seguida, a cadeia de caracteres retornada pela <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> função é definida no `Description` propriedade quando o erro é gerado.  
  
   
  
## Examples  
 Este exemplo atribui uma mensagem definida pelo usuário para o `Description` propriedade do `Err` objeto.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna um inteiro que indica o número de linha da última instrução executada. Somente leitura.</summary>
        <value>Retorna um inteiro que indica o número de linha da última instrução executada. Somente leitura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o Visual Basic encontrar sem números de linha, ele retorna 0.  
  
   
  
## Examples  
 Este exemplo usa o `Erl` propriedade para indicar o número de linha.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a exceção que representa o erro ocorrido.</summary>
        <returns>Retorna a exceção que representa o erro ocorrido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `GetException` função está disponível somente a partir de `Err` classe de objeto. Ele funciona com o `Exception` propriedade do `Err` objeto para exibir o erro que ocorreu.  
  
   
  
## Examples  
 O código a seguir exibe a mensagem atribuída à exceção no `Err` objeto:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna ou define um <see langword="Integer" /> que contém a ID de contexto para um tópico em um arquivo de Ajuda. Leitura/gravação.</summary>
        <value>Retorna ou define um <see langword="Integer" /> que contém a ID de contexto para um tópico em um arquivo de Ajuda. Leitura/gravação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `HelpContext` propriedade é usada para exibir a Ajuda contextual para um aplicativo. Se um arquivo de Ajuda é especificado na `HelpFile`, o `HelpContext` propriedade é usada para exibir automaticamente o arquivo de Ajuda identificado. Se ambos o `HelpFile` e `HelpContext` propriedades estão vazias, o valor da <xref:Microsoft.VisualBasic.ErrObject.Number%2A> propriedade é verificada. Se o valor da `Number` propriedade corresponde a um valor de erro de tempo de execução do Visual Basic e, em seguida, a ID de contexto de Ajuda do Visual Basic para o erro é usada. Se o valor da `Number` propriedade não corresponde a um erro do Visual Basic, a tela de conteúdo para o arquivo de Ajuda do Visual Basic é exibida.  
  
> [!NOTE]
>  Você deve escrever rotinas em seu aplicativo para manipular erros típicos. Ao programar com um objeto, você pode usar o arquivo de Ajuda do objeto para melhorar a qualidade do seu tratamento de erros ou para exibir uma mensagem significativa para o usuário se o erro não é recuperável.  
  
   
  
## Examples  
 Este exemplo usa o `HelpContext` propriedade do `Err` objeto para mostrar o tópico da Ajuda do Visual Basic a `Overflow` erro.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna ou define uma expressão <see langword="String" /> que contém o caminho totalmente qualificado para um arquivo de Ajuda. Leitura/gravação.</summary>
        <value>Retorna ou define uma expressão <see langword="String" /> que contém o caminho totalmente qualificado para um arquivo de Ajuda. Leitura/gravação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se um arquivo de Ajuda é especificado pelo `HelpFile` propriedade, ele é chamado automaticamente quando o usuário pressiona a tecla de Ajuda (ou a tecla F1) na caixa de diálogo de mensagem de erro. Se o `HelpContext` propriedade contém um contexto válido de ID para o arquivo especificado, esse tópico é exibido automaticamente. Se nenhum `HelpFile` for especificado, o arquivo de Ajuda do Visual Basic é exibido.  
  
> [!NOTE]
>  Você deve escrever rotinas em seu aplicativo para manipular erros típicos. Ao programar com um objeto, você pode usar o arquivo de Ajuda do objeto para melhorar a qualidade do seu tratamento de erros ou para exibir uma mensagem significativa para o usuário se o erro não é recuperável.  
  
   
  
## Examples  
 Este exemplo usa o `HelpFile` propriedade do `Err` objeto para iniciar o sistema de Ajuda. Por padrão, o `HelpFile` propriedade contém o nome do arquivo de Ajuda do Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna um código de erro do sistema produzido por uma chamada a uma DLL (biblioteca de vínculo dinâmico). Somente leitura.</summary>
        <value>Retorna um código de erro do sistema produzido por uma chamada a uma DLL (biblioteca de vínculo dinâmico). Somente leitura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriedade se aplica somente a chamadas DLL feitas no código do Visual Basic. Quando essa chamada é feita, a função de chamada normalmente retorna um código indicando êxito ou falha e o <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriedade é preenchida. Verifique a documentação para as funções da DLL determinar os valores de retorno que indicam o êxito ou falha. Sempre que o código de falha é retornado, o aplicativo Visual Basic deve verificar imediatamente a <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriedade. Nenhuma exceção é gerada quando o <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriedade está definida.  
  
> [!NOTE]
>  O <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriedade é protegida por <xref:System.Security.Permissions.SecurityAction.LinkDemand>, que ajuda a impedir que ele está sendo acessado pelo código não confiável. No entanto, <xref:System.Security.Permissions.SecurityAction.LinkDemand> requer somente o chamador imediato tenha <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> permissão. Se seu código pode ser chamado do código parcialmente confiável, expor o valor de <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> sem validação é um risco à segurança.  
>   
>  Para limitações importantes sobre como usar o <xref:System.Security.Permissions.SecurityAction.LinkDemand> membro, consulte [demandam vs. LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Para obter mais informações sobre permissões, consulte <xref:System.Security.Permissions.SecurityPermission> e [permissões de acesso do código](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Observe, para dispositivos inteligentes, que essa propriedade sempre retorna zero.  
  
   
  
## Examples  
 O exemplo a seguir mostra como você pode usar o `LastDllError` propriedade depois de chamar uma função na API do Windows. O `PrintWindowCoordinates` procedimento leva um identificador para uma janela e chama o `GetWindowRect` função. `GetWindowRect` preenche a estrutura de dados com os comprimentos dos lados do retângulo que compõem a janela. Se você passar um identificador inválido, ocorrerá um erro e o número do erro está disponível por meio de `LastDllError` propriedade.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna ou define um valor numérico que especifica um erro. Leitura/gravação.</summary>
        <value>Retorna ou define um valor numérico que especifica um erro. Leitura/gravação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos os `Raise` argumentos exceto `Number` são opcionais. Se você omitir argumentos opcionais e as configurações de propriedade do `Err` objeto contêm valores que não foram limpos, esses valores servem como os valores para o seu erro.  
  
 Porque o `Err` objeto fornece informações mais sofisticadas que quando você gera erros com o `Error` instrução, `Raise` é útil para gerar erros ao gravar módulos de classe. Por exemplo, com o `Raise` método, o código-fonte que gerou o erro pode ser especificado no `Source` propriedade, a Ajuda online para o erro pode ser referenciada e assim por diante.  
  
 Ao retornar um erro definido pelo usuário de um objeto, defina `Err.Number` adicionando o número selecionado como um código de erro para o `VbObjectError` constante. Por exemplo, você deve usar o código a seguir para retornar o número 1051 como um código de erro:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Este exemplo ilustra um uso típico de `Number` propriedade em uma rotina de tratamento de erros.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 Este exemplo usa o `Err` do objeto `Raise` método para gerar um erro original dentro de uma função escrita em Visual Basic. A função de chamada pode capturar o erro e relatá-lo para o usuário. Observe que o procedimento `CallingProcedure` contrasta o tipo de informação que você pode derivar de uma `Err` objeto com as informações que você pode derivar de uma `Exception` objeto.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> é maior que 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Necessário. <see langword="Long" /> inteiro que identifica a natureza do erro. Os erros do Visual Basic estão no intervalo 0-65535; o intervalo 0-512 é reservado para erros do sistema; o intervalo 513-65535 está disponível para erros definidos pelo usuário. Ao definir a propriedade <see langword="Number" /> com seu próprio código de erro em um módulo de classe, você adiciona seu número de código de erro à constante <see langword="vbObjectError" />. Por exemplo, para gerar o erro número 513, atribua <c>vbObjectError + 513</c> à propriedade <see langword="Number" />.</param>
        <param name="Source">Opcional. <see langword="String" /> expressão que nomeia o objeto ou aplicativo que gerou o erro. Ao configurar essa propriedade para um objeto, use o formato <c>projeto</c>.<c>classe</c>. Se <paramref name="Source" /> não for especificado, a ID do processo do projeto atual do Visual Basic será usada.</param>
        <param name="Description">Opcional. <see langword="String" /> expressão que descreve o erro. Se não for especificado, o valor na propriedade <see langword="Number" /> será examinado. Se ele pode ser mapeado para um código de erro em tempo de execução do Visual Basic, a cadeia de caracteres que seria retornada pela função <see langword="Error" /> é usada como a propriedade <see langword="Description" />. Se não houver nenhum erro do Visual Basic correspondente à propriedade <see langword="Number" />, a mensagem "Erro definido pelo aplicativo ou definido pelo objeto" será usada.</param>
        <param name="HelpFile">Opcional. O caminho totalmente qualificado para o arquivo de Ajuda no qual se pode encontrar ajuda sobre este erro. Se não for especificado, o Visual Basic usará a unidade totalmente qualificada, o caminho e o nome do arquivo de Ajuda do Visual Basic.</param>
        <param name="HelpContext">Opcional. A ID de contexto que identifica um tópico no <paramref name="HelpFile" /> que fornece ajuda para o erro. Se omitida, a ID de contexto do arquivo de Ajuda do Visual Basic para o erro correspondente à propriedade <see langword="Number" /> será usada, se ela existir.</param>
        <summary>Gera um erro em tempo de execução; pode ser usado em vez da instrução <see langword="Error" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos os `Raise` argumentos exceto `Number` são opcionais. Se você omitir argumentos opcionais e as configurações de propriedade do `Err` objeto contêm valores que não foram limpos, esses valores servem como os valores para o seu erro.  
  
 Porque o `Err` objeto fornece informações mais sofisticadas que quando você gera erros com o `Error` instrução, `Raise` é útil para gerar erros ao gravar módulos de classe. Por exemplo, com o `Raise` método, o código-fonte que gerou o erro pode ser especificado no `Source` propriedade, a Ajuda online para o erro pode ser referenciada e assim por diante.  
  
   
  
## Examples  
 Este exemplo usa o `Err` do objeto `Raise` método para gerar um erro dentro de uma função escrita em Visual Basic. A função de chamada pode capturar o erro e relatá-lo para o usuário com uma caixa de mensagem.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Instrução Error</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrução On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna ou define uma expressão <see langword="String" /> que especifica o nome do objeto ou aplicativo gerou o erro originalmente. Leitura/gravação.</summary>
        <value>Retorna ou define uma expressão <see langword="String" /> que especifica o nome do objeto ou aplicativo gerou o erro originalmente. Leitura/gravação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Source` propriedade especifica um `String` expressão que representa o objeto que gerou o erro; a expressão é normalmente o nome de classe do objeto ou a ID de processo. Use o `Source` propriedade para fornecer informações ao seu código é incapaz de lidar com um erro gerado em um objeto acessado. Por exemplo, se você acessar o Microsoft Excel e gera uma `Division by zero` erro, o Microsoft Excel define `Err.Number` para seu código de erro para esse erro e os conjuntos de `Source` para "Application".  
  
 Quando o aplicativo está gerando um erro de código, `Source` é a ID através de programação. do seu aplicativo Dentro de uma classe `Source` deve conter um nome com a forma *project*. *classe*. Quando ocorre um erro inesperado no seu código, o `Source` propriedade é preenchida automaticamente. Para erros em um módulo, `Source` contém o nome do projeto.  
  
   
  
## Examples  
 Este exemplo demonstra o uso do `Source` propriedade em uma rotina de tratamento de erro típica. Quando um erro é gerado de `Class1`, a cadeia de caracteres `"Class1"` é atribuído ao `Source` propriedade do `Err` objeto. Essa cadeia de caracteres, em seguida, é exibida em uma mensagem informativa que indica a origem e o número do erro.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrução On Error (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>