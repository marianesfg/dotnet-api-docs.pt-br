<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="757b138ad08a57ad8a16b1f7210ead2e45005193" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36728090" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c21ef-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c21ef-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="c21ef-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c21ef-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="c21ef-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c21ef-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-104">Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que acessam arquivos e pastas.</span><span class="sxs-lookup"><span data-stu-id="c21ef-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-105">Este exemplo usa o `GetAttr` função para determinar os atributos de um arquivo e diretório ou pasta.</span><span class="sxs-lookup"><span data-stu-id="c21ef-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="c21ef-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-106">Required.</span>
          </span>
          <span data-ttu-id="c21ef-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="c21ef-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="c21ef-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="c21ef-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-113">O `ChDir` função altera o diretório padrão, mas não a unidade padrão.</span><span class="sxs-lookup"><span data-stu-id="c21ef-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="c21ef-114">Por exemplo, se a unidade padrão é C, a instrução a seguir altera o diretório padrão na unidade D, mas C permanece a unidade padrão:</span><span class="sxs-lookup"><span data-stu-id="c21ef-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="c21ef-115">Você pode tornar relativo alterações de diretório é, digitando dois pontos, da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-116">O `ChDir` função requer permissão de código não gerenciado, o que pode afetar sua execução em situações de confiança parcial.</span><span class="sxs-lookup"><span data-stu-id="c21ef-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c21ef-117">Para obter mais informações, consulte <xref:System.Security.Permissions.SecurityPermission> e.</span><span class="sxs-lookup"><span data-stu-id="c21ef-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-118">Este exemplo usa o `ChDir` função para alterar o diretório atual ou a pasta.</span><span class="sxs-lookup"><span data-stu-id="c21ef-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="c21ef-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-122">Required.</span>
          </span>
          <span data-ttu-id="c21ef-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="c21ef-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="c21ef-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-127">O `ChDrive` função requer permissão de código não gerenciado, o que pode afetar sua execução em situações de confiança parcial.</span><span class="sxs-lookup"><span data-stu-id="c21ef-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c21ef-128">Para obter mais informações, consulte <xref:System.Security.Permissions.SecurityPermission> e [permissões de acesso do código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c21ef-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-129">Este exemplo usa o `ChDrive` função para alterar a unidade atual.</span><span class="sxs-lookup"><span data-stu-id="c21ef-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="c21ef-130">A função gera uma exceção se a unidade não existe.</span><span class="sxs-lookup"><span data-stu-id="c21ef-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="c21ef-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-132">Required.</span>
          </span>
          <span data-ttu-id="c21ef-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="c21ef-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="c21ef-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-137">O `ChDrive` função requer permissão de código não gerenciado, o que pode afetar sua execução em situações de confiança parcial.</span><span class="sxs-lookup"><span data-stu-id="c21ef-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c21ef-138">Para obter mais informações, consulte <xref:System.Security.Permissions.SecurityPermission> e [permissões de acesso do código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c21ef-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-139">Este exemplo usa o `ChDrive` função para alterar a unidade atual.</span><span class="sxs-lookup"><span data-stu-id="c21ef-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="c21ef-140">A função gera uma exceção se a unidade não existe.</span><span class="sxs-lookup"><span data-stu-id="c21ef-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="c21ef-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="c21ef-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="c21ef-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="c21ef-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c21ef-149">Este exemplo usa o `CurDir` função para retornar o caminho atual.</span><span class="sxs-lookup"><span data-stu-id="c21ef-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="c21ef-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-150">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="c21ef-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="c21ef-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="c21ef-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c21ef-157">Este exemplo usa o `CurDir` função para retornar o caminho atual.</span><span class="sxs-lookup"><span data-stu-id="c21ef-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="c21ef-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="c21ef-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-165">O `Dir` função oferece suporte ao uso de vários caracteres (`*`) e de caractere único (`?`) curingas para especificar vários arquivos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c21ef-166">`VbVolume` Retorna o rótulo do volume para a unidade em vez de um nome de arquivo específico.</span><span class="sxs-lookup"><span data-stu-id="c21ef-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="c21ef-167">Você deve fornecer um `PathName` na primeira vez que você chamar o `Dir` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="c21ef-168">Para recuperar o próximo item, você pode fazer chamadas subsequentes para o `Dir` função sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-169">Para executar corretamente, o `Dir` função requer o <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> sinalizadores de <xref:System.Security.Permissions.FileIOPermission> para ser concedida ao código em execução.</span><span class="sxs-lookup"><span data-stu-id="c21ef-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c21ef-170">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [permissões de acesso do código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c21ef-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="c21ef-171">O `Attributes` valores de enumeração de argumento são da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c21ef-172">Valor</span><span class="sxs-lookup"><span data-stu-id="c21ef-172">Value</span></span>|<span data-ttu-id="c21ef-173">Constante</span><span class="sxs-lookup"><span data-stu-id="c21ef-173">Constant</span></span>|<span data-ttu-id="c21ef-174">Descrição</span><span class="sxs-lookup"><span data-stu-id="c21ef-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="c21ef-175">Padrão.</span><span class="sxs-lookup"><span data-stu-id="c21ef-175">Default.</span></span> <span data-ttu-id="c21ef-176">Especifica arquivos sem atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c21ef-177">Especifica arquivos somente leitura e também arquivos sem atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c21ef-178">Especifica arquivos ocultos e também arquivos sem atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c21ef-179">Especifica os arquivos do sistema e arquivos sem atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c21ef-180">Especifica o rótulo do volume; Se qualquer outro atributo for especificado, `vbVolume` será ignorado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c21ef-181">Especifica diretórios ou pastas e arquivos sem atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c21ef-182">O arquivo foi alterado desde o último backup.</span><span class="sxs-lookup"><span data-stu-id="c21ef-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c21ef-183">O arquivo tem um nome diferente.</span><span class="sxs-lookup"><span data-stu-id="c21ef-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-184">Essas enumerações são especificadas pela linguagem Visual Basic e podem ser usadas em qualquer lugar no seu código em vez dos valores reais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-185">Este exemplo usa o `Dir` para verificar se existem determinados arquivos e diretórios.</span><span class="sxs-lookup"><span data-stu-id="c21ef-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="c21ef-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-186">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="c21ef-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="c21ef-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-189">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="c21ef-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="c21ef-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-196">O `Dir` função oferece suporte ao uso de vários caracteres (`*`) e de caractere único (`?`) curingas para especificar vários arquivos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c21ef-197">`VbVolume` Retorna o rótulo do volume para a unidade em vez de um nome de arquivo específico.</span><span class="sxs-lookup"><span data-stu-id="c21ef-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="c21ef-198">Você deve fornecer um `PathName` na primeira vez que você chamar o `Dir` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="c21ef-199">Para recuperar o próximo item, você pode fazer chamadas subsequentes para o `Dir` função sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-200">Para executar corretamente, o `Dir` função requer o <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> sinalizadores de <xref:System.Security.Permissions.FileIOPermission> para ser concedida ao código em execução.</span><span class="sxs-lookup"><span data-stu-id="c21ef-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c21ef-201">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [permissões de acesso do código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c21ef-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="c21ef-202">O `Attributes` valores de enumeração de argumento são da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c21ef-203">Valor</span><span class="sxs-lookup"><span data-stu-id="c21ef-203">Value</span></span>|<span data-ttu-id="c21ef-204">Constante</span><span class="sxs-lookup"><span data-stu-id="c21ef-204">Constant</span></span>|<span data-ttu-id="c21ef-205">Descrição</span><span class="sxs-lookup"><span data-stu-id="c21ef-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="c21ef-206">Padrão.</span><span class="sxs-lookup"><span data-stu-id="c21ef-206">Default.</span></span> <span data-ttu-id="c21ef-207">Especifica os arquivos que não apresentam atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c21ef-208">Especifica arquivos somente leitura, além de arquivos que não apresentam atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c21ef-209">Especifica arquivos ocultos, além de arquivos que não apresentam atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c21ef-210">Especifica os arquivos do sistema, além de arquivos que não apresentam atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c21ef-211">Especifica o rótulo do volume; Se qualquer outro atributo for especificado, `vbVolume` será ignorado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c21ef-212">Especifica diretórios ou pastas, além de arquivos que não apresentam atributos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c21ef-213">O arquivo foi alterado desde o último backup.</span><span class="sxs-lookup"><span data-stu-id="c21ef-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c21ef-214">O arquivo tem um nome diferente.</span><span class="sxs-lookup"><span data-stu-id="c21ef-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-215">Essas enumerações são especificadas pela linguagem Visual Basic e podem ser usadas em qualquer lugar no seu código no lugar dos valores reais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-216">Este exemplo usa o `Dir` para verificar se existem determinados arquivos e diretórios.</span><span class="sxs-lookup"><span data-stu-id="c21ef-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-217">Required.</span>
          </span>
          <span data-ttu-id="c21ef-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-221">Use `EOF` para evitar o erro gerado pela tentativa de obter entrada passou do final de um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="c21ef-222">O `EOF` função retorna `False` até o final do arquivo foi atingido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="c21ef-223">Com arquivos abertos para `Random` ou `Binary` acesso, `EOF` retorna `False` até que a última execução `FileGet` função é não é possível ler um registro inteiro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="c21ef-224">Com arquivos abertos para `Binary` acesso, a tentativa de ler o arquivo usando o `Input` funcionar até `EOF` retorna `True` gera um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="c21ef-225">Use o `LOF` e `Loc` funções, em vez de `EOF` ao ler arquivos binários com `Input`, ou use `Get` ao usar o `EOF` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="c21ef-226">Com arquivos abertos para `Output`, `EOF` sempre retorna `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-227">Este exemplo usa o `EOF` função para detectar o final de um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="c21ef-228">Este exemplo supõe que `Testfile` é um arquivo de texto que contém várias linhas de texto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-230">Required.</span>
          </span>
          <span data-ttu-id="c21ef-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="c21ef-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-237">Essa função retorna uma enumeração que representa o modo de arquivo para arquivos abertos usando o `FileOpen` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-238">Este exemplo usa o `FileAttr` função para retornar o modo de arquivo de um arquivo aberto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="c21ef-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-239">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="c21ef-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-244">O `FileClose` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-245">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-246">Para obter mais informações, consulte [como: ler texto de arquivos com um StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[como: gravar texto em arquivos com um StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), e [passo a passo: Manipulando arquivos e diretórios Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="c21ef-247">Se você omitir `FileNumbers`, todos os arquivos ativos abertos pelo `FileOpen` função estão fechados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="c21ef-248">Quando você fechar arquivos que foram abertos para `Output` ou `Append`, o buffer final da saída é gravado no buffer de sistema operacional para esse arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="c21ef-249">Todos os buffers espaço associado fechado arquivo seja liberado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="c21ef-250">Quando o `FileClose` função é executada, a associação de um arquivo com o arquivo de número termina.</span><span class="sxs-lookup"><span data-stu-id="c21ef-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-251">Este exemplo usa o `FileClose` função para fechar um arquivo aberto para `Input`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="c21ef-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-253">Required.</span>
          </span>
          <span data-ttu-id="c21ef-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="c21ef-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="c21ef-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-256">Required.</span>
          </span>
          <span data-ttu-id="c21ef-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="c21ef-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-259">Copies a file.</span>
          </span>
          <span data-ttu-id="c21ef-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="c21ef-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-262">Se você tentar usar o `FileCopy` de função em um arquivo aberto, ocorrerá um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="c21ef-263">`FileCopy` requer confiança total para trabalhar na unidade local.</span><span class="sxs-lookup"><span data-stu-id="c21ef-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-264">Este exemplo usa o `FileCopy` função para copiar um arquivo para outro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="c21ef-265">Para fins deste exemplo, suponha que `SrcFile` é um arquivo que contém dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="c21ef-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-269">Required.</span>
          </span>
          <span data-ttu-id="c21ef-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="c21ef-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="c21ef-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="c21ef-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c21ef-276">Este exemplo usa o `FileDateTime` função para determinar a data e a hora de um arquivo foi criada ou modificado pela última vez.</span><span class="sxs-lookup"><span data-stu-id="c21ef-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="c21ef-277">O formato de data e hora exibido é baseado nas configurações de localidade do sistema.</span><span class="sxs-lookup"><span data-stu-id="c21ef-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-283">Required.</span>
          </span>
          <span data-ttu-id="c21ef-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-285">Required.</span>
          </span>
          <span data-ttu-id="c21ef-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-287">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-292">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-293">Dados lidos com `FileGet` geralmente são gravados em um arquivo com `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-294">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-295">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-296">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-297">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-298">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-298">Random Mode</span></span>  
 <span data-ttu-id="c21ef-299">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-300">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-301">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-302">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-303">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-304">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-305">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-306">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-307">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-308">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-309">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-310">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-311">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-312">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-313">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-314">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-315">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-316">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-317">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-318">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-319">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-320">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-321">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-322">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-323">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-324">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-325">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-326">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-326">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-327">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-328">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-329">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-330">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-331">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-332">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-333">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-334">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-335">Leitura de um arquivo usando o`FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-338">Required.</span>
          </span>
          <span data-ttu-id="c21ef-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-340">Required.</span>
          </span>
          <span data-ttu-id="c21ef-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-342">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-347">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-348">Dados lidos com `FileGet` geralmente são gravados em um arquivo com `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-349">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-350">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-351">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-352">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-353">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-353">Random Mode</span></span>  
 <span data-ttu-id="c21ef-354">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-355">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-356">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-357">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-358">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-359">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-360">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-361">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-362">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-363">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-364">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-365">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-366">Se o descritor não for usado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-366">If the descriptor is not used.</span></span> <span data-ttu-id="c21ef-367">Em seguida, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-368">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-369">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-370">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-371">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-372">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-373">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-374">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-375">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-376">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-377">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-378">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-379">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-380">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-381">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-382">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-382">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-383">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-384">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-385">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-386">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-387">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-388">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-389">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-390">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-391">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-394">Required.</span>
          </span>
          <span data-ttu-id="c21ef-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-396">Required.</span>
          </span>
          <span data-ttu-id="c21ef-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-398">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-403">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-404">Dados lidos com `FileGet` geralmente são gravados em um arquivo com `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-405">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-406">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-407">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-408">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-409">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-409">Random Mode</span></span>  
 <span data-ttu-id="c21ef-410">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-411">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-412">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-413">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-414">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-415">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-416">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-417">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-418">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-419">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-420">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-421">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-422">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-423">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-424">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-425">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-426">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-427">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-428">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-429">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-430">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-431">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-432">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-433">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-434">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-435">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-436">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-437">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-437">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-438">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-439">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-440">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-441">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-442">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-443">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-444">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-445">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-446">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-449">Required.</span>
          </span>
          <span data-ttu-id="c21ef-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-451">Required.</span>
          </span>
          <span data-ttu-id="c21ef-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-453">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-458">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-459">Dados lidos com `FileGet` geralmente são gravados em um arquivo com `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-460">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-461">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-462">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-463">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-464">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-464">Random Mode</span></span>  
 <span data-ttu-id="c21ef-465">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-466">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função`FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-467">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-468">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-469">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-470">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-471">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-472">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-473">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-474">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-475">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-476">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-477">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-478">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-479">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-480">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-481">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-482">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-483">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-484">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-485">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-486">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-487">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-488">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-489">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-490">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-491">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-492">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-492">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-493">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-494">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-495">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-496">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-497">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-498">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-499">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-500">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-501">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-504">Required.</span>
          </span>
          <span data-ttu-id="c21ef-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-506">Required.</span>
          </span>
          <span data-ttu-id="c21ef-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-508">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-513">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-514">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-515">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-516">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-517">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-518">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-519">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-519">Random Mode</span></span>  
 <span data-ttu-id="c21ef-520">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-521">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-522">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-523">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-524">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-525">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-526">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-527">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-528">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-529">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-530">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-531">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-532">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-533">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-534">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-535">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-536">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-537">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-538">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-539">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-540">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-541">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-542">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-543">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-544">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-545">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-546">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-547">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-547">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-548">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-549">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-550">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-551">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-552">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-553">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-554">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-555">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-556">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-559">Required.</span>
          </span>
          <span data-ttu-id="c21ef-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-561">Required.</span>
          </span>
          <span data-ttu-id="c21ef-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-563">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-568">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-569">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-570">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-571">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-572">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-573">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-574">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-574">Random Mode</span></span>  
 <span data-ttu-id="c21ef-575">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-576">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-577">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-578">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-579">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-580">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-581">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-582">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-583">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-584">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-585">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-586">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-587">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-588">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-589">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-590">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-591">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-592">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-593">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-594">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-595">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-596">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-597">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-598">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-599">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-600">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-601">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-602">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-602">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-603">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-604">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-605">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-606">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-607">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-608">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-609">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-610">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-611">Leitura de um arquivo usando o`FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-614">Required.</span>
          </span>
          <span data-ttu-id="c21ef-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-616">Required.</span>
          </span>
          <span data-ttu-id="c21ef-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-618">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-623">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-624">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-625">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-626">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-627">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-628">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-629">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-629">Random Mode</span></span>  
 <span data-ttu-id="c21ef-630">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-631">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-632">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-633">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-634">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-635">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-636">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-637">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-638">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-639">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-640">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-641">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-642">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-643">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-644">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-645">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-646">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-647">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-648">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-649">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-650">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-651">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-652">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-653">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-654">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-655">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-656">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-657">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-657">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-658">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-659">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-660">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-661">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-662">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-663">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-664">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-665">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-666">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-669">Required.</span>
          </span>
          <span data-ttu-id="c21ef-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-671">Required.</span>
          </span>
          <span data-ttu-id="c21ef-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-673">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-678">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-679">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-680">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-681">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-682">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-683">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-684">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-684">Random Mode</span></span>  
 <span data-ttu-id="c21ef-685">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-686">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-687">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-688">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-689">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-690">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-691">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-692">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-693">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-694">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-695">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-696">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-697">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-698">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-699">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-700">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-701">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-702">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-703">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-704">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-705">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-706">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-707">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-708">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-709">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-710">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-711">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-712">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-712">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-713">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-714">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-715">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-716">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-717">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-718">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-719">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-720">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-721">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-724">Required.</span>
          </span>
          <span data-ttu-id="c21ef-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-726">Required.</span>
          </span>
          <span data-ttu-id="c21ef-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-728">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-733">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-734">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-735">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-736">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-737">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-738">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-739">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-739">Random Mode</span></span>  
 <span data-ttu-id="c21ef-740">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-741">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-742">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-743">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-744">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-745">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-746">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-747">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-748">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-749">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-750">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-751">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-752">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-753">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-754">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-755">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-756">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-757">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-758">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-759">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-760">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-761">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-762">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-763">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-764">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-765">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-766">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-767">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-767">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-768">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-769">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-770">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-771">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-772">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-773">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-774">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-775">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-776">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-779">Required.</span>
          </span>
          <span data-ttu-id="c21ef-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-781">Required.</span>
          </span>
          <span data-ttu-id="c21ef-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-783">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-788">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-789">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-790">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-791">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-792">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-793">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-794">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-794">Random Mode</span></span>  
 <span data-ttu-id="c21ef-795">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-796">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-797">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-798">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-799">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-800">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-801">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-802">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-803">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-804">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-805">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-806">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-807">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-808">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-809">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-810">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-811">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-812">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-813">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-814">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-815">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-816">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-817">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-818">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-819">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-820">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-821">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-822">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-822">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-823">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-824">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-825">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-826">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-827">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-828">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-829">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-830">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-831">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-834">Required.</span>
          </span>
          <span data-ttu-id="c21ef-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-836">Required.</span>
          </span>
          <span data-ttu-id="c21ef-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-838">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-843">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-844">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-845">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-846">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-847">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-848">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-849">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-849">Random Mode</span></span>  
 <span data-ttu-id="c21ef-850">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-851">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-852">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-853">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-854">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-855">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-856">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-857">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-858">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-859">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-860">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-861">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-862">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-863">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-864">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-865">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-866">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-867">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-868">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-869">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-870">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-871">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-872">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-873">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-874">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-875">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-876">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-877">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-877">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-878">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-879">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-880">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-881">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-882">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-883">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-884">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-885">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-886">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-889">Required.</span>
          </span>
          <span data-ttu-id="c21ef-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-891">Required.</span>
          </span>
          <span data-ttu-id="c21ef-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-893">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="c21ef-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-895">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="c21ef-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="c21ef-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-902">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-903">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-904">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-905">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-906">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-907">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-908">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-908">Random Mode</span></span>  
 <span data-ttu-id="c21ef-909">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-910">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-911">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-912">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-913">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-914">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-915">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-916">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-917">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-918">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-919">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-920">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-921">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-922">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-923">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-924">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-925">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-926">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-927">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-928">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-929">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-930">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-931">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-932">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-933">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-934">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-935">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-936">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-936">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-937">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-938">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-939">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-940">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-941">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-942">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-943">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-944">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-945">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-948">Required.</span>
          </span>
          <span data-ttu-id="c21ef-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-950">Required.</span>
          </span>
          <span data-ttu-id="c21ef-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-952">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="c21ef-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-954">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="c21ef-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="c21ef-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-957">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="c21ef-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="c21ef-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="c21ef-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-964">`FileGet` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-965">Dados lidos com `FileGet` costumam ser gravados em um arquivo usando-se `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c21ef-966">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-967">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` função (ou apontada pelo último `Seek` função) é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-968">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-969">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-970">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-970">Random Mode</span></span>  
 <span data-ttu-id="c21ef-971">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-972">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGet` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-973">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-974">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-975">Por padrão, se a variável que está sendo lida for uma cadeia de caracteres `FileGet` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-976">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-977">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo; Quando colocado em um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-978">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-979">Se a variável que está sendo lida for uma matriz, você pode optar por ler um descritor para o tamanho e a dimensão da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c21ef-980">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-981">Ao ler a matriz, você precisa coincidir com a forma que de matriz foi escrita.</span><span class="sxs-lookup"><span data-stu-id="c21ef-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c21ef-982">Se ele foi gravado com o descritor, você precisa ler o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c21ef-983">Se o descritor não for usado, o tamanho e limites da matriz passaram para `FileGet` determinar o que ler.</span><span class="sxs-lookup"><span data-stu-id="c21ef-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c21ef-984">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-985">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-986">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-987">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c21ef-988">Os 218 bytes são distribuídos da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c21ef-989">18 bytes para o descritor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c21ef-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c21ef-990">200 bytes para os dados: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c21ef-991">Se a variável que está sendo lida for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FileGet` lê apenas os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c21ef-992">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-993">`FileGet` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-994">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePut`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-995">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c21ef-996">Isso inclui qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-997">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho de uma cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-998">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-998">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-999">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1000">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1001">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1002">`FileGet` lê todas as variáveis do disco de maneira contígua; ou seja, sem nenhum preenchimento entre registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1003">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGet` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c21ef-1004">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c21ef-1005">`FileGet` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1006">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c21ef-1007">Leitura de um arquivo usando o `FileGet` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1010">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1012">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1014">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="c21ef-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="c21ef-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1019">O `FileGetObject` função é usada em vez de `FileGet` para evitar ambiguidades no tempo de compilação se tipo `Object` é retornado em vez de outro tipo, como `Integer`, `Long`, `Short`e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="c21ef-1020">Se você pretende gravar o `Variant` tipo `FileGetObject` é necessária.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="c21ef-1021">Em caso de dúvida, se você estiver usando um objeto para o segundo parâmetro, é sempre recomendável que você use `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c21ef-1022">`FileGetObject` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1023">Dados lidos com `FileGetObject` geralmente são gravados com `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="c21ef-1024">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1025">Se você omitir `RecordNumber`, `FileGetObject` lê o registro ou byte após a última `FileGetObject` ou `FilePutObject` função (ou apontada pelo último `Seek` função).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1026">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1026">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1027">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1028">Se o comprimento dos dados que está sendo lidos é menor do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FileGetObject` lê registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1029">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1030">A quantidade de dados não pode ser determinada com precisão, é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c21ef-1031">Se a variável que está sendo lida é uma cadeia de caracteres, por padrão `FileGetObject` lê um descritor de dois bytes que contém o comprimento da cadeia de caracteres e, em seguida, lê os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1032">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula do `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1033">Visual Basic 6.0 e versões anteriores oferecem suporte a cadeias de caracteres de comprimento fixo e ao ler um arquivo, o descritor de comprimento não é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c21ef-1034">Se você deseja ler uma cadeia de caracteres sem o descritor, deve passar `True` para o `StringIsFixedLength` parâmetro e a cadeia de caracteres lida deve ter o comprimento correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1035">Se a variável que está sendo lida for uma matriz e, em seguida, o comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1036">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1037">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="c21ef-1038">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="c21ef-1039">Os 218 bytes são distribuídos da seguinte maneira: 18 bytes para o descritor (2 + 8 \* 2) e 100 bytes para os dados (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c21ef-1040">`FileGetObject` lê os elementos de estruturas como se cada um estava sendo lido individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1041">No disco, uma matriz dinâmica em um tipo definido pelo usuário (gravado com `FilePutObject`) é prefixado por um descritor cujo comprimento é igual a 2 mais 8 vezes o número de dimensões: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="c21ef-1042">O comprimento do registro especificado pelo `RecordLength` cláusula o `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para ler os elementos individuais, incluindo qualquer matrizes e seus descritores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="c21ef-1043">O <xref:Microsoft.VisualBasic.VBFixedStringAttribute> classe pode ser aplicada a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1044">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1044">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1045">Para arquivos abertos no `Binary` modo, todos os `Random` regras se aplicam, com as seguintes exceções:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="c21ef-1046">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1047">`FileGetObject` lê todas as variáveis do disco continuamente, isto é, sem nenhum preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1048">Para qualquer matriz que não seja uma matriz em uma estrutura, `FileGetObject` lê apenas os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="c21ef-1049">Nenhum descritor é lido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="c21ef-1050">`FileGetObject` lê cadeias de caracteres de comprimento variável que não são elementos das estruturas sem esperar o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1051">O número de bytes lidos é igual ao número de caracteres já na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-1052">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-1053">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1054">O exemplo a seguir lê um registro em um arquivo de teste e, em seguida, recupera.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="c21ef-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1055">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="c21ef-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="c21ef-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="c21ef-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1062">Se o arquivo especificado estiver aberto quando o `FileLen` função é chamada, o valor retornado representa o tamanho do arquivo no momento em que ele foi aberto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-1063">Para obter o comprimento atual de um arquivo aberto, use o `LOF` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1064">Este exemplo usa o `FileLen` função para retornar o comprimento de um arquivo em bytes.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="c21ef-1065">Para fins deste exemplo, suponha que `TestFile` é um arquivo que contém alguns dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1067">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="c21ef-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="c21ef-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1070">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="c21ef-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1072">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="c21ef-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="c21ef-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1075">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="c21ef-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="c21ef-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="c21ef-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1079">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="c21ef-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="c21ef-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="c21ef-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1083">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="c21ef-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="c21ef-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="c21ef-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="c21ef-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1090">O `FileOpen` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-1091">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-1092">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-1093">Você deve abrir um arquivo antes de qualquer operação de e/s pode ser executada nela.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="c21ef-1094">`FileOpen` aloca um buffer de e/s para o arquivo e determina o modo de acesso para usar com o buffer.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-1095">Ao gravar um arquivo, um aplicativo pode ter que criar um arquivo, se o arquivo ao qual ele está tentando gravar não existe.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="c21ef-1096">Para fazer isso, ele precisa de permissão para o diretório no qual o arquivo será criado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="c21ef-1097">No entanto, se o arquivo especificado por `FileName` existir, o aplicativo precisa `Write` permissão somente para o próprio arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="c21ef-1098">Sempre que possível, para ajudar a melhorar a segurança, crie o arquivo durante a implantação e conceder `Write` permissão para esse arquivo apenas, em vez de todo o diretório.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="c21ef-1099">Para ajudar a melhorar a segurança, grave dados em pastas de usuário em vez de para o diretório raiz ou o diretório de arquivos de programa.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="c21ef-1100">Para abrir o canal pode ser encontrado usando o `FreeFile()` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-1101">O `FileOpen` função requer `Read` acessar a partir do `FileIOPermissionAccess` enumeração, que pode afetar sua execução em situações de confiança parcial.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="c21ef-1102">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1103">Este exemplo ilustra vários usos do `FileOpen` função para habilitar a entrada e saída para um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="c21ef-1104">O código a seguir abre o arquivo `TestFile` na `Input` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="c21ef-1105">Este exemplo abre o arquivo no `Binary` modo para gravar somente operações.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="c21ef-1106">O exemplo a seguir abre o arquivo no `Random` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="c21ef-1107">O arquivo contém registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="c21ef-1108">Este exemplo de código abre o arquivo no `Output` modo; pode qualquer processo ler ou gravar no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="c21ef-1109">Este exemplo de código abre o arquivo no `Binary` modo para leitura; outros processos não é possível ler o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1115">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1117">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1119">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1124">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1125">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1126">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1127">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1128">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1129">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1130">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1131">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1131">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1132">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1133">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1134">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1135">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1136">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1137">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1138">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1139">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1140">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1141">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1142">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1143">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1144">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1145">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1146">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1147">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1148">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1149">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1150">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1151">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1152">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1153">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1154">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1155">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1156">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1157">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1158">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1159">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1159">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1160">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1161">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1162">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1163">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1164">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1165">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1166">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1167">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1168">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1169">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1170">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1171">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1174">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1176">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1178">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1183">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1184">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1185">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1186">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1187">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1188">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1189">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1190">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1190">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1191">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1192">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1193">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1194">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1195">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1196">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1197">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1198">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1199">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1200">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1201">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1202">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1203">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1204">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1205">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1206">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1207">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1208">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1209">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1210">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1211">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1212">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1213">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1214">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1215">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1216">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1217">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1218">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1218">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1219">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1220">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1221">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1222">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1223">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1224">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1225">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1226">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1227">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1228">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1229">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1230">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1233">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1235">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1237">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1242">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1243">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1244">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1245">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1246">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1247">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1248">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1249">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1249">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1250">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1251">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1252">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1253">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1254">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1255">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1256">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1257">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1258">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1259">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1260">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1261">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1262">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1263">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1264">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1265">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1266">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1267">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1268">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1269">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1270">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1271">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1272">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1273">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1274">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1275">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1276">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1277">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1277">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1278">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1279">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1280">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1281">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1282">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1283">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1284">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1285">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1286">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1287">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1288">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1289">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1292">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1294">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1296">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1301">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1302">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1303">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1304">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1305">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1306">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1307">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1308">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1308">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1309">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1310">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1311">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1312">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1313">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1314">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1315">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1316">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1317">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1318">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1319">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1320">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1321">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1322">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1323">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1324">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1325">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1326">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1327">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1328">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1329">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1330">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1331">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1332">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1333">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1334">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1335">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1336">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1336">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1337">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1338">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1339">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1340">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1341">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1342">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1343">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1344">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1345">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1346">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1347">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1348">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1351">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1353">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1355">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1360">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1361">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1362">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1363">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1364">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1365">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1366">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1367">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1367">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1368">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1369">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1370">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1371">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1372">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1373">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1374">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1375">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1376">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1377">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1378">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1379">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1380">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1381">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1382">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1383">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1384">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1385">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1386">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1387">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1388">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1389">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1390">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1391">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1392">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1393">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1394">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1395">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1395">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1396">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1397">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1398">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1399">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1400">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1401">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1402">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1403">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1404">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1405">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1406">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1407">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1410">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1412">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1414">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1419">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1420">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1421">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1422">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1423">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1424">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1425">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1426">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1426">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1427">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1428">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1429">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1430">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1431">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1432">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1433">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1434">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1435">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1436">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1437">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1438">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1439">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1440">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1441">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1442">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1443">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1444">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1445">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1446">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1447">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1448">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1449">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1450">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1451">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1452">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1453">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1454">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1454">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1455">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1456">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1457">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1458">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1459">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1460">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1461">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1462">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1463">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1464">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1465">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1466">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1469">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1471">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1473">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1478">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1479">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1480">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1481">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1482">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1483">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1484">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1485">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1485">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1486">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1487">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1488">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1489">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1490">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1491">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1492">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1493">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1494">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1495">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1496">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o`VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1497">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1498">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1499">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1500">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1501">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1502">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1503">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1504">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1505">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1506">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1507">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1508">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1509">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1510">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1511">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1512">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1513">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1513">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1514">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1515">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1516">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1517">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1518">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1519">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1520">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1521">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1522">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1523">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1524">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1525">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1528">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1530">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1532">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1537">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1538">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1539">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1540">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1541">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1542">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1543">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1544">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1544">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1545">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1546">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1547">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1548">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1549">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1550">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1551">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1552">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1553">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1554">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1555">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1556">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1557">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1558">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1559">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1560">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1561">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1562">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1563">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1564">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1565">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1566">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1567">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1568">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1569">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1570">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1571">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1572">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1572">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1573">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1574">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1575">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1576">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1577">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1578">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1579">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1580">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1581">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1582">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1583">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1584">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1587">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1589">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1591">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1596">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1597">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1598">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1599">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1600">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1601">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1602">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1603">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1603">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1604">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1605">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1606">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1607">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1608">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1609">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1610">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1611">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1612">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1613">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1614">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1615">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1616">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1617">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1618">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1619">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1620">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1621">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1622">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1623">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1624">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1625">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1626">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1627">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1628">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1629">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1630">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1631">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1631">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1632">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1633">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1634">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1635">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1636">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1637">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1638">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1639">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1640">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1641">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1642">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1643">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1646">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1648">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1650">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1655">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1656">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1657">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1658">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1659">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1660">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1661">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1662">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1662">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1663">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1664">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1665">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1666">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1667">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1668">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1669">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1670">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1671">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1672">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1673">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1674">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1675">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1676">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1677">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1678">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1679">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1680">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1681">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1682">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1683">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1684">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1685">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1686">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1687">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1688">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1689">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1690">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1690">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1691">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1692">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1693">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1694">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1695">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1696">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1697">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1698">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1699">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1700">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1701">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1702">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1705">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1707">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1709">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1714">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1715">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1716">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1717">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1718">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1719">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1720">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1721">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1721">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1722">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1723">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no`RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1724">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1725">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1726">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1727">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1728">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1729">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1730">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1731">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1732">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1733">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1734">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1735">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1736">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1737">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1738">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1739">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1740">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1741">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1742">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1743">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1744">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1745">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1746">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1747">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1748">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1749">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1749">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1750">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1751">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1752">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1753">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1754">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1755">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1756">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1757">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1758">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1759">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1760">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1761">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1764">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1766">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1768">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1773">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1774">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1775">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1776">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1777">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1778">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1779">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1780">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1780">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1781">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1782">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1783">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1784">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1785">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1786">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1787">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1788">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1789">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1790">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1791">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1792">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1793">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1794">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1795">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1796">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1797">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1798">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1799">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1800">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1801">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1802">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1803">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1804">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1805">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1806">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1807">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1808">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1808">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1809">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1810">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1811">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1812">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1813">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1814">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1815">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1816">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1817">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1818">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1819">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1820">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1823">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1825">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1827">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="c21ef-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1829">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="c21ef-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="c21ef-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1836">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1837">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1838">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1839">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1840">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1841">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1842">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1843">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1843">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1844">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1845">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1846">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1847">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1848">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1849">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1850">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1851">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1852">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1853">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1854">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1855">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1856">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1857">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1858">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1859">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1860">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1861">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1862">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1863">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1864">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1865">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1866">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1867">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1868">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1869">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1870">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1871">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1871">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1872">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1873">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1874">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1875">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1876">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1877">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1878">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1879">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1880">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1881">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1882">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1883">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1886">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1888">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1890">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="c21ef-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1892">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="c21ef-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="c21ef-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1895">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="c21ef-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="c21ef-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="c21ef-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1902">`FilePut` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1903">Dados gravados com `FilePut` costumam ser lidos a partir de um arquivo usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c21ef-1904">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1905">Se você omitir `RecordNumber`, o próximo registro ou byte após a última `FileGet` ou `FilePut` de função ou apontado pela última `Seek` função é gravada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c21ef-1906">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1907">`FilePut` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1908">Se você usar `StringIsFixedLength`  =  `True` com `FilePut`, você deve fazer o mesmo com `FileGet`, e você precisa certificar-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1909">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1909">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1910">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1911">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePut` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1912">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1913">Porque a quantidade de dados não pode ser determinada com certeza, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1914">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1915">Caso a variável que está sendo gravada seja uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que contém o tamanho da cadeia de caracteres e, em seguida, grava os dados que vão para a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c21ef-1916">Portanto, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser pelo menos dois bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c21ef-1917">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePut` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1918">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePut` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1919">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1920">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePut` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1921">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1922">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1923">Caso a variável gravada seja uma matriz, você tem a opção de gravar ou não um descritor para o tamanho e as dimensões da matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c21ef-1924">O descritor de arquivo para uma matriz dinâmica, mas não para uma matriz de tamanho fixo de gravação do Visual Basic 6.0 e versões anteriores.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c21ef-1925">Visual Basic 2005 tem como padrão não gravar o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c21ef-1926">Para gravar o descritor, defina o `ArrayIsDynamic` parâmetro `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c21ef-1927">Ao escrever a matriz, você precisa comparar a forma com que a matriz será lida; se ela for lida com o descritor, você precisará escrever o descritor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c21ef-1928">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1929">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c21ef-1930">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1931">Por exemplo, a seguinte declaração de matriz necessitará de 218 bytes quando a matriz é gravada no disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c21ef-1932">Se a variável que está sendo gravada for qualquer outro tipo de variável (não uma cadeia de caracteres de comprimento variável ou um objeto), `FilePut` grava somente os dados da variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c21ef-1933">O comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior ou igual ao comprimento dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c21ef-1934">`FilePut` grava os elementos de estruturas como se cada um fosse escrito individualmente, exceto que não há nenhum preenchimento entre elementos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c21ef-1935">O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres nas estruturas para indicar o tamanho da cadeia de caracteres quando gravados em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c21ef-1936">Os campos que têm mais bytes do que o especificado pela cadeia de caracteres de `VBFixedString` atributo são truncados quando gravados em disco,</span><span class="sxs-lookup"><span data-stu-id="c21ef-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1937">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1937">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1938">Para arquivos abertos no `Binary` modo, a maioria do `Random` modo regras se aplicam, com algumas exceções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c21ef-1939">As seguintes regras para arquivos abertos no `Binary` modo diferem das regras para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c21ef-1940">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1941">`FilePut` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c21ef-1942">Para qualquer matriz que não seja uma matriz em uma estrutura, `FilePut` grava somente os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c21ef-1943">Nenhum descritor é escrito.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c21ef-1944">`FilePut` Grava cadeias de caracteres de comprimento variável que não são elementos das estruturas sem o descritor de dois bytes de comprimento.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c21ef-1945">O número de bytes gravados for igual ao número de caracteres na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c21ef-1946">Por exemplo, as instruções a seguir gravam 11 bytes no arquivo número 1:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c21ef-1947">A gravação em um arquivo usando a função `FilePut` requer o acesso `Write` da enumeração <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1948">Este exemplo usa o `FilePut` função para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c21ef-1949">Cinco registros da estrutura `Person` são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1952">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1954">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="c21ef-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1956">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="c21ef-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="c21ef-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-1961">O `FilePutObject` função é usada em vez de `FilePut` para evitar ambiguidades no tempo de compilação se tipo `Object` é transmitido em vez de outro tipo, como `Integer`, `Long`, `Short`e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="c21ef-1962">`FilePutObject` gravações e leituras de descritores que descrevem o objeto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="c21ef-1963">Se você pretende gravar o `Variant` tipo `FilePutObject` é necessária.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="c21ef-1964">Em caso de dúvida, se você estiver usando um objeto para o segundo parâmetro, é recomendável que você sempre use `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c21ef-1965">`FilePutObject` só é válido em `Random` e `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-1966">Dados gravados com `FilePutObject` costumam ser lidos a partir de um arquivo usando `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c21ef-1967">O primeiro registro ou byte em um arquivo está na posição 1, o segundo registro ou byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c21ef-1968">Se você omitir `RecordNumber`, `FilePutObject` grava o próximo registro ou byte após a última `FileGetObject` ou `FilePutObject` função (ou o registro ou byte apontado pela última `Seek` função).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="c21ef-1969">O argumento `StringIsFixedLength` controla se a função interpreta cadeias de caracteres como sendo de tamanho variável ou fixo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c21ef-1970">`FilePutObject` não grava o descritor do tamanho quando o argumento é `True`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c21ef-1971">Se você usar `StringIsFixedLength`  =  `True` com `FilePutObject`, você deve fazer o mesmo com `FileGetObject`, e você deve também Certifique-se de que a cadeia de caracteres é inicializada com o tamanho esperado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c21ef-1972">Modo aleatório</span><span class="sxs-lookup"><span data-stu-id="c21ef-1972">Random Mode</span></span>  
 <span data-ttu-id="c21ef-1973">Para arquivos abertos no `Random` modo, as seguintes regras se aplicam:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c21ef-1974">Se o comprimento dos dados que estão sendo gravados for menor que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função `FilePutObject` grava registros subsequentes em limites de comprimento de registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c21ef-1975">O espaço entre o final de um registro e o início do próximo registro é preenchido com o conteúdo existente no buffer de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c21ef-1976">A quantidade de dados não pode ser determinada com precisão, geralmente é recomendável ter o comprimento do registro corresponde ao tamanho dos dados que estão sendo gravados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c21ef-1977">Se o comprimento dos dados que estão sendo gravados for maior do que o comprimento especificado no `RecordLength` cláusula do `FileOpen` função, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="c21ef-1978">Caso a variável que está sendo gravada seja um objeto que contém um tipo numérico, `FilePutObject` grava dois bytes que identificam o `VarType` do objeto e, em seguida, grava a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c21ef-1979">Por exemplo, ao escrever um objeto que contém um número inteiro, `FilePutObject` grava seis bytes: dois bytes que identificam o objeto como `VarType(3)` (`Integer`) e quatro bytes que contêm os dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c21ef-1980">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos dois bytes maior do que o número real de bytes necessários para armazenar a variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c21ef-1981">Se a variável que está sendo gravada for um objeto que contém uma cadeia de caracteres, `FilePutObject` grava um descritor de dois bytes que identifica o `VarType(8)` do objeto, um descritor de dois bytes indicando o comprimento da cadeia de caracteres e, em seguida, grava os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c21ef-1982">O comprimento do registro especificado pelo `RecordLength` parâmetro o `FileOpen` função deve ser pelo menos quatro bytes maior do que o comprimento real da cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c21ef-1983">Caso queira colocar uma cadeia de caracteres sem o descritor, você deve passar `True` para o parâmetro `StringIsFixedLength`, e a cadeia de caracteres lida deve ter o tamanho correto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c21ef-1984">Se a variável que está sendo gravada for uma matriz e, em seguida, o comprimento do registro especificado pelo `RecordLength` cláusula de `FileOpen` função deve ser maior que ou igual à soma de todos os bytes necessários para gravar os dados de matriz e o descritor de matriz.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c21ef-1985">O descritor especifica a classificação de matriz, o tamanho e o limite inferior de cada classificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c21ef-1986">Seu comprimento é igual a 2 mais 8 vezes o número de dimensões: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c21ef-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c21ef-1987">Modo binário</span><span class="sxs-lookup"><span data-stu-id="c21ef-1987">Binary Mode</span></span>  
 <span data-ttu-id="c21ef-1988">Para arquivos abertos no `Binary` modo, todos os `Random` aplicarem regras de modo, exceto:</span><span class="sxs-lookup"><span data-stu-id="c21ef-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="c21ef-1989">A cláusula `RecordLength` na função de `FileOpen` não está em vigor.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c21ef-1990">`FilePutObject` grava todas as variáveis em disco de maneira contígua, ou seja, sem preenchimento entre os registros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-1991">Este exemplo usa o `FilePutObject` função para gravar uma cadeia de caracteres em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1992">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="c21ef-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1994">Required.</span>
          </span>
          <span data-ttu-id="c21ef-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="c21ef-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="c21ef-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c21ef-1999">Este exemplo usa o `FileWidth` função para definir a largura da linha de saída para um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2003">Use `FreeFile` para fornecer um número de arquivos que já não está sendo usado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2004">Este exemplo usa o `FreeFile` função para retornar o próximo número de arquivos disponíveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="c21ef-2005">Cinco arquivos foram abertos para saída dentro do loop, e alguns dados de exemplo são gravados para cada um.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="c21ef-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2007">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="c21ef-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="c21ef-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="c21ef-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2014">Para determinar quais atributos estão definidos, use o `And` operador para executar uma comparação bit a bit do valor retornado pelo `GetAttr` função e o valor do atributo de arquivo individual desejado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="c21ef-2015">Se o resultado não for zero, esse atributo é definido para o arquivo nomeado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="c21ef-2016">Por exemplo, o valor de retorno dos seguintes `And` expressão é zero se o `Archive` atributo não está definido:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="c21ef-2017">Um valor diferente de zero será retornado se o `Archive` atributo está definido.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2018">Este exemplo usa o `GetAttr` função para determinar os atributos de um arquivo e diretório ou pasta.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2022">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2024">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2027">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2028">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2029">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2030">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2031">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2032">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2033">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2034">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2035">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2036">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2036">Data</span></span>|<span data-ttu-id="c21ef-2037">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2038">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2039">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2039">Empty</span></span>|  
|<span data-ttu-id="c21ef-2040">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2041"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2042">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2043">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2045">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2046">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2047">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2048">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2049">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2050">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2051">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2052">Este exemplo supõe que `TestFile` é um arquivo que tem algumas linhas de dados gravados usando o `Write` funcionar, cada linha que contém uma cadeia de caracteres entre aspas e um número separado por uma vírgula, por exemplo: ("Olá", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2054">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2056">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2059">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2060">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2061">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2062">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2063">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2064">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2065">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2066">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2067">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2068">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2068">Data</span></span>|<span data-ttu-id="c21ef-2069">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2070">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2071">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2071">Empty</span></span>|  
|<span data-ttu-id="c21ef-2072">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2073"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2074">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2075">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2077">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2078">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2079">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2080">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2081">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2082">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2083">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2084">Este exemplo supõe que `TestFile` é um arquivo que tem algumas linhas de dados gravados usando o `Write` funcionar, cada linha que contém uma cadeia de caracteres entre aspas e um número separado por uma vírgula, por exemplo: ("Olá", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2086">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2088">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2091">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2092">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2093">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2094">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2095">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2096">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2097">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2098">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2099">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2100">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2100">Data</span></span>|<span data-ttu-id="c21ef-2101">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2102">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2103">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2103">Empty</span></span>|  
|<span data-ttu-id="c21ef-2104">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2105"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2106">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2107">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2109">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2110">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2111">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2112">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2113">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2114">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2115">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2116">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2118">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2120">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2123">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2124">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2125">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2126">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2127">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2128">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2129">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2130">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2131">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2132">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2132">Data</span></span>|<span data-ttu-id="c21ef-2133">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2134">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2135">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2135">Empty</span></span>|  
|<span data-ttu-id="c21ef-2136">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2137"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2138">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2139">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2141">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2142">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2143">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2144">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2145">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2146">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2147">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2148">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2150">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2152">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2155">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2156">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2157">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2158">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2159">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2160">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2161">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2162">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2163">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2164">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2164">Data</span></span>|<span data-ttu-id="c21ef-2165">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2166">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2167">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2167">Empty</span></span>|  
|<span data-ttu-id="c21ef-2168">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2169"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2170">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2171">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2173">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2174">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2175">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2176">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2177">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2178">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2179">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2180">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2182">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2184">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2187">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2188">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2189">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2190">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2191">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2192">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2193">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2194">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2195">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2196">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2196">Data</span></span>|<span data-ttu-id="c21ef-2197">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2198">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2199">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2199">Empty</span></span>|  
|<span data-ttu-id="c21ef-2200">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2201"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2202">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2203">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2205">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2206">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2207">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2208">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2209">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2210">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2211">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2212">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2214">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2216">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2219">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2220">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2221">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2222">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2223">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2224">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2225">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2226">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2227">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2228">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2228">Data</span></span>|<span data-ttu-id="c21ef-2229">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2230">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2231">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2231">Empty</span></span>|  
|<span data-ttu-id="c21ef-2232">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2233"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2234">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2235">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2237">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2238">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2239">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2240">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2241">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2242">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2243">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2244">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2246">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2248">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2251">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2252">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2253">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2254">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2255">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2256">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2257">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2258">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2259">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2260">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2260">Data</span></span>|<span data-ttu-id="c21ef-2261">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2262">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2263">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2263">Empty</span></span>|  
|<span data-ttu-id="c21ef-2264">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2265"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2266">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2267">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2269">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2270">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2271">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2272">Por exemplo, na versão em alemão, se você entrada 3,14159, ele retorna somente 3, desde que a vírgula é tratada como um separador variável em vez de como um ponto decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2273">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2274">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2275">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2276">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2278">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2280">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2283">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2284">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2285">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2286">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2287">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2288">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2289">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2290">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2291">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2292">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2292">Data</span></span>|<span data-ttu-id="c21ef-2293">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2294">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2295">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2295">Empty</span></span>|  
|<span data-ttu-id="c21ef-2296">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2297"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2298">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2299">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2301">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2302">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2303">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2304">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2305">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2306">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2307">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2308">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2310">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2312">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2315">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2316">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2317">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2318">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2319">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2320">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2321">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2322">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2323">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2324">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2324">Data</span></span>|<span data-ttu-id="c21ef-2325">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2326">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2327">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2327">Empty</span></span>|  
|<span data-ttu-id="c21ef-2328">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2329"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2330">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2331">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2333">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2334">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2335">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2336">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2337">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2338">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2339">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2340">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2342">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2344">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2347">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2348">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2349">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2350">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2351">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2352">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2353">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2354">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2355">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2356">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2356">Data</span></span>|<span data-ttu-id="c21ef-2357">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2358">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2359">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2359">Empty</span></span>|  
|<span data-ttu-id="c21ef-2360">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2361"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2362">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2363">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2365">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2366">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2367">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2368">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2369">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2370">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2371">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2372">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2374">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="c21ef-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2376">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2379">O `Input` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2380">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2381">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2382">Dados lidos com `Input` costumam ser gravados em um arquivo usando-se `Write`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c21ef-2383">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2384">Durante a leitura de arquivos, não faça decisões sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2385">Por exemplo, um arquivo chamado Form1.vb não pode ser um arquivo fonte do Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c21ef-2386">Quando lidos, dados numéricos ou cadeia de caracteres padrão são atribuídos a variáveis sem modificação.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c21ef-2387">A tabela a seguir ilustra como outros dados de entrada são tratados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c21ef-2388">Dados</span><span class="sxs-lookup"><span data-stu-id="c21ef-2388">Data</span></span>|<span data-ttu-id="c21ef-2389">Valor atribuído à variável</span><span class="sxs-lookup"><span data-stu-id="c21ef-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c21ef-2390">Delimitador de vírgula ou linha em branco</span><span class="sxs-lookup"><span data-stu-id="c21ef-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="c21ef-2391">Vazio</span><span class="sxs-lookup"><span data-stu-id="c21ef-2391">Empty</span></span>|  
|<span data-ttu-id="c21ef-2392">NULL # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c21ef-2393"># TRUE ou FALSE # #</span><span class="sxs-lookup"><span data-stu-id="c21ef-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c21ef-2394">`True` ou `False`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c21ef-2395">A data e/ou hora representada pela expressão</span><span class="sxs-lookup"><span data-stu-id="c21ef-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c21ef-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c21ef-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c21ef-2397">`errornumber` (a variável é um objeto marcado como um erro)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c21ef-2398">Caso você atinja o final do arquivo enquanto insere um item de dados, a entrada é interrompida e ocorre um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2399">O `Input` função não está localizada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="c21ef-2400">Por exemplo, na versão em alemão, caso você insira 3,14159, ele retorna apenas 3, porque a vírgula é tratada como um separador variável, em vez de uma vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2401">Leitura de um arquivo usando o `Input` função requer `Read` acessar do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2402">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2403">Este exemplo usa o `Input` função para ler dados de um arquivo em duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c21ef-2404">Este exemplo pressupõe que `TestFile` seja um arquivo tendo várias linhas de dados gravadas usando a função `Write`, cada linha contendo uma cadeia de caracteres entre aspas e um número separado por uma vírgula; por exemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2406">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="c21ef-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2408">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="c21ef-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="c21ef-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="c21ef-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2415">O `InputString` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2416">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2417">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2418">Dados lidos com o `InputString` função geralmente é gravada em um arquivo usando `Print` ou `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="c21ef-2419">Use esta função somente com arquivos abertos em `Input` ou `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="c21ef-2420">Ao contrário de `Input` função, o `InputString` função retorna todos os caracteres que lê.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="c21ef-2421">Isso inclui vírgulas, retornos de carro, alimentações de linha, as aspas e espaços à esquerda.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="c21ef-2422">Com arquivos abertos para `Binary` acessar, uma tentativa de ler o arquivo usando o `InputString` funcionar até `EOF` retorna `True` gera um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="c21ef-2423">Use o `LOF` e `Loc` funções, em vez de `EOF` ao ler arquivos binários usando `InputString`, ou use `FileGet` quando você usa o `EOF` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2424">Durante a leitura de arquivos, não faça decisões de segurança sobre o conteúdo do arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2425">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2426">Este exemplo usa o `InputString` função para ler um caractere em vez de um arquivo e imprimi-lo para o `Output` janela.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="c21ef-2427">Este exemplo supõe que `MyFile` é um arquivo de texto que tem várias linhas de dados de exemplo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="c21ef-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2430">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="c21ef-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="c21ef-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="c21ef-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2436">`Kill` oferece suporte ao uso de vários caracteres (`*`) e de caractere único (`?`) curingas para especificar vários arquivos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c21ef-2437">**Observação de segurança** para executar, o `Kill` função requer `Read` e `PathDiscovery` sinalizadores de <xref:System.Security.Permissions.FileIOPermission> para ser concedida ao código em execução.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c21ef-2438">Para obter mais informações, consulte <xref:System.Security.SecurityException> [permissões de acesso do código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="c21ef-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2439">Este exemplo usa o `Kill` função para excluir um arquivo de um disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c21ef-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2443">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2447">O `LineInput` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2448">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2449">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2450">Dados lidos com `LineInput` costumam ser gravados em um arquivo usando-se `Print`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2451">Durante a leitura de arquivos, não faça decisões sobre o conteúdo de um arquivo com base na extensão de nome de arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c21ef-2452">Por exemplo, um arquivo chamado Form1. vb pode não ser um arquivo de origem do Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="c21ef-2453">O `LineInput` função lê a partir de um caractere de um arquivo por vez até encontrar um retorno de carro (`Chr(13)`) ou retorno/alimentação de linha de carro (`Chr(13) + Chr(10)`) sequência.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="c21ef-2454">Sequências de feed de retorno de linha de carro são ignoradas em vez de acrescentado à cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2455">Leitura de um arquivo usando o `LineInput` função requer `Read` acessar do <xref:System.Security.Permissions.FileIOPermissionAccess> enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2456">Este exemplo usa o `LineInput` função ler uma linha de um arquivo sequencial e atribuí-lo a uma variável.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="c21ef-2457">Este exemplo supõe que `TestFile` é um arquivo de texto que tem várias linhas de dados de exemplo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="c21ef-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2460">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2464">O `Loc` função é baseado em zero; usá-la para recuperar o primeiro byte em um arquivo, retornará 0.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="c21ef-2465">O `Loc` função é fornecida para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2466">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2467">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2468">O exemplo a seguir descreve o valor de retorno para cada modo de acesso do arquivo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="c21ef-2469">Modo</span><span class="sxs-lookup"><span data-stu-id="c21ef-2469">Mode</span></span>|<span data-ttu-id="c21ef-2470">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="c21ef-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c21ef-2471">Número do último registro lido ou gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="c21ef-2472">Posição atual de bytes no arquivo dividida por 128.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="c21ef-2473">No entanto, a informações retornadas por `Loc` para arquivos sequenciais não é usada nem requerida.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="c21ef-2474">Posição do último byte lido ou gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2475">Este exemplo usa o `Loc` função para retornar a atual posição de leitura/gravação em um arquivo aberto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="c21ef-2476">Este exemplo supõe que `MyFile` é um arquivo de texto que tem várias linhas de dados de exemplo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2481">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2486">O `Lock` e `Unlock` funções são usadas em ambientes onde vários processos podem precisam acessar o mesmo arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c21ef-2487">`Lock` e `Unlock` funções são sempre usadas em pares.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c21ef-2488">Os argumentos para `Lock` e `Unlock` devem ser idênticos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c21ef-2489">Se `Record` ou `FromRecord` e `ToRecord` não for fornecido, o bloqueio será para todo o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c21ef-2490">Se `Record` sozinho for especificado o único registro será bloqueada/desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c21ef-2491">Se o arquivo foi aberto para entradas ou saídas, sequenciais `Lock` e `Unlock` afetam todo o arquivo, independentemente do intervalo especificado pelos `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2492">Este exemplo ilustra o uso do `Lock` e `Unlock` funções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c21ef-2493">Este exemplo pressupõe que `People.txt` seja um arquivo contendo registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2495">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="c21ef-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2497">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2502">O `Lock` e `Unlock` funções são usadas em ambientes onde vários processos podem precisam acessar o mesmo arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c21ef-2503">`Lock` e `Unlock` funções são sempre usadas em pares.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c21ef-2504">Os argumentos para `Lock` e `Unlock` devem ser idênticos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c21ef-2505">Se `Record` ou `FromRecord` e `ToRecord` não for fornecido, o bloqueio será para todo o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c21ef-2506">Se `Record` sozinho for especificado o único registro será bloqueada/desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c21ef-2507">Se o arquivo foi aberto para entradas ou saídas, sequenciais `Lock` e `Unlock` afetam todo o arquivo, independentemente do intervalo especificado pelos `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2508">Este exemplo ilustra o uso do `Lock` e `Unlock` funções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c21ef-2509">Este exemplo pressupõe que `People.txt` seja um arquivo contendo registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2511">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="c21ef-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2513">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="c21ef-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2515">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2520">O `Lock` e `Unlock` funções são usadas em ambientes onde vários processos podem precisam acessar o mesmo arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c21ef-2521">`Lock` e `Unlock` funções são sempre usadas em pares.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c21ef-2522">Os argumentos para `Lock` e `Unlock` devem ser idênticos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c21ef-2523">Se `Record` ou `FromRecord` e `ToRecord` não for fornecido, o bloqueio será para todo o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c21ef-2524">Se `Record` sozinho for especificado o único registro será bloqueada/desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c21ef-2525">Se o arquivo foi aberto para entradas ou saídas, sequenciais `Lock` e `Unlock` afetam todo o arquivo, independentemente do intervalo especificado pelos `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2526">Este exemplo ilustra o uso do `Lock` e `Unlock` funções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c21ef-2527">Este exemplo pressupõe que `People.txt` seja um arquivo contendo registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2529">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="c21ef-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2536">Use o `FileLen` função para obter o comprimento de um arquivo que não está aberto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2537">Este exemplo usa o `LOF` função para determinar o tamanho de um arquivo aberto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="c21ef-2538">Este exemplo supõe que `TestFile` é um arquivo de texto que contém dados de exemplo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="c21ef-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2540">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="c21ef-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="c21ef-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="c21ef-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="c21ef-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2547">Esta função cria um novo diretório.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2548">Este exemplo usa o `MkDir` função para criar um diretório.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="c21ef-2549">Se a unidade não for especificada, o novo diretório é criado na unidade atual.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c21ef-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2553">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="c21ef-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2555">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="c21ef-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="c21ef-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2560">O `Print` e `PrintLine` funções são fornecidas para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2561">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2562">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2563">`Print` não inclui uma alimentação de linha no final de uma linha; No entanto, `PrintLine` incluem uma alimentação de linha.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="c21ef-2564">Dados gravados com `Print` normalmente é lido de um arquivo usando `LineInput` ou `Input`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="c21ef-2565">Se você omitir `Output` para `PrintLine`, uma linha em branco é impressa no arquivo; para `Print`, nada é de saída.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="c21ef-2566">Várias expressões separadas com uma vírgula serão alinhadas nos limites de tabulação, mas a mistura de vírgulas e `TAB` pode causar resultados inconsistentes.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="c21ef-2567">Para `Boolean` dados, `True` ou `False` é impresso.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="c21ef-2568">O `True` e `False` palavras-chave não são traduzidas, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="c21ef-2569">Dados de data são gravados para o arquivo usando o formato de data abreviada padrão reconhecido pelo seu sistema.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="c21ef-2570">Quando a data ou o componente de tempo está ausente ou zero, somente a parte fornecida é gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="c21ef-2571">Nada é gravado no arquivo se `Output` dados estão vazios.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c21ef-2572">No entanto, se `Output` dados da lista são `DBNull`, `Null` é gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="c21ef-2573">Para `Error` dados, a saída é exibida como `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="c21ef-2574">O `Error` palavra-chave não é traduzida, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="c21ef-2575">Todos os dados gravados no arquivo usando `Print` é de Conhecimento internacional; ou seja, os dados estão formatados corretamente usando o separador decimal adequado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="c21ef-2576">Se o usuário deseja gerar a saída de dados para uso em várias localidades, `Write` deve ser usado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="c21ef-2577">Gravar em um arquivo usando o `Print` ou `PrintLine` funções requer `Write` acessar a partir do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2578">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2579">Este exemplo usa o `Print` e `PrintLine` funções para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2580">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="c21ef-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2582">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="c21ef-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="c21ef-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2587">O `Print` e `PrintLine` funções são fornecidas para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2588">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2589">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2590">`Print` não inclui uma alimentação de linha no final de uma linha; No entanto,`PrintLine` incluem uma alimentação de linha.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="c21ef-2591">Dados gravados com `Print` normalmente é lido de um arquivo usando `LineInput` ou `Input`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="c21ef-2592">Se você omitir `Output` para `PrintLine`, uma linha em branco é impressa no arquivo; para `Print`, nada é de saída.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="c21ef-2593">Várias expressões separadas com uma vírgula serão alinhadas nos limites de tabulação, mas a mistura de vírgulas e `TAB` pode causar resultados inconsistentes.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="c21ef-2594">Para `Boolean` dados, `True` ou `False` é impresso.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="c21ef-2595">O `True` e `False` palavras-chave não são traduzidas, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="c21ef-2596">Dados de data são gravados para o arquivo usando o formato de data abreviada padrão reconhecido pelo sistema.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="c21ef-2597">Quando a data ou o componente de tempo está ausente ou zero, somente a parte fornecida é gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="c21ef-2598">Nada é gravado no arquivo se `Output` dados estão vazios.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c21ef-2599">No entanto, se `Output` dados da lista são `DBNull`, `Null` é gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="c21ef-2600">Para `Error` dados, a saída é exibida como `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="c21ef-2601">O `Error` palavra-chave não é traduzida, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="c21ef-2602">Todos os dados gravados no arquivo usando `Print` é de Conhecimento internacional; ou seja, os dados estão formatados corretamente usando o separador decimal adequado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="c21ef-2603">Se o usuário deseja gerar a saída de dados para uso em várias localidades, `Write` deve ser usado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="c21ef-2604">Gravar em um arquivo usando o `Print` ou `PrintLine` funções requer `Write` acessar a partir do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2605">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2606">Este exemplo usa o `Print` e `PrintLine` funções para gravar dados em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="c21ef-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2607">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="c21ef-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="c21ef-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2610">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="c21ef-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="c21ef-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="c21ef-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="c21ef-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2617">O`Rename` função renomeia um arquivo e a move para um diretório diferente, se necessário.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="c21ef-2618">O `Rename` função pode mover um arquivo em unidades, mas ele só pode renomear uma pasta existente quando ambos `NewPath` e `OldPath` estão localizados na mesma unidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="c21ef-2619">`Rename` não é possível criar um novo arquivo ou diretório.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="c21ef-2620">Usando o `Rename` função em um arquivo aberto produz um erro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="c21ef-2621">Você deve fechar um arquivo aberto antes de renomeá-lo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="c21ef-2622">`Rename` argumentos não podem incluir caracteres curinga de caractere único (?) e de vários caracteres (\*).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c21ef-2623">Ao usar `Rename` para copiar um arquivo de um local desprotegido para um local protegido, o arquivo manterá os direitos menos restritos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="c21ef-2624">Verifique se você não está apresentando um possível risco de segurança.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2625">Este exemplo usa o `Rename` função para renomear um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="c21ef-2626">Para fins deste exemplo, suponha que os diretórios que são especificados já existem.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="c21ef-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2633">O `Reset` função fecha todos os arquivos ativos abertos pelo `FileOpen` de função e tem a mesma função `FileClose()` sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2634">Este exemplo usa o `Reset` função para fechar todos os arquivos abertos e gravar o conteúdo de todos os buffers de arquivo em disco.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="c21ef-2635">Observe o uso do `Object` variável `FileNumber` como uma cadeia de caracteres e um número.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="c21ef-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2636">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="c21ef-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="c21ef-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="c21ef-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="c21ef-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2643">Ocorrerá um erro se você tentar usar `RmDir` em um diretório que contém os arquivos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="c21ef-2644">Use o `Kill` função para excluir todos os arquivos antes de tentar remover um diretório.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2645">Este exemplo usa o `RmDir` function para remover um diretório existente.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c21ef-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="c21ef-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2652">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="c21ef-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2658">`Seek` Retorna um valor entre 1 e 2.147.483.647 (equivalente a 2 ^ 31 – 1), inclusive.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="c21ef-2659">O exemplo a seguir descreve os valores retornados para cada modo de acesso do arquivo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="c21ef-2660">Modo</span><span class="sxs-lookup"><span data-stu-id="c21ef-2660">Mode</span></span>|<span data-ttu-id="c21ef-2661">Valor de retorno</span><span class="sxs-lookup"><span data-stu-id="c21ef-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c21ef-2662">Número do próximo registro lido ou gravado</span><span class="sxs-lookup"><span data-stu-id="c21ef-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="c21ef-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="c21ef-2664">Posição de byte em que a próxima operação ocorre.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="c21ef-2665">O primeiro byte em um arquivo está na posição 1, o segundo byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2666">Este exemplo usa o `Seek` função para retornar a posição atual do arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="c21ef-2667">O exemplo supõe `TestFile` é um arquivo que contém registros de uma estrutura `Record`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="c21ef-2668">Para arquivos abertos no `Random` modo, `Seek` retorna o número do próximo registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="c21ef-2669">Para arquivos abertos em modos diferentes de `Random` modo, `Seek` retorna a posição do byte em que a próxima operação ocorre.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c21ef-2670">Suponha que `TestFile` seja um arquivo contendo várias linhas de texto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="c21ef-2671">Este exemplo usa o `Seek` função para definir a posição para a próxima leitura ou gravação em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="c21ef-2672">Para arquivos abertos em modos diferentes de `Random` modo, `Seek` define a posição do byte em que a próxima operação ocorre.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c21ef-2673">Suponha que `TestFile` seja um arquivo contendo várias linhas de texto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2675">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="c21ef-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2677">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="c21ef-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2682">`Seek` Retorna um valor entre 1 e 2.147.483.647 (equivalente a 2 ^ 31 – 1), inclusive.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="c21ef-2683">O exemplo a seguir descreve os valores retornados para cada modo de acesso do arquivo:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="c21ef-2684">Modo</span><span class="sxs-lookup"><span data-stu-id="c21ef-2684">Mode</span></span>|<span data-ttu-id="c21ef-2685">Valor de retorno</span><span class="sxs-lookup"><span data-stu-id="c21ef-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c21ef-2686">Número do próximo registro lido ou gravado</span><span class="sxs-lookup"><span data-stu-id="c21ef-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="c21ef-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="c21ef-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="c21ef-2688">Posição de byte em que a próxima operação ocorre.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="c21ef-2689">O primeiro byte em um arquivo está na posição 1, o segundo byte está na posição 2 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2690">Este exemplo usa o `Seek` função para retornar a posição atual do arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="c21ef-2691">O exemplo supõe `TestFile` é um arquivo que contém registros de uma estrutura `Record`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="c21ef-2692">Para arquivos abertos no `Random` modo, `Seek` retorna o número do próximo registro.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="c21ef-2693">Para arquivos abertos em modos diferentes de `Random` modo, `Seek` retorna a posição do byte em que a próxima operação ocorre.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c21ef-2694">Suponha que `TestFile` seja um arquivo contendo várias linhas de texto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="c21ef-2695">Este exemplo usa o `Seek` função para definir a posição para a próxima leitura ou gravação em um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="c21ef-2696">Para arquivos abertos em modos diferentes de `Random` modo, `Seek` define a posição do byte em que a próxima operação ocorre.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c21ef-2697">Suponha que `TestFile` seja um arquivo contendo várias linhas de texto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="c21ef-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2699">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="c21ef-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="c21ef-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2702">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="c21ef-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="c21ef-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2707">Ocorrerá um erro de tempo de execução se você tentar definir os atributos de um arquivo aberto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="c21ef-2708">O `Attributes` valores de enumeração de argumento são da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c21ef-2709">Valor</span><span class="sxs-lookup"><span data-stu-id="c21ef-2709">Value</span></span>|<span data-ttu-id="c21ef-2710">Constante</span><span class="sxs-lookup"><span data-stu-id="c21ef-2710">Constant</span></span>|<span data-ttu-id="c21ef-2711">Descrição</span><span class="sxs-lookup"><span data-stu-id="c21ef-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="c21ef-2712">Normal (padrão).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c21ef-2713">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c21ef-2714">Oculto.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c21ef-2715">Arquivo do sistema.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c21ef-2716">Rótulo do volume</span><span class="sxs-lookup"><span data-stu-id="c21ef-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c21ef-2717">Diretório ou pasta.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c21ef-2718">O arquivo foi alterado desde o último backup.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c21ef-2719">O arquivo tem um nome diferente.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2720">Essas enumerações são especificadas pela linguagem Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="c21ef-2721">Os nomes podem ser usados em qualquer lugar no seu código em vez dos valores reais.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2722">Este exemplo usa o `SetAttr` função para definir atributos para um arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c21ef-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="c21ef-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2724">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2728">Se `Count` é menor do que a largura da linha de saída, a próxima posição de impressão imediatamente após o número de espaços impressos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="c21ef-2729">Se`Count` é maior do que a largura da linha de saída, `SPC` calculará a próxima posição de impressão usando a fórmula:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c21ef-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="c21ef-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="c21ef-2731">Por exemplo, se a posição de impressão atual for 24, a largura de linha de saída for 80, e você especificar `SPC(90)`, a próxima impressão iniciará na posição 34 (posição de impressão atual + o resto de 90/80).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="c21ef-2732">Se a diferença entre a posição de impressão atual e a largura da linha de saída for menor que `Count` (ou `Count` `Mod` *largura*), o `SPC` função vai para o início da próxima linha e gera espaços iguais a `Count` – (*largura* – *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2733">Verifique se que as colunas da tabela são suficientes para permitir a amplas letras.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2734">Este exemplo usa o `SPC` função para posicionar a saída em um arquivo e no **saída** janela.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2738">Se a posição de impressão atual na linha atual é maior do que `Column`, `TAB` ignora para a coluna valor igual a `Column` na próxima linha de saída.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="c21ef-2739">Se `Column` é menor que 1, `TAB` move a posição de impressão para coluna 1.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="c21ef-2740">Se `Column` é maior do que a largura da linha de saída, `TAB` calculará a próxima posição de impressão usando a fórmula:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c21ef-2741">Largura da coluna Mod</span><span class="sxs-lookup"><span data-stu-id="c21ef-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="c21ef-2742">Por exemplo, se *largura* é 80 e você especificar `TAB(90)`, a próxima impressão será iniciada na coluna 10 (o resto de 90/80).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="c21ef-2743">Se `Column` é menor do que a posição atual de impressão, impressão iniciado na próxima linha na posição de impressão calculada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="c21ef-2744">Se a posição de impressão calculada for maior do que a posição atual de impressão, impressão inicia em calculada imprimir posição na mesma linha.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="c21ef-2745">A posição de impressão mais à esquerda em uma linha de saída é sempre 1.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="c21ef-2746">Quando você usa o `Print` ou `PrintLine` funções para imprimir arquivos, a posição de impressão mais à direita é a largura atual do arquivo de saída, você pode definir usando o `FileWidth` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="c21ef-2747">O `TAB` função também pode ser usada com a `WriteLine` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="c21ef-2748">Ele não pode ser usado com <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> ou <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2749">Verifique se as colunas da tabela grande o suficiente para conter letras amplas.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2750">Este exemplo usa o `TAB` função para posicionar a saída em um arquivo e no **saída** janela.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="c21ef-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2751">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="c21ef-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c21ef-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2756">Se a posição de impressão atual na linha atual for maior que `Column`, `TAB` ignora para a coluna valor igual a `Column` na próxima linha de saída.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="c21ef-2757">Se `Column` é menor que 1, `TAB` move a posição de impressão para coluna 1.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="c21ef-2758">Se `Column` é maior do que a largura da linha de saída, `TAB` calculará a próxima posição de impressão usando a fórmula:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c21ef-2759">Largura da coluna Mod</span><span class="sxs-lookup"><span data-stu-id="c21ef-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="c21ef-2760">Por exemplo, se *largura* é 80 e você especificar `TAB(90)`, a próxima impressão será iniciada na coluna 10 (o resto de 90/80).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="c21ef-2761">Se `Column` é menor do que a posição atual de impressão, impressão iniciado na próxima linha na posição de impressão calculada.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="c21ef-2762">Se a posição de impressão calculada for maior que a posição atual de impressão, impressão inicia em calculada imprimir posição na mesma linha.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="c21ef-2763">A posição de impressão mais à esquerda em uma linha de saída é sempre 1.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="c21ef-2764">Quando você usa o `Print` ou `PrintLine` funções para imprimir arquivos, a posição de impressão mais à direita é a largura atual do arquivo de saída, você pode definir usando o `FileWidth` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="c21ef-2765">O `TAB` função também pode ser usada com a `WriteLine` função.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="c21ef-2766">Ele não pode ser usado com <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> ou <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c21ef-2767">Verifique se as colunas da tabela grande o suficiente para conter letras amplas.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2768">Este exemplo usa o `TAB` função para posicionar a saída em um arquivo e no **saída** janela.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c21ef-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2772">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2777">O `Lock` e `Unlock` funções são usadas em ambientes onde vários processos podem precisam acessar o mesmo arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c21ef-2778">`Lock` e `Unlock` funções são sempre usadas em pares.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c21ef-2779">Os argumentos para `Lock` e `Unlock` devem ser idênticos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c21ef-2780">Se `Record` ou `FromRecord` e `ToRecord` não for fornecido, o bloqueio será para todo o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c21ef-2781">Se `Record` sozinho for especificado o único registro será bloqueada/desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c21ef-2782">Se o arquivo foi aberto para entradas ou saídas, sequenciais `Lock` e `Unlock` afetam todo o arquivo, independentemente do intervalo especificado pelos `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2783">Este exemplo ilustra o uso do `Lock` e `Unlock` funções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c21ef-2784">Este exemplo pressupõe que `People.txt` seja um arquivo contendo registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2786">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="c21ef-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2788">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2793">O `Lock` e `Unlock` funções são usadas em ambientes onde vários processos podem precisam acessar o mesmo arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c21ef-2794">`Lock` e `Unlock` funções são sempre usadas em pares.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c21ef-2795">Os argumentos para `Lock` e `Unlock` devem ser idênticos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c21ef-2796">Se `Record` ou `FromRecord` e `ToRecord` não for fornecido, o bloqueio será para todo o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c21ef-2797">Se `Record` sozinho for especificado o único registro será bloqueada/desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c21ef-2798">Se o arquivo foi aberto para entradas ou saídas, sequenciais `Lock` e `Unlock` afetam todo o arquivo, independentemente do intervalo especificado pelos `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2799">Este exemplo ilustra o uso do `Lock` e `Unlock` funções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c21ef-2800">Este exemplo pressupõe que `People.txt` seja um arquivo contendo registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2802">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="c21ef-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2804">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="c21ef-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2806">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="c21ef-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="c21ef-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2811">O `Lock` e `Unlock` funções são usadas em ambientes onde vários processos podem precisam acessar o mesmo arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c21ef-2812">`Lock` e `Unlock` funções são sempre usadas em pares.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c21ef-2813">Os argumentos para `Lock` e `Unlock` devem ser idênticos.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c21ef-2814">Se `Record` ou `FromRecord` e `ToRecord` não for fornecido, o bloqueio será para todo o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c21ef-2815">Se `Record` sozinho for especificado o único registro será bloqueada/desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c21ef-2816">Se o arquivo foi aberto para entradas ou saídas, sequenciais `Lock` e `Unlock` afetam todo o arquivo, independentemente do intervalo especificado pelos `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2817">Este exemplo ilustra o uso do `Lock` e `Unlock` funções.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c21ef-2818">Este exemplo pressupõe que `People.txt` seja um arquivo contendo registros da estrutura `Person`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2820">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="c21ef-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2822">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="c21ef-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2826">O `Write` e `WriteLine` funções são fornecidas para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2827">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2828">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2829">Se você omitir `Output`, uma linha em branco é impressa no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="c21ef-2830">Várias expressões podem ser separadas por vírgula.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="c21ef-2831">Ao contrário de `Print` função, o `Write` função insere vírgulas entre os itens e cadeias de caracteres entre aspas, como eles são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="c21ef-2832">Você não precisa colocar os delimitadores explícitas na lista.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="c21ef-2833">Quando `Write` é usado para gravar dados em um arquivo, somente numérico, `Boolean`, data, null, e `Error` há suporte para formatos de dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="c21ef-2834">As seguintes suposições universais são seguidas para que os dados podem ser lidos e corretamente interpretados usando `Input`, independentemente da localidade:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="c21ef-2835">Dados numéricos são sempre gravados usando o período como o separador decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="c21ef-2836">Para `Boolean` dados, `#TRUE#` ou `#FALSE#` é impresso.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="c21ef-2837">O `True` e `False` palavras-chave não são traduzidas, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="c21ef-2838">Dados de data são gravados para o arquivo usando o formato de data universal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="c21ef-2839">Quando a data ou o componente de tempo está ausente ou zero, somente a parte fornecida é gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="c21ef-2840">Nada é gravado no arquivo se `Output` dados estão vazios.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c21ef-2841">No entanto, para dados nulos, `#NULL#` é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="c21ef-2842">Para `Error` dados, a saída é exibida como `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="c21ef-2843">O `Error` palavra-chave não é convertido, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="c21ef-2844">`WriteLine` Insere um caractere de nova linha (ou seja, um retorno de carro/linha feed, ou `Chr(13) + Chr(10)`), depois de escrever o caractere final `Output` para o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="c21ef-2845">Você pode inserir aspas em uma cadeia de caracteres usando aspas duplas, ou "".</span><span class="sxs-lookup"><span data-stu-id="c21ef-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="c21ef-2846">Por exemplo,</span><span class="sxs-lookup"><span data-stu-id="c21ef-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="c21ef-2847">Retorna uma cadeia de caracteres com o valor de `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="c21ef-2848">Gravar em um arquivo usando o `Write` ou `WriteLine` funções requer `Append` acessar a partir do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2849">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2850">Este exemplo usa o `Write` função para gravar dados brutos em um arquivo sequencial.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c21ef-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="c21ef-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2852">Required.</span>
          </span>
          <span data-ttu-id="c21ef-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="c21ef-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2854">Optional.</span>
          </span>
          <span data-ttu-id="c21ef-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c21ef-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="c21ef-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c21ef-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c21ef-2858">O `Write` e `WriteLine` funções são fornecidas para compatibilidade com versões anteriores e pode afetar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c21ef-2859">Para aplicativos legados não, o `My.Computer.FileSystem` objeto fornece um melhor desempenho.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c21ef-2860">Para obter mais informações, consulte [acesso a arquivos com o Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c21ef-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c21ef-2861">Se você omitir `Output`, uma linha em branco é impressa no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="c21ef-2862">Várias expressões podem ser separadas por vírgula.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="c21ef-2863">Ao contrário de `Print` função, o `Write` função insere vírgulas entre os itens e cadeias de caracteres entre aspas, como eles são gravados no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="c21ef-2864">Você não precisa colocar os delimitadores explícitas na lista.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="c21ef-2865">Quando `Write` é usado para gravar dados em um arquivo, somente numérico, `Boolean`, data, null, e `Error` há suporte para formatos de dados.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="c21ef-2866">As seguintes suposições universais são seguidas para que os dados podem ser lidos e corretamente interpretados usando `Input`, independentemente da localidade:</span><span class="sxs-lookup"><span data-stu-id="c21ef-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="c21ef-2867">Dados numéricos são sempre gravados usando o período como o separador decimal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="c21ef-2868">Para `Boolean` dados, `#TRUE#` ou `#FALSE#` é impresso.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="c21ef-2869">O `True` e `False` palavras-chave não são traduzidas, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="c21ef-2870">Dados de data são gravados para o arquivo usando o formato de data universal.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="c21ef-2871">Quando a data ou o componente de tempo está ausente ou zero, somente a parte fornecida é gravado no arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="c21ef-2872">Nada é gravado no arquivo se `Output` dados estão vazios.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c21ef-2873">No entanto, para dados nulos, `#NULL#` é gravado.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="c21ef-2874">Para `Error` dados, a saída é exibida como `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="c21ef-2875">O `Error` palavra-chave não é convertido, independentemente da localidade.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="c21ef-2876">`WriteLine` Insere um caractere de nova linha (ou seja, um retorno de carro/linha feed, ou `Chr(13) + Chr(10)`), depois de escrever o caractere final `Output` para o arquivo.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="c21ef-2877">Você pode inserir aspas em uma cadeia de caracteres usando aspas duplas, ou "".</span><span class="sxs-lookup"><span data-stu-id="c21ef-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="c21ef-2878">Por exemplo,</span><span class="sxs-lookup"><span data-stu-id="c21ef-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="c21ef-2879">Retorna uma cadeia de caracteres com o valor de `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="c21ef-2880">Gravar em um arquivo usando o `Write` ou `WriteLine` funções requer `Append` acessar a partir do `FileIOPermissionAccess` enumeração.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c21ef-2881">Para obter mais informações, consulte <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c21ef-2882">Este exemplo usa o `Write` função para gravar dados brutos em um arquivo sequencial.</span><span class="sxs-lookup"><span data-stu-id="c21ef-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>