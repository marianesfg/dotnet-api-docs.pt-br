<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConcurrentStack`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fc28ba389f962213b1756c3fb932c646cd356440.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc28ba389f962213b1756c3fb932c646cd356440</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source>The type of the elements contained in the stack.</source>
          <target state="translated">O tipo dos elementos contidos na pilha.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source>Represents a thread-safe last in-first out (LIFO) collection.</source>
          <target state="translated">Representa uma coleção thread-safe LIFO (último a entrar, primeiro a sair).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface starting with the <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> class did not implement this interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> implementa o <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface começando com o <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; nas versões anteriores do .NET Framework, o <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> classe não implementou esta interface.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> provides a few main operations:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> fornece algumas operações principais:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> inserts an element at the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> Insere um elemento na parte superior do <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> removes an element from the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, or returns <ph id="ph3">`false`</ph> if the item cannot be removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> Remove um elemento da parte superior do <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, ou retorna <ph id="ph3">`false`</ph> se o item não pode ser removido.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPeek%2A&gt;</ph> returns an element that is at the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPeek%2A&gt;</ph> Retorna um elemento que está na parte superior do <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> , mas não removê-lo a <ph id="ph3">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPopRange%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.PushRange%2A&gt;</ph> methods provide efficient pushing and popping of multiple elements in a single operation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPopRange%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.PushRange%2A&gt;</ph> métodos fornecem eficiente enviar por push e pop de vários elementos em uma única operação.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> to push and pop individual items:</source>
          <target state="translated">O exemplo a seguir mostra como usar um <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> para enviar por push e pop itens individuais:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> to push and pop ranges of items:</source>
          <target state="translated">O exemplo a seguir mostra como usar um <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> para enviar por push e pop intervalos de itens:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentStack`1">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Todos os membros protegidos e públicos da <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> são thread-safe e podem ser usados simultaneamente em vários threads.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">A coleção cujos elementos são copiados para o novo <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> class that contains elements copied from the specified collection</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> que contém elementos copiados da coleção especificada</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;paramref name="collection" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="collection" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Remove todos os objetos da <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados do <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Copia os elementos <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional existente, começando no índice da matriz especificado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é uma referência nula (Nada no Visual Basic).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é igual ou maior que o tamanho do <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -ou- O número de elementos no <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> de origem é maior que o espaço disponível do <ph id="ph4">&lt;paramref name="index" /&gt;</ph> até o fim da <ph id="ph5">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">O número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
          <source>For determining whether the collection contains any items, use of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A&gt;</ph> property is recommended rather than retrieving the number of items from the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">Para determinar se a coleção contém todos os itens, uso do <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A&gt;</ph> propriedade é recomendada em vez de recuperar o número de itens do <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A&gt;</ph> propriedade e compare-o como 0.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Retorna um enumerador que itera por meio de <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Um enumerador para o <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the stack.</source>
          <target state="translated">A enumeração representa um instantâneo do momento-in-time do conteúdo da pilha.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A&gt;</ph> was called.</source>
          <target state="translated">Ele não reflete todas as atualizações para a coleção após <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A&gt;</ph> foi chamado.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
          <source>The enumerator is safe to use concurrently with reads from and writes to the stack.</source>
          <target state="translated">O enumerador é seguro usar simultaneamente com leituras de e grava a pilha.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
          <source>The enumerator returns items in LIFO (last-in, first-out) order.</source>
          <target state="translated">O enumerador retorna itens em ordem LIFO (último a entrar, primeiro a sair).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> is empty.</source>
          <target state="translated">Obtém um valor que indica se a <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> está vazia.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
          <source>true if the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> is empty; otherwise, false.</source>
          <target state="translated">true se a <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> estiver vazia, caso contrário, false.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
          <source>For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">Para determinar se a coleção contém todos os itens, é recomendável usar essa propriedade em vez de recuperar o número de itens a partir de <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A&gt;</ph> propriedade e compare-o como 0.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
          <source>However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A&gt;</ph> returns, thus invalidating the result.</source>
          <target state="translated">No entanto, como essa coleção se destina a ser acessadas simultaneamente, ele pode ser o caso que outro thread irá modificar a coleção após <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A&gt;</ph> retorna, portanto, invalidando o resultados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo de código, consulte <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
          <source>The object to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser enviado por push para o <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Insere um objeto na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source>The objects to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Os objetos a serem enviados por push para o <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source>Inserts multiple objects at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> atomically.</source>
          <target state="translated">Insere vários objetos na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> de maneira atômica.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source>When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> one item at a time.</source>
          <target state="translated">Ao adicionar vários itens na pilha, usar PushRange é um mecanismo mais eficiente que usar <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> um item por vez.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source>Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed.</source>
          <target state="translated">Além disso, PushRange garante que todos os elementos serão adicionados atomicamente, que significa que nenhum outro thread poderá inserir elementos entre os elementos que estão sendo enviados por push.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source>Items at lower indices in the <ph id="ph1">`items`</ph> array will be pushed before items at higher indices.</source>
          <target state="translated">Itens com índices inferiores no <ph id="ph1">`items`</ph> matriz será enviada antes de itens com índices superiores.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo de código, consulte <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
          <source><ph id="ph1">&lt;paramref name="items" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="items" /&gt;</ph> é uma referência nula (Nada no Visual Basic).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>The objects to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Os objetos a serem enviados por push para o <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>The zero-based offset in <bpt id="p1">&lt;c&gt;</bpt>items<ept id="p1">&lt;/c&gt;</ept> at which to begin inserting elements onto the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">O deslocamento de base zero em <bpt id="p1">&lt;c&gt;</bpt>items<ept id="p1">&lt;/c&gt;</ept> no qual começar a inserir elementos na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>The number of elements to be inserted onto the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">O número de elementos a serem inseridos na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>Inserts multiple objects at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> atomically.</source>
          <target state="translated">Insere vários objetos na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> de maneira atômica.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> one item at a time.</source>
          <target state="translated">Ao adicionar vários itens na pilha, usar PushRange é um mecanismo mais eficiente que usar <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> um item por vez.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed.</source>
          <target state="translated">Além disso, PushRange garante que todos os elementos serão adicionados atomicamente, que significa que nenhum outro thread poderá inserir elementos entre os elementos que estão sendo enviados por push.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>Items at lower indices in the <ph id="ph1">`items`</ph> array will be pushed before items at higher indices.</source>
          <target state="translated">Itens com índices inferiores no <ph id="ph1">`items`</ph> matriz será enviada antes de itens com índices superiores.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo de código, consulte <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="items" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="items" /&gt;</ph> é uma referência nula (Nada no Visual Basic).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source>Or <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="items" /&gt;</ph>.</source>
          <target state="translated">Ou <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> é maior que ou igual ao comprimento da <ph id="ph2">&lt;paramref name="items" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> is greater than the length of <ph id="ph4">&lt;paramref name="items" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> é maior que o comprimento do <ph id="ph4">&lt;paramref name="items" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The object to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser adicionado ao <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>Attempts to add an object to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Tenta adicionar um objeto ao <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>true if the object was added successfully; otherwise, false.</source>
          <target state="translated">true se um objeto tiver sido removido com êxito; caso contrário, false.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, this operation will always insert the object onto the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> and return true.</source>
          <target state="translated">Para <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, esta operação irá inserir sempre na parte superior do objeto de <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> e retornar true.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">Quando este método retornar, se a operação tiver sido bem-sucedida, <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> conterá o objeto removido.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>Attempts to remove and return an object from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Tenta remover e retornar um objeto do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>true if an element was removed and returned succesfully; otherwise, false.</source>
          <target state="translated">true se um elemento tiver sido removido e tiver retornado com êxito; caso contrário, false.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, this operation will attempt to pop the object at the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated">Para <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, esta operação irá tentar inserir o objeto no topo do <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados do <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copia os elementos do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> para um <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, começando em um determinado índice <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é uma referência nula (Nada no Visual Basic).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é multidimensional.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated">-ou- O <ph id="ph1">&lt;paramref name="array" /&gt;</ph> não deve ter indexação baseada em zero.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">-ou- <ph id="ph1">&lt;paramref name="index" /&gt;</ph> é igual ou maior que o tamanho da <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -ou- O número de elementos no <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origem é maior que o espaço disponível do <ph id="ph4">&lt;paramref name="index" /&gt;</ph> até o fim da <ph id="ph5">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">-ou- O tipo do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origem não pode ser convertido automaticamente no tipo do <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot.</source>
          <target state="translated">Obtém um valor indicando se o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado com o SyncRoot.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
          <source>true if access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot; otherwise, false.</source>
          <target state="translated">True se o acesso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> é sincronizado com o SyncRoot; caso contrário, false.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
          <source>For <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>, this property always returns false.</source>
          <target state="translated">Para <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>, essa propriedade sempre retorna false.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtém um objeto que pode ser usado para sincronizar o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
          <source>This property is not supported.</source>
          <target state="translated">Não há suporte a esta propriedade.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
          <source>Returns null (Nothing in Visual Basic).</source>
          <target state="translated">Retorna nulo (Nothing no Visual Basic).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
          <source>The SyncRoot property is not supported</source>
          <target state="translated">Não há suporte para a propriedade SyncRoot</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retorna um enumerador que itera em uma coleção.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que pode ser usado para iterar pela coleção.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the stack.</source>
          <target state="translated">A enumeração representa um instantâneo do momento-in-time do conteúdo da pilha.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A&gt;</ph> was called.</source>
          <target state="translated">Ele não reflete todas as atualizações para a coleção após <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A&gt;</ph> foi chamado.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator is safe to use concurrently with reads from and writes to the stack.</source>
          <target state="translated">O enumerador é seguro usar simultaneamente com leituras de e grava a pilha.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
          <source>Copies the items stored in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Copia os itens armazenados em <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> em uma nova matriz.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
          <source>A new array containing a snapshot of elements copied from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Uma nova matriz que contém um instantâneo dos elementos copiados de <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> or an unspecified value if the operation failed.</source>
          <target state="translated">Quando este método retorna, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contém um objeto da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> ou um valor não especificado quando a operação falha.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
          <source>Attempts to return an object from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> without removing it.</source>
          <target state="translated">Tenta retornar um objeto da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> sem removê-lo.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
          <source>true if and object was returned successfully; otherwise, false.</source>
          <target state="translated">true se um objeto tiver sido retornado com êxito; caso contrário, false.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">Quando este método retornar, se a operação tiver sido bem-sucedida, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> conterá o objeto removido.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
          <source>Attempts to pop and return the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">Tenta remover e retornar o objeto na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
          <source>true if an element was removed and returned from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> successfully; otherwise, false.</source>
          <target state="translated">true se um elemento tiver sido removido e retornado na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> com êxito; caso contrário, false.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo de código, consulte <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> to which objects popped from the top of the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> will be added.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> a que os objetos removidos da parte superior de <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> serão adicionados.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source>Attempts to pop and return multiple objects from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> atomically.</source>
          <target state="translated">Tenta remover e retornar vários objetos da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> de forma atômica.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source>The number of objects successfully popped from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> and inserted in <ph id="ph2">&lt;paramref name="items" /&gt;</ph>.</source>
          <target state="translated">O número de objetos removidos com êxito da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> e inseridos no <ph id="ph2">&lt;paramref name="items" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source>When popping multiple items, if there is little contention on the stack, using <ph id="ph1">`TryPopRange`</ph> can be more efficient than using <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> once per item to be removed.</source>
          <target state="translated">Ao exibir vários itens, se houver pouca contenção na pilha, usando <ph id="ph1">`TryPopRange`</ph> pode ser mais eficiente que usar <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> uma vez por item a ser removido.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source>Nodes fill the <ph id="ph1">`items`</ph> array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.</source>
          <target state="translated">Preenchimento de nós a <ph id="ph1">`items`</ph> matriz com o primeiro item a ser exibido em startIndex, o segundo item a ser exibido em startIndex + 1 e assim por diante.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated">Para obter um exemplo de código, consulte <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
          <source><ph id="ph1">&lt;paramref name="items" /&gt;</ph> is a null argument (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="items" /&gt;</ph> é um argumento nulo (Nada no Visual Basic).</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> to which objects popped from the top of the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> will be added.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> a que os objetos removidos da parte superior de <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> serão adicionados.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>The zero-based offset in <bpt id="p1">&lt;c&gt;</bpt>items<ept id="p1">&lt;/c&gt;</ept> at which to begin inserting elements from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</source>
          <target state="translated">O deslocamento de base zero em <bpt id="p1">&lt;c&gt;</bpt>items<ept id="p1">&lt;/c&gt;</ept> no qual começar a inserir elementos da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>The number of elements to be popped from top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> and inserted into <bpt id="p1">&lt;c&gt;</bpt>items<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O número de elementos a serem removidos da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> e inseridos em <bpt id="p1">&lt;c&gt;</bpt>items<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>Attempts to pop and return multiple objects from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> atomically.</source>
          <target state="translated">Tenta remover e retornar vários objetos da parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /&gt;</ph> de forma atômica.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>The number of objects successfully popped from the top of the stack and inserted in <ph id="ph1">&lt;paramref name="items" /&gt;</ph>.</source>
          <target state="translated">O número de objetos removidos com êxito da parte superior da pilha e inseridos no <ph id="ph1">&lt;paramref name="items" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>When popping multiple items, if there is little contention on the stack, using TryPopRange can be more efficient than using <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> once per item to be removed.</source>
          <target state="translated">Ao exibir vários itens, se houver pouca contenção na pilha, usar TryPopRange pode ser mais eficiente que usar <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> uma vez por item a ser removido.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>Nodes fill the <ph id="ph1">`items`</ph> array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.</source>
          <target state="translated">Preenchimento de nós a <ph id="ph1">`items`</ph> matriz com o primeiro item a ser exibido em startIndex, o segundo item a ser exibido em startIndex + 1 e assim por diante.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="items" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="items" /&gt;</ph> é uma referência nula (Nada no Visual Basic).</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source>Or <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="items" /&gt;</ph>.</source>
          <target state="translated">Ou <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> é maior que ou igual ao comprimento da <ph id="ph2">&lt;paramref name="items" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> is greater than the length of <ph id="ph4">&lt;paramref name="items" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> é maior que o comprimento do <ph id="ph4">&lt;paramref name="items" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>