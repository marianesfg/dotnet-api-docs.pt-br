<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5ae3df31823b68c9d75046ac59d310593da4e676" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46654714" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <TypeSignature Language="F#" Value="type NegotiateStream = class&#xA;    inherit AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um fluxo que usa o protocolo de segurança Negotiate para autenticar o cliente e, opcionalmente, o servidor, em comunicações entre o cliente e o servidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Net.Security.NegotiateStream> classe para autenticação e para ajudar a proteger informações transmitidas entre um cliente e um servidor. Usando <xref:System.Net.Security.NegotiateStream>, você pode fazer o seguinte.  
  
-   Envie as credenciais do cliente para o servidor para representação ou delegação.  
  
-   Solicite autenticação de servidor.  
  
-   Criptografar e/ou assinar dados antes de transmiti-los.  
  
 Autenticação deve ser executada antes de transmitir informações. Os clientes solicitam a autenticação usando o síncrono <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> métodos, que bloqueiam até que a autenticação seja concluída, ou assíncrona <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> métodos, que não bloquear enquanto espera para a autenticação ser concluída. Autenticação usando o síncronas de solicitação de servidores <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> ou assíncrono <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos. O cliente e, opcionalmente, o servidor é autenticado usando o protocolo de segurança Negotiate. Em sistemas Windows 95/98, Windows NT LAN Manager (NTLM) é o protocolo usado para autenticação. Em outras plataformas Kerberos protocolo é usado para autenticação se o cliente e servidor dão suporte a ele; Caso contrário, o NTLM é usado. Para obter descrições detalhadas desses protocolos, consulte a documentação do Platform SDK no MSDN, em msdn.microsoft.com/library/. O <xref:System.Net.Security.NegotiateStream> classe executa a autenticação usando a Interface de provedor de suporte de segurança (SSPI).  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança serão usadas pelo <xref:System.Net.Security.NegotiateStream> para ajudar a proteger seus dados durante a transmissão. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu. Você pode obter informações sobre o cliente remoto ou o servidor usando o <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> propriedade.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 Enviar dados usando o síncrono <xref:System.Net.Security.NegotiateStream.Write%2A> ou assíncrono <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> métodos. Você recebe dados usando o síncrono <xref:System.Net.Security.NegotiateStream.Read%2A> ou assíncrono <xref:System.Net.Security.NegotiateStream.BeginRead%2A> métodos. Se os serviços de segurança como criptografia ou assinatura estão habilitadas, elas serão aplicadas automaticamente aos seus dados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 O <xref:System.Net.Security.NegotiateStream> transmite dados usando um fluxo que você fornece ao criar o <xref:System.Net.Security.NegotiateStream>. Quando você fornece esse fluxo subjacente, você tem a opção para especificar se fechar o <xref:System.Net.Security.NegotiateStream> também fecha o fluxo subjacente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o lado do cliente de uma conexão de cliente-servidor que usa o <xref:System.Net.Security.NegotiateStream>. O cliente é autenticado e envia uma mensagem para o servidor de forma assíncrona.  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 O exemplo de código a seguir demonstra o lado do servidor de uma conexão de cliente-servidor que usa o <xref:System.Net.Security.NegotiateStream> para autenticar o cliente e ler uma mensagem enviada pelo cliente.  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a">Alterações para a autenticação NTLM para HTTPWebRequest na versão 3.5 SP1</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.NegotiateStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para impedir que o <xref:System.Net.Security.NegotiateStream> de fechar o fluxo que você fornecer, use o <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> construtor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream innerStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.NegotiateStream" /> para enviar e receber dados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.NegotiateStream" /> usando o <see cref="T:System.IO.Stream" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como chamar este construtor.  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream * bool -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream (innerStream, leaveInnerStreamOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.NegotiateStream" /> para enviar e receber dados.</param>
        <param name="leaveInnerStreamOpen">
          <see langword="true" /> para indicar que fechar este <see cref="T:System.Net.Security.NegotiateStream" /> não terá efeito sobre <c>innerstream</c>; <see langword="false" /> para indicar que fechar este <see cref="T:System.Net.Security.NegotiateStream" /> também fechará <c>innerStream</c>.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.NegotiateStream" /> usando o <see cref="T:System.IO.Stream" /> e o comportamento de fechamento de fluxo especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você especifica `true` para o `leaveStreamOpen` parâmetro, fechando o <xref:System.Net.Security.NegotiateStream> não tem efeito sobre o `innerStream` stream; você deve fechar explicitamente `innerStream` quando você não precisa mais dela.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar este construtor. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Net.Security.NegotiateStream> classe.  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="innerStream" /> é igual a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : unit -&gt; unit&#xA;override this.AuthenticateAsClient : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o cliente <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, e a autenticação mútua é solicitada. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa a credencial de cliente especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, e a autenticação mútua é solicitada. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="binding">O <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> que é usado para proteção estendida.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa a credencial do cliente especificada e a associação de canal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, e a autenticação mútua é solicitada. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> usado para proteção estendida que é passada para este método na `binding` parâmetro deve ser recuperado por um aplicativo da <xref:System.Net.Security.SslStream.TransportContext%2A> propriedade associado <xref:System.Net.Security.SslStream>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="allowedImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa as credenciais e as opções de autenticação especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> não é um valor válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é nulo.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="binding">O <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> que é usado para proteção estendida.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="allowedImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa as credenciais especificadas, as opções de autenticação e a associação de canal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> usado para proteção estendida que é passada para este método na `binding` parâmetro deve ser recuperado por um aplicativo da <xref:System.Net.Security.SslStream.TransportContext%2A> propriedade associado <xref:System.Net.Security.SslStream>.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> não é um valor válido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o cliente <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, e a autenticação mútua é solicitada. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa a credencial de cliente especificada.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, e a autenticação mútua é solicitada. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="binding">O <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> que é usado para proteção estendida.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa a credencial do cliente especificada e a associação de canal.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, e a autenticação mútua é solicitada. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> usado para proteção estendida que é passada para este método na `binding` parâmetro deve ser recuperado por um aplicativo da <xref:System.Net.Security.SslStream.TransportContext%2A> propriedade associado <xref:System.Net.Security.SslStream>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="allowedImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa as credenciais e as opções de autenticação especificadas.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> não é um valor válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é nulo.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="binding">O <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> que é usado para proteção estendida.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="allowedImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por clientes para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa as credenciais especificadas, as opções de autenticação e a associação de canal.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> usado para proteção estendida que é passada para este método na `binding` parâmetro deve ser recuperado por um aplicativo da <xref:System.Net.Security.SslStream.TransportContext%2A> propriedade associado <xref:System.Net.Security.SslStream>.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> não é um valor válido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Manipula o lado do servidor de uma autenticação para uma conexão de cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esses métodos bloqueiam enquanto a autenticação estiver em andamento. Para impedir que o aplicativo de bloqueio enquanto espera para concluir a autenticação, use o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : unit -&gt; unit&#xA;override this.AuthenticateAsServer : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsServer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Esse método bloqueia até que a operação for concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> sobrecargas de método.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit&#xA;override this.AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit" Usage="negotiateStream.AuthenticateAsServer policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">O <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> que é usado para proteção estendida.</param>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa a política de proteção estendida especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Se o `policy` parâmetro é `null`, em seguida, uma política de proteção estendida é usada que tem <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Esse método bloqueia até que a operação for concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> sobrecargas de método.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e o <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na política de proteção estendida passada no parâmetro <paramref name="policy" /> são ambos <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O parâmetro <paramref name="policy" /> foi definido como <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> em uma plataforma que não dá suporte para proteção estendida.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do servidor.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="requiredImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa as opções de autenticação e credenciais de servidor especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Esse método bloqueia até que a operação for concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> sobrecargas de método.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve ser <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar autenticar Novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o cliente. Você não pode usar o fluxo para tentar novamente a autenticação como servidor.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="policy">O <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> que é usado para proteção estendida.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="requiredImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa as credenciais de servidor especificadas, as opções de autenticação e a política de proteção estendida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `policy` parâmetro é `null`, em seguida, uma política de proteção estendida é usada que tem <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Esse método bloqueia até que a operação for concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> sobrecargas de método.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e o <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na política de proteção estendida passada no parâmetro <paramref name="policy" /> são ambos <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve ser <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar autenticar Novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o cliente. Você não pode usar o fluxo para tentar novamente a autenticação como servidor.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O parâmetro <paramref name="policy" /> foi definido como <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> em uma plataforma que não dá suporte para proteção estendida.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Manipula o lado do servidor de uma autenticação para uma conexão de cliente-servidor como uma operação assíncrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">O <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> que é usado para proteção estendida.</param>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa a política de proteção estendida especificada.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Se o `policy` parâmetro é `null`, em seguida, uma política de proteção estendida é usada que tem <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e o <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na política de proteção estendida passada no parâmetro <paramref name="policy" /> são ambos <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O parâmetro <paramref name="policy" /> foi definido como <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> em uma plataforma que não dá suporte para proteção estendida.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do servidor.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="requiredImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa as opções de autenticação e credenciais de servidor especificadas.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve ser <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar autenticar Novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o cliente. Você não pode usar o fluxo para tentar novamente a autenticação como servidor.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="policy">O <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> que é usado para proteção estendida.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="requiredImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <summary>Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa as credenciais de servidor especificadas, as opções de autenticação e a política de proteção estendida.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `policy` parâmetro é `null`, em seguida, uma política de proteção estendida é usada que tem <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e o <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na política de proteção estendida passada no parâmetro <paramref name="policy" /> são ambos <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve ser <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar autenticar Novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o cliente. Você não pode usar o fluxo para tentar novamente a autenticação como servidor.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O parâmetro <paramref name="policy" /> foi definido como <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> em uma plataforma que não dá suporte para proteção estendida.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia uma operação assíncrona para autenticar o lado do cliente de uma conexão de cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As sobrecargas desse método não bloqueiam enquanto a autenticação estiver em andamento. Para bloquear enquanto espera para concluir a autenticação, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor em uma conexão cliente-servidor. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o cliente <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. O <xref:System.Net.Security.NegotiateStream> classe construirá o SPN usado para autenticação mútua.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método para iniciar uma autenticação assíncrona para o cliente.  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor em uma conexão cliente-servidor. O processo de autenticação usa as credenciais especificadas. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="targetName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="binding">O <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> que é usado para proteção estendida.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor em uma conexão cliente-servidor. O processo de autenticação usa as credenciais e a associação de canal especificadas. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="targetName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="allowedImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor em uma conexão cliente-servidor. O processo de autenticação usa as credenciais e as opções de autenticação especificadas. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="targetName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="binding">O <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> que é usado para proteção estendida.</param>
        <param name="targetName">O SPN (nome da entidade de serviço) que identifica exclusivamente o servidor a autenticar.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="allowedImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor em uma conexão cliente-servidor. O processo de autenticação usa a credencial especificada, as opções de autenticação e a associação de canal. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.  
  
\- ou - 
 <paramref name="targetName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o servidor. Você não pode usar o fluxo para tentar novamente a autenticação como cliente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia uma operação assíncrona para lidar com o lado do servidor de autenticação de uma conexão cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As sobrecargas desse método não bloqueiam enquanto a autenticação estiver em andamento. Para bloquear enquanto espera para concluir a autenticação, use o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> sobrecargas de método.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (policy, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">O <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> que é usado para proteção estendida.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa a política de proteção estendida especificada. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação usa o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nenhum nome Principal de serviço (SPN) está especificado para o servidor. É o nível de representação <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Se o `policy` parâmetro é `null`, em seguida, uma política de proteção estendida é usada que tem <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> sobrecargas de método.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e o <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na política de proteção estendida passada no parâmetro <paramref name="policy" /> são ambos <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O parâmetro <paramref name="policy" /> foi definido como <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> em uma plataforma que não dá suporte para proteção estendida.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="requiredImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa as opções de autenticação e credenciais de servidor especificadas. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve ser <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o cliente. Você não pode usar o fluxo para tentar novamente a autenticação como servidor.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para usar o explícita <see cref="T:System.Net.NetworkCredential" />. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">O <see cref="T:System.Net.NetworkCredential" /> que é usado para estabelecer a identidade do cliente.</param>
        <param name="policy">O <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> que é usado para proteção estendida.</param>
        <param name="requiredProtectionLevel">Um dos valores de <see cref="T:System.Net.Security.ProtectionLevel" />, que indica os serviços de segurança para o fluxo.</param>
        <param name="requiredImpersonationLevel">Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, que indica como o servidor pode usar as credenciais do cliente para acessar recursos.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, em uma conexão de cliente-servidor. O processo de autenticação usa as credenciais de servidor especificadas, as opções de autenticação e a política de proteção estendida. Esse método não bloqueia.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `requiredProtectionLevel` parâmetro para solicitar serviços de segurança para os dados transmitidos usando o fluxo autenticado. Por exemplo, para que os dados criptografados e assinados, especifique o <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valor. Autenticação bem-sucedida não garante que o solicitado <xref:System.Net.Security.ProtectionLevel> foi concedida. Você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>.  
  
 Se o `policy` parâmetro é `null`, em seguida, uma política de proteção estendida é usada que tem <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> sobrecargas de método.  
  
 A operação assíncrona de autenticação deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e o <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na política de proteção estendida passada no parâmetro <paramref name="policy" /> são ambos <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve ser <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
\- ou - 
Este fluxo foi usado anteriormente para tentar realizar autenticação como o cliente. Você não pode usar o fluxo para tentar novamente a autenticação como servidor.</exception>
        <exception cref="T:System.NotSupportedException">Não há suporte para Windows 95 e Windows 98.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O parâmetro <paramref name="policy" /> foi definido como <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> em uma plataforma que não dá suporte para proteção estendida.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">Autenticação Integrada do Windows com proteção estendida</related>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que recebe os bytes lidos do fluxo.</param>
        <param name="offset">O local baseado em zero no <c>buffer</c> em que se inicia o armazenamento dos dados lidos nesse fluxo.</param>
        <param name="count">O número máximo de bytes a serem lidos do fluxo.</param>
        <param name="asyncCallback">Um delegado <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a operação de leitura é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de leitura. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Inicia uma operação de leitura assíncrona que lê os dados do fluxo e os armazena na matriz especificada.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a criptografia, autenticação, ou criptografia e assinatura estiverem habilitadas, a operação de leitura lê os dados do fluxo subjacente, verifica a integridade dos dados e descriptografa-a. Se nenhuma segurança de serviços, como assinatura ou criptografia de dados estão em uso, esse método inicia uma operação de leitura assíncrona no fluxo subjacente.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use o <xref:System.Net.Security.NegotiateStream.Read%2A> método.  
  
 A operação de leitura assíncrona deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndRead%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 O <xref:System.Net.Security.NegotiateStream> classe não oferece suporte simultâneo de várias operações de leitura. Se você tentar iniciar uma operação de leitura, enquanto outra leitura operação já está em execução no mesmo fluxo, um <xref:System.NotSupportedException> exceção será lançada.  
  
 Você não pode chamar esse método até que você tenha sido autenticado com êxito. Para autenticar, chame um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como iniciar uma operação de leitura assíncrona. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Net.Security.NegotiateStream> classe.  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> é menor que 0.  
  
\- ou - 
 <paramref name="offset" /> é maior que o comprimento do <paramref name="buffer" />.  
  
\- ou - 
 A soma de <paramref name="offset" /> e <paramref name="count" /> é maior que o tamanho de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Falha na operação de leitura.  
  
\- ou - 
A criptografia está sendo utilizada, mas não foi possível descriptografar os dados.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de leitura em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que fornece os bytes a serem gravados no fluxo.</param>
        <param name="offset">O local baseado em zero no <c>buffer</c> em que se inicia a leitura dos bytes a serem gravados no fluxo.</param>
        <param name="count">Um valor <see cref="T:System.Int32" /> que especifica o número de bytes a serem lidos no <c>buffer</c>.</param>
        <param name="asyncCallback">Um delegado <see cref="T:System.AsyncCallback" /> que referencia o método a ser invocado quando a operação de gravação for concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Inicia uma operação de gravação assíncrona que grava <see cref="T:System.Byte" />s do buffer especificado no fluxo.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a criptografia, autenticação, ou criptografia e assinatura estiverem habilitadas, esse método lê os dados do buffer, criptografa, sinais, ou criptografa e assina e transmite-o usando o fluxo subjacente. Se nenhuma segurança de serviços, como assinatura ou criptografia de dados estão em uso, esse método inicia uma operação de gravação assíncrona no fluxo subjacente.  
  
 Esse método é assíncrono e não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use o <xref:System.Net.Security.NegotiateStream.Read%2A> método.  
  
 A operação de leitura assíncrona deve ser concluída chamando o <xref:System.Net.Security.NegotiateStream.EndWrite%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 O <xref:System.Net.Security.NegotiateStream> classe não oferece suporte a várias operações de gravação simultâneas. Se você tentar iniciar uma operação de gravação, enquanto outra operação de gravação já está em execução no mesmo fluxo, um <xref:System.NotSupportedException> exceção será lançada.  
  
 Você não pode chamar esse método até que você tenha sido autenticado com êxito. Para autenticar, chame um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a partir de uma operação de gravação assíncrona.  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 O seguinte método é chamado quando a operação for concluída.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
\- ou - 
 <paramref name="offset" /> é maior que o comprimento do <paramref name="buffer" />.  
  
\- ou - 
 <paramref name="offset" /> mais a contagem é maior que o comprimento de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.  
  
\- ou - 
A criptografia está em uso, mas não foi possível criptografar os dados.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de gravação em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente é legível.</summary>
        <value>
          <see langword="true" /> Se a autenticação ocorreu e o fluxo subjacente é legível; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se tiver ocorrido uma autenticação bem-sucedida, essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.CanRead%2A> propriedade no fluxo subjacente. O fluxo subjacente é especificado quando você cria uma instância da <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente é pesquisável.</summary>
        <value>Essa propriedade sempre retorna <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você não deve tentar definir a posição do <xref:System.Net.Security.NegotiateStream> objeto ou o fluxo subjacente. O fluxo subjacente é especificado quando você cria uma instância da <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente dá suporte a tempos limite.</summary>
        <value>
          <see langword="true" /> Se o fluxo subjacente dá suporte a tempos limite; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.CanTimeout%2A> propriedade no fluxo subjacente. O fluxo subjacente é especificado quando você cria uma instância da <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente é gravável.</summary>
        <value>
          <see langword="true" /> Se a autenticação ocorreu e o fluxo subjacente é gravável; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se tiver ocorrido uma autenticação bem-sucedida, essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.CanWrite%2A> propriedade no fluxo subjacente. O fluxo subjacente é especificado quando você cria uma instância da <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="negotiateStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Net.Security.NegotiateStream" /> e opcionalmente libera os recursos gerenciados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método é chamado pelo método público `Dispose()` e pelo método <xref:System.Object.Finalize%2A>. `Dispose()` invoca o método `Dispose(Boolean)` protegido com o parâmetro `disposing` definido como `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` com `disposing` definido como `false`.  
  
 Quando o `disposing` parâmetro for true, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Net.Security.NegotiateStream> referências. Este método invoca o método `Dispose()` de cada objeto referenciado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> pode ser chamado várias vezes por outros objetos. Ao substituir <see langword="Dispose(Boolean)" /> tenha cuidado para não referenciar objetos que tenham sido descartados anteriormente em uma chamada anterior para <see langword="Dispose" />. Para obter mais informações sobre como implementar <see langword="Dispose(Boolean)" />, consulte [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Para obter mais informações sobre <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [substituindo o método Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsClient : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsClient : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</param>
        <summary>Encerra uma operação assíncrona de autenticação de cliente pendente iniciada com uma chamada para <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz. Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 Para executar essa operação de forma síncrona, use um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O <paramref name="asyncResult" /> não foi criado por uma chamada a <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">Nenhuma autenticação de cliente pendente a ser concluída.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsServer : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsServer : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsServer asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</param>
        <summary>Encerra uma operação assíncrona de autenticação de cliente pendente iniciada com uma chamada para <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz.  
  
 Quando a autenticação for bem-sucedida, você deve verificar a <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.NegotiateStream>. Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriedade para determinar se a autenticação mútua ocorreu.  
  
 Se a autenticação falhar, você receberá uma <xref:System.Security.Authentication.AuthenticationException> ou um <xref:System.Security.Authentication.InvalidCredentialException>. Nesse caso, você pode tentar novamente a autenticação com uma credencial diferente.  
  
 Para executar essa operação de forma síncrona, use o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O <paramref name="asyncResult" /> não foi criado por uma chamada a <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">A autenticação falhou. Você pode usar esse objeto para tentar realizar a autenticação novamente.</exception>
        <exception cref="T:System.InvalidOperationException">Nenhuma autenticação pendente a ser concluída.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="negotiateStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>Encerra uma operação de leitura assíncrona que foi iniciada com uma chamada para <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <returns>Um valor <see cref="T:System.Int32" /> que especifica o número de bytes lidos do fluxo subjacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz.  
  
 Para executar essa operação de forma síncrona, use o <xref:System.Net.Security.NegotiateStream.Read%2A> método.  
  
 Você não pode chamar esse método até que você tenha sido autenticado com êxito. Para autenticar, chame um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra terminando assíncrona a operação de leitura. Para obter um exemplo que demonstra a iniciar a operação, consulte <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O asyncResult não foi criado por uma chamada para <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
        <exception cref="T:System.IO.IOException">Falha na operação de leitura.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="negotiateStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>Encerra uma operação de gravação assíncrona que foi iniciada com uma chamada para <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz.  
  
 Você não pode chamar esse método até que você tenha sido autenticado com êxito. Para autenticar, chame um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
 Para executar essa operação de forma síncrona, use o <xref:System.Net.Security.NegotiateStream.Write%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra um método que é chamado para concluir a operação de gravação assíncrona. Para obter um exemplo que demonstra a iniciar a operação, consulte <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O asyncResult não foi criado por uma chamada para <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="negotiateStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Faz com que os dados armazenados em buffer sejam gravados no dispositivo subjacente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invoca <xref:System.IO.Stream.Flush%2A> no fluxo subjacente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a liberar o fluxo.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica como o servidor pode usar as credenciais do cliente.</summary>
        <value>Um dos valores de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você deve autenticar com êxito antes de chamar esse método. Os clientes para especificar o nível de representação quando solicitam autenticação chamando um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> métodos. Se você autenticar sem especificar um <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> é usado.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A autenticação falhou ou não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se a autenticação foi bem-sucedida.</summary>
        <value>
          <see langword="true" /> Se a autenticação bem-sucedida ocorreu; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os clientes se autenticar ao chamar o <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> métodos. Servidores autenticar ao chamar o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEncrypted : bool" Usage="System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se esse <see cref="T:System.Net.Security.NegotiateStream" /> usa criptografia de dados.</summary>
        <value>
          <see langword="true" /> Se os dados são criptografados antes de serem transmitidas pela rede e descriptografados quando ele atinge o ponto de extremidade remoto; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A criptografia ajuda a proteger a privacidade dos dados. ou seja, ele ajuda a garantir que, enquanto os dados estão em trânsito, ele não pode ser decifrado por terceiros.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMutuallyAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o servidor e o cliente foram autenticados.</summary>
        <value>
          <see langword="true" /> Se o servidor tiver sido autenticado; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação mútua é especificada pelo cliente quando o cliente quer o servidor para fornecer credenciais para autenticação. Por padrão, os clientes solicitam a autenticação mútua.  
  
 O protocolo de negociação seleciona NTLM ou Kerberos, dependendo dos protocolos de segurança com suporte pelo cliente e servidor. NTLM não oferece suporte à autenticação mútua.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServer : bool" Usage="System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o lado local da conexão usada por esse <see cref="T:System.Net.Security.NegotiateStream" /> foi autenticado como o servidor.</summary>
        <value>
          <see langword="true" /> Se o ponto de extremidade local foi autenticado com êxito como o lado do servidor da conexão autenticada; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a autenticação falhou ou não ocorreu, essa propriedade retornará `false`.  
  
 Para autenticar-se que o servidor, chame o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSigned : bool" Usage="System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se os dados enviados usando esse fluxo são assinados.</summary>
        <value>
          <see langword="true" /> Se os dados são assinados antes de serem transmitidas; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Assinatura de dados ajuda a proteger a integridade dos dados. ou seja, ele ajuda o destinatário determinar se os dados foram violados em trânsito.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o comprimento do fluxo subjacente.</summary>
        <value>Um <see cref="T:System.Int64" /> que especifica o comprimento do fluxo subjacente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.Length%2A> propriedade no fluxo subjacente. Se o fluxo subjacente não é pesquisável, essa propriedade normalmente lançará uma exceção. O tipo de tempo de execução do fluxo subjacente determina o tipo de tempo de execução da exceção que é lançada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Não há suporte par obter o valor dessa propriedade quando o fluxo subjacente é um <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a posição atual no fluxo subjacente.</summary>
        <value>Um <see cref="T:System.Int64" /> que especifica a posição atual no fluxo subjacente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.Position%2A> propriedade no fluxo subjacente. Se o fluxo subjacente não é pesquisável, essa propriedade normalmente lançará uma exceção. O tipo de tempo de execução do fluxo subjacente determina o tipo de tempo de execução da exceção que é lançada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Não há suporte para a configuração dessa propriedade.  
  
\- ou - 
Não há suporte par obter o valor dessa propriedade quando o fluxo subjacente é um <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="negotiateStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que recebe os bytes lidos do fluxo.</param>
        <param name="offset">Um <see cref="T:System.Int32" /> contendo o local baseado em zero no <c>buffer</c> no qual será iniciado o armazenamento dos dados lidos desse fluxo.</param>
        <param name="count">Um <see cref="T:System.Int32" /> contendo o número máximo de bytes a serem lidos do fluxo.</param>
        <summary>Lê os dados desse fluxo e o armazena na matriz especificada.</summary>
        <returns>Um valor <see cref="T:System.Int32" /> que especifica o número de bytes lidos do fluxo subjacente. Quando não há mais dados a serem lidos, retorna 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O método lê um máximo de `count` bytes atuais de fluxo e armazena-os no `buffer` começando em `offset`.  
  
 Você não pode chamar esse método até que você tenha sido autenticado com êxito. Para autenticar, chame um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
 Para executar essa operação assíncrona, use o <xref:System.Net.Security.NegotiateStream.BeginRead%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a leitura de um <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Falha na operação de leitura.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
        <exception cref="T:System.NotSupportedException">Uma operação <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> já está em andamento.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a quantidade de tempo que uma operação de leitura é bloqueada aguardando dados.</summary>
        <value>Um <see cref="T:System.Int32" /> que especifica a quantidade de tempo que decorrerá antes da falha de uma operação de leitura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.ReadTimeout%2A> propriedade no fluxo subjacente. Quando você definir essa propriedade, o <xref:System.IO.Stream.ReadTimeout%2A> valor no fluxo subjacente é definido como o valor especificado.  
  
 Se o fluxo subjacente é um <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> está em milissegundos e é definido como <xref:System.Threading.Timeout.Infinite> por padrão, portanto, o que ler operações não têm tempo limite.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteIdentity : System.Security.Principal.IIdentity" Usage="System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém informações sobre a identidade da parte remota compartilhando este fluxo autenticado.</summary>
        <value>Um <see cref="T:System.Security.Principal.IIdentity" /> objeto que descreve a identidade do ponto de extremidade remoto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando acessado pelo cliente, essa propriedade retorna um <xref:System.Security.Principal.GenericIdentity> que contém o nome Principal de serviço (SPN) do servidor e o protocolo de autenticação usado. Quando acessado pelo servidor, essa propriedade retorna um <xref:System.Security.Principal.WindowsIdentity> que descreve o cliente. Se o <xref:System.Security.Principal.WindowsIdentity> é não está disponível, informações de cliente são retornadas para o servidor em um <xref:System.Security.Principal.GenericIdentity>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A autenticação falhou ou não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="negotiateStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Este valor é ignorado.</param>
        <param name="origin">Este valor é ignorado.</param>
        <summary>Gera <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Sempre gera um <see cref="T:System.NotSupportedException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Não chame este método. Ele é herdado, mas não é suportado pelo <xref:System.Net.Security.NegotiateStream>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Não há suporte para busca no <see cref="T:System.Net.Security.NegotiateStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="negotiateStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Um valor <see cref="T:System.Int64" /> que especifica o comprimento do fluxo.</param>
        <summary>Define o comprimento do fluxo subjacente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="negotiateStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que fornece os bytes gravados no fluxo.</param>
        <param name="offset">Um <see cref="T:System.Int32" /> contendo o local baseado em zero no <c>buffer</c> em que será iniciada a leitura dos bytes a serem gravados no fluxo.</param>
        <param name="count">Um <see cref="T:System.Int32" /> contendo o número de bytes a serem lidos do <c>buffer</c>.</param>
        <summary>Grave o número especificado de <see cref="T:System.Byte" />s no fluxo subjacente usando o buffer e o deslocamento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a criptografia, autenticação, ou criptografia e assinatura estiverem habilitadas, esse método lê os dados do buffer, criptografa, sinais, ou criptografa e assina e transmite-o usando o fluxo subjacente. Se nenhuma segurança de serviços, como assinatura ou criptografia de dados estão em uso, esse método invocará <xref:System.IO.Stream.Write%2A> no fluxo subjacente.  
  
 Esse método bloqueia enquanto a operação de gravação é concluída. Para evitar bloqueio enquanto a operação for concluída, use o <xref:System.Net.Security.NegotiateStream.Write%2A> método.  
  
 Você não pode chamar esse método até que você tenha sido autenticado com êxito. Para autenticar, chame um dos <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> métodos.  
  
 O <xref:System.Net.Security.NegotiateStream> classe não oferece suporte a várias operações de gravação simultâneas. Se você tentar iniciar uma operação de gravação, enquanto outra operação de gravação já está em execução no mesmo fluxo, um <xref:System.NotSupportedException> exceção será lançada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a gravação em um <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
\- ou - 
 <paramref name="offset" /> é maior que o comprimento do <paramref name="buffer" />.  
  
\- ou - 
 <paramref name="offset" /> mais a contagem é maior que o comprimento de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.  
  
\- ou - 
A criptografia está em uso, mas não foi possível criptografar os dados.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de gravação em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a quantidade de tempo pela qual uma operação de gravação fica bloqueada aguardando dados.</summary>
        <value>Um <see cref="T:System.Int32" /> que especifica a quantidade de tempo que decorrerá antes da falha de uma operação de gravação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao invocar o <xref:System.IO.Stream.WriteTimeout%2A> propriedade no fluxo subjacente. Para operações de conjunto, define o valor especificado de <xref:System.IO.Stream.WriteTimeout%2A> valor no fluxo subjacente.  
  
 Se o fluxo subjacente é um <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> está em milissegundos e é definido como <xref:System.Threading.Timeout.Infinite> por padrão, portanto, o que gravar operações não têm tempo limite.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>