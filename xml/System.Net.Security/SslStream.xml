<Type Name="SslStream" FullName="System.Net.Security.SslStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bada0e51ffc8032cc2a85028ad35057a90420171" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31911387" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SslStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SslStream extends System.Net.Security.AuthenticatedStream implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.SslStream" />
  <TypeSignature Language="VB.NET" Value="Public Class SslStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class SslStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um fluxo usado para comunicação cliente-servidor que usa o protocolo de segurança SSL (Secure Socket Layer) para autenticar o servidor e, opcionalmente, o cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os protocolos SSL ajudam a fornecer confidencialidade e integridade Verificando mensagens transmitidas usando um <xref:System.Net.Security.SslStream>. Uma conexão SSL, como a fornecida por <xref:System.Net.Security.SslStream>, deve ser usado quando se comunicar informações confidenciais entre um cliente e um servidor. Usando um <xref:System.Net.Security.SslStream> ajuda a impedir que qualquer pessoa ler e violação com informações enquanto ele está em trânsito na rede.  
  
 Um <xref:System.Net.Security.SslStream> instância transmite dados usando um fluxo que você fornecer ao criar o <xref:System.Net.Security.SslStream>. Ao fornecer esse fluxo subjacente, você tem a opção para especificar se fechar o <xref:System.Net.Security.SslStream> também fechará o fluxo subjacente. Normalmente, o <xref:System.Net.Security.SslStream> classe é usada com a <xref:System.Net.Sockets.TcpClient> e <xref:System.Net.Sockets.TcpListener> classes. O <xref:System.Net.Sockets.TcpClient.GetStream%2A> método fornece uma <xref:System.Net.Sockets.NetworkStream> adequado para uso com o <xref:System.Net.Security.SslStream> classe.  
  
 Depois de criar um <xref:System.Net.Security.SslStream>, o servidor e, opcionalmente, o cliente devem ser autenticadas. O servidor deve fornecer um X509 certificado que estabelece uma prova de sua identidade e pode solicitar que o cliente também fazer isso. Autenticação deve ser executada antes de transmitir informações usando um <xref:System.Net.Security.SslStream>. Os clientes iniciam a autenticação usando o síncrona <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> métodos, que bloqueiam até que a autenticação é concluída, ou assíncronos <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> métodos, que não bloqueiam aguardando a autenticação seja concluída. Servidores de iniciam a autenticação usando o síncrona <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> ou assíncronas <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos. Cliente e o servidor devem iniciar a autenticação.  
  
 A autenticação é manipulada pelo provedor de canal do provedor de suporte de segurança (SSPI). O cliente recebe uma oportunidade para controlar a validação do certificado do servidor, especificando um <xref:System.Net.Security.RemoteCertificateValidationCallback> delegar ao criar um <xref:System.Net.Security.SslStream>. O servidor também pode controlar a validação, fornecendo um <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate. O método referenciado pelo delegado inclui o certificado a parte remota e os erros encontrado ao validar o certificado SSPI. Observe que, se o servidor especifica um delegado, método do representante é invocado, independentemente se o servidor solicitou autenticação de cliente. Se o servidor não solicitou autenticação de cliente, o método de delegado do servidor recebe um certificado nulo e uma matriz vazia de erros de certificado.  
  
 Se o servidor exigir autenticação de cliente, o cliente deve especificar um ou mais certificados para autenticação. Se o cliente tiver mais de um certificado, o cliente pode fornecer um <xref:System.Net.Security.LocalCertificateSelectionCallback> delegado para selecionar o certificado correto para o servidor. Certificados do cliente devem estar localizados no "Meu" repositório de certificados do usuário atual. Não há suporte para autenticação de cliente por meio de certificados para o <xref:System.Security.Authentication.SslProtocols.Ssl2> protocolo (SSL versão 2).  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e o <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 Quando o processo de autenticação, também conhecido como o handshake SSL, tiver êxito, a identidade do servidor (e, opcionalmente, o cliente) é estabelecida e o <xref:System.Net.Security.SslStream> pode ser usado pelo cliente e servidor para troca de mensagens. Antes de enviar ou receber informações, o cliente e o servidor devem verificar os serviços de segurança e níveis fornecidos pelo <xref:System.Net.Security.SslStream> para determinar se o protocolo, algoritmos e pontos fortes selecionados atendem aos seus requisitos de integridade e confidencialidade. Se as configurações atuais não forem suficientes, o fluxo deve ser fechado. Você pode verificar os serviços de segurança fornecidos pelo <xref:System.Net.Security.SslStream> usando o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades. A tabela a seguir mostra os elementos que reportam as configurações de criptografia usadas para autenticação, criptografia e assinatura de dados.  
  
|Elemento|Membros|  
|-------------|-------------|  
|O protocolo de segurança usado para autenticar o servidor e, opcionalmente, o cliente.|O <xref:System.Net.Security.SslStream.SslProtocol%2A> propriedade e os respectivos <xref:System.Security.Authentication.SslProtocols> enumeração.|  
|O algoritmo de troca de chaves.|O <xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> propriedade e os respectivos <xref:System.Security.Authentication.ExchangeAlgorithmType> enumeração.|  
|O algoritmo de integridade de mensagem.|O <xref:System.Net.Security.SslStream.HashAlgorithm%2A> propriedade e os respectivos <xref:System.Security.Authentication.HashAlgorithmType> enumeração.|  
|O algoritmo de confidencialidade da mensagem.|O <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> propriedade e os respectivos <xref:System.Security.Authentication.CipherAlgorithmType> enumeração.|  
|Os pontos fortes dos algoritmos selecionados.|O <xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>, <xref:System.Net.Security.SslStream.HashStrength%2A>, e <xref:System.Net.Security.SslStream.CipherStrength%2A> propriedades.|  
  
 Após uma autenticação bem-sucedida, você pode enviar dados usando o síncrona <xref:System.Net.Security.SslStream.Write%2A> ou assíncronas <xref:System.Net.Security.SslStream.BeginWrite%2A> métodos. Você pode receber dados usando o síncrona <xref:System.Net.Security.SslStream.Read%2A> ou assíncronas <xref:System.Net.Security.SslStream.BeginRead%2A> métodos.  
  
 Se você tiver especificado para o <xref:System.Net.Security.SslStream.%23ctor%2A> que o fluxo subjacente deve ser deixado aberto, você é responsável por fechando o fluxo quando você terminar de usá-lo.  
  
> [!NOTE]
>  Se o aplicativo que cria o <xref:System.Net.Security.SslStream> objeto é executado com as credenciais de um usuário Normal, o aplicativo não será capaz de acessar certificados instalados no repositório de computador local, a menos que a permissão tiver sido fornecida explicitamente ao usuário para fazer isso.  
  
 <xref:System.Net.Security.SslStream> supõe que um tempo limite juntamente com qualquer outro <xref:System.IO.IOException> quando um é gerado do fluxo interno será tratado como fatal pelo chamador. Reutilizando um <xref:System.Net.Security.SslStream> instância após um tempo limite retornará lixo. Um aplicativo deve <xref:System.IO.Stream.Close%2A> o <xref:System.Net.Security.SslStream> e gerará uma exceção nesses casos.  
  
 O .NET Framework 4.6 inclui um novo recurso de segurança que bloqueia insegura criptografia e algoritmos para conexões de hash. Aplicativos de uso do TLS/SSL por meio de APIs como HttpClient HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. e o direcionamento do .NET Framework 4.6 obtém o comportamento mais seguros por padrão.  
  
 Os desenvolvedores talvez queira desativar esse comportamento para manter a interoperabilidade com seus serviços SSL3 existentes ou TLS com serviços de RC4. [Este artigo](https://support.microsoft.com/kb/3069494) explica como modificar seu código para que o novo comportamento está desabilitado.  
  
 O .NET Framework 4.7 adiciona novas sobrecargas para os métodos de autenticação SslStreams que não especificam uma versão do TLS, mas em vez disso, use a versão TLS definida como o padrão do sistema em [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx). Use esses métodos em seu aplicativo como uma maneira de conseguir modificar posteriormente os padrões como TLS versão melhor prática alterações ao longo do tempo, sem a necessidade de recompilar e reimplantar o aplicativo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar um <xref:System.Net.Sockets.TcpListener> que usa o <xref:System.Net.Security.SslStream> classe para se comunicar com clientes.  
  
 [!code-cpp[NclSslServerSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#0)]
 [!code-csharp[NclSslServerSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#0)]  
  
 O exemplo de código a seguir demonstra como criar um <xref:System.Net.Sockets.TcpClient> que usa o <xref:System.Net.Security.SslStream> classe para se comunicar com um servidor.  
  
 [!code-cpp[NclSslClientSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientSync/CPP/clientsync.cpp#0)]
 [!code-csharp[NclSslClientSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientSync/CS/clientsync.cs#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Security.NegotiateStream" />
    <altmember cref="T:System.Net.Security.AuthenticatedStream" />
    <altmember cref="T:System.IO.IOException" />
    <altmember cref="T:System.IO.Stream" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.SslStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para evitar o <xref:System.Net.Security.SslStream> de fechar o fluxo que você fornecer, use o <xref:System.Net.Security.SslStream.%23ctor%2A> construtor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SslStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.SslStream" /> usando o <see cref="T:System.IO.Stream" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se um valor não for especificado no arquivo de configuração para encryptionpolicy, o <xref:System.Net.Security.EncryptionPolicy> padrão <xref:System.Net.Security.EncryptionPolicy.RequireEncryption?displayProperty=nameWithType> para a <xref:System.Net.Security.SslStream> instância que é construída.  
  
 O uso da criptografia Null é necessário quando a política de criptografia é definida como <xref:System.Net.Security.EncryptionPolicy.NoEncryption?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> não é legível.  
  
 - ou -  
  
 <paramref name="innerStream" /> não é gravável.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> é <see langword="null" />.  
  
 - ou -  
  
 <paramref name="innerStream" /> é igual a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SslStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados.</param>
        <param name="leaveInnerStreamOpen">Um valor booliano que indica o comportamento de fechamento do objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados. Esse parâmetro indica se o fluxo interno foi deixado aberto.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.SslStream" /> usando o <see cref="T:System.IO.Stream" /> e o comportamento de fechamento de fluxo especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você especifica `true` para o `leaveStreamOpen` parâmetro, fechando o <xref:System.Net.Security.SslStream> não tem efeito sobre o `innerStream` fluxo; você deve fechar explicitamente `innerStream` quando você não precisa mais dela.  
  
 Se um valor não for especificado no arquivo de configuração para encryptionpolicy, o <xref:System.Net.Security.EncryptionPolicy> padrão <xref:System.Net.Security.EncryptionPolicy.RequireEncryption?displayProperty=nameWithType> para a <xref:System.Net.Security.SslStream> instância que é construída.  
  
 O uso da criptografia Null é necessário quando a política de criptografia é definida como <xref:System.Net.Security.EncryptionPolicy.NoEncryption?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar este construtor.  
  
 [!code-cpp[NclSslServerSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#1)]
 [!code-csharp[NclSslServerSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> não é legível.  
  
 - ou -  
  
 <paramref name="innerStream" /> não é gravável.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> é <see langword="null" />.  
  
 - ou -  
  
 <paramref name="innerStream" /> é igual a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen, class System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean, userCertificateValidationCallback As RemoteCertificateValidationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SslStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen, System::Net::Security::RemoteCertificateValidationCallback ^ userCertificateValidationCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
        <Parameter Name="userCertificateValidationCallback" Type="System.Net.Security.RemoteCertificateValidationCallback" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados.</param>
        <param name="leaveInnerStreamOpen">Um valor booliano que indica o comportamento de fechamento do objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados. Esse parâmetro indica se o fluxo interno foi deixado aberto.</param>
        <param name="userCertificateValidationCallback">Um delegado <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> responsável por validar o certificado fornecido pela parte remota.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.SslStream" /> usando o <see cref="T:System.IO.Stream" /> especificado, o comportamento de fechamento de fluxo e o delegado de validação de certificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você especifica `true` para o `leaveStreamOpen` parâmetro, fechando o <xref:System.Net.Security.SslStream> não tem efeito sobre o `innerStream` fluxo; você deve fechar explicitamente `innerStream` quando você não precisa mais dela.  
  
 O `userCertificateValidationCallback` do delegado `certificateErrors` argumento contém quaisquer códigos de erro do Windows retornados pelo canal de Interface de provedor de suporte de segurança (SSPI). O valor de retorno do método invocado pelo `userCertificateValidationCallback` delegado determina se a autenticação for bem-sucedida.  
  
 O protocolo de segurança e algoritmos de criptografia já estão selecionados quando o `userCertificateValidationCallback` método do representante é invocado. Você pode usar o método para determinar se os algoritmos de criptografia selecionados e pontos fortes são suficientes para o seu aplicativo. Se não, o método deve retornar `false` para impedir que o <xref:System.Net.Security.SslStream> seja criado.  
  
 Se um valor não for especificado no arquivo de configuração para encryptionpolicy, o <xref:System.Net.Security.EncryptionPolicy> padrão <xref:System.Net.Security.EncryptionPolicy.RequireEncryption?displayProperty=nameWithType> para a <xref:System.Net.Security.SslStream> instância que é construída.  
  
 O uso da criptografia Null é necessário quando a política de criptografia é definida como <xref:System.Net.Security.EncryptionPolicy.NoEncryption?displayProperty=nameWithType>.  
  
> [!NOTE]
>  A estrutura armazena em cache as sessões SSL conforme eles são criados e tenta reutilizar uma sessão em cache para uma nova solicitação, se possível. Ao tentar reutilizar uma sessão SSL, a estrutura usa o primeiro elemento da <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (se houver), ou tentar reutilizar um sessões anônimas se <xref:System.Net.HttpWebRequest.ClientCertificates%2A> está vazio.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um <xref:System.Net.Security.SslStream> e inicia a parte cliente de autenticação.  
  
 [!code-cpp[NclSslClientSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientSync/CPP/clientsync.cpp#4)]
 [!code-csharp[NclSslClientSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientSync/CS/clientsync.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> não é legível.  
  
 - ou -  
  
 <paramref name="innerStream" /> não é gravável.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> é <see langword="null" />.  
  
 - ou -  
  
 <paramref name="innerStream" /> é igual a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen, class System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, class System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean, userCertificateValidationCallback As RemoteCertificateValidationCallback, userCertificateSelectionCallback As LocalCertificateSelectionCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SslStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen, System::Net::Security::RemoteCertificateValidationCallback ^ userCertificateValidationCallback, System::Net::Security::LocalCertificateSelectionCallback ^ userCertificateSelectionCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
        <Parameter Name="userCertificateValidationCallback" Type="System.Net.Security.RemoteCertificateValidationCallback" />
        <Parameter Name="userCertificateSelectionCallback" Type="System.Net.Security.LocalCertificateSelectionCallback" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados.</param>
        <param name="leaveInnerStreamOpen">Um valor booliano que indica o comportamento de fechamento do objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados. Esse parâmetro indica se o fluxo interno foi deixado aberto.</param>
        <param name="userCertificateValidationCallback">Um delegado <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> responsável por validar o certificado fornecido pela parte remota.</param>
        <param name="userCertificateSelectionCallback">Um delegado de <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> responsável por selecionar o certificado usado para autenticação.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.SslStream" /> usando o <see cref="T:System.IO.Stream" /> especificado, o comportamento de fechamento de fluxo, o delegado de validação de certificado e o delegado de seleção de certificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você especifica `true` para o `leaveStreamOpen` parâmetro, fechando o <xref:System.Net.Security.SslStream> não tem efeito sobre o `innerStream` fluxo; você deve fechar explicitamente `innerStream` quando você não precisa mais dela.  
  
 O `userCertificateValidationCallback` do delegado `certificateErrors` argumento contém quaisquer códigos de erro do Windows retornados pelo canal de Interface de provedor de suporte de segurança (SSPI). O valor de retorno do método invocado pelo `userCertificateValidationCallback` delegado determina se a autenticação for bem-sucedida.  
  
 O protocolo de segurança e algoritmos de criptografia já estão selecionados quando o `userCertificateValidationCallback` método do representante é invocado. Você pode usar o método para determinar se os algoritmos de criptografia selecionados e pontos fortes são suficientes para o seu aplicativo. Se não, o método deve retornar `false` para impedir que o <xref:System.Net.Security.SslStream> seja criado.  
  
 O `userCertificateSelectionCallback` delegado é útil quando seu aplicativo tiver vários certificados e dinamicamente deve escolher um certificado. Os certificados no repositório de "MY" são passados para o método invocado pelo delegado.  
  
 Se um valor não for especificado no arquivo de configuração para encryptionpolicy, o <xref:System.Net.Security.EncryptionPolicy> padrão <xref:System.Net.Security.EncryptionPolicy.RequireEncryption?displayProperty=nameWithType> para a <xref:System.Net.Security.SslStream> instância que é construída.  
  
 O uso da criptografia Null é necessário quando a política de criptografia é definida como <xref:System.Net.Security.EncryptionPolicy.NoEncryption?displayProperty=nameWithType>.  
  
> [!NOTE]
>  A estrutura armazena em cache as sessões SSL conforme eles são criados e tenta reutilizar uma sessão em cache para uma nova solicitação, se possível. Ao tentar reutilizar uma sessão SSL, a estrutura usa o primeiro elemento da P:System.Net.HttpWebRequest.ClientCertificates (se houver) ou tenta reutilizar um sessões anônimas se P:System.Net.HttpWebRequest.ClientCertificates está vazia.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar este construtor. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Net.Security.SslStream> classe.  
  
 [!code-cpp[NclSslClientAsync#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientAsync/CPP/NclSslClientAsync.cpp#6)]
 [!code-csharp[NclSslClientAsync#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientAsync/CS/clientasync.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> não é legível.  
  
 - ou -  
  
 <paramref name="innerStream" /> não é gravável.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> é <see langword="null" />.  
  
 - ou -  
  
 <paramref name="innerStream" /> é igual a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen, class System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, class System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, valuetype System.Net.Security.EncryptionPolicy encryptionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SslStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen, System::Net::Security::RemoteCertificateValidationCallback ^ userCertificateValidationCallback, System::Net::Security::LocalCertificateSelectionCallback ^ userCertificateSelectionCallback, System::Net::Security::EncryptionPolicy encryptionPolicy);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoLimitation("encryptionPolicy is ignored")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
        <Parameter Name="userCertificateValidationCallback" Type="System.Net.Security.RemoteCertificateValidationCallback" />
        <Parameter Name="userCertificateSelectionCallback" Type="System.Net.Security.LocalCertificateSelectionCallback" />
        <Parameter Name="encryptionPolicy" Type="System.Net.Security.EncryptionPolicy" />
      </Parameters>
      <Docs>
        <param name="innerStream">Um objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados.</param>
        <param name="leaveInnerStreamOpen">Um valor booliano que indica o comportamento de fechamento do objeto <see cref="T:System.IO.Stream" /> usado pelo <see cref="T:System.Net.Security.SslStream" /> para enviar e receber dados. Esse parâmetro indica se o fluxo interno foi deixado aberto.</param>
        <param name="userCertificateValidationCallback">Um delegado <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> responsável por validar o certificado fornecido pela parte remota.</param>
        <param name="userCertificateSelectionCallback">Um delegado de <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> responsável por selecionar o certificado usado para autenticação.</param>
        <param name="encryptionPolicy">O <see cref="T:System.Net.Security.EncryptionPolicy" /> a ser usado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Security.SslStream" /> usando o <see cref="T:System.IO.Stream" /> especificado</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O uso da criptografia Null é necessária quando o `encryptionPolicy` parâmetro está definido como <xref:System.Net.Security.EncryptionPolicy.NoEncryption?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> não é legível.  
  
 - ou -  
  
 <paramref name="innerStream" /> não é gravável.  
  
 - ou -  
  
 <paramref name="encryptionPolicy" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> é <see langword="null" />.  
  
 - ou -  
  
 <paramref name="innerStream" /> é igual a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Autenticação do lado do cliente de uma conexão cliente-servidor.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (string targetHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(string targetHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (targetHost As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::String ^ targetHost);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsClient(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <summary>Chamado por clientes para autenticar o servidor e, como opção, o cliente em uma conexão de cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)] Nenhum certificado do cliente é usado na autenticação. A lista de revogação de certificado não é verificada durante a autenticação. O valor especificado para `targetHost` deve corresponder ao nome no certificado do servidor.  
  
 Quando a autenticação for bem-sucedida, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (targetHost As String, clientCertificates As X509CertificateCollection, checkCertificateRevocation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::String ^ targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ clientCertificates, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">O <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> que contém os certificados de cliente.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado por clientes para autenticar o servidor e, como opção, o cliente em uma conexão de cliente-servidor. O processo de autenticação usa o protocolo SSL padrão do sistema e a coleção de certificado especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Quando a autenticação for bem-sucedida, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (targetHost As String, clientCertificates As X509CertificateCollection, enabledSslProtocols As SslProtocols, checkCertificateRevocation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::String ^ targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ clientCertificates, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">O <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> que contém os certificados de cliente.</param>
        <param name="enabledSslProtocols">O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado por clientes para autenticar o servidor e, como opção, o cliente em uma conexão de cliente-servidor. O processo de autenticação usa o protocolo SSL e coleção de certificado especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Quando a autenticação for bem-sucedida, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Autenticação do lado do cliente de uma conexão de cliente-servidor como uma operação assíncrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (targetHost As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::String ^ targetHost);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsClientAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <summary>Chamado por clientes para autenticar o servidor e, como opção, o cliente em uma conexão de cliente-servidor como uma operação assíncrona.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
 O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)] Nenhum certificado do cliente é usado na autenticação. A lista de revogação de certificado não é verificada durante a autenticação. O valor especificado para `targetHost` deve corresponder ao nome no certificado do servidor.  
  
 Quando a autenticação for bem-sucedida, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.Security.SslClientAuthenticationOptions sslClientAuthenticationOptions, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.Security.SslClientAuthenticationOptions sslClientAuthenticationOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.Net.Security.SslClientAuthenticationOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::Security::SslClientAuthenticationOptions ^ sslClientAuthenticationOptions, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sslClientAuthenticationOptions" Type="System.Net.Security.SslClientAuthenticationOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sslClientAuthenticationOptions">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (targetHost As String, clientCertificates As X509CertificateCollection, checkCertificateRevocation As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::String ^ targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ clientCertificates, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">O <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> que contém os certificados de cliente.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado por clientes para autenticar o servidor e, como opção, o cliente em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa o protocolo SSL padrão do sistema e a coleção de certificado especificados.</summary>
        <returns>O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Quando a autenticação for bem-sucedida, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (targetHost As String, clientCertificates As X509CertificateCollection, enabledSslProtocols As SslProtocols, checkCertificateRevocation As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::String ^ targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ clientCertificates, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">O <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> que contém os certificados de cliente.</param>
        <param name="enabledSslProtocols">O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado por clientes para autenticar o servidor e, como opção, o cliente em uma conexão de cliente-servidor como uma operação assíncrona. O processo de autenticação usa o protocolo SSL e coleção de certificado especificados.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
 O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Quando a autenticação for bem-sucedida, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Chamado por servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (serverCertificate As X509Certificate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O certificado usado para autenticar o servidor.</param>
        <summary>Chamada pelos servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor usando o certificado especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)] A lista de revogação de certificado não é verificada durante a autenticação. O cliente não é necessário fornecer um certificado para autenticação.  
  
 Esse método bloqueia até que a operação seja concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> sobrecargas do método.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 A autenticação de cliente usando esse <see cref="T:System.Net.Security.SslStream" /> foi tentada anteriormente.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (serverCertificate As X509Certificate, clientCertificateRequired As Boolean, checkCertificateRevocation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="clientCertificateRequired">Um valor <see cref="T:System.Boolean" /> que especifica se um certificado é solicitado ao cliente para que ele realize a autenticação. Observe que isso é apenas uma solicitação. Se nenhum certificado for fornecido, o servidor ainda aceitará a solicitação de conexão.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado pelos servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor usando os certificados e requisitos especificados e o protocolo de segurança padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Esse método bloqueia até que a operação seja concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> sobrecargas do método.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 A autenticação de cliente usando esse <see cref="T:System.Net.Security.SslStream" /> foi tentada anteriormente.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (serverCertificate As X509Certificate, clientCertificateRequired As Boolean, enabledSslProtocols As SslProtocols, checkCertificateRevocation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, bool clientCertificateRequired, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="clientCertificateRequired">Um valor <see cref="T:System.Boolean" /> que especifica se um certificado é solicitado ao cliente para que ele realize a autenticação. Observe que isso é apenas uma solicitação. Se nenhum certificado for fornecido, o servidor ainda aceitará a solicitação de conexão.</param>
        <param name="enabledSslProtocols">O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado pelos servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor usando os certificados especificados, requisitos e o protocolo de segurança.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Esse método bloqueia até que a operação seja concluída. Para evitar o bloqueio até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> sobrecargas do método.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabledSslProtocols" /> não é um valor <see cref="T:System.Security.Authentication.SslProtocols" /> válido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 A autenticação de cliente usando esse <see cref="T:System.Net.Security.SslStream" /> foi tentada anteriormente.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Chamado por servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor como uma operação assíncrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (serverCertificate As X509Certificate) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O certificado usado para autenticar o servidor.</param>
        <summary>Chamado pelos servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor usando o certificado especificado como uma operação assíncrona.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
 O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Esse método é autenticada usando <xref:System.Security.Authentication.SslProtocols.Default>. A lista de revogação de certificado não é verificada durante a autenticação. O cliente não é necessário fornecer um certificado para autenticação.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 A autenticação de cliente usando esse <see cref="T:System.Net.Security.SslStream" /> foi tentada anteriormente.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServerAsync" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.Security.SslServerAuthenticationOptions sslServerAuthenticationOptions, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.Security.SslServerAuthenticationOptions sslServerAuthenticationOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Net.Security.SslServerAuthenticationOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::Security::SslServerAuthenticationOptions ^ sslServerAuthenticationOptions, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sslServerAuthenticationOptions" Type="System.Net.Security.SslServerAuthenticationOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sslServerAuthenticationOptions">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (serverCertificate As X509Certificate, clientCertificateRequired As Boolean, checkCertificateRevocation As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="clientCertificateRequired">Um valor <see cref="T:System.Boolean" /> que especifica se um certificado é solicitado ao cliente para que ele realize a autenticação. Observe que isso é apenas uma solicitação. Se nenhum certificado for fornecido, o servidor ainda aceitará a solicitação de conexão.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado pelos servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor usando os certificados especificados, requisitos e o protocolo de segurança como uma operação síncrona.</summary>
        <returns>O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (serverCertificate As X509Certificate, clientCertificateRequired As Boolean, enabledSslProtocols As SslProtocols, checkCertificateRevocation As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, bool clientCertificateRequired, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="clientCertificateRequired">Um valor <see cref="T:System.Boolean" /> que especifica se um certificado é solicitado ao cliente para que ele realize a autenticação. Observe que isso é apenas uma solicitação. Se nenhum certificado for fornecido, o servidor ainda aceitará a solicitação de conexão.</param>
        <param name="enabledSslProtocols">O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <summary>Chamado pelos servidores para autenticar o servidor e, opcionalmente, o cliente em uma conexão cliente-servidor usando os certificados especificados, requisitos e o protocolo de segurança como uma operação síncrona.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />  
  
 O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia uma operação para autenticar o lado do cliente de uma conexão de cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As sobrecargas do método não bloqueiam enquanto a autenticação está em andamento. Para bloquear enquanto aguarda a autenticação seja concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(string targetHost, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::String ^ targetHost, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o servidor e, opcionalmente, o cliente.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)] Nenhum certificado do cliente é usado na autenticação. A lista de revogação de certificado não é verificada durante a autenticação.  
  
 O valor especificado para `targetHost` deve corresponder ao nome no certificado do servidor.  
  
 A operação assíncrona de autenticação deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> sobrecargas do método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se você receber um <xref:System.Security.Authentication.AuthenticationException>, esse <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::String ^ targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ clientCertificates, bool checkCertificateRevocation, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">O <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> que contém os certificados de cliente.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o servidor e, opcionalmente, o cliente usando os certificados especificados e o protocolo de segurança do sistema padrão.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 O valor especificado para `targetHost` deve corresponder ao nome no certificado do servidor.  
  
 A operação assíncrona de autenticação deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> sobrecargas do método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se você receber um <xref:System.Security.Authentication.AuthenticationException>, esse <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::String ^ targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ clientCertificates, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="targetHost">O nome do servidor que compartilha esse <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">O <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> que contém os certificados de cliente.</param>
        <param name="enabledSslProtocols">O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por clientes para iniciar uma operação assíncrona para autenticar o servidor e, opcionalmente, o cliente usando o protocolo de segurança e certificados especificados.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 O valor especificado para `targetHost` deve corresponder ao nome no certificado do servidor.  
  
 A operação assíncrona de autenticação deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> sobrecargas do método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se você receber um <xref:System.Security.Authentication.AuthenticationException>, esse <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
> [!NOTE]
>  Não há suporte para certificados de cliente no protocolo SSL versão 2.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabledSslProtocols" /> não é um valor <see cref="T:System.Security.Authentication.SslProtocols" /> válido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia uma operação assíncrona para lidar com o lado do servidor de autenticação de uma conexão cliente-servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As sobrecargas do método não bloqueiam enquanto a autenticação está em andamento. Para bloquear enquanto aguarda a autenticação seja concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor em uma conexão cliente-servidor.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)] A lista de revogação de certificado não é verificada durante a autenticação. O cliente não é necessário fornecer um certificado para autenticação.  
  
 A operação assíncrona de autenticação deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> sobrecargas do método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se você receber um <xref:System.Security.Authentication.AuthenticationException>, esse <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 A autenticação de cliente usando esse <see cref="T:System.Net.Security.SslStream" /> foi tentada anteriormente.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="clientCertificateRequired">Um valor <see cref="T:System.Boolean" /> que especifica se um certificado é solicitado ao cliente para que ele realize a autenticação. Observe que isso é apenas uma solicitação. Se nenhum certificado for fornecido, o servidor ainda aceitará a solicitação de conexão.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o servidor e, opcionalmente, o cliente usando os certificados e requisitos especificados, e o protocolo de segurança do sistema padrão.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 A operação assíncrona de autenticação deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> sobrecargas do método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se você receber um <xref:System.Security.Authentication.AuthenticationException>, esse <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate ^ serverCertificate, bool clientCertificateRequired, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">O X509Certificate usado para autenticar o servidor.</param>
        <param name="clientCertificateRequired">Um valor <see cref="T:System.Boolean" /> que especifica se um certificado é solicitado ao cliente para que ele realize a autenticação. Observe que isso é apenas uma solicitação. Se nenhum certificado for fornecido, o servidor ainda aceitará a solicitação de conexão.</param>
        <param name="enabledSslProtocols">O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</param>
        <param name="checkCertificateRevocation">Um valor <see cref="T:System.Boolean" /> que especifica se a lista de certificados revogados é verificada durante a autenticação.</param>
        <param name="asyncCallback">Um representante <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a autenticação é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Chamado por servidores para iniciar uma operação assíncrona para autenticar o servidor e, opcionalmente, o cliente usando os certificados, requisitos e protocolo de segurança especificados.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sslprotocols-none](~/includes/sslprotocols-none-md.md)]
 
 A operação assíncrona de autenticação deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até que a operação for concluída, use um do <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> sobrecargas do método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se você receber um <xref:System.Security.Authentication.AuthenticationException>, esse <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabledSslProtocols" /> não é um valor <see cref="T:System.Security.Authentication.SslProtocols" /> válido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação já ocorreu.  
  
 - ou -  
  
 Houve uma tentativa anterior de autenticação do servidor usando este <see cref="T:System.Net.Security.SslStream" />.  
  
 - ou -  
  
 A autenticação já está em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Não há suporte para o método <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> no Windows 95, Windows 98 ou Windows Millennium.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que recebe os bytes lidos do fluxo.</param>
        <param name="offset">O local baseado em zero no <c>buffer</c> em que se inicia o armazenamento dos dados lidos nesse fluxo.</param>
        <param name="count">O número máximo de bytes a serem lidos do fluxo.</param>
        <param name="asyncCallback">Um delegado <see cref="T:System.AsyncCallback" /> que faz referência ao método a ser invocado quando a operação de leitura é concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de leitura. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Inicia uma operação de leitura assíncrona que lê os dados do fluxo e os armazena na matriz especificada.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a criptografia e assinatura ou estiverem habilitada, a operação de leitura lê os dados do fluxo subjacente, verifica a integridade dos dados e descriptografa-a. A operação de leitura assíncrona deve ser concluída por chamar o <xref:System.Net.Security.SslStream.EndRead%2A> método. Normalmente, o método é invocado pelo `asyncCallback` delegate.  
  
 Esse método não bloqueia enquanto a operação é concluída. Para bloquear até a conclusão da operação, use o <xref:System.Net.Security.SslStream.Read%2A> método.  
  
 Para obter informações detalhadas sobre como usar o modelo de programação assíncrono, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 O <xref:System.Net.Security.SslStream> classe não oferece suporte simultâneo de várias operações de leitura.  
  
 Não é possível chamar esse método, até que você foi autenticado com êxito. Para autenticar chamadas do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como iniciar uma operação de leitura assíncrona.  
  
 [!code-cpp[NclSslClientAsync#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientAsync/CPP/NclSslClientAsync.cpp#8)]
 [!code-csharp[NclSslClientAsync#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientAsync/CS/clientasync.cs#8)]  
  
 [!code-cpp[NclSslClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientAsync/CPP/NclSslClientAsync.cpp#4)]
 [!code-csharp[NclSslClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientAsync/CS/clientasync.cs#4)]  
  
 O seguinte método é chamado quando ela for concluída.  
  
 [!code-cpp[NclSslClientAsync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientAsync/CPP/NclSslClientAsync.cpp#5)]
 [!code-csharp[NclSslClientAsync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientAsync/CS/clientasync.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" />
          <paramref name="&lt;" />
          <paramref name="0" />.  
  
 <paramref name="-or-" /><paramref name="offset" /> &gt; o comprimento de <paramref name="buffer" />.  
  
 - ou -  
  
 <paramref name="offset" /> + count &gt; o comprimento de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Falha na operação de leitura.  
  
 - ou -  
  
 A criptografia está sendo utilizada, mas não foi possível descriptografar os dados.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de leitura em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que fornece os bytes a serem gravados no fluxo.</param>
        <param name="offset">O local baseado em zero no <c>buffer</c> em que se inicia a leitura dos bytes a serem gravados no fluxo.</param>
        <param name="count">Um valor <see cref="T:System.Int32" /> que especifica o número de bytes a serem lidos no <c>buffer</c>.</param>
        <param name="asyncCallback">Um delegado <see cref="T:System.AsyncCallback" /> que referencia o método a ser invocado quando a operação de gravação for concluída.</param>
        <param name="asyncState">Um objeto definido pelo usuário que contém informações sobre a operação de gravação. Esse objeto é passado para o delegado de <c>asyncCallback</c> quando a operação é concluída.</param>
        <summary>Inicia uma operação de gravação assíncrona que grava <see cref="T:System.Byte" />s do buffer especificado no fluxo.</summary>
        <returns>Um objeto <see cref="T:System.IAsyncResult" /> que indica o status da operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-cpp[NclSslServerAsync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerAsync/CPP/NclSslServerAsync.cpp#5)]
 [!code-csharp[NclSslServerAsync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerAsync/CS/serverasync.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" />
          <paramref name="&lt;" />
          <paramref name="0" />.  
  
 <paramref name="-or-" /><paramref name="offset" /> &gt; o comprimento de <paramref name="buffer" />.  
  
 - ou -  
  
 <paramref name="offset" /> + count &gt; o comprimento de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de gravação em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.CanRead</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente é legível.</summary>
        <value>
          <see langword="true" /> Se a autenticação ocorreu e o fluxo subjacente é legível; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se tiver ocorrido uma autenticação bem-sucedida, essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.CanRead%2A> no fluxo subjacente.  
  
 O fluxo subjacente é especificado quando você cria uma instância do <xref:System.Net.Security.SslStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#5)]
 [!code-csharp[NclSslServerSync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente é pesquisável.</summary>
        <value>Essa propriedade sempre retorna <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Não tente definir a posição do <xref:System.Net.Security.SslStream> objeto ou o fluxo subjacente.  
  
 O fluxo subjacente é especificado quando você cria uma instância do <xref:System.Net.Security.SslStream> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.Stream.CanSeek" />
        <altmember cref="P:System.Net.Security.SslStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.CanTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente dá suporte a tempos limite.</summary>
        <value>
          <see langword="true" /> Se o fluxo subjacente oferece suporte a tempos limite; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.CanTimeout%2A> no fluxo subjacente.  
  
 O fluxo subjacente é especificado quando você cria uma instância do <xref:System.Net.Security.SslStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#5)]
 [!code-csharp[NclSslServerSync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.CanWrite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o fluxo subjacente é gravável.</summary>
        <value>
          <see langword="true" /> Se a autenticação ocorreu e o fluxo subjacente é gravável; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se tiver ocorrido uma autenticação bem-sucedida, essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.CanWrite%2A> no fluxo subjacente.  
  
 O fluxo subjacente é especificado quando você cria uma instância do <xref:System.Net.Security.SslStream> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#5)]
 [!code-csharp[NclSslServerSync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCertRevocationStatus">
      <MemberSignature Language="C#" Value="public virtual bool CheckCertRevocationStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCertRevocationStatus" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CheckCertRevocationStatus" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CheckCertRevocationStatus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckCertRevocationStatus { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.CheckCertRevocationStatus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se a lista de certificados revogados é verificada durante o processo de validação de certificado.</summary>
        <value>
          <see langword="true" /> se a lista de certificados revogados é verificada; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A lista de revogação de certificado contém certificados foi revogados pelo emissor. Verificando a lista negativamente afeta o desempenho, mas melhora a segurança do aplicativo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#5)]
 [!code-csharp[NclSslServerSync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CipherAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.CipherAlgorithmType CipherAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CipherAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CipherAlgorithm As CipherAlgorithmType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Authentication::CipherAlgorithmType CipherAlgorithm { System::Security::Authentication::CipherAlgorithmType get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.CipherAlgorithm</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.CipherAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que identifica o algoritmo de criptografia em massa usado por este <see cref="T:System.Net.Security.SslStream" />.</summary>
        <value>Um valor <see cref="T:System.Security.Authentication.CipherAlgorithmType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um valor de <xref:System.Security.Authentication.CipherAlgorithmType.Null> é necessário para o <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> propriedade quando o <xref:System.Net.Security.EncryptionPolicy.NoEncryption> valor de enumeração é usado para construir um <xref:System.Net.Security.SslStream> instância.  
  
 [!INCLUDE[winxpsvr](~/includes/winxpsvr-md.md)] e [!INCLUDE[winxp](~/includes/winxp-md.md)] não dão suporte a <xref:System.Security.Authentication.CipherAlgorithmType.Null> valor. Assim, mesmo se o <xref:System.Security.Authentication.CipherAlgorithmType.Null> valor é usado para construir o <xref:System.Net.Security.SslStream> instância, o <xref:System.Net.Security.EncryptionPolicy> propriedade será <xref:System.Security.Authentication.CipherAlgorithmType.None>. O <xref:System.Security.Authentication.CipherAlgorithmType.Null> valor é retornado no Windows Vista e versões posteriores.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe as configurações de criptografia para o fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Net.Security.SslStream.CipherAlgorithm" /> foi acessada antes da conclusão do processo de autenticação ou o processo de autenticação falhou.</exception>
      </Docs>
    </Member>
    <Member MemberName="CipherStrength">
      <MemberSignature Language="C#" Value="public virtual int CipherStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CipherStrength" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.CipherStrength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CipherStrength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CipherStrength { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.CipherStrength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que identifica a força do algoritmo de criptografia usado por esse <see cref="T:System.Net.Security.SslStream" />.</summary>
        <value>Um <see cref="T:System.Int32" /> valor que especifica a força do algoritmo, em bits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é zero até que a autenticação ocorra.  
  
 Essa propriedade retorna um dos seguintes valores:  
  
-   0  
  
-   40  
  
-   56  
  
-   80  
  
-   128  
  
-   168  
  
-   192  
  
-   256  
  
   
  
## Examples  
 O exemplo de código a seguir exibe as configurações de criptografia para o fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Net.Security.SslStream" /> e opcionalmente libera os recursos gerenciados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método é chamado pelo método público `Dispose()` e pelo método <xref:System.Object.Finalize%2A>. `Dispose()` invoca o método `Dispose(Boolean)` protegido com o parâmetro `disposing` definido como `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` com `disposing` definido como `false`.  
  
 Quando o `disposing` parâmetro for true, este método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Net.Security.SslStream> referências. Este método invoca o método `Dispose()` de cada objeto referenciado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> pode ser chamado várias vezes por outros objetos. Ao substituir <see langword="Dispose(Boolean)" /> cuidado para não fazer referência a objetos que têm foi descartados anteriormente em uma chamada anterior para <see langword="Dispose" />. Para obter mais informações sobre como implementar <see langword="Dispose(Boolean)" />, consulte [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Para obter mais informações sobre <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [substituindo o método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.EndAuthenticateAsClient(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />.</param>
        <summary>Encerra uma operação assíncrona de autenticação de servidor pendente iniciada com uma chamada anterior para <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz. Quando a autenticação tiver êxito, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 Para executar essa operação de forma síncrona, use um do <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> métodos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          O <paramref name="asyncResult" /> não foi criado por uma chamada a <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">Nenhuma autenticação de servidor pendente a ser concluída.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.EndAuthenticateAsServer(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" />.</param>
        <summary>Encerra uma operação assíncrona de autenticação de cliente pendente iniciada com uma chamada anterior para <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz. Quando a autenticação tiver êxito, você deve verificar o <xref:System.Net.Security.SslStream.IsEncrypted%2A> e <xref:System.Net.Security.SslStream.IsSigned%2A> propriedades para determinar quais serviços de segurança são usados pelo <xref:System.Net.Security.SslStream>. Verifique o <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> propriedade para determinar se ocorreu a autenticação mútua.  
  
 Se a autenticação falhar, você receberá um <xref:System.Security.Authentication.AuthenticationException>e isso <xref:System.Net.Security.SslStream> não é mais utilizável. Você deve fechar este objeto e remover todas as referências a ele para que ele pode ser coletado pelo coletor de lixo.  
  
 Para executar essa operação de forma síncrona, use um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          O <paramref name="asyncResult" /> não foi criado por uma chamada a <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">A autenticação falhou e deixou esse objeto em um estado inutilizável.</exception>
        <exception cref="T:System.InvalidOperationException">Nenhuma autenticação de cliente pendente a ser concluída.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.EndRead(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>Encerra uma operação de leitura assíncrona iniciada em uma chamada anterior a <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <returns>Um valor <see cref="T:System.Int32" /> que especifica o número de bytes lidos do fluxo subjacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz.  
  
 Para executar esta operação síncrona, use o <xref:System.Net.Security.SslStream.Read%2A> método.  
  
 Não é possível chamar esse método, até que você foi autenticado com êxito. Para autenticar chamadas do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra terminando assíncrona a operação de leitura.  
  
 [!code-cpp[NclSslClientAsync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientAsync/CPP/NclSslClientAsync.cpp#5)]
 [!code-csharp[NclSslClientAsync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientAsync/CS/clientasync.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          O <paramref name="asyncResult" /> não foi criado por uma chamada a <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
        <exception cref="T:System.IO.IOException">Falha na operação de leitura.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.EndWrite(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Uma instância <see cref="T:System.IAsyncResult" /> retornada por uma chamada a <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>Encerra uma operação de gravação assíncrona iniciada em uma chamada anterior a <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação não foi concluída, esse método bloqueia até que ele faz.  
  
 Um aplicativo não é possível chamar este método até que você foi autenticado com êxito. Para autenticar, chame um do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
 Para executar esta operação síncrona, use o <xref:System.Net.Security.SslStream.Write%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o final de uma operação de gravação assíncrona.  
  
 [!code-cpp[NclSslServerAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerAsync/CPP/NclSslServerAsync.cpp#4)]
 [!code-csharp[NclSslServerAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerAsync/CS/serverasync.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          O <paramref name="asyncResult" /> não foi criado por uma chamada a <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.Flush</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Faz com que os dados armazenados em buffer sejam gravados no dispositivo subjacente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método chama <xref:System.IO.Stream.Flush%2A> no fluxo subjacente.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-cpp[NclSslClientSync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientSync/CPP/clientsync.cpp#5)]
 [!code-csharp[NclSslClientSync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientSync/CS/clientsync.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.HashAlgorithmType HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashAlgorithm As HashAlgorithmType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Authentication::HashAlgorithmType HashAlgorithm { System::Security::Authentication::HashAlgorithmType get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.HashAlgorithm</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.HashAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o algoritmo usado para gerar MACs (Message Authentication Codes).</summary>
        <value>Um valor <see cref="T:System.Security.Authentication.HashAlgorithmType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Algoritmos de autenticação de mensagem geram mensagens de hash e assinaturas usadas para detectar violação e falsificação.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe as configurações de criptografia para o fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Net.Security.SslStream.HashAlgorithm" /> foi acessada antes da conclusão do processo de autenticação ou o processo de autenticação falhou.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashStrength">
      <MemberSignature Language="C#" Value="public virtual int HashStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HashStrength" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.HashStrength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashStrength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HashStrength { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.HashStrength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que identifica a força do algoritmo de hash usado por essa instância.</summary>
        <value>Um <see cref="T:System.Int32" /> valor que especifica a força do <see cref="T:System.Security.Authentication.HashAlgorithmType" /> algoritmo, em bits. Os valores válidos são de 128 ou 160.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é zero até que a autenticação ocorra.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe as configurações de criptografia para o fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.IsAuthenticated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se a autenticação foi bem-sucedida.</summary>
        <value>
          <see langword="true" /> Se a autenticação bem-sucedida ocorreu; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Autenticam clientes chamando o <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> métodos. Autenticam servidores chamando o <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#4)]
 [!code-csharp[NclSslServerSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.IsEncrypted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se esse <see cref="T:System.Net.Security.SslStream" /> usa criptografia de dados.</summary>
        <value>
          <see langword="true" /> Se os dados são criptografados antes de serem transmitidas pela rede e descriptografados quando atingir o ponto de extremidade remoto; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Criptografia ajuda a proteger a privacidade dos dados, ou seja, ele ajuda a garantir que, enquanto os dados estão em trânsito, ele não pode ser decifrado por terceiros.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#4)]
 [!code-csharp[NclSslServerSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.IsMutuallyAuthenticated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o servidor e o cliente foram autenticados.</summary>
        <value>
          <see langword="true" /> Se o servidor tiver sido autenticado; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A autenticação mútua é especificada pelo servidor quando quiser que o cliente para fornecer um certificado de autenticação de servidor.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#4)]
 [!code-csharp[NclSslServerSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" />
        <altmember cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.IsServer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se o lado local da conexão usada por esse <see cref="T:System.Net.Security.SslStream" /> foi autenticado como o servidor.</summary>
        <value>
          <see langword="true" /> Se o ponto de extremidade local foi autenticado com êxito como o lado do servidor da conexão autenticada; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a autenticação falha ou não ocorreu, essa propriedade retornará `false`.  
  
 Para autenticar o servidor, chame o <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#4)]
 [!code-csharp[NclSslServerSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.IsSigned</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.Boolean" /> que indica se os dados enviados usando esse fluxo são assinados.</summary>
        <value>
          <see langword="true" /> Se os dados esteja assinados antes da transmissão; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ajuda a proteger a integridade dos dados de assinatura de dados, ou seja, ele ajuda o destinatário determinar se os dados foram violados em trânsito.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#4)]
 [!code-csharp[NclSslServerSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.KeyExchangeAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyExchangeAlgorithm As ExchangeAlgorithmType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Authentication::ExchangeAlgorithmType KeyExchangeAlgorithm { System::Security::Authentication::ExchangeAlgorithmType get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.KeyExchangeAlgorithm</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExchangeAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o algoritmo de troca de chaves usado por este <see cref="T:System.Net.Security.SslStream" />.</summary>
        <value>Um valor <see cref="T:System.Security.Authentication.ExchangeAlgorithmType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é <xref:System.Security.Authentication.ExchangeAlgorithmType.None> até que a autenticação ocorra.  
  
 O algoritmo de troca de chave protege informações usadas para gerar chaves compartilhadas.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe as configurações de criptografia para o fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeStrength">
      <MemberSignature Language="C#" Value="public virtual int KeyExchangeStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyExchangeStrength" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.KeyExchangeStrength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyExchangeStrength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyExchangeStrength { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.KeyExchangeStrength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que identifica a força do algoritmo de troca de chaves usado por essa instância.</summary>
        <value>Um <see cref="T:System.Int32" /> valor que especifica a força do <see cref="T:System.Security.Authentication.ExchangeAlgorithmType" /> algoritmo, em bits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é zero até que a autenticação ocorra.  
  
 Em cenários comuns, o valor dessa propriedade é um dos seguintes:  
  
-   512  
  
-   768  
  
-   1024  
  
-   2048  
  
   
  
## Examples  
 O exemplo de código a seguir exibe as configurações de criptografia para o fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o comprimento do fluxo subjacente.</summary>
        <value>Um <see cref="T:System.Int64" />.  
  
 O comprimento do fluxo subjacente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.Length%2A> no fluxo subjacente. Se o fluxo subjacente não é pesquisável, esse método normalmente gera uma exceção. O tipo de tempo de execução do fluxo subjacente determina o tipo de tempo de execução da exceção que é lançada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Não há suporte par obter o valor dessa propriedade quando o fluxo subjacente é um <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LocalCertificate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.LocalCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalCertificate As X509Certificate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::X509Certificates::X509Certificate ^ LocalCertificate { System::Security::Cryptography::X509Certificates::X509Certificate ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.LocalCertificate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o certificado usado para autenticar o ponto de extremidade local.</summary>
        <value>Um objeto X509Certificate que representa o certificado fornecido para autenticação ou <see langword="null" /> se nenhum certificado foi fornecido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o certificado retornado por essa propriedade.  
  
 [!code-cpp[NclSslServerSync#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#6)]
 [!code-csharp[NclSslServerSync#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A autenticação falhou ou não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="NegotiatedApplicationProtocol">
      <MemberSignature Language="C#" Value="public System.Net.Security.SslApplicationProtocol NegotiatedApplicationProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.SslApplicationProtocol NegotiatedApplicationProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.NegotiatedApplicationProtocol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NegotiatedApplicationProtocol As SslApplicationProtocol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::SslApplicationProtocol NegotiatedApplicationProtocol { System::Net::Security::SslApplicationProtocol get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.SslApplicationProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a posição atual no fluxo subjacente.</summary>
        <value>Um <see cref="T:System.Int64" />.  
  
 A posição atual no fluxo subjacente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.Position%2A> no fluxo subjacente. Se o fluxo subjacente não é pesquisável, esse método normalmente gera uma exceção. O tipo de tempo de execução do fluxo subjacente determina o tipo de tempo de execução da exceção que é lançada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Não há suporte para a configuração dessa propriedade.  
  
 - ou -  
  
 Não há suporte par obter o valor dessa propriedade quando o fluxo subjacente é um <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.Read(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que recebe os bytes lidos desse fluxo.</param>
        <param name="offset">Um <see cref="T:System.Int32" /> que contém o local baseado em zero no <c>buffer</c> no qual será iniciado o armazenamento dos dados lidos desse fluxo.</param>
        <param name="count">Um <see cref="T:System.Int32" /> que contém o número máximo de bytes a serem lidos do fluxo.</param>
        <summary>Lê os dados desse fluxo e o armazena na matriz especificada.</summary>
        <returns>Um valor <see cref="T:System.Int32" /> que especifica o número de bytes lidos. Quando não há mais dados a serem lidos, retorna 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O método lê um máximo de `count` bytes do fluxo e os armazena no `buffer` começando no `offset`. Você não pode executar várias operações simultâneas de leitura.  
  
 Não é possível chamar esse método, até que você foi autenticado com êxito. Para autenticar chamadas do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
 Para executar essa operação assíncrona, use o <xref:System.Net.Security.SslStream.BeginRead%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a leitura de um <xref:System.Net.Security.SslStream>.  
  
 [!code-cpp[NclSslClientSync#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslClientSync/CPP/clientsync.cpp#6)]
 [!code-csharp[NclSslClientSync#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslClientSync/CS/clientsync.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" />
          <paramref name="&lt;" />
          <paramref name="0" />.  
  
 <paramref name="-or-" /><paramref name="offset" /> &gt; o comprimento de <paramref name="buffer" />.  
  
 - ou -  
  
 <paramref name="offset" /> + count &gt; o comprimento de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Falha na operação de leitura. Consulte a exceção interna, se houver, para determinar a causa da falha.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de leitura em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.ReadTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a quantidade de tempo que uma operação de leitura é bloqueada aguardando dados.</summary>
        <value>Um <see cref="T:System.Int32" /> que especifica a quantidade de tempo decorrido antes da falha de uma operação de leitura síncrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.ReadTimeout%2A> no fluxo subjacente. Quando você definir essa propriedade, o <xref:System.IO.Stream.ReadTimeout%2A> valor no fluxo subjacente é definido como o valor especificado.  
  
 Se o fluxo subjacente é um <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.SslStream.ReadTimeout%2A> é em milissegundos e é definido como <xref:System.Threading.Timeout.Infinite> por padrão, portanto, o que ler operações fazer excede o tempo limite.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#1)]
 [!code-csharp[NclSslServerSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteCertificate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.RemoteCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteCertificate As X509Certificate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::X509Certificates::X509Certificate ^ RemoteCertificate { System::Security::Cryptography::X509Certificates::X509Certificate ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.RemoteCertificate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o certificado usado para autenticar o ponto de extremidade remoto.</summary>
        <value>Um objeto X509Certificate que representa o certificado fornecido para autenticação ou <see langword="null" /> se nenhum certificado foi fornecido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o certificado retornado por essa propriedade.  
  
 [!code-cpp[NclSslServerSync#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#6)]
 [!code-csharp[NclSslServerSync#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A autenticação falhou ou não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Este valor é ignorado.</param>
        <param name="origin">Este valor é ignorado.</param>
        <summary>Gera uma <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Sempre gera um <see cref="T:System.NotSupportedException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Não chame este método. Ele é herdado, mas não há suporte para o <xref:System.Net.Security.SslStream> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Não há suporte para busca por objetos <see cref="T:System.Net.Security.SslStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.SetLength(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Um valor <see cref="T:System.Int64" /> que especifica o comprimento do fluxo.</param>
        <summary>Define o comprimento do fluxo subjacente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invoca <xref:System.IO.Stream.SetLength%2A?displayProperty=nameWithType> no fluxo subjacente especificado quando isso <xref:System.Net.Security.SslStream> foi criado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ShutdownAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ShutdownAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.ShutdownAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShutdownAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ ShutdownAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desliga este SslStream.</summary>
        <returns>O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SslProtocol">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.SslProtocols SslProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.SslProtocols SslProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.SslProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SslProtocol As SslProtocols" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Authentication::SslProtocols SslProtocol { System::Security::Authentication::SslProtocols get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.SslProtocol</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.SslProtocols</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica o protocolo de segurança usado para autenticar esta conexão.</summary>
        <value>O valor <see cref="T:System.Security.Authentication.SslProtocols" /> que representa o protocolo usado para autenticação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os protocolos de segurança com suporte são especificados quando o <xref:System.Net.Security.SslStream> é criado. Se nenhum protocolo de segurança foi transmitido ao construtor, a instância é criada usando <xref:System.Security.Authentication.SslProtocols.Default>. O protocolo real usado para autenticação é selecionado de acordo com os protocolos suportados pelo cliente e servidor.  
  
   
  
## Examples  
 O exemplo a seguir exibe as propriedades de segurança do fluxo especificado.  
  
 [!code-cpp[NclSslServerSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#3)]
 [!code-csharp[NclSslServerSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportContext">
      <MemberSignature Language="C#" Value="public System.Net.TransportContext TransportContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.TransportContext TransportContext" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.TransportContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransportContext As TransportContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::TransportContext ^ TransportContext { System::Net::TransportContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.TransportContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.TransportContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Net.TransportContext" /> usado para autenticação utilizando a proteção estendida.</summary>
        <value>O <see cref="T:System.Net.TransportContext" /> objeto que contém o token de associação de canal (CBT) usado para proteção estendida.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava dados nesse fluxo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.Write(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (buffer As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.Write(System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que fornece os bytes gravados no fluxo.</param>
        <summary>Grava os dados especificados nesse fluxo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método bloqueia enquanto a operação for concluída. Para evitar o bloqueio enquanto a operação for concluída, use o <xref:System.Net.Security.SslStream.BeginWrite%2A> método.  
  
 Não é possível chamar esse método, até que você foi autenticado com êxito. Para autenticar chamadas do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
 O <xref:System.Net.Security.SslStream> classe não oferece suporte a várias operações simultâneas de gravação.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra um autenticado gravar <xref:System.Net.Security.SslStream>.  
  
 [!code-cpp[NclSslServerSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#1)]
 [!code-csharp[NclSslServerSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de gravação em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.Net.Security.IMonoSslStream.Write(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz <see cref="T:System.Byte" /> que fornece os bytes gravados no fluxo.</param>
        <param name="offset">Um <see cref="T:System.Int32" /> que contém o local baseado em zero no <c>buffer</c> em que será iniciada a leitura dos bytes a serem gravados no fluxo.</param>
        <param name="count">Um <see cref="T:System.Int32" /> que contém o número de bytes a serem lidos do <c>buffer</c>.</param>
        <summary>Grave o número especificado de <see cref="T:System.Byte" />s no fluxo subjacente usando o buffer e o deslocamento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método bloqueia enquanto a operação for concluída. Para evitar o bloqueio enquanto a operação conclui a operação for concluída, use o <xref:System.Net.Security.SslStream.BeginWrite%2A> método.  
  
 Não é possível chamar esse método, até que você foi autenticado com êxito. Para autenticar chamadas do <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, ou <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> métodos.  
  
 O <xref:System.Net.Security.SslStream> classe não oferece suporte a várias operações simultâneas de gravação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" />
          <paramref name="&lt;" />
          <paramref name="0" />.  
  
 <paramref name="-or-" /><paramref name="offset" /> &gt; o comprimento de <paramref name="buffer" />.  
  
 - ou -  
  
 <paramref name="offset" /> + count &gt; o comprimento de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">A operação de gravação falhou.</exception>
        <exception cref="T:System.NotSupportedException">Já existe uma operação de gravação em andamento.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto foi fechado.</exception>
        <exception cref="T:System.InvalidOperationException">A autenticação não ocorreu.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.SslStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Mono.Net.Security.IMonoSslStream.WriteTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a quantidade de tempo pela qual uma operação de gravação fica bloqueada aguardando dados.</summary>
        <value>Um <see cref="T:System.Int32" /> que especifica a quantidade de tempo decorrido antes que uma operação de gravação síncrona falhar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado ao chamar <xref:System.IO.Stream.WriteTimeout%2A> no fluxo subjacente. Para operações de conjunto, define o valor especificado de <xref:System.IO.Stream.WriteTimeout%2A> valor no fluxo subjacente.  
  
 Se o fluxo subjacente é um <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.SslStream.WriteTimeout%2A> é em milissegundos e é definido como <xref:System.Threading.Timeout.Infinite> por padrão de forma que gravar operações fazer excede o tempo limite.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-cpp[NclSslServerSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclSslServerSync/CPP/NclSslServerSync.cpp#1)]
 [!code-csharp[NclSslServerSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSslServerSync/CS/serversync.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>