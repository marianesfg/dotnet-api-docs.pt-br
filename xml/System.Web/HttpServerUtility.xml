<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <Metadata><Meta Name="ms.openlocfilehash" Value="054c4563886aece9ca7154233d1e1bd38fb005f0" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53392595" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpServerUtility" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpServerUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerUtility sealed" />
  <TypeSignature Language="F#" Value="type HttpServerUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece métodos auxiliares para o processamento de solicitações da Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os métodos e propriedades do <xref:System.Web.HttpServerUtility> classe são expostas por meio de intrínseca <xref:System.Web.HttpContext.Server%2A> objeto fornecido pelo ASP.NET.  
  
   
  
## Examples  
 Um projeto de site da Web do Visual Studio com o código-fonte está disponível para acompanhar este tópico: [Baixe o](https://go.microsoft.com/fwlink/?LinkId=192870).  
  
 O exemplo a seguir demonstra como usar o <xref:System.Web.HttpServerUtility.HtmlEncode%2A> método e o <xref:System.Web.HttpServerUtility.UrlEncode%2A> método o <xref:System.Web.HttpServerUtility> classe. O <xref:System.Web.HttpServerUtility.HtmlEncode%2A> método ajuda a garantir que qualquer cadeia de caracteres fornecida pelo usuário de entrada será renderizado como texto estático em navegadores, em vez de elementos HTML ou script executável. O <xref:System.Web.HttpServerUtility.UrlEncode%2A> método codifica as URLs para que eles são transmitidos corretamente em um fluxo HTTP.  
  
 [!code-aspx-csharp[System.Web.HttpServerUtility1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpServerUtility1/cs/HttpServerUtilityCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpServerUtility1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpServerUtility1/vb/HttpServerUtilityVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpContext" />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.ClearError" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearError ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearError();" />
      <MemberSignature Language="F#" Value="member this.ClearError : unit -&gt; unit" Usage="httpServerUtility.ClearError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Limpa a exceção anterior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir limpa a última exceção foi lançada.  
  
 [!code-csharp[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.GetLastError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cria uma instância de servidor de um objeto COM.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string -&gt; obj" Usage="httpServerUtility.CreateObject progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">A classe ou tipo de objeto do qual criar uma instância.</param>
        <summary>Cria uma instância de servidor de um objeto COM identificado pelo ProgID (identificador programático) do objeto.</summary>
        <returns>O novo objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir cria um objeto usando o ProgID do objeto.  
  
 [!code-csharp[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Não foi possível criar uma instância do objeto.</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : Type -&gt; obj" Usage="httpServerUtility.CreateObject type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Um <see cref="T:System.Type" /> que representa o objeto a criar.</param>
        <summary>Cria uma instância de servidor de um objeto COM identificado pelo tipo do objeto.</summary>
        <returns>O novo objeto.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectFromClsid (clsid As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObjectFromClsid(System::String ^ clsid);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectFromClsid : string -&gt; obj" Usage="httpServerUtility.CreateObjectFromClsid clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">O identificador de classe do objeto do qual criar uma instância.</param>
        <summary>Cria uma instância de servidor de um objeto COM identificado pelo CLSID (identificador de classe) do objeto.</summary>
        <returns>O novo objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A> método para criar uma instância de servidor de um objeto COM.  
  
 [!code-csharp[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Não foi possível criar uma instância do objeto.</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Execute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Executa o manipulador de um recurso especificado no contexto da solicitação atual e retorna a execução para a página que a invocou.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Execute : string -&gt; unit" Usage="httpServerUtility.Execute path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">O caminho da URL a ser executada.</param>
        <summary>Executa o manipulador do caminho virtual especificado no contexto da solicitação atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.HttpServerUtility.Execute%2A> método continua a execução da página original após a execução da nova página. O <xref:System.Web.HttpServerUtility.Transfer%2A> método incondicionalmente transfere a execução para outro manipulador.  
  
 ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso fornecido pelo <xref:System.Web.HttpServerUtility.Execute%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama diretamente o manipulador indicado pelo <xref:System.Web.HttpServerUtility.Execute%2A> método e não executa novamente a lógica de autenticação e autorização para o novo recurso. Se a política de segurança do seu aplicativo requer que os clientes têm autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Execute%2A> método. <xref:System.Web.HttpResponse.Redirect%2A> executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do Internet Information Services (IIS) e ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Execute%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir exibe a página. aspx "Updateinfo.aspx" no diretório atual. A execução do programa retorna para a página inicial após a página Updateinfo.aspx é exibida.  
  
 [!code-csharp[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O <see cref="T:System.Web.HttpContext" /> atual é <see langword="null" />.  
  
- ou - 
Ocorreu um erro ao executar o manipulador especificado por <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="path" /> não é um caminho virtual.</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * bool -&gt; unit" Usage="httpServerUtility.Execute (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">O caminho da URL a ser executada.</param>
        <param name="preserveForm"><see langword="true" /> para preservar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <summary>Executa o manipulador do caminho virtual especificado no contexto da solicitação atual e especifica se é necessário limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como executar a página. aspx `Updateinfo.aspx` na solicitação atual e preservar os <xref:System.Web.HttpRequest.QueryString%2A> e <xref:System.Web.HttpRequest.Form%2A> coleções. A execução do programa retorna para a página inicial após `Updateinfo.aspx` é exibida.  
  
 [!code-csharp[HttpServerUtility.Execute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute/CS/httpserverutility.execute_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute/VB/httpserverutility.execute_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O <see cref="T:System.Web.HttpContext" /> atual é <see langword="null" />.  
  
- ou - 
Ocorreu um erro ao executar o manipulador especificado por <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="path" /> não é um caminho virtual.</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.Execute (path, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path">O caminho da URL a ser executada.</param>
        <param name="writer">O <see cref="T:System.IO.TextWriter" /> para capturar a saída.</param>
        <summary>Executa o manipulador do caminho virtual especificado no contexto da solicitação atual. Um <see cref="T:System.IO.TextWriter" /> captura a saída do manipulador executado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.HttpServerUtility.Execute%2A> método continua a execução da solicitação original após a execução do caminho virtual especificado. O <xref:System.Web.HttpServerUtility.Transfer%2A> método incondicionalmente transfere a execução para outro manipulador.  
  
 ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso fornecido pelo <xref:System.Web.HttpServerUtility.Execute%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama diretamente o manipulador indicado pelo <xref:System.Web.HttpServerUtility.Execute%2A> método e não executa novamente a lógica de autenticação e autorização para o novo recurso. Se a política de segurança do seu aplicativo requer que os clientes têm autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Execute%2A> método. <xref:System.Web.HttpResponse.Redirect%2A> executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do Internet Information Services (IIS) e ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Execute%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir executa o `Login.aspx` página no servidor no diretório atual e recebe a saída de página usando o <xref:System.IO.StringWriter> objeto `writer`. Ele grava o fluxo HTML recebido do `writer` fluxo de saída para o HTTP.  
  
 [!code-csharp[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O <see cref="T:System.Web.HttpContext" /> atual é <see langword="null" />.  
  
- ou - 
Ocorreu um erro ao executar o manipulador especificado por <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="path" /> não é um caminho virtual.</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (path, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">O caminho da URL a ser executada.</param>
        <param name="writer">O <see cref="T:System.IO.TextWriter" /> para capturar a saída.</param>
        <param name="preserveForm"><see langword="true" /> para preservar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <summary>Executa o manipulador do caminho virtual especificado no contexto da solicitação atual. Um <see cref="T:System.IO.TextWriter" /> captura a saída da página e um parâmetro booliano especifica se as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" /> serão limpas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.HttpServerUtility.Execute%2A> método continua a execução da solicitação original após a execução do caminho virtual especificado. O <xref:System.Web.HttpServerUtility.Transfer%2A> método incondicionalmente transfere a execução para outro manipulador.  
  
 ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso fornecido pelo <xref:System.Web.HttpServerUtility.Execute%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama diretamente o manipulador indicado pelo <xref:System.Web.HttpServerUtility.Execute%2A> método e não executa novamente a lógica de autenticação e autorização para o novo recurso. Se a política de segurança do seu aplicativo requer que os clientes têm autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Execute%2A> método. <xref:System.Web.HttpResponse.Redirect%2A> executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do Internet Information Services (IIS) e ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Execute%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir executa o `Login.aspx` página no servidor no diretório atual e recebe a saída de página usando o <xref:System.IO.StringWriter> objeto `writer`. Ele grava o fluxo HTML recebido do `writer` fluxo de saída para o HTTP. O conteúdo a <xref:System.Web.HttpRequest.Form%2A> e <xref:System.Web.HttpRequest.QueryString%2A> coleções são preservadas.  
  
 [!code-csharp[HttpServerUtility.Execute02#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute02/CS/httpserverutility.execute02_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute02#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute02/VB/httpserverutility.execute02_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O <see cref="T:System.Web.HttpContext" /> atual é uma referência nula (<see langword="Nothing" /> no Visual Basic).  
  
- ou - 
 <paramref name="path" /> termina com um ponto (.).  
  
- ou - 
Ocorreu um erro ao executar o manipulador especificado por <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> não é um caminho virtual.</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (handler As IHttpHandler, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Web::IHttpHandler ^ handler, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Web.IHttpHandler * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (handler, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">O manipulador HTTP que implementa o <see cref="T:System.Web.IHttpHandler" /> para o qual a solicitação atual será transferida.</param>
        <param name="writer">O <see cref="T:System.IO.TextWriter" /> para capturar a saída.</param>
        <param name="preserveForm"><see langword="true" /> para preservar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <summary>Executa o manipulador do caminho virtual especificado no contexto da solicitação atual. Um <see cref="T:System.IO.TextWriter" /> captura a saída do manipulador executado e um parâmetro booliano especifica se as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" /> serão limpas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode escrever manipuladores HTTP personalizados para processar tipos predefinidos, específicos de solicitações HTTP em qualquer linguagem que está em conformidade com o Common Language Specification (CLS). Código executável que é definido nas classes de manipulador HTTP em vez de páginas convencionais do ASP (também conhecido como ASP clássico) ou as páginas do ASP.NET responde a essas solicitações específicas. Permitir que manipuladores HTTP para interagir com os serviços de resposta de um servidor Web que está executando serviços de informações da Internet (IIS) e a solicitação de baixo nível e fornecem funcionalidade semelhante às extensões ISAPI, mas com um modelo de programação mais simples.  
  
 ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso que é fornecido pelo <xref:System.Web.HttpServerUtility.Execute%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama o manipulador é indicado pelo diretamente o <xref:System.Web.HttpServerUtility.Execute%2A> método e não será executada novamente a lógica de autenticação e autorização para o novo recurso. Se a política de segurança para seu aplicativo requer que os clientes têm autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Execute%2A> método. O <xref:System.Web.HttpResponse.Redirect%2A> executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do IIS e do ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Execute%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Ocorreu um erro ao executar o manipulador especificado por <paramref name="handler" />.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="handler" /> é <see langword="null" />.</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.GetLastError" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastError () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetLastError();" />
      <MemberSignature Language="F#" Value="member this.GetLastError : unit -&gt; Exception" Usage="httpServerUtility.GetLastError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a exceção anterior.</summary>
        <returns>A exceção anterior que foi lançada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir imprime uma descrição do último erro do aplicativo para o fluxo de saída HTTP. Ele imprime "Sem erros" se nenhum erro tiver sido encontrado.  
  
 [!code-csharp[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.ClearError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodifica uma cadeia de caracteres codificada para eliminar caracteres HTML inválidos.  
  
Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <see cref="T:System.Net.WebUtility" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string -&gt; string" Usage="httpServerUtility.HtmlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres HTML a ser decodificada.</param>
        <summary>Decodifica uma cadeia de caracteres codificada em HTML e retorna a cadeia de caracteres decodificada.</summary>
        <returns>O texto decodificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A codificação HTML torna-se de que o texto é exibido corretamente no navegador e não é interpretado pelo navegador como HTML. Por exemplo, se uma cadeia de caracteres de texto contém uma entrada de menor (\<) ou maior que (>), o navegador pode interpretar esses caracteres como o colchete de abertura ou fechamento de uma marca HTML. Quando os caracteres estão codificadas em HTML, eles são convertidos em cadeias de caracteres `&lt;` e `&gt;`, que faz com que o navegador para exibir o sinal de menor que o logon e maior que corretamente. <xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodifica o texto que já foi transmitido para o servidor.  
  
 Esse método é uma maneira conveniente de acessar o <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, esse método usa <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> decodificar cadeias de caracteres.  
  
 O arquivo code-behind para uma página da web, acessar uma instância das <xref:System.Web.HttpServerUtility> classe por meio o `Server` propriedade. Em uma classe que não está em um arquivo code-behind, use `HttpContext.Current.Server` para acessar uma instância da <xref:System.Web.HttpServerUtility> classe.  
  
 Fora de um aplicativo web, use o <xref:System.Net.WebUtility> classe para codificar ou decodificar valores.  
  
   
  
## Examples  
 O exemplo a seguir contém a função `LoadDecodedFile`, que decodifica os dados de um arquivo e a copia em uma cadeia de caracteres.  
  
 [!code-aspx-csharp[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres HTML a ser decodificada.</param>
        <param name="output">O fluxo de saída <see cref="T:System.IO.TextWriter" /> que contém a cadeia de caracteres codificada.</param>
        <summary>Decodifica uma cadeia de caracteres codificada em HTML e envia a saída resultante a um fluxo de saída <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A codificação HTML torna-se de que o texto é exibido corretamente no navegador e não é interpretado pelo navegador como HTML. Por exemplo, se uma cadeia de caracteres de texto contém uma entrada de menor (\<) ou maior que (>), o navegador pode interpretar esses caracteres como o colchete de abertura ou fechamento de uma marca HTML. Quando os caracteres estão codificadas em HTML, eles são convertidos em cadeias de caracteres `&lt;` e `&gt;`, que faz com que o navegador para exibir o sinal de menor que o logon e maior que corretamente.  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodifica o texto que já foi transmitido para o servidor.  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> é uma maneira conveniente para acessar o <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, <xref:System.Web.HttpServerUtility.HtmlDecode%2A> usa <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> decodificar cadeias de caracteres.  
  
 Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <xref:System.Net.WebUtility>.  
  
   
  
## Examples  
 O exemplo a seguir decodifica uma cadeia de caracteres que foi codificada em HTML para transmissão por HTTP. Ele decodifica a cadeia de caracteres fornecida chamada `EncodedString` que contém o texto "Este é um &lt;cadeia de caracteres de teste&gt;." e a copia na cadeia de caracteres denominada `DecodedString` como "Isso é um \<Test String >.".  
  
 [!code-csharp[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica uma cadeia de caracteres a ser exibida em um navegador.  
  
Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <see cref="T:System.Net.WebUtility" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string -&gt; string" Usage="httpServerUtility.HtmlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de texto a ser codificada.</param>
        <summary>Codifica uma cadeia de caracteres em HTML e retorna a cadeia de caracteres codificada.</summary>
        <returns>O texto codificado em HTML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A codificação HTML torna-se de que o texto é exibido corretamente no navegador e não é interpretado pelo navegador como HTML. Por exemplo, se uma cadeia de caracteres de texto contém uma entrada de menor (\<) ou maior que (>), o navegador pode interpretar esses caracteres como o colchete de abertura ou fechamento de uma marca HTML. Quando os caracteres estão codificadas em HTML, eles são convertidos em cadeias de caracteres `&lt;` e `&gt;`, que faz com que o navegador para exibir o sinal de menor que o logon e maior que corretamente.  
  
 Esse método é uma maneira conveniente de acessar o <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, esse método usa <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> para codificar cadeias de caracteres.  
  
 O arquivo code-behind para uma página da web, acessar uma instância das <xref:System.Web.HttpServerUtility> classe por meio o `Server` propriedade. Em uma classe que não está em um arquivo code-behind, use `HttpContext.Current.Server` para acessar uma instância da <xref:System.Web.HttpServerUtility> classe.  
  
 Fora de um aplicativo web, use o <xref:System.Net.WebUtility> classe para codificar ou decodificar valores.  
  
   
  
## Examples  
 O exemplo a seguir mostra como a codificação HTML de um valor que potencialmente os códigos de código não seguro. O código reside no arquivo de code-behind para uma página da web. O valor para codificar é embutido em código neste exemplo apenas para simplificar o exemplo e mostrar o tipo de valor que pode a codificação HTML. Normalmente, você faria a codificação HTML um valor que você recebeu do usuário ou a solicitação. `Result` refere-se a um `Literal` controle.  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/default.aspx.vb#1)]  
  
 O exemplo a seguir é semelhante ao exemplo anterior, exceto que ele mostra como para a codificação HTML um valor de dentro de uma classe que não está no arquivo code-behind.  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres a ser codificada.</param>
        <param name="output">O fluxo de saída <see cref="T:System.IO.TextWriter" /> que contém a cadeia de caracteres codificada.</param>
        <summary>Codifica uma cadeia de caracteres em HTML e envia a saída resultante para um fluxo de saída <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A codificação HTML garante que texto será exibido corretamente no navegador, não é interpretado pelo navegador como HTML. Por exemplo, se uma cadeia de caracteres de texto contém uma entrada de menor (\<) ou maior que (>), o navegador pode interpretar esses caracteres como um colchete de abertura ou fechamento de uma marca HTML. A codificação HTML desses dois caracteres é `&lt;` e `&gt;`, respectivamente, que faz com que o navegador para exibir o sinal de menor que o logon e maior que corretamente.  
  
 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> é uma maneira conveniente para acessar o <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, <xref:System.Web.HttpServerUtility.HtmlEncode%2A> usa <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> para codificar cadeias de caracteres.  
  
 Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <xref:System.Net.WebUtility>.  
  
   
  
## Examples  
 O exemplo a seguir codifica uma cadeia de caracteres para transmissão por HTTP. Ele codifica a cadeia de caracteres denominada `TestString`, que contém o texto "Este é um \<Test String >." e a copia na cadeia de caracteres denominada `EncodedString` como "Isso é uma &lt;cadeia de caracteres de teste&gt;.".  
  
 [!code-csharp[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Web.HttpServerUtility.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome do computador do servidor.</summary>
        <value>O nome do computador local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir armazena o nome do computador do servidor como uma variável de cadeia de caracteres.  
  
 [!code-csharp[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Não foi possível encontrar o nome do computador.</exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="httpServerUtility.MapPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">O caminho virtual do aplicativo Web.</param>
        <summary>Retorna o caminho de arquivo físico que corresponde ao caminho virtual especificado.</summary>
        <returns>O caminho de arquivo físico no servidor Web que corresponde a <paramref name="path" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `path` está `null`, o <xref:System.Web.HttpServerUtility.MapPath%2A> método retorna o caminho físico completo do diretório que contém a solicitação atual para o caminho. O caminho relativo não precisa especificar um arquivo ou pasta existente para esse método retornar um valor. No entanto, você não pode especificar um caminho fora do aplicativo Web.  
  
> [!IMPORTANT]
>  O <xref:System.Web.HttpServerUtility.MapPath%2A> método potencialmente contém informações confidenciais sobre o ambiente de hospedagem. O valor de retorno não deve ser exibido aos usuários.  
  
 Um aplicativo Web que reside na `C:\ExampleSites\TestMapPath` retornaria os seguintes resultados:  
  
|Solicitação de|`path`|Valor retornado|  
|------------------|------------|--------------------|  
|RootLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath|  
|RootLevelPage.aspx|"/DownOneLevel/DownLevelPage.aspx"|C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx|  
|RootLevelPage.aspx|"/NotRealFolder"|C:\ExampleSites\TestMapPath\NotRealFolder|  
|RootLevelPage.aspx|"../OutsideApplication"|<xref:System.Web.HttpException>|  
|/DownOneLevel/DownLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath\DownOneLevel|  
|/DownOneLevel/DownLevelPage.aspx|"../RootLevelPage.aspx"|C:\ExampleSites\TestMapPath\RootLevelPage.aspx|  
  
   
  
## Examples  
 O exemplo a seguir mostra como recuperar o arquivo físico de um caminho virtual relativo. O código reside no arquivo de code-behind para uma página da web e utiliza o padrão `Server` objeto.  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/default.aspx.vb#1)]  
  
 O exemplo a seguir é semelhante ao exemplo anterior, exceto que ele mostra como recuperar um caminho físico de dentro de uma classe que não está no arquivo code-behind.  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O <see cref="T:System.Web.HttpContext" /> atual é <see langword="null" />.
        
- ou - 
<paramref name="path" /> é um caminho físico, mas era esperado um caminho virtual.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScriptTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptTimeout : int with get, set" Usage="System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor de tempo limite da solicitação em segundos.</summary>
        <value>A configuração do valor de tempo limite para solicitações.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> propriedade pode ser definida no arquivo Web. config, definindo o `executionTimeout` atributo do elemento. Definindo o tempo limite de forma programática com o <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> propriedade tem precedência sobre a configuração da Web. config.  
  
> [!NOTE]
>  Se você definir a `debug` atributo do elemento a ser `true` no arquivo Web. config, o valor de <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> será ignorado.  
  
   
  
## Examples  
 O exemplo a seguir define o período de tempo limite da solicitação como 60 segundos.  
  
 [!code-csharp[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">O <see cref="T:System.Web.HttpContext" /> atual é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O período de tempo limite é <see langword="null" /> ou, caso contrário, não pôde ser definido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transfer">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encerra a execução da página atual e inicia a execução de uma nova página para a solicitação atual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string -&gt; unit" Usage="httpServerUtility.Transfer path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">O caminho de URL da nova página no servidor de execução.</param>
        <summary>Para a solicitação atual, finaliza a execução da página atual e inicia a execução de uma nova página usando o caminho de URL especificado da página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A página transferida para deve ser outra página. aspx. Por exemplo, uma transferência para uma página ASP ou. asmx não é válida. O <xref:System.Web.HttpServerUtility.Transfer%2A> método preserva a <xref:System.Web.HttpRequest.QueryString%2A> e <xref:System.Web.HttpRequest.Form%2A> coleções.  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> chamadas <xref:System.Web.HttpResponse.End%2A>, que gera um <xref:System.Threading.ThreadAbortException> exceção após a conclusão.  
  
 ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso fornecido pelo <xref:System.Web.HttpServerUtility.Transfer%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama diretamente o manipulador indicado pelo <xref:System.Web.HttpServerUtility.Transfer%2A> método e não executa novamente a lógica de autenticação e autorização para o novo recurso. Se a política de segurança do seu aplicativo requer que os clientes têm autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Transfer%2A> método. O <xref:System.Web.HttpResponse.Redirect%2A> método executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do Internet Information Services (IIS) e ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Transfer%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string * bool -&gt; unit" Usage="httpServerUtility.Transfer (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">O caminho de URL da nova página no servidor de execução.</param>
        <param name="preserveForm"><see langword="true" /> para preservar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <summary>Finaliza a execução da página atual e inicia a execução de uma nova página usando o caminho especificado da URL da página. Especifica se é necessário limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A página transferida para deve ser outra página. aspx. Por exemplo, uma transferência para uma página ASP ou. asmx não é válida.  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> chamadas <xref:System.Web.HttpResponse.End%2A>, que gera um <xref:System.Threading.ThreadAbortException> exceção após a conclusão.  
  
 Se você definir a `preserveForm` parâmetro para `true`, a página de destino poderá ser capaz de acessar o estado de exibição de página anterior usando o <xref:System.Web.UI.Page.PreviousPage%2A> propriedade.  
  
 Para fins de segurança, você deve manter o `enableViewStateMac` atributo definido como `true`. ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso fornecido pelo <xref:System.Web.HttpServerUtility.Transfer%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama diretamente o manipulador indicado pelo <xref:System.Web.HttpServerUtility.Transfer%2A> método e não executa novamente a lógica de autenticação e autorização para o novo recurso. Se a política de segurança do seu aplicativo requer que os clientes têm autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Transfer%2A> método. O <xref:System.Web.HttpResponse.Redirect%2A> método executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do Internet Information Services (IIS) e ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Transfer%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir executa uma nova página no mesmo diretório que a página atual.  
  
 [!code-csharp[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">A solicitação de página atual é um retorno de chamada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (handler As IHttpHandler, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::Web::IHttpHandler ^ handler, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : System.Web.IHttpHandler * bool -&gt; unit" Usage="httpServerUtility.Transfer (handler, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">O manipulador HTTP que implementa o <see cref="T:System.Web.IHttpHandler" /> para o qual a solicitação atual será transferida.</param>
        <param name="preserveForm"><see langword="true" /> para preservar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <summary>Finaliza a execução da página atual e inicia a execução de uma nova solicitação usando um manipulador HTTP personalizado, que implementa a interface <see cref="T:System.Web.IHttpHandler" /> e especifica se as coleções <see cref="P:System.Web.HttpRequest.QueryString" /> e <see cref="P:System.Web.HttpRequest.Form" /> devem ser apagadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode escrever manipuladores HTTP personalizados para processar tipos predefinidos, específicos de solicitações HTTP em qualquer linguagem que está em conformidade com o Common Language Specification (CLS). Código executável que é definido nas classes de manipulador HTTP em vez de páginas convencionais do ASP (também conhecido como ASP clássico) ou as páginas do ASP.NET responde a essas solicitações específicas. Permitir que manipuladores HTTP para interagir com os serviços de resposta de um servidor Web que está executando serviços de informações da Internet (IIS) e a solicitação de baixo nível e fornecem funcionalidade semelhante às extensões ISAPI, mas com um modelo de programação mais simples.  
  
 Se você definir a `preserveForm` parâmetro para `true`, a página de destino poderá ser capaz de acessar o estado de exibição de página anterior usando o <xref:System.Web.UI.Page.PreviousPage%2A> propriedade.  
  
 Para fins de segurança, você deve manter o `enableViewStateMac` atributo definido como `true`. ASP.NET não verifica se o usuário atual está autorizado a exibir o recurso fornecido pelo <xref:System.Web.HttpServerUtility.Transfer%2A> método. Embora a lógica de autenticação e autorização do ASP.NET é executado antes do manipulador de recursos original é chamado, o ASP.NET chama diretamente o manipulador indicado pelo <xref:System.Web.HttpServerUtility.Transfer%2A> método e lógica de autenticação e autorização faz não novamente para o novo recurso. Se a política de segurança para o seu aplicativo exigir que os clientes tenham autorização apropriada para acessar o recurso, o aplicativo deve forçar uma nova autorização ou fornecer um mecanismo personalizado de controle de acesso.  
  
 Você pode forçar uma nova autorização usando o <xref:System.Web.HttpResponse.Redirect%2A> método em vez do <xref:System.Web.HttpServerUtility.Transfer%2A> método. O <xref:System.Web.HttpResponse.Redirect%2A> método executa um redirecionamento do lado do cliente no qual o navegador solicita o novo recurso. Como esse redirecionamento é uma nova solicitação entrem no sistema, ele está sujeito a toda a lógica de autenticação e autorização de política de segurança do IIS e do ASP.NET.  
  
 Você pode verificar se o usuário tem permissão para exibir o recurso, incorporando um método de autorização personalizada que usa o <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> método antes do aplicativo chama o <xref:System.Web.HttpServerUtility.Transfer%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">A solicitação de página atual é um retorno de chamada.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransferRequest">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Realiza uma execução assíncrona da URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> foi introduzido no .NET Framework versão 3.5. Para obter informações resumidas sobre o .NET Framework, consulte [versões e dependências](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string -&gt; unit" Usage="httpServerUtility.TransferRequest path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">O caminho de URL da nova página no servidor de execução.</param>
        <summary>Realiza uma execução assíncrona da URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa sobrecarga de método chama o <xref:System.Web.HttpServerUtility.TransferRequest%2A> sobrecarga com o `preserveForm` parâmetro definido como `false`, o `method` parâmetro definido como `null`, o `headers` parâmetro definido como `null`e o `preserveUser` parâmetro definido como `true`. Para obter mais informações, consulte a seção "Comentários" em <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> de sobrecarga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">A solicitação exige o modo de pipeline integrado de [!INCLUDE[iisver](~/includes/iisver-md.md)].</exception>
        <exception cref="T:System.Web.HttpException">O servidor não está disponível para manipular a solicitação.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="path" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="path" /> é inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">O caminho de URL da nova página no servidor de execução.</param>
        <param name="preserveForm"><see langword="true" /> para preservar a coleção <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar a coleção <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <summary>Executa uma execução assíncrona da URL especificada e preserva os parâmetros da cadeia de consulta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chama essa sobrecarga de <xref:System.Web.HttpServerUtility.TransferRequest%2A> sobrecarga com o `preserveForm` parâmetro definido como o valor passado, o `method` parâmetro definido como `null`, o `headers` parâmetro definido como `null`e o `preserveUser` conjunto de parâmetros para `true`. Para obter mais informações, consulte a seção "Comentários" em <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> é introduzido no .NET Framework versão 3.5.  Para saber mais, confira [Versões e dependências](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">A solicitação exige o modo de pipeline integrado de [!INCLUDE[iisver](~/includes/iisver-md.md)].</exception>
        <exception cref="T:System.Web.HttpException">O servidor não está disponível para manipular a solicitação.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="path" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="path" /> é inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="path">O caminho de URL da nova página no servidor de execução.</param>
        <param name="preserveForm"><see langword="true" /> para preservar a coleção <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar a coleção <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <param name="method">O método HTTP usado na execução da nova solicitação.</param>
        <param name="headers">Um <see cref="T:System.Collections.Specialized.NameValueCollection" /> de cabeçalhos de solicitação para a nova solicitação.</param>
        <summary>Realiza a execução assíncrona da URL especificada usando o método HTTP e os cabeçalhos especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado durante a execução com o modo de pipeline integrado no [!INCLUDE[iisver](~/includes/iisver-md.md)] para permitir o processamento de solicitação a serem transferidos de um recurso tipo para outro durante a execução da solicitação de destino com o contexto de solicitação correta. Por exemplo, você pode usar o <xref:System.Web.HttpServerUtility.TransferRequest%2A> método para transferir uma solicitação para uma página ASPX para uma solicitação para uma página XML.  
  
 O <xref:System.Web.HttpServerUtility.TransferRequest%2A> método realiza a execução filho assíncrona da URL especificada com as seguintes condições:  
  
-   Se o `path` parâmetro especifica uma cadeia de caracteres de consulta, ele será usado como a nova cadeia de caracteres de consulta. Se nenhuma cadeia de caracteres de consulta for incluída, a cadeia de caracteres de consulta da solicitação será utilizada novamente.  
  
-   Se o `method` parâmetro for especificado, ele será usado. Se for `null`, o método HTTP da solicitação original será usado.  
  
-   Se o `preserveForm` parâmetro é `true`, o corpo da entidade atual da solicitação estará disponível para a solicitação de destino. Isso permite que as postagens de formulário e carrega para ser transferida.  
  
-   Se a identidade do usuário é definida no momento na solicitação original, a identidade será transferida para a nova solicitação. Isso permite que as solicitações autenticadas usar novamente o resultado da autenticação para a nova solicitação. Se você deseja que o usuário a serem transferidos, defina o usuário `null` na solicitação original antes de serem transferidos.  
  
-   Se o `headers` parâmetro for especificado, a nova solicitação será executada com os cabeçalhos especificados. Isso pode ser usado para modificar os cabeçalhos de solicitação e os cookies para a nova solicitação ou adicionar um cabeçalho especial que especifica onde a solicitação original foi recebida.  
  
     Este método chama o <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> sobrecarga de método com o `preserveUser` parâmetro definido como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">A solicitação exige [!INCLUDE[iisver](~/includes/iisver-md.md)] executando no modo integrado.</exception>
        <exception cref="T:System.Web.HttpException">O servidor não está disponível para manipular a solicitação.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="path" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="path" /> é inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection, preserveUser As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers, bool preserveUser);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers, preserveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="preserveUser" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">O caminho.</param>
        <param name="preserveForm"><see langword="true" /> para preservar a coleção <see cref="P:System.Web.HttpRequest.Form" />; <see langword="false" /> para limpar a coleção <see cref="P:System.Web.HttpRequest.Form" />.</param>
        <param name="method">O método HTTP usado na nova solicitação.</param>
        <param name="headers">Um objeto <see cref="T:System.Collections.Specialized.NameValueCollection" /> que contém cabeçalhos de solicitação para a nova solicitação.</param>
        <param name="preserveUser"><see langword="true" /> para preservar a identidade do usuário, caso contrário, <see langword="false" />. As outras sobrecargas do método desse método chamam essa sobrecarga com esse parâmetro definido como <see langword="true" />.</param>
        <summary>Realiza a execução assíncrona da URL especificada usando o caminho, os cabeçalhos e o método HTTP especificados e, opcionalmente, preserva os valores de formulário e a identidade do usuário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte a seção "Comentários" em <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">A solicitação exige o modo de pipeline integrado de [!INCLUDE[iisver](~/includes/iisver-md.md)].</exception>
        <exception cref="T:System.Web.HttpException">O servidor não está disponível para manipular a solicitação.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="path" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="path" /> é inválido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodifica uma cadeia de caracteres codificada para transmissão HTTP e posteriormente enviada para o servidor em uma URL.  
  
Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <see cref="T:System.Net.WebUtility" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string -&gt; string" Usage="httpServerUtility.UrlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de texto a ser decodificada.</param>
        <summary>Decodifica uma cadeia de caracteres em URL e retorna a cadeia de caracteres decodificada.</summary>
        <returns>O texto decodificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codificação de URL, você garante que todos os navegadores transmitirá corretamente o texto em cadeias de caracteres de URL. Caracteres como uma pergunta marcam (?), e comercial (&), barra (/) de marcar e espaços podem ser truncados ou corrompidos por alguns navegadores. Como resultado, esses caracteres devem ser codificados em `<a>` marcas ou na consulta cadeias de caracteres onde as cadeias de caracteres podem ser enviadas novamente por um navegador em uma cadeia de caracteres de solicitação.  
  
 Esse método é uma maneira conveniente de acessar o <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, esse método usa <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> decodificar cadeias de caracteres.  
  
 O arquivo code-behind para uma página da web, acessar uma instância das <xref:System.Web.HttpServerUtility> classe por meio o `Server` propriedade. Em uma classe que não está em um arquivo code-behind, use `HttpContext.Current.Server` para acessar uma instância da <xref:System.Web.HttpServerUtility> classe.  
  
 Fora de um aplicativo web, use o <xref:System.Net.WebUtility> classe para codificar ou decodificar valores.  
  
   
  
## Examples  
 A exemplo a seguir mostra como a ser decodificado em URL de um valor que é recuperada da cadeia de consulta. O código reside no arquivo de code-behind para uma página da web. `ReturnPage` refere-se a um `HyperLink` controle.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/default.aspx.vb#1)]  
  
 O exemplo a seguir é semelhante ao exemplo anterior, exceto que ele mostra como para decodificar a URL de um valor de dentro de uma classe que não está no arquivo code-behind.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de caracteres HTML a ser decodificada.</param>
        <param name="output">O fluxo de saída <see cref="T:System.IO.TextWriter" /> que contém a cadeia de caracteres codificada.</param>
        <summary>Decodifica uma cadeia de caracteres HTML recebida em uma URL e envia a saída resultante para um fluxo de saída <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codificação de URL, você garante que todos os navegadores transmitirá corretamente o texto em cadeias de caracteres de URL. Caracteres como uma pergunta marcam (?), e comercial (&), barra (/) de marcar e espaços podem ser truncados ou corrompidos por alguns navegadores. Como resultado, esses caracteres devem ser codificados em `<a>` marcas ou na consulta cadeias de caracteres onde as cadeias de caracteres podem ser enviadas novamente por um navegador em uma cadeia de caracteres de solicitação.  
  
 <xref:System.Web.HttpServerUtility.UrlDecode%2A> é uma maneira conveniente para acessar o <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, <xref:System.Web.HttpServerUtility.UrlDecode%2A> usa <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> decodificar cadeias de caracteres.  
  
 Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <xref:System.Net.WebUtility>.  
  
   
  
## Examples  
 O exemplo a seguir decodifica a cadeia de caracteres denominada `EncodedString` (recebido em uma URL) na cadeia de caracteres denominada `DecodedString`.  
  
 [!code-csharp[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica uma cadeia de caracteres para transmissão de HTTP confiável do servidor Web para um cliente através da URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> é uma maneira conveniente para acessar o <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, <xref:System.Web.HttpServerUtility.UrlEncode%2A> usa <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> para codificar cadeias de caracteres.  
  
 Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <xref:System.Net.WebUtility>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string -&gt; string" Usage="httpServerUtility.UrlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">O texto a ser codificado em URL.</param>
        <summary>Codifica uma cadeia de caracteres em URL e retorna a cadeia de caracteres codificada.</summary>
        <returns>O texto codificado em URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codificação de URL, você garante que todos os navegadores transmitirá corretamente o texto em cadeias de caracteres de URL. Caracteres como uma pergunta marcam (?), e comercial (&), barra (/) de marcar e espaços podem ser truncados ou corrompidos por alguns navegadores. Como resultado, esses caracteres devem ser codificados em `<a>` marcas ou na consulta cadeias de caracteres onde as cadeias de caracteres podem ser enviadas novamente por um navegador em uma cadeia de caracteres de solicitação.  
  
 Esse método é uma maneira conveniente de acessar o <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, esse método usa <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> para codificar cadeias de caracteres.  
  
 O arquivo code-behind para uma página da web, acessar uma instância das <xref:System.Web.HttpServerUtility> classe por meio o `Server` propriedade. Em uma classe que não está em um arquivo code-behind, use `HttpContext.Current.Server` para acessar uma instância da <xref:System.Web.HttpServerUtility> classe.  
  
 Fora de um aplicativo web, use o <xref:System.Net.WebUtility> classe para codificar ou decodificar valores.  
  
   
  
## Examples  
 A exemplo a seguir mostra como codificar na URL de um valor que é usado como um valor de cadeia de caracteres de consulta de um hiperlink. O código reside no arquivo de code-behind para uma página da web. O valor a ser codificado é embutido em código neste exemplo apenas para simplificar o exemplo e mostrar o tipo de valor que você pode codificar a URL. Normalmente, você faria codificar a URL de um valor que você recebeu do usuário ou a solicitação. `NextPage` refere-se a um `HyperLink` controle.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/default.aspx.vb#1)]  
  
 O exemplo a seguir é semelhante ao exemplo anterior, exceto que ele mostra como para codificar a URL de um valor de dentro de uma classe que não está no arquivo code-behind.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">A cadeia de texto a ser codificada.</param>
        <param name="output">O fluxo de saída <see cref="T:System.IO.TextWriter" /> que contém a cadeia de caracteres codificada.</param>
        <summary>Codifica uma cadeia de caracteres em URL e envia a saída resultante para um fluxo de saída <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codificação de URL, você garante que todos os navegadores transmitirá corretamente o texto em cadeias de caracteres de URL. Caracteres como uma pergunta marcam (?), e comercial (&), barra (/) de marcar e espaços podem ser truncados ou corrompidos por alguns navegadores. Como resultado, esses caracteres devem ser codificados em `<a>` marcas ou na consulta cadeias de caracteres onde as cadeias de caracteres podem ser enviadas novamente por um navegador em uma cadeia de caracteres de solicitação.  
  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> é uma maneira conveniente para acessar o <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> método em tempo de execução de um aplicativo ASP.NET. Internamente, <xref:System.Web.HttpServerUtility.UrlEncode%2A> usa <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> para codificar cadeias de caracteres.  
  
 Para codificar ou decodificar valores fora de um aplicativo Web, use a classe <xref:System.Net.WebUtility>.  
  
   
  
## Examples  
 O exemplo a seguir codifica uma cadeia de caracteres para transmissão por HTTP. Ele codifica a cadeia de caracteres denominada `TestString`, que contém o texto "Este é um \<cadeia de caracteres de teste >." e a copia na cadeia de caracteres denominada `EncodedString` como "Este + é + a + % 3cTest + cadeia de caracteres % 3e.".  
  
 [!code-csharp[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlPathEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlPathEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlPathEncode : string -&gt; string" Usage="httpServerUtility.UrlPathEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">O texto a ser codificado em URL.</param>
        <summary>Não use. Destinado apenas para compatibilidade com o navegador. Use <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />.</summary>
        <returns>O texto codificado da URL.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenDecode (input As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlTokenDecode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenDecode : string -&gt; byte[]" Usage="System.Web.HttpServerUtility.UrlTokenDecode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">O token de cadeia de caracteres de URL a ser decodificado.</param>
        <summary>Decodifica um token de cadeia de caracteres de URL em sua matriz de bytes equivalente usando dígitos de base 64.</summary>
        <returns>A matriz de bytes que contém o token de cadeia de caracteres de URL decodificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> método converte um token de cadeia de caracteres de URL, que codifica dados binários como dígitos de base 64, em sua representação de matriz de bytes equivalente. Use o <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> método decodificar tokens transmitidos na URL e codificado usando o <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.  
  
 O <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> método retornará uma matriz de bytes vazia se o `input` parâmetro tem um comprimento menor que 1.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor do parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenEncode (input As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlTokenEncode(cli::array &lt;System::Byte&gt; ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenEncode : byte[] -&gt; string" Usage="System.Web.HttpServerUtility.UrlTokenEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">A matriz de bytes para codificar.</param>
        <summary>Codifica uma matriz de bytes em sua representação de cadeia de caracteres equivalente usando dígitos de base 64, que é útil para transmissão na URL.</summary>
        <returns>A cadeia de caracteres que contém o token codificado se o *tamanho* da matriz de bytes for maior do que um; caso contrário, uma cadeia de caracteres vazia ("").</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> método converte uma matriz de bytes em uma representação de cadeia de caracteres equivalente codificada com dígitos de base 64. O token de cadeia de caracteres resultante pode ser transmitido na URL.  
  
 O <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> retornará uma cadeia de caracteres vazia se o `input` parâmetro tem um comprimento menor que 1.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor do parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>