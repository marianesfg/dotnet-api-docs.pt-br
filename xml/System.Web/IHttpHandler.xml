<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0af3086a39a9ec32e66cb3393068e7b0233d4ac" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37528484" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define o contrato que o ASP.NET implementa para processar de forma síncrona as solicitações Web HTTP usando manipuladores HTTP personalizados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode escrever manipuladores HTTP personalizados para processar tipos predefinidos, específicos de solicitações HTTP em qualquer linguagem compatível com do Common Language Specification (CLS). Código executável definido no `HttpHandler` classes, em vez de páginas ASP ou ASP.NET Web convencionais, responde a essas solicitações específicas. Manipuladores HTTP oferecem uma maneira de interagir com os serviços de resposta do servidor Web do IIS e a solicitação de baixo nível e fornecem funcionalidade muito como extensões ISAPI, mas com um modelo de programação mais simples.  
  
 Se seu manipulador irá acessar valores de estado de sessão, ele deverá implementar o <xref:System.Web.SessionState.IRequiresSessionState> interface (uma interface marcadora sem métodos).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se outra solicitação pode usar a instância de <see cref="T:System.Web.IHttpHandler" />.</summary>
        <value>
          <see langword="true" /> se a instância de <see cref="T:System.Web.IHttpHandler" /> for reutilizável; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Definir explicitamente o <xref:System.Web.IHttpHandler.IsReusable%2A> propriedade para `true` ou `false` pelo código que você fornece e que substitui o <xref:System.Web.IHttpHandler.IsReusable%2A> acessador de propriedade (getter).  
  
   
  
## Examples  
 O exemplo de código a seguir grava no fluxo de saída HTTP em resposta a uma solicitação de cliente para uma página chamada handler.aspx quatro linhas de texto. Todas as solicitações para handler.aspx são atendidas pela `MyHttpHandler` classe no namespace `HandlerExample` contidos no assembly HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto <see cref="T:System.Web.HttpContext" /> que fornece referências aos objetos intrínsecos do servidor (por exemplo, <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> e <see langword="Server" />) usados para atender a solicitações HTTP.</param>
        <summary>Permite o processamento de solicitações HTTP da Web por um <see langword="HttpHandler" /> personalizado que implementa a interface <see cref="T:System.Web.IHttpHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Coloque seu personalizado `HttpHandler` de código no <xref:System.Web.IHttpHandler.ProcessRequest%2A> método virtual, conforme mostrado no exemplo a seguir.  
  
   
  
## Examples  
 O exemplo de código a seguir grava no fluxo de saída HTTP em resposta a uma solicitação de cliente para uma página chamada handler.aspx quatro linhas de texto. Todas as solicitações para handler.aspx são atendidas pela `MyHttpHandler` classe no namespace `HandlerExample` contidos no assembly HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>