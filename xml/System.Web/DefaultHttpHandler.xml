<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2fdaffe3a469651a2b5cc4eced8a5a3b6b08126e" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51901117" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa as propriedades e métodos de um manipulador HTTP padrão.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Web.DefaultHttpHandler> objeto intercepta as solicitações de entrada no pipeline HTTP quando a intercepção de solicitação tiver sido configurada por meio do Internet Information Services (IIS) 6.0 e associações nenhum explícitas se aplicam à extensão solicitada.  
  
 Interceptação de solicitação pode ser configurada por meio do recurso de mapeamento do aplicativo curinga introduzido no IIS 6.0. Para obter mais informações, pesquise o [biblioteca MSDN](https://go.microsoft.com/fwlink/?linkid=37118) para obter informações sobre como usar mapas de aplicativos de curinga para remapear um URL.  
  
 O <xref:System.Web.DefaultHttpHandler> classe implementa o <xref:System.Web.IHttpAsyncHandler> interface para fornecer processamento assíncrono da solicitação. Para obter informações gerais sobre os manipuladores HTTP, consulte [manipuladores HTTP e visão geral de módulos HTTP](https://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b). Além disso, para obter mais informações, consulte o seguinte:  
  
-   Sobre a criação de manipuladores HTTP assíncronos, consulte [instruções passo a passo: Criando um manipulador HTTP assíncrono](https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9).  
  
-   Sobre o registro de manipuladores HTTP, consulte [como: registrar manipuladores de HTTP](https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60).  
  
 Classes podem derivar o <xref:System.Web.DefaultHttpHandler> classe para fornecer manipulação personalizada de solicitações. Um manipulador HTTP assíncrono que é derivado de <xref:System.Web.DefaultHttpHandler> poderia substituir o <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> método para alterar como as solicitações são processadas.  
  
 Um <xref:System.Web.DefaultHttpHandler> não usa os erros do ASP.NET. Existente conteúdo que usa os erros IIS ou um mecanismo de erro personalizada proprietárias sejam ISAPI funcionaria inalterado.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como implementar um manipulador HTTP personalizado derivando de <xref:System.Web.DefaultHttpHandler> classe.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">Como: registrar manipuladores HTTP</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">Como: criar um manipulador HTTP assíncrono</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto que fornece referências aos objetos intrínsecos do servidor usados para atender a solicitações HTTP.</param>
        <param name="callback">O método a ser chamado quando a chamada de método assíncrono é concluída. Se <c>callback</c> for <see langword="null" />, o delegado não será chamado.</param>
        <param name="state">Quaisquer dados de estado necessários para processar a solicitação.</param>
        <summary>Inicia uma chamada assíncrona para o manipulador HTTP.</summary>
        <returns>Um <see cref="T:System.IAsyncResult" /> que contém informações sobre o status do processo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao criar um manipulador HTTP para uso assíncrono, o manipulador deve implementar assíncrona <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> e <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> métodos que são chamados de forma assíncrona pelo ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">As pré-condições para o processamento de uma falha de solicitação e o arquivo solicitado tem o sufixo .asp ou a solicitação foi enviada por POST.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o contexto que está associado ao objeto <see cref="T:System.Web.DefaultHttpHandler" /> atual.</summary>
        <value>Um <see cref="T:System.Web.HttpContext" /> objeto que contém o contexto atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.DefaultHttpHandler.Context%2A> propriedade fornece acesso ao atual <xref:System.Web.HttpContext> objeto para classes derivadas. Uma <xref:System.Web.HttpContext> objeto fornece acesso para o intrínseco <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, e <xref:System.Web.HttpApplication.Server%2A> propriedades para a solicitação. Para obter mais informações sobre como acessar as informações contextuais, consulte <xref:System.Web.HttpContext>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Um objeto que contém informações sobre o status do processo.</param>
        <summary>Fornece um método final para um processo assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> método para gerar todas as exceções que são detectadas durante o processo assíncrono.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de cabeçalhos de solicitação e valores de solicitação para transferir junto com a solicitação.</summary>
        <value>Um <see cref="T:System.Collections.Specialized.NameValueCollection" /> que contém os cabeçalhos de solicitação e valores.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> propriedade retorna uma coleção vazia, a menos que ele é preenchido em uma classe que deriva de <xref:System.Web.DefaultHttpHandler> classe. Os cabeçalhos que são adicionados são acrescentados à coleção de cabeçalhos na solicitação antes de passar a solicitação de volta à Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor booliano que indica se outra solicitação pode usar a instância atual da classe <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <value>
          <see langword="true" /> Se o <see cref="T:System.Web.DefaultHttpHandler" /> for reutilizável; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para definir explicitamente o <xref:System.Web.DefaultHttpHandler.IsReusable%2A> propriedade para `true` ou `false`, substitua o <xref:System.Web.DefaultHttpHandler.IsReusable%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chamado quando as pré-condições impedem que o objeto <see cref="T:System.Web.DefaultHttpHandler" /> processe uma solicitação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As pré-condições são especificadas pelo cliente em que os campos de cabeçalho de solicitação e são avaliadas no servidor Web. Por exemplo, usando pré-condições, clientes podem impedir que um método solicitado (por exemplo, GET) que está sendo aplicado a um recurso que não seja o pretendido. Para obter mais informações, consulte a seção 14, "Definições de campo de cabeçalho", nos [Hypertext Transfer Protocol--HTTP/1.1](https://go.microsoft.com/fwlink/?LinkID=73147) especificação no site da World Wide Web Consortium (W3C).  
  
 O <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> método é chamado quando as pré-condições impedem que o <xref:System.Web.DefaultHttpHandler> objeto a partir de uma solicitação de processamento. Uma classe derivada pode substituir o <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> método para gerar uma exceção quando as pré-condições falham. O <xref:System.Web.DefaultHttpHandler> não gerará uma exceção <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> método.  
  
 Qualquer uma das seguintes fará com que as pré-condições falhe:  
  
-   Chamar <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Chamar <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Chamar <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Alterar a política de cache para a resposta.  
  
-   Adicionando um <xref:System.IO.Stream> objeto como um filtro para o <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Substitui a URL de destino para a solicitação atual.</summary>
        <returns>A URL substituída a ser usada na solicitação ou <see langword="null" />, se uma URL substituída não for fornecida.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> método retorna `null` , a menos que ele seja substituído em uma classe que deriva de <xref:System.Web.DefaultHttpHandler> classe.  
  
 O <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> método é chamado somente se estiver em execução no modo de isolamento do processo de trabalho ASP.NET no IIS 6.0, e se a resposta não foi modificado antes do <xref:System.Web.DefaultHttpHandler> objeto foi chamado. A resposta é modificada por qualquer uma das seguintes opções:  
  
-   Chamar <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Chamar <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Chamar <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Alterar a política de cache para a resposta.  
  
-   Adicionando um <xref:System.IO.Stream> objeto como um filtro para o <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto que fornece referências aos objetos intrínsecos do servidor usados para atender a solicitações HTTP.</param>
        <summary>Permite que um objeto <see cref="T:System.Web.DefaultHttpHandler" /> processe solicitações da Web HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> não deve ser chamado o método de forma síncrona. Classes que derivam de <xref:System.Web.DefaultHttpHandler> classe pode substituir o <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> para fornecer processamento de solicitação personalizado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> é chamado de forma síncrona.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>