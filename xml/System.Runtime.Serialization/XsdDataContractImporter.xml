<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ddbb8b30d47aa000bda3ef150d6e5f30170dbe76" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51899908" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="310d5-101">Permite a transformação de um conjunto de arquivos de esquema XML (.xsd) em tipos CLR (Common Language Runtime).</span><span class="sxs-lookup"><span data-stu-id="310d5-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-102">Use o <xref:System.Runtime.Serialization.XsdDataContractImporter> se você estiver criando um serviço Web que deve interoperar com um serviço Web existente ou criar o contrato de dados, tipos de esquemas XML.</span><span class="sxs-lookup"><span data-stu-id="310d5-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="310d5-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> irá transformar um conjunto de esquemas XML e criar o [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] de contrato de tipos que representam os dados em uma linguagem de programação selecionada.</span><span class="sxs-lookup"><span data-stu-id="310d5-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="310d5-104">Para criar o código, use as classes de <xref:System.CodeDom> namespace.</span><span class="sxs-lookup"><span data-stu-id="310d5-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="310d5-105">Por outro lado, use o <xref:System.Runtime.Serialization.XsdDataContractExporter> classe quando você tiver criado um serviço Web que incorpora os dados representados por tipos CLR e quando for preciso exportar esquemas XML para cada tipo de dados a serem consumidos por outros serviços da Web.</span><span class="sxs-lookup"><span data-stu-id="310d5-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="310d5-106">Ou seja, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforma um conjunto de tipos CLR em um conjunto de esquemas XML.</span><span class="sxs-lookup"><span data-stu-id="310d5-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="310d5-107">Para gerar tipos de CLR de esquemas XML no tempo de design, use o [ferramenta de utilitário de metadados ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span><span class="sxs-lookup"><span data-stu-id="310d5-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="310d5-108">Para o código gerado de arquivos XSD, use o `/dataContractOnly` switch da ferramenta.</span><span class="sxs-lookup"><span data-stu-id="310d5-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="310d5-109">Você também pode usar o <xref:System.Runtime.Serialization.XsdDataContractImporter> se você precisa de mais controle sobre o processo de ou precisa fazê-lo por meio de programação.</span><span class="sxs-lookup"><span data-stu-id="310d5-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="310d5-110">O exemplo a seguir cria uma <xref:System.Xml.Schema.XmlSchemaSet> e chama o <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> método para criar um <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="310d5-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="310d5-111">O <xref:System.CodeDom.CodeCompileUnit> , em seguida, é usado para criar arquivos de código Visual C# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="310d5-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="310d5-112">Usando contratos de dados</span><span class="sxs-lookup"><span data-stu-id="310d5-112">Using Data Contracts</span></span></related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md"><span data-ttu-id="310d5-113">Tipos com suporte fornecido pelo serializador de contrato de dados</span><span class="sxs-lookup"><span data-stu-id="310d5-113">Types Supported by the Data Contract Serializer</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="310d5-114">Inicializa uma nova instância da classe <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-114">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="310d5-115">Inicializa uma nova instância da classe <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="310d5-116">O <see cref="T:System.CodeDom.CodeCompileUnit" /> que será usado para armazenar o código.</span><span class="sxs-lookup"><span data-stu-id="310d5-116">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span></span></param>
        <summary><span data-ttu-id="310d5-117">Inicializa uma nova instância da classe <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> com o <see cref="T:System.CodeDom.CodeCompileUnit" /> que será usado para gerar o código CLR.</span><span class="sxs-lookup"><span data-stu-id="310d5-117">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-118">Use esse construtor para adicionar mais código em um <xref:System.CodeDom.CodeCompileUnit> que já foi gerado.</span><span class="sxs-lookup"><span data-stu-id="310d5-118">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="310d5-119">O exemplo a seguir cria uma <xref:System.Xml.Schema.XmlSchemaSet> e chama o <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> método para criar um <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="310d5-119">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="310d5-120">O <xref:System.CodeDom.CodeCompileUnit> , em seguida, é usado para criar arquivos de código Visual C# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="310d5-120">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="310d5-121">Obtém um valor que indica se os esquemas podem ser transformados em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-121">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-122">Para obter mais informações sobre os tipos que podem ser importados, consulte [tipos com suporte pelo serializador de contrato de dados](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="310d5-122">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-123">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém os esquemas a serem transformados.</span><span class="sxs-lookup"><span data-stu-id="310d5-123">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <summary><span data-ttu-id="310d5-124">Obtém um valor que indica se os esquemas contidos em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> podem ser transformados em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-124">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="310d5-125"><see langword="true" /> se os esquemas podem ser transformados em tipos de contrato de dados; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-125"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="310d5-126">A exemplo a seguir chama o <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> método para determinar se o <xref:System.CodeDom.CodeCompileUnit> pode ser gerado.</span><span class="sxs-lookup"><span data-stu-id="310d5-126">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-127">O parâmetro <paramref name="schemas" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-127">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="310d5-128">Um contrato de dados envolvido na importação é inválido.</span><span class="sxs-lookup"><span data-stu-id="310d5-128">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-129">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém os esquemas a serem transformados.</span><span class="sxs-lookup"><span data-stu-id="310d5-129">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="typeNames"><span data-ttu-id="310d5-130">Um <see cref="T:System.Collections.Generic.ICollection`1" /> de <see cref="T:System.Xml.XmlQualifiedName" /> que representa o conjunto de tipos de esquema a ser importado.</span><span class="sxs-lookup"><span data-stu-id="310d5-130">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="310d5-131">Obtém um valor que indica se o conjunto especificado de tipos contidos em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> pode ser transformado em tipos CLR gerados em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-131">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="310d5-132"><see langword="true" /> se os esquemas podem ser transformados; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-132"><see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-133">O parâmetro <paramref name="schemas" /> ou <paramref name="typeNames" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-133">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="310d5-134">Um contrato de dados envolvido na importação é inválido.</span><span class="sxs-lookup"><span data-stu-id="310d5-134">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-135">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> a ser importado.</span><span class="sxs-lookup"><span data-stu-id="310d5-135">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span></span></param>
        <param name="element"><span data-ttu-id="310d5-136">Um <see cref="T:System.Xml.Schema.XmlSchemaElement" /> específico para fazer check-in no conjunto de esquemas.</span><span class="sxs-lookup"><span data-stu-id="310d5-136">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span></span></param>
        <summary><span data-ttu-id="310d5-137">Obtém um valor que indica se um elemento de esquema específico contido em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> pode ser importado.</span><span class="sxs-lookup"><span data-stu-id="310d5-137">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span></span></summary>
        <returns><span data-ttu-id="310d5-138"><see langword="true" /> se o elemento pode ser importado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-138"><see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-139">Esse método verifica o tipo e todos os tipos de esquema referenciados dele.</span><span class="sxs-lookup"><span data-stu-id="310d5-139">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-140">O parâmetro <paramref name="schemas" /> ou <paramref name="element" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-140">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="310d5-141">Um contrato de dados envolvido na importação é inválido.</span><span class="sxs-lookup"><span data-stu-id="310d5-141">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-142">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém as representações de esquema.</span><span class="sxs-lookup"><span data-stu-id="310d5-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="310d5-143">Um <see cref="T:System.Collections.IList" /> de <see cref="T:System.Xml.XmlQualifiedName" /> que especifica os nomes dos tipos de esquema que precisam ser importados do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-143">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></param>
        <summary><span data-ttu-id="310d5-144">Obtém um valor que indica se os esquemas contidos em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> podem ser transformados em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-144">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="310d5-145"><see langword="true" /> se os esquemas podem ser transformados em tipos de contrato de dados; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-145"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-146">Para obter mais informações sobre os tipos que podem ser importados, consulte [tipos com suporte pelo serializador de contrato de dados](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="310d5-146">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-147">O parâmetro <paramref name="schemas" /> ou <paramref name="typeName" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-147">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="310d5-148">Um contrato de dados envolvido na importação é inválido.</span><span class="sxs-lookup"><span data-stu-id="310d5-148">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="310d5-149">Obtém um <see cref="T:System.CodeDom.CodeCompileUnit" /> usado para armazenar os tipos CLR gerados.</span><span class="sxs-lookup"><span data-stu-id="310d5-149">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span></span></summary>
        <value><span data-ttu-id="310d5-150">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> usado para armazenar os tipos CLR gerados.</span><span class="sxs-lookup"><span data-stu-id="310d5-150">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-151">Chamar essa propriedade depois de importar esquemas usando o <xref:System.Runtime.Serialization.XsdDataContractImporter> para acessar o <xref:System.CodeDom.CodeCompileUnit> em que todos o código gerado é armazenado.</span><span class="sxs-lookup"><span data-stu-id="310d5-151">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="310d5-152">A exemplo a seguir usa cria um <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="310d5-152">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="310d5-153">O <xref:System.CodeDom.CodeCompileUnit> , em seguida, é usado para criar o arquivo de código de um Visual C# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="310d5-153">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="310d5-154">Retorna um <see cref="T:System.CodeDom.CodeTypeReference" /> para o elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="310d5-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="310d5-155">O <see cref="T:System.Xml.XmlQualifiedName" /> que especifica o tipo de esquema a ser procurado.</span><span class="sxs-lookup"><span data-stu-id="310d5-155">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span></span></param>
        <summary><span data-ttu-id="310d5-156">Retorna um <see cref="T:System.CodeDom.CodeTypeReference" /> para o tipo CLR gerado para o tipo de esquema com o <see cref="T:System.Xml.XmlQualifiedName" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="310d5-156">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span></span></summary>
        <returns><span data-ttu-id="310d5-157">Uma referência <see cref="T:System.CodeDom.CodeTypeReference" /> ao tipo CLR gerado para o tipo de esquema com o <paramref name="typeName" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="310d5-157">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-158">Use esse método para pesquisar a referência a um tipo CLR gerado depois de chamar o <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> método.</span><span class="sxs-lookup"><span data-stu-id="310d5-158">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="310d5-159">O <xref:System.CodeDom.CodeTypeReference> contém o nome do tipo gerado e pode ser usada para pesquisar correspondente <xref:System.CodeDom.CodeTypeDeclaration> no <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="310d5-159">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="310d5-160">Um <see cref="T:System.Xml.XmlQualifiedName" /> que especifica o nome XML qualificado do tipo de esquema de pesquisa.</span><span class="sxs-lookup"><span data-stu-id="310d5-160">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span></span></param>
        <param name="element"><span data-ttu-id="310d5-161">Um <see cref="T:System.Xml.Schema.XmlSchemaElement" /> que especifica um elemento em um esquema XML.</span><span class="sxs-lookup"><span data-stu-id="310d5-161">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span></span></param>
        <summary><span data-ttu-id="310d5-162">Retorna um <see cref="T:System.CodeDom.CodeTypeReference" /> para o elemento XML qualificado e o elemento de esquema.</span><span class="sxs-lookup"><span data-stu-id="310d5-162">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span></span></summary>
        <returns><span data-ttu-id="310d5-163">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que representa o tipo que foi gerado para o tipo de esquema especificado.</span><span class="sxs-lookup"><span data-stu-id="310d5-163">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-164">O elemento de esquema é necessária para dados sobre o tipo que é especificado no escopo do elemento.</span><span class="sxs-lookup"><span data-stu-id="310d5-164">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="310d5-165">O principal exemplo disso é o atributo XSD `nillable`.</span><span class="sxs-lookup"><span data-stu-id="310d5-165">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="310d5-166">No esquema, definindo `nillable` à `true` é especificado no elemento do esquema recipiente, enquanto o conceito de null é expresso no tipo CLR <xref:System.Nullable%601>.</span><span class="sxs-lookup"><span data-stu-id="310d5-166">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="310d5-167">O elemento é passado de modo que o importador pode consultar as informações de nível de elemento e retornar a referência do tipo correto de acordo.</span><span class="sxs-lookup"><span data-stu-id="310d5-167">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="310d5-168">Ao importar WSDL, cada parâmetro é importado separadamente e, portanto, os elementos do parâmetro precisam ser passados separadamente.</span><span class="sxs-lookup"><span data-stu-id="310d5-168">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="310d5-169">Um <see cref="T:System.Xml.XmlQualifiedName" /> que representa o tipo de esquema para o qual os tipos conhecidos serão pesquisados.</span><span class="sxs-lookup"><span data-stu-id="310d5-169">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span></span></param>
        <summary><span data-ttu-id="310d5-170">Retorna uma lista de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> que representam os tipos conhecidos gerados durante a geração de código para o tipo de esquema especificado.</span><span class="sxs-lookup"><span data-stu-id="310d5-170">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span></span></summary>
        <returns><span data-ttu-id="310d5-171">Um <see cref="T:System.Collections.Generic.IList`1" /> do tipo <see cref="T:System.CodeDom.CodeTypeReference" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-171">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-172">Ao gerar os tipos CLR para tipos de esquema, os tipos conhecidos também são gerados para todos os tipos derivados que estão presentes no esquema.</span><span class="sxs-lookup"><span data-stu-id="310d5-172">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="310d5-173">Em muitos casos, esses tipos conhecidos são adicionados usando atributos para o código gerado.</span><span class="sxs-lookup"><span data-stu-id="310d5-173">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="310d5-174">(Por exemplo, consulte o <xref:System.Runtime.Serialization.KnownTypeAttribute> classe.</span><span class="sxs-lookup"><span data-stu-id="310d5-174">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="310d5-175">) No entanto, para o tipo de nível superior, preciso haver uma maneira de retornar o conjunto de tipos conhecidos gerados.</span><span class="sxs-lookup"><span data-stu-id="310d5-175">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="310d5-176">Esse método retorna o <xref:System.CodeDom.CodeTypeReference> de tipos conhecidos que foram gerados para um tipo de esquema específico.</span><span class="sxs-lookup"><span data-stu-id="310d5-176">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="310d5-177">Para obter mais informações, consulte [tipos conhecidos de contrato de dados](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span><span class="sxs-lookup"><span data-stu-id="310d5-177">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/1a0baea1-27b7-470d-9136-5bbad86c4337"><span data-ttu-id="310d5-178">Tipos de contratos de dados conhecidos</span><span class="sxs-lookup"><span data-stu-id="310d5-178">Data Contract Known Types</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="310d5-179">Transforma um conjunto de esquemas XML em um <see cref="T:System.CodeDom.CodeCompileUnit" /> usado para gerar o código CLR.</span><span class="sxs-lookup"><span data-stu-id="310d5-179">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-180">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém as representações de esquema para as quais os tipos CLR serão gerados.</span><span class="sxs-lookup"><span data-stu-id="310d5-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span></span></param>
        <summary><span data-ttu-id="310d5-181">Transforma o conjunto especificado de esquemas XML contidos em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-181">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="310d5-182">O exemplo a seguir usa o <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> método para testar se um conjunto de esquemas pode ser importado.</span><span class="sxs-lookup"><span data-stu-id="310d5-182">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="310d5-183">Se o <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> retorn `true`, o código chama o <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> método.</span><span class="sxs-lookup"><span data-stu-id="310d5-183">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-184">O parâmetro <paramref name="schemas" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-184">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-185">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém as representações de esquema.</span><span class="sxs-lookup"><span data-stu-id="310d5-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeNames"><span data-ttu-id="310d5-186">Um <see cref="T:System.Collections.Generic.ICollection`1" /> (de <see cref="T:System.Xml.XmlQualifiedName" />) que representa o conjunto de tipos de esquema para importação.</span><span class="sxs-lookup"><span data-stu-id="310d5-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="310d5-187">Transforma o conjunto especificado de tipos de esquema contido em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em tipos CLR gerados em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-187">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-188">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém os esquemas a serem transformados.</span><span class="sxs-lookup"><span data-stu-id="310d5-188">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="element"><span data-ttu-id="310d5-189">Um <see cref="T:System.Xml.Schema.XmlSchemaElement" /> que representa o elemento de esquema específico a ser transformado.</span><span class="sxs-lookup"><span data-stu-id="310d5-189">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span></span></param>
        <summary><span data-ttu-id="310d5-190">Transforma o elemento de esquema especificado no conjunto de esquemas XML fornecido em um <see cref="T:System.CodeDom.CodeCompileUnit" /> e retorna um <see cref="T:System.Xml.XmlQualifiedName" /> que representa o nome de contrato de dados para o elemento indicado.</span><span class="sxs-lookup"><span data-stu-id="310d5-190">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span></span></summary>
        <returns><span data-ttu-id="310d5-191">Um <see cref="T:System.Xml.XmlQualifiedName" /> que representa o elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="310d5-191">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-192">O parâmetro <paramref name="schemas" /> ou <paramref name="element" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-192">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="310d5-193">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> que contém as representações de esquema.</span><span class="sxs-lookup"><span data-stu-id="310d5-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="310d5-194">Um <see cref="T:System.Xml.XmlQualifiedName" /> que representa um tipo de esquema específico para importação.</span><span class="sxs-lookup"><span data-stu-id="310d5-194">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span></span></param>
        <summary><span data-ttu-id="310d5-195">Transforma o tipo de esquema XML especificado contido em um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-195">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="310d5-196">O parâmetro <paramref name="schemas" /> ou <paramref name="typeName" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="310d5-196">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="310d5-197">Obtém ou define um <see cref="T:System.Runtime.Serialization.ImportOptions" /> que contém opções configuráveis para a operação de importação.</span><span class="sxs-lookup"><span data-stu-id="310d5-197">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span></span></summary>
        <value><span data-ttu-id="310d5-198">Um <see cref="T:System.Runtime.Serialization.ImportOptions" /> que contém opções configuráveis.</span><span class="sxs-lookup"><span data-stu-id="310d5-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="310d5-199">Use o <xref:System.Runtime.Serialization.ImportOptions> classe para personalizar como os tipos de CLR são gerados durante a importação de esquema.</span><span class="sxs-lookup"><span data-stu-id="310d5-199">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>