<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17f55c59f17b4264695f566b7e06f8e8c6188ed4" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48602979" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que um objeto controle sua própria serialização e desserialização.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Qualquer classe que pode ser serializado deve ser marcado com o <xref:System.SerializableAttribute>. Se precisar de uma classe controlar seu processo de serialização, ela pode implementar o <xref:System.Runtime.Serialization.ISerializable> interface. O <xref:System.Runtime.Serialization.Formatter> chamadas a <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> no tempo de serialização e preenche fornecido <xref:System.Runtime.Serialization.SerializationInfo> com todos os dados necessários para representar o objeto. O <xref:System.Runtime.Serialization.Formatter> cria um <xref:System.Runtime.Serialization.SerializationInfo> com o tipo do objeto no gráfico. Objetos que precisam enviar proxies para si mesmos podem usar o <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> e <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> métodos em <xref:System.Runtime.Serialization.SerializationInfo> para alterar as informações transmitidas.  
  
 No caso de herança de classe, é possível serializar uma classe que deriva de uma classe base que implementa <xref:System.Runtime.Serialization.ISerializable>. Nesse caso, a classe derivada deve chamar a implementação da classe base <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> dentro de sua implementação de <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Caso contrário, os dados da classe base não serão serializados.  
  
 O <xref:System.Runtime.Serialization.ISerializable> interface implica um construtor com o construtor de assinatura (<xref:System.Runtime.Serialization.SerializationInfo> informações, <xref:System.Runtime.Serialization.StreamingContext> contexto). No tempo de desserialização, o construtor atual é chamado somente depois que os dados no <xref:System.Runtime.Serialization.SerializationInfo> tem sido desserializados pelo formatador. Em geral, esse construtor deve ser protegido se a classe não está lacrada.  
  
 A ordem na qual os objetos são desserializados não pode ser garantida. Por exemplo, se um tipo faz referência a um tipo que ainda não foram desserializado, ocorrerá uma exceção. Se você estiver criando tipos que têm essas dependências, você pode contornar o problema com a implementação de `IDeserializationCallback` interface e o `OnDeserialization` método.  
  
 A arquitetura de serialização lida com tipos de objetos que estendem <xref:System.MarshalByRefObject> os mesmos tipos que estendem <xref:System.Object>. Esses tipos podem ser marcados com o <xref:System.SerializableAttribute> e implemente o <xref:System.Runtime.Serialization.ISerializable> interface como qualquer outro tipo de objeto. Seu estado de objeto será capturado e persistido para o fluxo.  
  
 Quando esses tipos estão sendo usados por meio <xref:System.Runtime.Remoting>, a infraestrutura de comunicação remota fornece um substituto que ocupa o lugar de serialização típica e serializa em vez disso, um proxy para o <xref:System.MarshalByRefObject>. Um substituto é um auxiliar que sabe como serializar e desserializar objetos de um tipo específico. O proxy, invisível para o usuário na maioria dos casos, será do tipo <xref:System.Runtime.Remoting.ObjRef>.  
  
 Como um padrão de design geral, não seria comum uma classe ser marcado com o atributo serializable e estender <xref:System.MarshalByRefObject>. Os desenvolvedores devem pensar cuidadosamente os possíveis cenários de serialização e a comunicação remota ao combinar essas duas características. Um exemplo em que isso pode ser aplicável é com um <xref:System.IO.MemoryStream>. Embora a classe base de <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) se estende do <xref:System.MarshalByRefObject>, é possível capturar o estado de um <xref:System.IO.MemoryStream> e restaurá-lo à vontade. Portanto, talvez, seja significativo para serializar o estado do fluxo em um banco de dados e restaurá-lo em algum momento posterior no tempo. No entanto, quando usado por meio de comunicação remota, um objeto desse tipo seria transmitidas por proxy.  
  
 Para obter mais informações sobre a serialização de classes que estendem <xref:System.MarshalByRefObject>, consulte <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. Para obter mais informações sobre como implementar <xref:System.Runtime.Serialization.ISerializable>, consulte [serialização personalizada](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o uso do <xref:System.Runtime.Serialization.ISerializable> interface para definir o comportamento de serialização personalizada para uma classe.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implemente essa interface para permitir que um objeto que fazem parte da sua própria serialização e desserialização.</para>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Serialização XML e SOAP</related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Serialização personalizada</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser preenchido com dados.</param>
        <param name="context">O destino (consulte <see cref="T:System.Runtime.Serialization.StreamingContext" />) dessa serialização.</param>
        <summary>Popula um <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com os dados necessários para serializar o objeto de destino.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos os objetos que estão incluídos no <xref:System.Runtime.Serialization.SerializationInfo> são automaticamente rastreadas e serializado pelo formatador.  
  
 Código que chama <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requer o <xref:System.Security.Permissions.SecurityPermission> para fornecer serviços de serialização. Enumeração associada: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Não há garantia de que esse método será chamado apenas uma vez por instância do objeto durante a serialização. Portanto, o método deve ser implementado de forma que seu comportamento será o mesmo, independentemente do número de vezes que ele é chamado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> método para definir valores alternativos para um objeto serializado. O código usa o <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> método da <xref:System.Runtime.Serialization.SerializationInfo> classe para armazenar os valores alternativos quando o objeto é serializado. Por outro lado, quando o construtor do `Person` classe é chamado durante a desserialização, os valores de alternatve são recuperados usando o <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> método e reatribuído para campos do objeto.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Serialização personalizada</related>
      </Docs>
    </Member>
  </Members>
</Type>