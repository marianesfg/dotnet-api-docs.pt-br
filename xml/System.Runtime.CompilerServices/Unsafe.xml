<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="35f86-101">Contém a funcionalidade genérica de baixo nível para manipular ponteiros.</span><span class="sxs-lookup"><span data-stu-id="35f86-101">Contains generic, low-level functionality for manipulating pointers.</span></span>
      </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-102">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-102">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-103">A referência à qual adicionar o deslocamento.</span><span class="sxs-lookup"><span data-stu-id="35f86-103">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="35f86-104">O deslocamento a ser adicionado.</span><span class="sxs-lookup"><span data-stu-id="35f86-104">The offset to add.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-105">Adiciona um deslocamento de elementos à referência fornecida.</span><span class="sxs-lookup"><span data-stu-id="35f86-105">Adds an element offset to the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-106">Uma nova referência que reflete a adição de deslocamento ao ponteiro.</span><span class="sxs-lookup"><span data-stu-id="35f86-106">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-107">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-107">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-108">A referência à qual adicionar o deslocamento.</span><span class="sxs-lookup"><span data-stu-id="35f86-108">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="35f86-109">O deslocamento a ser adicionado.</span><span class="sxs-lookup"><span data-stu-id="35f86-109">The offset to add.</span></span></param>
        <summary><span data-ttu-id="35f86-110">Adiciona um deslocamento de elementos à referência fornecida.</span><span class="sxs-lookup"><span data-stu-id="35f86-110">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="35f86-111">Uma nova referência que reflete a adição de deslocamento ao ponteiro.</span><span class="sxs-lookup"><span data-stu-id="35f86-111">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-112">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-112">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-113">A referência à qual adicionar o deslocamento.</span><span class="sxs-lookup"><span data-stu-id="35f86-113">The reference to add the offset to.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="35f86-114">O deslocamento a ser adicionado.</span><span class="sxs-lookup"><span data-stu-id="35f86-114">The offset to add.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-115">Adiciona um deslocamento de bytes à referência fornecida.</span><span class="sxs-lookup"><span data-stu-id="35f86-115">Adds a byte offset to the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-116">Uma nova referência que reflete a adição de deslocamento de bytes ao ponteiro.</span><span class="sxs-lookup"><span data-stu-id="35f86-116">A new reference that reflects the addition of byte offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T&amp;" RefType="ref" />
        <Parameter Name="right" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-117">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-117">The type of reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="35f86-118">A primeira referência a ser comparada.</span><span class="sxs-lookup"><span data-stu-id="35f86-118">The first reference to compare.</span></span></param>
        <param name="right"><span data-ttu-id="35f86-119">A segunda referência a ser comparada.</span><span class="sxs-lookup"><span data-stu-id="35f86-119">The second reference to compare.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-120">Determina se as referências especificadas apontam para o mesmo local.</span><span class="sxs-lookup"><span data-stu-id="35f86-120">Determines whether the specified references point to the same location.</span></span>
        </summary>
        <returns>
          <span data-ttu-id="35f86-121"><see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> apontam para o mesmo local; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-121"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-122">O tipo que o objeto será convertido em.</span><span class="sxs-lookup"><span data-stu-id="35f86-122">The type which the object will be cast to.</span></span></typeparam>
        <param name="o"><span data-ttu-id="35f86-123">O objeto a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="35f86-123">The object to cast.</span></span></param>
        <summary><span data-ttu-id="35f86-124">Converte o objeto fornecido no tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="35f86-124">Casts the given object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="35f86-125">O objeto original, convertido no tipo fornecido.</span><span class="sxs-lookup"><span data-stu-id="35f86-125">The original object, casted to the given type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="35f86-126">O tipo de referência para reinterpret.</span><span class="sxs-lookup"><span data-stu-id="35f86-126">The type of reference to reinterpret..</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="35f86-127">O tipo desejado da referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-127">The desired type of the reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-128">A referência a ser reinterpretada.</span><span class="sxs-lookup"><span data-stu-id="35f86-128">The reference to reinterpret.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-129">Reinterpreta a referência fornecida como uma referência a um valor do tipo <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-130">Uma referência a um valor do tipo <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-130">A reference to a value of type <typeparamref name="TTo" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-131">O tipo de objeto.</span><span class="sxs-lookup"><span data-stu-id="35f86-131">The type of object.</span></span></typeparam>
        <param name="value"><span data-ttu-id="35f86-132">O objeto cujo ponteiro é obtido.</span><span class="sxs-lookup"><span data-stu-id="35f86-132">The object whose pointer is obtained.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-133">Retorna um ponteiro para o parâmetro fornecido por referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-133">Returns a pointer to the given by-ref parameter.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-134">Um ponteiro para o valor especificado.</span><span class="sxs-lookup"><span data-stu-id="35f86-134">A pointer to the given value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-135">O tipo do local interpretado.</span><span class="sxs-lookup"><span data-stu-id="35f86-135">The type of the interpreted location.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-136">O local do valor de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-136">The location of the value to reference.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-137">Reinterpreta o local indicado como referência a um valor do tipo <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-138">Uma referência a um valor do tipo <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-138">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T&amp;" RefType="ref" />
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-139">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-139">The type of reference.</span></span></typeparam>
        <param name="origin"><span data-ttu-id="35f86-140">A referência à origem.</span><span class="sxs-lookup"><span data-stu-id="35f86-140">The reference to origin.</span></span></param>
        <param name="target"><span data-ttu-id="35f86-141">A referência ao destino.</span><span class="sxs-lookup"><span data-stu-id="35f86-141">The reference to target.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-142">Determina o deslocamento de bytes da origem para o destino das referências fornecidas.</span><span class="sxs-lookup"><span data-stu-id="35f86-142">Determines the byte offset from origin to target from the given references.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-143">Deslocamento de bytes da origem para o destino, ou seja, <paramref name="target" /> - <paramref name="origin" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-143">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-144">O tipo de valor para copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-144">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="35f86-145">O local para o qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-145">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="35f86-146">Uma referência ao valor a ser copiado.</span><span class="sxs-lookup"><span data-stu-id="35f86-146">A reference to the value to copy.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-147">Copia um valor do tipo <typeparamref name="T" /> para o local em questão.</span><span class="sxs-lookup"><span data-stu-id="35f86-147">Copies a value of type <typeparamref name="T" /> to the given location.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-148">O tipo de valor para copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-148">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="35f86-149">O local para o qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-149">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="35f86-150">Um ponteiro para o valor a ser copiado.</span><span class="sxs-lookup"><span data-stu-id="35f86-150">A pointer to the value to copy.</span></span></param>
        <summary>
           <span data-ttu-id="35f86-151">Copia um valor do tipo <typeparamref name="T" /> para o local em questão.</span><span class="sxs-lookup"><span data-stu-id="35f86-151">Copies a value of type <typeparamref name="T" /> to the given location.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="35f86-152">O endereço de destino para o qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-152">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="35f86-153">O endereço de origem do qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-153">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-154">O número de bytes a serem copiados.</span><span class="sxs-lookup"><span data-stu-id="35f86-154">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-155">Copia bytes do endereço de origem para o endereço de destino.</span><span class="sxs-lookup"><span data-stu-id="35f86-155">Copies bytes from the source address to the destination address.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="35f86-156">O endereço de destino para o qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-156">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="35f86-157">O endereço de origem do qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-157">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-158">O número de bytes a serem copiados.</span><span class="sxs-lookup"><span data-stu-id="35f86-158">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-159">Copia bytes do endereço de origem para o endereço de destino.</span><span class="sxs-lookup"><span data-stu-id="35f86-159">Copies bytes from the source address to the destination address.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="35f86-160">O endereço de destino para o qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-160">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="35f86-161">O endereço de origem do qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-161">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-162">O número de bytes a serem copiados.</span><span class="sxs-lookup"><span data-stu-id="35f86-162">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-163">Copia bytes do endereço de origem para o endereço de destino sem pressupor um alinhamento dependente da arquitetura dos endereços.</span><span class="sxs-lookup"><span data-stu-id="35f86-163">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="35f86-164">O endereço de destino para o qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-164">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="35f86-165">O endereço de origem do qual copiar.</span><span class="sxs-lookup"><span data-stu-id="35f86-165">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-166">O número de bytes a serem copiados.</span><span class="sxs-lookup"><span data-stu-id="35f86-166">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-167">Copia bytes do endereço de origem para o endereço de destino sem pressupor um alinhamento dependente da arquitetura dos endereços.</span><span class="sxs-lookup"><span data-stu-id="35f86-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="35f86-168">O endereço do início do bloco de memória a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-168">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-169">O valor para o qual inicializar o bloco.</span><span class="sxs-lookup"><span data-stu-id="35f86-169">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-170">O número de bytes a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-170">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-171">Inicializa um bloco de memória no local especificado com um valor inicial fornecido.</span><span class="sxs-lookup"><span data-stu-id="35f86-171">Initializes a block of memory at the given location with a given initial value.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="35f86-172">O endereço do início do bloco de memória a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-172">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-173">O valor para o qual inicializar o bloco.</span><span class="sxs-lookup"><span data-stu-id="35f86-173">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-174">O número de bytes a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-174">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-175">Inicializa um bloco de memória no local especificado com um valor inicial fornecido.</span><span class="sxs-lookup"><span data-stu-id="35f86-175">Initializes a block of memory at the given location with a given initial value.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="35f86-176">O endereço do início do bloco de memória a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-176">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-177">O valor para o qual inicializar o bloco.</span><span class="sxs-lookup"><span data-stu-id="35f86-177">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-178">O número de bytes a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-178">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-179">Inicializa um bloco de memória no local especificado com um valor inicial fornecido sem pressupor um alinhamento dependente de arquitetura do endereço.</span><span class="sxs-lookup"><span data-stu-id="35f86-179">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="35f86-180">O endereço do início do bloco de memória a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-180">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-181">O valor para o qual inicializar o bloco.</span><span class="sxs-lookup"><span data-stu-id="35f86-181">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f86-182">O número de bytes a ser inicializado.</span><span class="sxs-lookup"><span data-stu-id="35f86-182">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-183">Inicializa um bloco de memória no local especificado com um valor inicial fornecido sem pressupor um alinhamento dependente de arquitetura do endereço.</span><span class="sxs-lookup"><span data-stu-id="35f86-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-184">O tipo a ser lido.</span><span class="sxs-lookup"><span data-stu-id="35f86-184">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-185">O local do qual ler.</span><span class="sxs-lookup"><span data-stu-id="35f86-185">The location to read from.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-186">Lê um valor do tipo <typeparamref name="T" /> do local indicado.</span><span class="sxs-lookup"><span data-stu-id="35f86-186">Reads a value of type <typeparamref name="T" /> from the given location.</span></span>
         </summary>
        <returns><span data-ttu-id="35f86-187">Um objeto do tipo <typeparamref name="T" /> lê o local especificado.</span><span class="sxs-lookup"><span data-stu-id="35f86-187">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-188">O tipo a ser lido.</span><span class="sxs-lookup"><span data-stu-id="35f86-188">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-189">O local do qual ler.</span><span class="sxs-lookup"><span data-stu-id="35f86-189">The location to read from.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-190">Lê um valor do tipo <typeparamref name="T" /> do local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</span><span class="sxs-lookup"><span data-stu-id="35f86-190">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <returns><span data-ttu-id="35f86-191">Um objeto do tipo <typeparamref name="T" /> lê o local especificado.</span><span class="sxs-lookup"><span data-stu-id="35f86-191">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-192">O tipo a ser lido.</span><span class="sxs-lookup"><span data-stu-id="35f86-192">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-193">O local do qual ler.</span><span class="sxs-lookup"><span data-stu-id="35f86-193">The location to read from.</span></span></param>
        <summary>
          <span data-ttu-id="35f86-194">Lê um valor do tipo <typeparamref name="T" /> do local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</span><span class="sxs-lookup"><span data-stu-id="35f86-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <returns><span data-ttu-id="35f86-195">Um objeto do tipo <typeparamref name="T" /> lê o local especificado.</span><span class="sxs-lookup"><span data-stu-id="35f86-195">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-196">O tipo de objeto cujo tamanho é recuperado.</span><span class="sxs-lookup"><span data-stu-id="35f86-196">The type of object whose size is retrieved.</span></span></typeparam>
        <summary><span data-ttu-id="35f86-197">Retorna o tamanho de um objeto do parâmetro de tipo fornecido.</span><span class="sxs-lookup"><span data-stu-id="35f86-197">Returns the size of an object of the given type parameter.</span></span></summary>
        <returns><span data-ttu-id="35f86-198">O tamanho de um objeto do tipo <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="35f86-198">The size of an object of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-199">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-199">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-200">A referência da qual subtrair o deslocamento.</span><span class="sxs-lookup"><span data-stu-id="35f86-200">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="35f86-201">O deslocamento a ser subtraído.</span><span class="sxs-lookup"><span data-stu-id="35f86-201">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="35f86-202">Subtrai um deslocamento de elementos da referência fornecida.</span><span class="sxs-lookup"><span data-stu-id="35f86-202">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="35f86-203">Uma nova referência que reflete a subtração de deslocamento do ponteiro.</span><span class="sxs-lookup"><span data-stu-id="35f86-203">A new reference that reflects the subraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-204">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-204">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-205">A referência da qual subtrair o deslocamento.</span><span class="sxs-lookup"><span data-stu-id="35f86-205">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="35f86-206">O deslocamento a ser subtraído.</span><span class="sxs-lookup"><span data-stu-id="35f86-206">The offset to subtract.</span></span></param>
        <summary>
        <span data-ttu-id="35f86-207">Subtrai um deslocamento de elementos da referência fornecida.</span><span class="sxs-lookup"><span data-stu-id="35f86-207">Subtracts an element offset from the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-208">Uma nova referência que reflete a subtração de deslocamento do ponteiro.</span><span class="sxs-lookup"><span data-stu-id="35f86-208">A new reference that reflects the subraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-209">O tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="35f86-209">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="35f86-210">A referência da qual subtrair o deslocamento.</span><span class="sxs-lookup"><span data-stu-id="35f86-210">The reference to subtract the offset from.</span></span></param>
        <param name="bytesOffset"><span data-ttu-id="35f86-211">O deslocamento a ser subtraído.</span><span class="sxs-lookup"><span data-stu-id="35f86-211">The offset to subtract.</span></span></param>
        <param name="byteOffset">To be added.</param>
        <summary>
        <span data-ttu-id="35f86-212">Subtrai um deslocamento de bytes da referência fornecida.</span><span class="sxs-lookup"><span data-stu-id="35f86-212">Subtracts a byte offset from the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="35f86-213">Uma nova referência que reflete a subtração de deslocamento de bytes do ponteiro.</span><span class="sxs-lookup"><span data-stu-id="35f86-213">A new reference that reflects the subraction of byte offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-214">O tipo de valor a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="35f86-214">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="35f86-215">O local para o qual gravar.</span><span class="sxs-lookup"><span data-stu-id="35f86-215">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-216">O valor a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="35f86-216">The value to write.</span></span></param>
        <summary>
        <span data-ttu-id="35f86-217">Grava um valor do tipo <typeparamref name="T" /> no local em questão.</span><span class="sxs-lookup"><span data-stu-id="35f86-217">Writes a value of type <typeparamref name="T" /> to the given location.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-218">O tipo de valor a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="35f86-218">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="35f86-219">O local para o qual gravar.</span><span class="sxs-lookup"><span data-stu-id="35f86-219">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-220">O valor a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="35f86-220">The value to write.</span></span></param>
        <summary>
        <span data-ttu-id="35f86-221">Grava um valor do tipo <typeparamref name="T" /> no local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</span><span class="sxs-lookup"><span data-stu-id="35f86-221">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="35f86-222">O tipo de valor a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="35f86-222">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="35f86-223">O local para o qual gravar.</span><span class="sxs-lookup"><span data-stu-id="35f86-223">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="35f86-224">O valor a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="35f86-224">The value to write.</span></span></param>
        <summary>
        <span data-ttu-id="35f86-225">Grava um valor do tipo <typeparamref name="T" /> no local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</span><span class="sxs-lookup"><span data-stu-id="35f86-225">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>