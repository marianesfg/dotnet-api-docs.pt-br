<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8bf804695c48d4ce5c23b8a91eec7f8319047e2" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37472119" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="14d20-101">Indica que um inteiro modificado é um valor <see langword="long" /> C++ padrão.</span><span class="sxs-lookup"><span data-stu-id="14d20-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span></span> <span data-ttu-id="14d20-102">Essa classe não pode ser herdada.</span><span class="sxs-lookup"><span data-stu-id="14d20-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d20-103">O padrão C++ indica que um `long` valor e um valor de inteiro são tipos distintos.</span><span class="sxs-lookup"><span data-stu-id="14d20-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="14d20-104">No entanto, eles são representados usando `ELEMENT_TYPE_I4` em um assembly.</span><span class="sxs-lookup"><span data-stu-id="14d20-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="14d20-105">Para distinguir uma `long` de um número inteiro em C++, o compilador do Microsoft C++ adiciona o <xref:System.Runtime.CompilerServices.IsLong> modificador para qualquer instância de um `long` quando a instância for emited.</span><span class="sxs-lookup"><span data-stu-id="14d20-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="14d20-106">Esse processo é extremamente importante para manter a segurança de tipos de nível de linguagem.</span><span class="sxs-lookup"><span data-stu-id="14d20-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="14d20-107">Compiladores emitem modificadores personalizados nos metadados para alterar a maneira como o compilador just-in-time (JIT) lida com valores quando o comportamento padrão não é apropriado.</span><span class="sxs-lookup"><span data-stu-id="14d20-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="14d20-108">Quando o compilador JIT encontra um modificador personalizado, ele lida com o valor da maneira que especifica o modificador.</span><span class="sxs-lookup"><span data-stu-id="14d20-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="14d20-109">Os compiladores podem aplicar os modificadores personalizados para os métodos, parâmetros e retornam valores.</span><span class="sxs-lookup"><span data-stu-id="14d20-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="14d20-110">O compilador JIT deve responder a modificadores obrigatórios, mas pode ignorar modificadores opcionais.</span><span class="sxs-lookup"><span data-stu-id="14d20-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="14d20-111">Você pode emitir modificadores personalizados em metadados usando uma das seguintes técnicas:</span><span class="sxs-lookup"><span data-stu-id="14d20-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="14d20-112">Usando os métodos de <xref:System.Reflection.Emit.TypeBuilder> classe, como <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, e <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="14d20-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="14d20-113">Gerar um arquivo de instruções do Microsoft intermediate language (MSIL) que contém as chamadas para `modopt` e `modreq`e montando o arquivo com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="14d20-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="14d20-114">Usando a API de reflexão não gerenciada.</span><span class="sxs-lookup"><span data-stu-id="14d20-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14d20-115">O exemplo a seguir demonstra como emitir um <xref:System.Runtime.CompilerServices.IsLong> objeto em um assembly usando reflexão.</span><span class="sxs-lookup"><span data-stu-id="14d20-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>