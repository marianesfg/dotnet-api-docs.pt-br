<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CallConvThiscall.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56cffd7611f859c3e258c6cd4fe066aaa05720c09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cffd7611f859c3e258c6cd4fe066aaa05720c09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Indicates that a method should use the <ph id="ph1">&lt;see langword="ThisCall" /&gt;</ph> calling convention.</source>
          <target state="translated">Indica que um método deve usar a convenção de chamada <ph id="ph1">&lt;see langword="ThisCall" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>When using the <ph id="ph1">`ThisCall`</ph> calling convention, the first parameter of a method call is the <ph id="ph2">`this`</ph> pointer, which is stored in register ECX.</source>
          <target state="translated">Ao usar o <ph id="ph1">`ThisCall`</ph> convenção de chamada, o primeiro parâmetro de uma chamada de método é o <ph id="ph2">`this`</ph> ponteiro, que é armazenado no registro ECX.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Other parameters of a method call are pushed on the stack.</source>
          <target state="translated">Outros parâmetros de uma chamada de método são enviados por push na pilha.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>This calling convention is used to call methods on classes exported from an unmanaged DLL.</source>
          <target state="translated">Esta convenção de chamada é usada para chamar métodos em classes exportadas de uma DLL não gerenciada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>The classes in <ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> are for compiler writers' use only.</source>
          <target state="translated">As classes em <ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> são autores de compilador apenas para uso.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</source>
          <target state="translated">Compiladores emitem modificadores personalizados dentro dos metadados para alterar o maneira como o compilador just-in-time (JIT) manipula valores quando o comportamento padrão não é apropriado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</source>
          <target state="translated">Quando o compilador JIT encontra um modificador personalizado, ele trata o valor da maneira que especifica o modificador.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Compilers can apply custom modifiers to methods, parameters, and return values.</source>
          <target state="translated">Compiladores podem aplicar modificadores personalizados para os métodos, parâmetros e valores de retorno.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>The JIT compiler must respond to required modifiers but can ignore optional modifiers.</source>
          <target state="translated">O compilador JIT deve responder às modificadores necessárias, mas pode ignorar modificadores opcionais.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</source>
          <target state="translated">Um compilador de C++ pode emitir um modificador personalizado para descrever como um byte deve ser tratado em casos onde o compilador JIT trata os bytes de uma maneira que não é compatível com C++ por padrão.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>You can emit custom modifiers into metadata using one of the following techniques:</source>
          <target state="translated">Você pode emitir modificadores personalizados em metadados usando uma das seguintes técnicas:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Using methods in the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class such as <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>.</source>
          <target state="translated">Usando métodos de <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> classe como <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id="ph1">`modopt`</ph> and <ph id="ph2">`modreq`</ph>, and assembling the file with the <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>.</source>
          <target state="translated">Gerar um arquivo de instrução do Microsoft intermediate language (MSIL) que contém chamadas para <ph id="ph1">`modopt`</ph> e <ph id="ph2">`modreq`</ph>e montar o arquivo com o <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.CallConvThiscall">
          <source>Using the unmanaged reflection API.</source>
          <target state="translated">Usando a API de reflexão não gerenciada.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.CallConvThiscall.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallConvThiscall" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallConvThiscall" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.CallConvThiscall.#ctor">
          <source>The classes in <ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> are for compiler writers' use only.</source>
          <target state="translated">As classes em <ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> são autores de compilador apenas para uso.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>