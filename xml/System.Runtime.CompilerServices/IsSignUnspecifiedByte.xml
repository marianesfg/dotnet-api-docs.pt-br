<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="75438-101">Indica que um modificador não é assinado nem não assinado.</span><span class="sxs-lookup"><span data-stu-id="75438-101">Indicates that a modifier is neither signed nor unsigned.</span></span> <span data-ttu-id="75438-102">Essa classe não pode ser herdada.</span><span class="sxs-lookup"><span data-stu-id="75438-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75438-103">Algumas linguagens de programação, como C++, reconhecem três distintos `char` valores: `signed char`, `unsigned char`, e `char`.</span><span class="sxs-lookup"><span data-stu-id="75438-103">Some programming languages, such as C++, recognize three distinct `char` values: `signed char`, `unsigned char`, and `char`.</span></span>  <span data-ttu-id="75438-104">Para distinguir o inalterado `char` digite das outras, o compilador do C++ da Microsoft adiciona o <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modificador a cada `char` tipo emitido para um assembly.</span><span class="sxs-lookup"><span data-stu-id="75438-104">To distinguish the unmodified `char` type from the others, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier to each `char` type emitted to an assembly.</span></span>  
  
 <span data-ttu-id="75438-105">Compiladores emitem modificadores personalizados dentro dos metadados para alterar o maneira como o compilador just-in-time (JIT) manipula valores quando o comportamento padrão não é apropriado.</span><span class="sxs-lookup"><span data-stu-id="75438-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="75438-106">Quando o compilador JIT encontra um modificador personalizado, ele trata o valor da maneira que especifica o modificador.</span><span class="sxs-lookup"><span data-stu-id="75438-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="75438-107">Compiladores podem aplicar modificadores personalizados para os métodos, parâmetros e valores de retorno.</span><span class="sxs-lookup"><span data-stu-id="75438-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="75438-108">O compilador JIT deve responder às modificadores necessárias, mas pode ignorar modificadores opcionais.</span><span class="sxs-lookup"><span data-stu-id="75438-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="75438-109">Você pode emitir modificadores personalizados em metadados usando uma das seguintes técnicas:</span><span class="sxs-lookup"><span data-stu-id="75438-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="75438-110">Usando métodos de <xref:System.Reflection.Emit.TypeBuilder> classe como <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, e <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="75438-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="75438-111">Gerar um arquivo de instrução do Microsoft intermediate language (MSIL) que contém chamadas para `modopt` e `modreq`e montar o arquivo com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="75438-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="75438-112">Usando a API de reflexão não gerenciada.</span><span class="sxs-lookup"><span data-stu-id="75438-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75438-113">O exemplo de código a seguir cria um assembly usando classes no <xref:System.Reflection.Emit> namespace e emite o <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modificador no assembly.</span><span class="sxs-lookup"><span data-stu-id="75438-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>