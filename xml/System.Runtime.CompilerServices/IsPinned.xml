<Type Name="IsPinned" FullName="System.Runtime.CompilerServices.IsPinned">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="502eed1d76224f206754bfb65513bda10fe3dcce" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30475910" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsPinned" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsPinned extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsPinned" />
  <TypeSignature Language="VB.NET" Value="Public Class IsPinned" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsPinned abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b21d4-101">Indica que uma instância modificada está fixada na memória.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b21d4-101">Indicates that a modified instance is pinned in memory.</span>
      </span>
      <span data-ttu-id="b21d4-102">Essa classe não pode ser herdada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b21d4-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b21d4-103">Compiladores emitem modificadores personalizados dentro dos metadados para alterar o maneira como o compilador just-in-time (JIT) manipula valores quando o comportamento padrão não é apropriado.</span><span class="sxs-lookup"><span data-stu-id="b21d4-103">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="b21d4-104">Quando o compilador JIT encontra um modificador personalizado, ele trata o valor da maneira que especifica o modificador.</span><span class="sxs-lookup"><span data-stu-id="b21d4-104">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="b21d4-105">Compiladores podem aplicar modificadores personalizados para os métodos, parâmetros e valores de retorno.</span><span class="sxs-lookup"><span data-stu-id="b21d4-105">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="b21d4-106">O compilador JIT deve responder às modificadores necessárias, mas pode ignorar modificadores opcionais.</span><span class="sxs-lookup"><span data-stu-id="b21d4-106">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="b21d4-107">Um compilador de C++ pode emitir um modificador personalizado para descrever como um byte deve ser tratado em casos onde o compilador JIT trata os bytes de uma maneira que não é compatível com C++ por padrão.</span><span class="sxs-lookup"><span data-stu-id="b21d4-107">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="b21d4-108">Você pode emitir modificadores personalizados em metadados usando uma das seguintes técnicas:</span><span class="sxs-lookup"><span data-stu-id="b21d4-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="b21d4-109">Usando métodos de <xref:System.Reflection.Emit.TypeBuilder> classe como <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, e <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="b21d4-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="b21d4-110">Gerar um arquivo de instrução do Microsoft intermediate language (MSIL) que contém chamadas para `modopt` e `modreq`e montar o arquivo com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="b21d4-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="b21d4-111">Usando a API de reflexão não gerenciada.</span><span class="sxs-lookup"><span data-stu-id="b21d4-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b21d4-112">O exemplo a seguir demonstra como emitir uma <xref:System.Runtime.CompilerServices.IsPinned> objeto em um assembly usando reflexão.</span><span class="sxs-lookup"><span data-stu-id="b21d4-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsPinned> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsPinned#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsPinned/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>